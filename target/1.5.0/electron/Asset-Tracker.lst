
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/AssestTracker/Asset-Tracker/target/1.5.0/electron/Asset-Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007660  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08087680  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000238  20000000  08087684  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007fc  20000238  20000238  00040238  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080878bc  080878bc  000378bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080878e4  080878e4  000378e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ccdf2  00000000  00000000  000378e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001337e  00000000  00000000  001046da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016572  00000000  00000000  00117a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  0012dfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038d8  00000000  00000000  001303b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029ec6  00000000  00000000  00133c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f3cc  00000000  00000000  0015db50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000acb8f  00000000  00000000  0018cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cf70  00000000  00000000  00239aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fc5b 	bl	80848ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fc60 	bl	8084902 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08087684 	.word	0x08087684
 8080050:	20000238 	.word	0x20000238
 8080054:	20000238 	.word	0x20000238
 8080058:	20000a34 	.word	0x20000a34
 808005c:	20000a34 	.word	0x20000a34

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f002 feef 	bl	8082e44 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08087634 	.word	0x08087634
 8080088:	08087674 	.word	0x08087674

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 ba62 	b.w	8080554 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f8db 	bl	808024c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 be95 	b.w	8082dc8 <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bcbf 	b.w	8081a20 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bcc5 	b.w	8081a30 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800b8:	4605      	mov	r5, r0
 80800ba:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800be:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800c0:	f88d 3000 	strb.w	r3, [sp]
 80800c4:	233c      	movs	r3, #60	; 0x3c
 80800c6:	f001 fed3 	bl	8081e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80800ca:	4628      	mov	r0, r5
 80800cc:	b003      	add	sp, #12
 80800ce:	bd30      	pop	{r4, r5, pc}

080800d0 <_Z20PublishDelayFunctionv>:
  }

}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
 80800d0:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80800d2:	f001 fa67 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
 80800d6:	4c06      	ldr	r4, [pc, #24]	; (80800f0 <_Z20PublishDelayFunctionv+0x20>)
 80800d8:	6823      	ldr	r3, [r4, #0]
 80800da:	1ac0      	subs	r0, r0, r3
 80800dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80800e0:	d904      	bls.n	80800ec <_Z20PublishDelayFunctionv+0x1c>
 80800e2:	f001 fa5f 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
 80800e6:	6020      	str	r0, [r4, #0]
 80800e8:	2001      	movs	r0, #1
 80800ea:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
 80800ec:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
 80800ee:	bd10      	pop	{r4, pc}
 80800f0:	20000250 	.word	0x20000250

080800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80800f4:	b508      	push	{r3, lr}
      
    }
    inTransit = false;    
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
 80800f6:	f7ff ffeb 	bl	80800d0 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80800fa:	b118      	cbz	r0, 8080104 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80800fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080100:	f7ff bfe6 	b.w	80800d0 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8080104:	f001 fc0c 	bl	8081920 <spark_process>
 8080108:	e7f5      	b.n	80800f6 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50+0x2>

0808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808010a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808010c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808010e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080110:	b17c      	cbz	r4, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080112:	6863      	ldr	r3, [r4, #4]
 8080114:	3b01      	subs	r3, #1
 8080116:	6063      	str	r3, [r4, #4]
 8080118:	b95b      	cbnz	r3, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808011a:	6823      	ldr	r3, [r4, #0]
 808011c:	4620      	mov	r0, r4
 808011e:	689b      	ldr	r3, [r3, #8]
 8080120:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080122:	68a3      	ldr	r3, [r4, #8]
 8080124:	3b01      	subs	r3, #1
 8080126:	60a3      	str	r3, [r4, #8]
 8080128:	b91b      	cbnz	r3, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808012a:	6823      	ldr	r3, [r4, #0]
 808012c:	4620      	mov	r0, r4
 808012e:	68db      	ldr	r3, [r3, #12]
 8080130:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080132:	4628      	mov	r0, r5
 8080134:	bd38      	pop	{r3, r4, r5, pc}
	...

08080138 <_Z15transitionStatev>:
    return 0;
  }
  else return 0;
}

void transitionState(void) {                                                      // This function publishes change of state.
 8080138:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
 808013a:	4d12      	ldr	r5, [pc, #72]	; (8080184 <_Z15transitionStatev+0x4c>)
    return 0;
  }
  else return 0;
}

void transitionState(void) {                                                      // This function publishes change of state.
 808013c:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
 808013e:	f7ff ffd9 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
 8080142:	4911      	ldr	r1, [pc, #68]	; (8080188 <_Z15transitionStatev+0x50>)
 8080144:	782a      	ldrb	r2, [r5, #0]
 8080146:	232c      	movs	r3, #44	; 0x2c
 8080148:	fb03 1202 	mla	r2, r3, r2, r1
 808014c:	4c0f      	ldr	r4, [pc, #60]	; (808018c <_Z15transitionStatev+0x54>)
 808014e:	9200      	str	r2, [sp, #0]
 8080150:	7820      	ldrb	r0, [r4, #0]
 8080152:	4a0f      	ldr	r2, [pc, #60]	; (8080190 <_Z15transitionStatev+0x58>)
 8080154:	fb03 1300 	mla	r3, r3, r0, r1
 8080158:	2140      	movs	r1, #64	; 0x40
 808015a:	a804      	add	r0, sp, #16
 808015c:	f001 fc80 	bl	8081a60 <snprintf>
  oldState = state;
 8080160:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("State", stateTransitionString, PRIVATE);
 8080162:	2200      	movs	r2, #0

void transitionState(void) {                                                      // This function publishes change of state.
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
  oldState = state;
 8080164:	7023      	strb	r3, [r4, #0]
 8080166:	4b0b      	ldr	r3, [pc, #44]	; (8080194 <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
 8080168:	490b      	ldr	r1, [pc, #44]	; (8080198 <_Z15transitionStatev+0x60>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808016a:	781b      	ldrb	r3, [r3, #0]
 808016c:	a802      	add	r0, sp, #8
 808016e:	f88d 2000 	strb.w	r2, [sp]
 8080172:	aa04      	add	r2, sp, #16
 8080174:	f7ff ff9f 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080178:	a803      	add	r0, sp, #12
 808017a:	f7ff ffc6 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808017e:	b015      	add	sp, #84	; 0x54
 8080180:	bd30      	pop	{r4, r5, pc}
 8080182:	bf00      	nop
 8080184:	20000264 	.word	0x20000264
 8080188:	20000001 	.word	0x20000001
 808018c:	2000023c 	.word	0x2000023c
 8080190:	08086dbc 	.word	0x08086dbc
 8080194:	20000265 	.word	0x20000265
 8080198:	08086dd1 	.word	0x08086dd1

0808019c <_Z11sendUBIDotsv.part.63>:


void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
 808019c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808019e:	4d1c      	ldr	r5, [pc, #112]	; (8080210 <_Z11sendUBIDotsv.part.63+0x74>)
 80801a0:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80801a4:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80801a6:	782b      	ldrb	r3, [r5, #0]
{
  t.updateGPS();
  if (t.gpsFix()){
    
    char data[512];
    Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);
 80801a8:	4a1a      	ldr	r2, [pc, #104]	; (8080214 <_Z11sendUBIDotsv.part.63+0x78>)
 80801aa:	491b      	ldr	r1, [pc, #108]	; (8080218 <_Z11sendUBIDotsv.part.63+0x7c>)
 80801ac:	a806      	add	r0, sp, #24
    snprintf(data, sizeof(data), "{\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", t.readLat(), t.readLon());
 80801ae:	4e1b      	ldr	r6, [pc, #108]	; (808021c <_Z11sendUBIDotsv.part.63+0x80>)
{
  t.updateGPS();
  if (t.gpsFix()){
    
    char data[512];
    Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);
 80801b0:	f88d 4000 	strb.w	r4, [sp]
 80801b4:	f7ff ff7f 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 80801b8:	a807      	add	r0, sp, #28
 80801ba:	f7ff ffa6 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    snprintf(data, sizeof(data), "{\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", t.readLat(), t.readLon());
 80801be:	4630      	mov	r0, r6
 80801c0:	f001 f8de 	bl	8081380 <_ZN12AssetTracker7readLatEv>
 80801c4:	4607      	mov	r7, r0
 80801c6:	4630      	mov	r0, r6
 80801c8:	f001 f8e0 	bl	808138c <_ZN12AssetTracker7readLonEv>
 80801cc:	f003 fbc2 	bl	8083954 <__aeabi_f2d>
 80801d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80801d4:	4638      	mov	r0, r7
 80801d6:	f003 fbbd 	bl	8083954 <__aeabi_f2d>
 80801da:	4a11      	ldr	r2, [pc, #68]	; (8080220 <_Z11sendUBIDotsv.part.63+0x84>)
 80801dc:	e9cd 0100 	strd	r0, r1, [sp]
 80801e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80801e4:	a806      	add	r0, sp, #24
 80801e6:	f001 fc3b 	bl	8081a60 <snprintf>
 80801ea:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("assest-tracker-webhook", data, PRIVATE);
 80801ec:	aa06      	add	r2, sp, #24
 80801ee:	490d      	ldr	r1, [pc, #52]	; (8080224 <_Z11sendUBIDotsv.part.63+0x88>)
 80801f0:	a804      	add	r0, sp, #16
 80801f2:	f88d 4000 	strb.w	r4, [sp]
 80801f6:	f7ff ff5e 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 80801fa:	a805      	add	r0, sp, #20
 80801fc:	f7ff ff85 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(PublishDelayFunction);                                  // Space out the sends
 8080200:	f7ff ff78 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
    inTransit = true;
 8080204:	4b08      	ldr	r3, [pc, #32]	; (8080228 <_Z11sendUBIDotsv.part.63+0x8c>)
 8080206:	2201      	movs	r2, #1
 8080208:	701a      	strb	r2, [r3, #0]

  }
  
}
 808020a:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 808020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080210:	20000265 	.word	0x20000265
 8080214:	08086dd7 	.word	0x08086dd7
 8080218:	08086df5 	.word	0x08086df5
 808021c:	20000284 	.word	0x20000284
 8080220:	08086e06 	.word	0x08086e06
 8080224:	08086e46 	.word	0x08086e46
 8080228:	2000024d 	.word	0x2000024d

0808022c <_Z11sendUBIDotsv>:
  Particle.publish("State", stateTransitionString, PRIVATE);
}


void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
 808022c:	b508      	push	{r3, lr}
  t.updateGPS();
 808022e:	4806      	ldr	r0, [pc, #24]	; (8080248 <_Z11sendUBIDotsv+0x1c>)
 8080230:	f001 f90a 	bl	8081448 <_ZN12AssetTracker9updateGPSEv>
  if (t.gpsFix()){
 8080234:	4804      	ldr	r0, [pc, #16]	; (8080248 <_Z11sendUBIDotsv+0x1c>)
 8080236:	f001 f8f1 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
 808023a:	b118      	cbz	r0, 8080244 <_Z11sendUBIDotsv+0x18>
    waitUntil(PublishDelayFunction);                                  // Space out the sends
    inTransit = true;

  }
  
}
 808023c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080240:	f7ff bfac 	b.w	808019c <_Z11sendUBIDotsv.part.63>
 8080244:	bd08      	pop	{r3, pc}
 8080246:	bf00      	nop
 8080248:	20000284 	.word	0x20000284

0808024c <loop>:
  }
  
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
}

void loop() {
 808024c:	b570      	push	{r4, r5, r6, lr}

  switch (state)  {                                                                // In the main loop, all code execution must take place in a defined state
 808024e:	4ca7      	ldr	r4, [pc, #668]	; (80804ec <loop+0x2a0>)
  }
  
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
}

void loop() {
 8080250:	b08c      	sub	sp, #48	; 0x30

  switch (state)  {                                                                // In the main loop, all code execution must take place in a defined state
 8080252:	7823      	ldrb	r3, [r4, #0]
 8080254:	3b01      	subs	r3, #1
 8080256:	2b05      	cmp	r3, #5
 8080258:	f200 8145 	bhi.w	80804e6 <loop+0x29a>
 808025c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080260:	00330006 	.word	0x00330006
 8080264:	00b90051 	.word	0x00b90051
 8080268:	010300db 	.word	0x010300db
    
    case ONLINE_WAIT_STATE:
      
      if (verboseMode && oldState != state) transitionState();
 808026c:	4ba0      	ldr	r3, [pc, #640]	; (80804f0 <loop+0x2a4>)
 808026e:	781a      	ldrb	r2, [r3, #0]
 8080270:	461d      	mov	r5, r3
 8080272:	b12a      	cbz	r2, 8080280 <loop+0x34>
 8080274:	4b9f      	ldr	r3, [pc, #636]	; (80804f4 <loop+0x2a8>)
 8080276:	781b      	ldrb	r3, [r3, #0]
 8080278:	2b01      	cmp	r3, #1
 808027a:	d001      	beq.n	8080280 <loop+0x34>
 808027c:	f7ff ff5c 	bl	8080138 <_Z15transitionStatev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080280:	f001 fb56 	bl	8081930 <spark_cloud_flag_connected>
      
      if (Particle.connected()) 
 8080284:	b120      	cbz	r0, 8080290 <loop+0x44>
      {
      t.updateGPS();
 8080286:	489c      	ldr	r0, [pc, #624]	; (80804f8 <loop+0x2ac>)
 8080288:	f001 f8de 	bl	8081448 <_ZN12AssetTracker9updateGPSEv>
			state = TEMPERATURE_SENSING;
 808028c:	2302      	movs	r3, #2
 808028e:	7023      	strb	r3, [r4, #0]
 8080290:	f001 f988 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
		  }
		  if (millis() - stateTime > 5000) {
 8080294:	4c99      	ldr	r4, [pc, #612]	; (80804fc <loop+0x2b0>)
 8080296:	6823      	ldr	r3, [r4, #0]
 8080298:	1ac0      	subs	r0, r0, r3
 808029a:	f241 3388 	movw	r3, #5000	; 0x1388
 808029e:	4298      	cmp	r0, r3
 80802a0:	f240 8121 	bls.w	80804e6 <loop+0x29a>
 80802a4:	f001 f97e 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
			  stateTime = millis();
 80802a8:	6020      	str	r0, [r4, #0]
        waitUntil(PublishDelayFunction);
 80802aa:	f7ff ff23 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
        if (verboseMode) Particle.publish("Status","Waiting to come online",PRIVATE);
 80802ae:	782b      	ldrb	r3, [r5, #0]
 80802b0:	2b00      	cmp	r3, #0
 80802b2:	f000 8118 	beq.w	80804e6 <loop+0x29a>
 80802b6:	4b92      	ldr	r3, [pc, #584]	; (8080500 <loop+0x2b4>)
 80802b8:	2200      	movs	r2, #0
 80802ba:	781b      	ldrb	r3, [r3, #0]
 80802bc:	4991      	ldr	r1, [pc, #580]	; (8080504 <loop+0x2b8>)
 80802be:	f88d 2000 	strb.w	r2, [sp]
 80802c2:	4a91      	ldr	r2, [pc, #580]	; (8080508 <loop+0x2bc>)
 80802c4:	e0a0      	b.n	8080408 <loop+0x1bc>

    break;

    case TEMPERATURE_SENSING:
      
      if (verboseMode && oldState != state) transitionState(); 
 80802c6:	4b8a      	ldr	r3, [pc, #552]	; (80804f0 <loop+0x2a4>)
 80802c8:	781b      	ldrb	r3, [r3, #0]
 80802ca:	b12b      	cbz	r3, 80802d8 <loop+0x8c>
 80802cc:	4b89      	ldr	r3, [pc, #548]	; (80804f4 <loop+0x2a8>)
 80802ce:	781b      	ldrb	r3, [r3, #0]
 80802d0:	2b02      	cmp	r3, #2
 80802d2:	d001      	beq.n	80802d8 <loop+0x8c>
 80802d4:	f7ff ff30 	bl	8080138 <_Z15transitionStatev>
      //   Particle.publish("Alert","Temperature Above Threshold",PRIVATE);
      //   state = REPORTING_STATE;
      //   break;
      // }

      if (!t.setupLowPowerWakeMode(movementThreshold)) {
 80802d8:	2110      	movs	r1, #16
 80802da:	4887      	ldr	r0, [pc, #540]	; (80804f8 <loop+0x2ac>)
 80802dc:	f001 f8ce 	bl	808147c <_ZN12AssetTracker21setupLowPowerWakeModeEh>
 80802e0:	2800      	cmp	r0, #0
 80802e2:	f040 80fe 	bne.w	80804e2 <loop+0x296>
 80802e6:	4b86      	ldr	r3, [pc, #536]	; (8080500 <loop+0x2b4>)
      Particle.publish("Alert","accelerometer not found",PRIVATE);
 80802e8:	4a88      	ldr	r2, [pc, #544]	; (808050c <loop+0x2c0>)
 80802ea:	781b      	ldrb	r3, [r3, #0]
 80802ec:	4988      	ldr	r1, [pc, #544]	; (8080510 <loop+0x2c4>)
 80802ee:	f88d 0000 	strb.w	r0, [sp]
 80802f2:	a808      	add	r0, sp, #32
 80802f4:	f7ff fedf 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 80802f8:	a809      	add	r0, sp, #36	; 0x24
 80802fa:	f7ff ff06 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			state = NAPPING_STATE;
 80802fe:	2306      	movs	r3, #6
 8080300:	e0f0      	b.n	80804e4 <loop+0x298>

    break;


    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();  
 8080302:	4b7b      	ldr	r3, [pc, #492]	; (80804f0 <loop+0x2a4>)
 8080304:	781b      	ldrb	r3, [r3, #0]
 8080306:	b12b      	cbz	r3, 8080314 <loop+0xc8>
 8080308:	4b7a      	ldr	r3, [pc, #488]	; (80804f4 <loop+0x2a8>)
 808030a:	781b      	ldrb	r3, [r3, #0]
 808030c:	2b03      	cmp	r3, #3
 808030e:	d001      	beq.n	8080314 <loop+0xc8>
 8080310:	f7ff ff12 	bl	8080138 <_Z15transitionStatev>
 8080314:	4d7a      	ldr	r5, [pc, #488]	; (8080500 <loop+0x2b4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080316:	2600      	movs	r6, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080318:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("reporting state","syncing clock",PRIVATE);
 808031a:	4a7e      	ldr	r2, [pc, #504]	; (8080514 <loop+0x2c8>)
 808031c:	497e      	ldr	r1, [pc, #504]	; (8080518 <loop+0x2cc>)
 808031e:	a808      	add	r0, sp, #32
 8080320:	f88d 6000 	strb.w	r6, [sp]
 8080324:	f7ff fec7 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 8080328:	a809      	add	r0, sp, #36	; 0x24
 808032a:	f7ff feee 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON. 
 808032e:	f002 fb53 	bl	80829d8 <_ZN9TimeClass4hourEv>
 8080332:	280c      	cmp	r0, #12
 8080334:	d105      	bne.n	8080342 <loop+0xf6>
 8080336:	f001 fafb 	bl	8081930 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 808033a:	b110      	cbz	r0, 8080342 <loop+0xf6>
            return false;
        }
        return spark_sync_time(NULL);
 808033c:	4630      	mov	r0, r6
 808033e:	f001 fb07 	bl	8081950 <spark_sync_time>
      Particle.publish("Getting GPS FIX",String(t.gpsFix()),PRIVATE);
 8080342:	486d      	ldr	r0, [pc, #436]	; (80804f8 <loop+0x2ac>)
 8080344:	f001 f86a 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
 8080348:	220a      	movs	r2, #10
 808034a:	4601      	mov	r1, r0
 808034c:	a808      	add	r0, sp, #32
 808034e:	f002 fa11 	bl	8082774 <_ZN6StringC1Eih>
 8080352:	2200      	movs	r2, #0
 8080354:	782b      	ldrb	r3, [r5, #0]
 8080356:	4971      	ldr	r1, [pc, #452]	; (808051c <loop+0x2d0>)
 8080358:	f88d 2000 	strb.w	r2, [sp]
 808035c:	a806      	add	r0, sp, #24
 808035e:	9a08      	ldr	r2, [sp, #32]
 8080360:	f7ff fea9 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 8080364:	a807      	add	r0, sp, #28
 8080366:	f7ff fed0 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808036a:	a808      	add	r0, sp, #32
 808036c:	f002 f9aa 	bl	80826c4 <_ZN6StringD1Ev>
      while (!t.gpsFix()){
 8080370:	4861      	ldr	r0, [pc, #388]	; (80804f8 <loop+0x2ac>)
 8080372:	f001 f853 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
 8080376:	b918      	cbnz	r0, 8080380 <loop+0x134>
        t.gpsFix();
 8080378:	485f      	ldr	r0, [pc, #380]	; (80804f8 <loop+0x2ac>)
 808037a:	f001 f84f 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();  
      Particle.publish("reporting state","syncing clock",PRIVATE);
      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON. 
      Particle.publish("Getting GPS FIX",String(t.gpsFix()),PRIVATE);
      while (!t.gpsFix()){
 808037e:	e7f7      	b.n	8080370 <loop+0x124>
        t.gpsFix();
      }
       Particle.publish("GPS STATUS",String(t.gpsFix()),PRIVATE);
 8080380:	485d      	ldr	r0, [pc, #372]	; (80804f8 <loop+0x2ac>)
 8080382:	f001 f84b 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
 8080386:	220a      	movs	r2, #10
 8080388:	4601      	mov	r1, r0
 808038a:	a808      	add	r0, sp, #32
 808038c:	f002 f9f2 	bl	8082774 <_ZN6StringC1Eih>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080390:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080392:	782b      	ldrb	r3, [r5, #0]
 8080394:	4962      	ldr	r1, [pc, #392]	; (8080520 <loop+0x2d4>)
 8080396:	f88d 2000 	strb.w	r2, [sp]
 808039a:	a806      	add	r0, sp, #24
 808039c:	9a08      	ldr	r2, [sp, #32]
 808039e:	f7ff fe8a 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 80803a2:	a807      	add	r0, sp, #28
 80803a4:	f7ff feb1 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80803a8:	a808      	add	r0, sp, #32
 80803aa:	f002 f98b 	bl	80826c4 <_ZN6StringD1Ev>
      if (t.gpsFix()){
 80803ae:	4852      	ldr	r0, [pc, #328]	; (80804f8 <loop+0x2ac>)
 80803b0:	f001 f834 	bl	808141c <_ZN12AssetTracker6gpsFixEv>
 80803b4:	4605      	mov	r5, r0
 80803b6:	b118      	cbz	r0, 80803c0 <loop+0x174>
        sendUBIDots();
 80803b8:	f7ff ff38 	bl	808022c <_Z11sendUBIDotsv>
        state = RESPONSE_WAIT;
 80803bc:	2304      	movs	r3, #4
 80803be:	e091      	b.n	80804e4 <loop+0x298>
      } 
      else {
        waitUntil(PublishDelayFunction);
 80803c0:	f7ff fe98 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 80803c4:	4b4e      	ldr	r3, [pc, #312]	; (8080500 <loop+0x2b4>)
        Particle.publish("Alert","GPS NOT FIXED",PRIVATE);
 80803c6:	4a57      	ldr	r2, [pc, #348]	; (8080524 <loop+0x2d8>)
 80803c8:	781b      	ldrb	r3, [r3, #0]
 80803ca:	4951      	ldr	r1, [pc, #324]	; (8080510 <loop+0x2c4>)
 80803cc:	f88d 5000 	strb.w	r5, [sp]
 80803d0:	e01a      	b.n	8080408 <loop+0x1bc>
      
     
    break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();   
 80803d2:	4b47      	ldr	r3, [pc, #284]	; (80804f0 <loop+0x2a4>)
 80803d4:	781a      	ldrb	r2, [r3, #0]
 80803d6:	461d      	mov	r5, r3
 80803d8:	b12a      	cbz	r2, 80803e6 <loop+0x19a>
 80803da:	4b46      	ldr	r3, [pc, #280]	; (80804f4 <loop+0x2a8>)
 80803dc:	781b      	ldrb	r3, [r3, #0]
 80803de:	2b04      	cmp	r3, #4
 80803e0:	d001      	beq.n	80803e6 <loop+0x19a>
 80803e2:	f7ff fea9 	bl	8080138 <_Z15transitionStatev>
      if (!inTransit) {
 80803e6:	4b50      	ldr	r3, [pc, #320]	; (8080528 <loop+0x2dc>)
 80803e8:	781b      	ldrb	r3, [r3, #0]
 80803ea:	2b00      	cmp	r3, #0
 80803ec:	d17b      	bne.n	80804e6 <loop+0x29a>
        state = NAPPING_STATE;                                                       // This checks for the response from UBIDOTS. 
 80803ee:	2306      	movs	r3, #6
 80803f0:	7023      	strb	r3, [r4, #0]
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
 80803f2:	782c      	ldrb	r4, [r5, #0]
 80803f4:	2c00      	cmp	r4, #0
 80803f6:	d176      	bne.n	80804e6 <loop+0x29a>
          waitUntil(PublishDelayFunction);
 80803f8:	f7ff fe7c 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 80803fc:	4b40      	ldr	r3, [pc, #256]	; (8080500 <loop+0x2b4>)
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
 80803fe:	4a4b      	ldr	r2, [pc, #300]	; (808052c <loop+0x2e0>)
 8080400:	494b      	ldr	r1, [pc, #300]	; (8080530 <loop+0x2e4>)
 8080402:	781b      	ldrb	r3, [r3, #0]
 8080404:	f88d 4000 	strb.w	r4, [sp]
 8080408:	a808      	add	r0, sp, #32
 808040a:	f7ff fe54 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 808040e:	a809      	add	r0, sp, #36	; 0x24
 8080410:	f7ff fe7b 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080414:	e067      	b.n	80804e6 <loop+0x29a>
        }
      }   
    break;

    case ERROR_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
 8080416:	4b36      	ldr	r3, [pc, #216]	; (80804f0 <loop+0x2a4>)
 8080418:	781b      	ldrb	r3, [r3, #0]
 808041a:	b12b      	cbz	r3, 8080428 <loop+0x1dc>
 808041c:	4b35      	ldr	r3, [pc, #212]	; (80804f4 <loop+0x2a8>)
 808041e:	781b      	ldrb	r3, [r3, #0]
 8080420:	2b05      	cmp	r3, #5
 8080422:	d001      	beq.n	8080428 <loop+0x1dc>
 8080424:	f7ff fe88 	bl	8080138 <_Z15transitionStatev>
 8080428:	f001 f8bc 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
 808042c:	4b41      	ldr	r3, [pc, #260]	; (8080534 <loop+0x2e8>)
 808042e:	681b      	ldr	r3, [r3, #0]
 8080430:	1ac0      	subs	r0, r0, r3
 8080432:	f247 532f 	movw	r3, #29999	; 0x752f
 8080436:	4298      	cmp	r0, r3
 8080438:	d955      	bls.n	80804e6 <loop+0x29a>
        waitUntil(PublishDelayFunction);
 808043a:	f7ff fe5b 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 808043e:	4b30      	ldr	r3, [pc, #192]	; (8080500 <loop+0x2b4>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
 8080440:	2200      	movs	r2, #0
 8080442:	781b      	ldrb	r3, [r3, #0]
 8080444:	493c      	ldr	r1, [pc, #240]	; (8080538 <loop+0x2ec>)
 8080446:	f88d 2000 	strb.w	r2, [sp]
 808044a:	a808      	add	r0, sp, #32
 808044c:	4a3b      	ldr	r2, [pc, #236]	; (808053c <loop+0x2f0>)
 808044e:	f7ff fe32 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 8080452:	a809      	add	r0, sp, #36	; 0x24
 8080454:	f7ff fe59 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
 8080458:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808045c:	f001 fb20 	bl	8081aa0 <delay>
        System.reset();
 8080460:	f002 f9e5 	bl	808282e <_ZN11SystemClass5resetEv>
 8080464:	e03f      	b.n	80804e6 <loop+0x29a>
      
    break;

    case NAPPING_STATE:
      
      if (verboseMode && oldState != state) transitionState();     
 8080466:	4b22      	ldr	r3, [pc, #136]	; (80804f0 <loop+0x2a4>)
 8080468:	781b      	ldrb	r3, [r3, #0]
 808046a:	b12b      	cbz	r3, 8080478 <loop+0x22c>
 808046c:	4b21      	ldr	r3, [pc, #132]	; (80804f4 <loop+0x2a8>)
 808046e:	781b      	ldrb	r3, [r3, #0]
 8080470:	2b06      	cmp	r3, #6
 8080472:	d001      	beq.n	8080478 <loop+0x22c>
 8080474:	f7ff fe60 	bl	8080138 <_Z15transitionStatev>
 8080478:	4b31      	ldr	r3, [pc, #196]	; (8080540 <loop+0x2f4>)
 808047a:	2211      	movs	r2, #17
 808047c:	681b      	ldr	r3, [r3, #0]
 808047e:	f8ad 2016 	strh.w	r2, [sp, #22]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 8080482:	9302      	str	r3, [sp, #8]
 8080484:	2201      	movs	r2, #1
 8080486:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 808048a:	e88d 000c 	stmia.w	sp, {r2, r3}
 808048e:	f10d 0116 	add.w	r1, sp, #22
 8080492:	f10d 0315 	add.w	r3, sp, #21
 8080496:	a808      	add	r0, sp, #32
 8080498:	f88d 2015 	strb.w	r2, [sp, #21]
 808049c:	f002 f9e2 	bl	8082864 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
      System.sleep(WKP, RISING, TIME_PUBLISH_BATTERY_SEC, SLEEP_NETWORK_STANDBY);
		  awake = ((t.clearAccelInterrupt() & LIS3DH_INT1_SRC_IA) != 0);
 80804a0:	4815      	ldr	r0, [pc, #84]	; (80804f8 <loop+0x2ac>)
 80804a2:	f000 fff1 	bl	8081488 <_ZN12AssetTracker19clearAccelInterruptEv>
 80804a6:	4d27      	ldr	r5, [pc, #156]	; (8080544 <loop+0x2f8>)
 80804a8:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80804ac:	6028      	str	r0, [r5, #0]
      waitUntil(PublishDelayFunction);
 80804ae:	f7ff fe21 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
		  Particle.publish("WokeUP",String(awake),PRIVATE);
 80804b2:	220a      	movs	r2, #10
 80804b4:	6829      	ldr	r1, [r5, #0]
 80804b6:	a808      	add	r0, sp, #32
 80804b8:	f002 f95c 	bl	8082774 <_ZN6StringC1Eih>
 80804bc:	4b10      	ldr	r3, [pc, #64]	; (8080500 <loop+0x2b4>)
 80804be:	2200      	movs	r2, #0
 80804c0:	781b      	ldrb	r3, [r3, #0]
 80804c2:	4921      	ldr	r1, [pc, #132]	; (8080548 <loop+0x2fc>)
 80804c4:	f88d 2000 	strb.w	r2, [sp]
 80804c8:	a806      	add	r0, sp, #24
 80804ca:	9a08      	ldr	r2, [sp, #32]
 80804cc:	f7ff fdf3 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.65>
 80804d0:	a807      	add	r0, sp, #28
 80804d2:	f7ff fe1a 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80804d6:	a808      	add	r0, sp, #32
 80804d8:	f002 f8f4 	bl	80826c4 <_ZN6StringD1Ev>
      t.updateGPS();
 80804dc:	4806      	ldr	r0, [pc, #24]	; (80804f8 <loop+0x2ac>)
 80804de:	f000 ffb3 	bl	8081448 <_ZN12AssetTracker9updateGPSEv>
      state = REPORTING_STATE;
 80804e2:	2303      	movs	r3, #3
 80804e4:	7023      	strb	r3, [r4, #0]

    break;

  }

}
 80804e6:	b00c      	add	sp, #48	; 0x30
 80804e8:	bd70      	pop	{r4, r5, r6, pc}
 80804ea:	bf00      	nop
 80804ec:	20000264 	.word	0x20000264
 80804f0:	20000000 	.word	0x20000000
 80804f4:	2000023c 	.word	0x2000023c
 80804f8:	20000284 	.word	0x20000284
 80804fc:	20000294 	.word	0x20000294
 8080500:	20000265 	.word	0x20000265
 8080504:	08086e74 	.word	0x08086e74
 8080508:	08086e5d 	.word	0x08086e5d
 808050c:	08086e7b 	.word	0x08086e7b
 8080510:	08086e93 	.word	0x08086e93
 8080514:	08086e99 	.word	0x08086e99
 8080518:	08086ea7 	.word	0x08086ea7
 808051c:	08086eb7 	.word	0x08086eb7
 8080520:	08086ec7 	.word	0x08086ec7
 8080524:	08086ed2 	.word	0x08086ed2
 8080528:	2000024d 	.word	0x2000024d
 808052c:	08086ee0 	.word	0x08086ee0
 8080530:	08086dd1 	.word	0x08086dd1
 8080534:	20000280 	.word	0x20000280
 8080538:	08086f16 	.word	0x08086f16
 808053c:	08086efe 	.word	0x08086efe
 8080540:	2000026c 	.word	0x2000026c
 8080544:	20000268 	.word	0x20000268
 8080548:	08086f1c 	.word	0x08086f1c

0808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808054c:	2300      	movs	r3, #0
 808054e:	2204      	movs	r2, #4
 8080550:	f001 b9de 	b.w	8081910 <spark_variable>

08080554 <setup>:
unsigned long stateTime = 0;
const unsigned long WAIT_FOR_GPS_FIX = 4000 * 10 * 10 ; // After publish, wait 4 seconds for data to go out



void setup() {
 8080554:	b508      	push	{r3, lr}
  
  // Particle Variables
  Particle.variable("Speed",speedString);                                         // Check the humidity from particle console. 
 8080556:	4914      	ldr	r1, [pc, #80]	; (80805a8 <setup+0x54>)
 8080558:	4814      	ldr	r0, [pc, #80]	; (80805ac <setup+0x58>)
 808055a:	f7ff fff7 	bl	808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
 808055e:	4914      	ldr	r1, [pc, #80]	; (80805b0 <setup+0x5c>)
 8080560:	4814      	ldr	r0, [pc, #80]	; (80805b4 <setup+0x60>)
 8080562:	f7ff fff3 	bl	808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
 8080566:	4914      	ldr	r1, [pc, #80]	; (80805b8 <setup+0x64>)
 8080568:	4814      	ldr	r0, [pc, #80]	; (80805bc <setup+0x68>)
 808056a:	f7ff ffef 	bl	808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
 808056e:	4914      	ldr	r1, [pc, #80]	; (80805c0 <setup+0x6c>)
 8080570:	4814      	ldr	r0, [pc, #80]	; (80805c4 <setup+0x70>)
 8080572:	f7ff ffeb 	bl	808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
 8080576:	4914      	ldr	r1, [pc, #80]	; (80805c8 <setup+0x74>)
 8080578:	4814      	ldr	r0, [pc, #80]	; (80805cc <setup+0x78>)
 808057a:	f7ff ffe7 	bl	808054c <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>

  t.begin();                                                                      // Start the tracker 
 808057e:	4814      	ldr	r0, [pc, #80]	; (80805d0 <setup+0x7c>)
 8080580:	f000 feec 	bl	808135c <_ZN12AssetTracker5beginEv>
  t.gpsOn();
 8080584:	4812      	ldr	r0, [pc, #72]	; (80805d0 <setup+0x7c>)
 8080586:	f000 ff07 	bl	8081398 <_ZN12AssetTracker5gpsOnEv>
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
 808058a:	2144      	movs	r1, #68	; 0x44
 808058c:	4811      	ldr	r0, [pc, #68]	; (80805d4 <setup+0x80>)
 808058e:	f000 ffc2 	bl	8081516 <_ZN14Adafruit_SHT315beginEh>
 8080592:	b920      	cbnz	r0, 808059e <setup+0x4a>
    Serial.println("Couldn't find SHT31");
 8080594:	f002 fb28 	bl	8082be8 <_Z16_fetch_usbserialv>
 8080598:	490f      	ldr	r1, [pc, #60]	; (80805d8 <setup+0x84>)
 808059a:	f001 ff9c 	bl	80824d6 <_ZN5Print7printlnEPKc>
  }
  
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
 808059e:	4b0f      	ldr	r3, [pc, #60]	; (80805dc <setup+0x88>)
 80805a0:	2201      	movs	r2, #1
 80805a2:	701a      	strb	r2, [r3, #0]
 80805a4:	bd08      	pop	{r3, pc}
 80805a6:	bf00      	nop
 80805a8:	20000270 	.word	0x20000270
 80805ac:	08086f38 	.word	0x08086f38
 80805b0:	2000023d 	.word	0x2000023d
 80805b4:	08086f3e 	.word	0x08086f3e
 80805b8:	08086d50 	.word	0x08086d50
 80805bc:	08086f4a 	.word	0x08086f4a
 80805c0:	20000254 	.word	0x20000254
 80805c4:	08086f52 	.word	0x08086f52
 80805c8:	20000298 	.word	0x20000298
 80805cc:	08086f59 	.word	0x08086f59
 80805d0:	20000284 	.word	0x20000284
 80805d4:	20000288 	.word	0x20000288
 80805d8:	08086f61 	.word	0x08086f61
 80805dc:	20000264 	.word	0x20000264

080805e0 <_GLOBAL__sub_I_sht31>:
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
 80805e0:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80805e2:	4b0e      	ldr	r3, [pc, #56]	; (808061c <_GLOBAL__sub_I_sht31+0x3c>)
 80805e4:	2401      	movs	r4, #1
 80805e6:	601c      	str	r4, [r3, #0]
 80805e8:	4b0d      	ldr	r3, [pc, #52]	; (8080620 <_GLOBAL__sub_I_sht31+0x40>)
// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();                                           // Initialize sensor object


// Global objects
FuelGauge batteryMonitor;
 80805ea:	4d0e      	ldr	r5, [pc, #56]	; (8080624 <_GLOBAL__sub_I_sht31+0x44>)
 80805ec:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80805ee:	f000 fff1 	bl	80815d4 <HAL_Pin_Map>
#include "adafruit-sht31.h"                                                       //Include SHT-31 Library
#include <Adafruit_GPS.h>


// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();                                           // Initialize sensor object
 80805f2:	480d      	ldr	r0, [pc, #52]	; (8080628 <_GLOBAL__sub_I_sht31+0x48>)
 80805f4:	f000 ff6c 	bl	80814d0 <_ZN14Adafruit_SHT31C1Ev>


// Global objects
FuelGauge batteryMonitor;
 80805f8:	2100      	movs	r1, #0
 80805fa:	4628      	mov	r0, r5
 80805fc:	f001 fdc6 	bl	808218c <_ZN9FuelGaugeC1Eb>
 8080600:	490a      	ldr	r1, [pc, #40]	; (808062c <_GLOBAL__sub_I_sht31+0x4c>)
 8080602:	4a0b      	ldr	r2, [pc, #44]	; (8080630 <_GLOBAL__sub_I_sht31+0x50>)
 8080604:	4628      	mov	r0, r5
 8080606:	f002 fd53 	bl	80830b0 <__aeabi_atexit>
AssetTracker t = AssetTracker();
 808060a:	480a      	ldr	r0, [pc, #40]	; (8080634 <_GLOBAL__sub_I_sht31+0x54>)
 808060c:	f000 fea5 	bl	808135a <_ZN12AssetTrackerC1Ev>

SYSTEM_THREAD(ENABLED);
 8080610:	4620      	mov	r0, r4
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
 8080612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// Global objects
FuelGauge batteryMonitor;
AssetTracker t = AssetTracker();

SYSTEM_THREAD(ENABLED);
 8080616:	2100      	movs	r1, #0
 8080618:	f001 b93c 	b.w	8081894 <system_thread_set_state>
 808061c:	2000026c 	.word	0x2000026c
 8080620:	20000265 	.word	0x20000265
 8080624:	200002a8 	.word	0x200002a8
 8080628:	20000288 	.word	0x20000288
 808062c:	080821ab 	.word	0x080821ab
 8080630:	20000238 	.word	0x20000238
 8080634:	20000284 	.word	0x20000284

08080638 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
 8080638:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
 808063a:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
 808063e:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
 8080640:	b10d      	cbz	r5, 8080646 <_ZN12Adafruit_GPS4readEv+0xe>
 8080642:	2000      	movs	r0, #0
 8080644:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
 8080646:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8080648:	6803      	ldr	r3, [r0, #0]
 808064a:	691b      	ldr	r3, [r3, #16]
 808064c:	4798      	blx	r3
 808064e:	2800      	cmp	r0, #0
 8080650:	d0f7      	beq.n	8080642 <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
 8080652:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8080654:	6803      	ldr	r3, [r0, #0]
 8080656:	695b      	ldr	r3, [r3, #20]
 8080658:	4798      	blx	r3
 808065a:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
 808065c:	280a      	cmp	r0, #10
 808065e:	4b14      	ldr	r3, [pc, #80]	; (80806b0 <_ZN12Adafruit_GPS4readEv+0x78>)
 8080660:	4a14      	ldr	r2, [pc, #80]	; (80806b4 <_ZN12Adafruit_GPS4readEv+0x7c>)
 8080662:	d116      	bne.n	8080692 <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
 8080664:	7819      	ldrb	r1, [r3, #0]
 8080666:	6814      	ldr	r4, [r2, #0]
 8080668:	b2c9      	uxtb	r1, r1
 808066a:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
 808066c:	6816      	ldr	r6, [r2, #0]
 808066e:	4d12      	ldr	r5, [pc, #72]	; (80806b8 <_ZN12Adafruit_GPS4readEv+0x80>)
 8080670:	4c12      	ldr	r4, [pc, #72]	; (80806bc <_ZN12Adafruit_GPS4readEv+0x84>)
 8080672:	4913      	ldr	r1, [pc, #76]	; (80806c0 <_ZN12Adafruit_GPS4readEv+0x88>)
 8080674:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
 8080676:	bf14      	ite	ne
 8080678:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
 808067a:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
 808067c:	f04f 0100 	mov.w	r1, #0
 8080680:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
 8080682:	4910      	ldr	r1, [pc, #64]	; (80806c4 <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
 8080684:	bf08      	it	eq
 8080686:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 8080688:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
 808068c:	bf18      	it	ne
 808068e:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 8080690:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
 8080692:	6814      	ldr	r4, [r2, #0]
 8080694:	781a      	ldrb	r2, [r3, #0]
 8080696:	b2d2      	uxtb	r2, r2
 8080698:	1c51      	adds	r1, r2, #1
 808069a:	b2c9      	uxtb	r1, r1
 808069c:	7019      	strb	r1, [r3, #0]
 808069e:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
 80806a0:	781b      	ldrb	r3, [r3, #0]
 80806a2:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
 80806a4:	bf82      	ittt	hi
 80806a6:	4b02      	ldrhi	r3, [pc, #8]	; (80806b0 <_ZN12Adafruit_GPS4readEv+0x78>)
 80806a8:	2277      	movhi	r2, #119	; 0x77
 80806aa:	701a      	strbhi	r2, [r3, #0]

  return c;
}
 80806ac:	bd70      	pop	{r4, r5, r6, pc}
 80806ae:	bf00      	nop
 80806b0:	200002b4 	.word	0x200002b4
 80806b4:	200002b0 	.word	0x200002b0
 80806b8:	200002b5 	.word	0x200002b5
 80806bc:	2000032d 	.word	0x2000032d
 80806c0:	200003a8 	.word	0x200003a8
 80806c4:	200003a5 	.word	0x200003a5

080806c8 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 80806c8:	4a15      	ldr	r2, [pc, #84]	; (8080720 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80806ca:	2300      	movs	r3, #0
  recvdflag   = false;
 80806cc:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 80806ce:	4a15      	ldr	r2, [pc, #84]	; (8080724 <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 80806d0:	4915      	ldr	r1, [pc, #84]	; (8080728 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 80806d2:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 80806d4:	4a15      	ldr	r2, [pc, #84]	; (808072c <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80806d6:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 80806d8:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 80806da:	4915      	ldr	r1, [pc, #84]	; (8080730 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 80806dc:	4a15      	ldr	r2, [pc, #84]	; (8080734 <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 80806de:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 80806e2:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 80806e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80806e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80806ec:	7143      	strb	r3, [r0, #5]
 80806ee:	7103      	strb	r3, [r0, #4]
 80806f0:	70c3      	strb	r3, [r0, #3]
 80806f2:	7083      	strb	r3, [r0, #2]
 80806f4:	7043      	strb	r3, [r0, #1]
 80806f6:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 80806f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80806fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8080700:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 8080704:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 8080708:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 808070a:	2300      	movs	r3, #0
 808070c:	6343      	str	r3, [r0, #52]	; 0x34
 808070e:	6303      	str	r3, [r0, #48]	; 0x30
 8080710:	62c3      	str	r3, [r0, #44]	; 0x2c
 8080712:	6283      	str	r3, [r0, #40]	; 0x28
 8080714:	6243      	str	r3, [r0, #36]	; 0x24
 8080716:	6203      	str	r3, [r0, #32]
 8080718:	60c3      	str	r3, [r0, #12]
 808071a:	6083      	str	r3, [r0, #8]
 808071c:	4770      	bx	lr
 808071e:	bf00      	nop
 8080720:	200003a5 	.word	0x200003a5
 8080724:	200002b4 	.word	0x200002b4
 8080728:	200002b5 	.word	0x200002b5
 808072c:	200002b0 	.word	0x200002b0
 8080730:	2000032d 	.word	0x2000032d
 8080734:	200003a8 	.word	0x200003a8

08080738 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 8080738:	b538      	push	{r3, r4, r5, lr}
 808073a:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 808073c:	f7ff ffc4 	bl	80806c8 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 8080740:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 8080742:	bd38      	pop	{r3, r4, r5, pc}

08080744 <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
 8080744:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
 8080746:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8080748:	f002 f9b6 	bl	8082ab8 <_ZN11USARTSerial5beginEm>

  delay(10);
}
 808074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
 8080750:	200a      	movs	r0, #10
 8080752:	f001 b9a5 	b.w	8081aa0 <delay>

08080756 <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
 8080756:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8080758:	f001 bebd 	b.w	80824d6 <_ZN5Print7printlnEPKc>

0808075c <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
 808075c:	4b01      	ldr	r3, [pc, #4]	; (8080764 <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
 808075e:	7818      	ldrb	r0, [r3, #0]
}
 8080760:	4770      	bx	lr
 8080762:	bf00      	nop
 8080764:	200003a5 	.word	0x200003a5

08080768 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
 8080768:	4b02      	ldr	r3, [pc, #8]	; (8080774 <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
 808076a:	2200      	movs	r2, #0
 808076c:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
 808076e:	4b02      	ldr	r3, [pc, #8]	; (8080778 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
 8080770:	6818      	ldr	r0, [r3, #0]
 8080772:	4770      	bx	lr
 8080774:	200003a5 	.word	0x200003a5
 8080778:	200003a8 	.word	0x200003a8

0808077c <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
 808077c:	292f      	cmp	r1, #47	; 0x2f
 808077e:	d90a      	bls.n	8080796 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
 8080780:	2939      	cmp	r1, #57	; 0x39
 8080782:	d801      	bhi.n	8080788 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
 8080784:	3930      	subs	r1, #48	; 0x30
 8080786:	e004      	b.n	8080792 <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
 8080788:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 808078c:	2b05      	cmp	r3, #5
 808078e:	d802      	bhi.n	8080796 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
 8080790:	3937      	subs	r1, #55	; 0x37
 8080792:	b2c8      	uxtb	r0, r1
 8080794:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
 8080796:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
 8080798:	4770      	bx	lr
	...

0808079c <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 808079c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80807a0:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80807a2:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 80807a4:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80807a6:	f004 f918 	bl	80849da <strlen>
 80807aa:	1f07      	subs	r7, r0, #4
 80807ac:	5deb      	ldrb	r3, [r5, r7]
 80807ae:	2b2a      	cmp	r3, #42	; 0x2a
 80807b0:	d119      	bne.n	80807e6 <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 80807b2:	182e      	adds	r6, r5, r0
 80807b4:	f816 1c03 	ldrb.w	r1, [r6, #-3]
 80807b8:	4620      	mov	r0, r4
 80807ba:	f7ff ffdf 	bl	808077c <_ZN12Adafruit_GPS8parseHexEc>
 80807be:	0100      	lsls	r0, r0, #4
 80807c0:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
 80807c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80807c6:	4620      	mov	r0, r4
 80807c8:	f7ff ffd8 	bl	808077c <_ZN12Adafruit_GPS8parseHexEc>
 80807cc:	4410      	add	r0, r2
 80807ce:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80807d0:	2302      	movs	r3, #2
 80807d2:	429f      	cmp	r7, r3
 80807d4:	d904      	bls.n	80807e0 <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
 80807d6:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80807d8:	3301      	adds	r3, #1
      sum ^= nmea[i];
 80807da:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80807dc:	b2db      	uxtb	r3, r3
 80807de:	e7f8      	b.n	80807d2 <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
 80807e0:	b108      	cbz	r0, 80807e6 <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
 80807e2:	2000      	movs	r0, #0
 80807e4:	e2e8      	b.n	8080db8 <_ZN12Adafruit_GPS5parseEPc+0x61c>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
 80807e6:	49b6      	ldr	r1, [pc, #728]	; (8080ac0 <_ZN12Adafruit_GPS5parseEPc+0x324>)
 80807e8:	4628      	mov	r0, r5
 80807ea:	f004 f926 	bl	8084a3a <strstr>
 80807ee:	b930      	cbnz	r0, 80807fe <_ZN12Adafruit_GPS5parseEPc+0x62>
 80807f0:	49b4      	ldr	r1, [pc, #720]	; (8080ac4 <_ZN12Adafruit_GPS5parseEPc+0x328>)
 80807f2:	4628      	mov	r0, r5
 80807f4:	f004 f921 	bl	8084a3a <strstr>
 80807f8:	2800      	cmp	r0, #0
 80807fa:	f000 8173 	beq.w	8080ae4 <_ZN12Adafruit_GPS5parseEPc+0x348>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
 80807fe:	212c      	movs	r1, #44	; 0x2c
 8080800:	4628      	mov	r0, r5
 8080802:	f004 f8af 	bl	8084964 <strchr>
 8080806:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8080808:	4628      	mov	r0, r5
 808080a:	f003 ff59 	bl	80846c0 <atof>
 808080e:	f003 fbed 	bl	8083fec <__aeabi_d2f>
 8080812:	4606      	mov	r6, r0
    uint32_t time = timef;
 8080814:	f003 ff34 	bl	8084680 <__aeabi_f2uiz>
    hour = time / 10000;
 8080818:	f242 7210 	movw	r2, #10000	; 0x2710
 808081c:	fbb0 f3f2 	udiv	r3, r0, r2
 8080820:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 8080822:	fb02 0313 	mls	r3, r2, r3, r0
 8080826:	2764      	movs	r7, #100	; 0x64
 8080828:	fbb3 f3f7 	udiv	r3, r3, r7
 808082c:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 808082e:	fbb0 f3f7 	udiv	r3, r0, r7
 8080832:	fb07 0013 	mls	r0, r7, r3, r0
 8080836:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 8080838:	4630      	mov	r0, r6
 808083a:	f003 f88b 	bl	8083954 <__aeabi_f2d>
 808083e:	2200      	movs	r2, #0
 8080840:	4ba1      	ldr	r3, [pc, #644]	; (8080ac8 <_ZN12Adafruit_GPS5parseEPc+0x32c>)
 8080842:	f002 fda1 	bl	8083388 <fmod>
 8080846:	4ba1      	ldr	r3, [pc, #644]	; (8080acc <_ZN12Adafruit_GPS5parseEPc+0x330>)
 8080848:	2200      	movs	r2, #0
 808084a:	f003 f8d7 	bl	80839fc <__aeabi_dmul>
 808084e:	f003 fbad 	bl	8083fac <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
 8080852:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 8080854:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
 8080856:	4628      	mov	r0, r5
 8080858:	f004 f884 	bl	8084964 <strchr>
    if (',' != *p)
 808085c:	7843      	ldrb	r3, [r0, #1]
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 808085e:	4605      	mov	r5, r0
    if (',' != *p)
 8080860:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080862:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080866:	d053      	beq.n	8080910 <_ZN12Adafruit_GPS5parseEPc+0x174>
    {
      strncpy(degreebuff, p, 2);
 8080868:	4631      	mov	r1, r6
 808086a:	2202      	movs	r2, #2
 808086c:	a801      	add	r0, sp, #4
 808086e:	f004 f8d1 	bl	8084a14 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 8080872:	f04f 0a00 	mov.w	sl, #0
 8080876:	f10d 0910 	add.w	r9, sp, #16
      degree = atol(degreebuff) * 10000000;
 808087a:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 808087c:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
 8080880:	f003 ff25 	bl	80846ce <atol>
 8080884:	4b92      	ldr	r3, [pc, #584]	; (8080ad0 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 8080886:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
 8080888:	fb03 f800 	mul.w	r8, r3, r0
      strncpy(degreebuff, p, 2); // minutes
 808088c:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 808088e:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080890:	a801      	add	r0, sp, #4
 8080892:	f004 f8bf 	bl	8084a14 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8080896:	2204      	movs	r2, #4
 8080898:	4631      	mov	r1, r6
 808089a:	4648      	mov	r0, r9
 808089c:	f004 f8ba 	bl	8084a14 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80808a0:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80808a2:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80808a6:	f003 ff12 	bl	80846ce <atol>
 80808aa:	2532      	movs	r5, #50	; 0x32
 80808ac:	4345      	muls	r5, r0
 80808ae:	2003      	movs	r0, #3
 80808b0:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80808b4:	4887      	ldr	r0, [pc, #540]	; (8080ad4 <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 80808b6:	eb08 0305 	add.w	r3, r8, r5
 80808ba:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 80808bc:	fb98 f0f0 	sdiv	r0, r8, r0
 80808c0:	f003 fc9e 	bl	8084200 <__aeabi_i2f>
 80808c4:	4680      	mov	r8, r0
 80808c6:	4628      	mov	r0, r5
 80808c8:	f003 fc9a 	bl	8084200 <__aeabi_i2f>
 80808cc:	4982      	ldr	r1, [pc, #520]	; (8080ad8 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80808ce:	f003 fceb 	bl	80842a8 <__aeabi_fmul>
 80808d2:	4601      	mov	r1, r0
 80808d4:	4640      	mov	r0, r8
 80808d6:	f003 fbdf 	bl	8084098 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80808da:	4980      	ldr	r1, [pc, #512]	; (8080adc <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80808dc:	60a0      	str	r0, [r4, #8]
 80808de:	4680      	mov	r8, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80808e0:	f003 fd96 	bl	8084410 <__aeabi_fdiv>
 80808e4:	f003 fea6 	bl	8084634 <__aeabi_f2iz>
 80808e8:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 80808ea:	4378      	muls	r0, r7
 80808ec:	f003 fc88 	bl	8084200 <__aeabi_i2f>
 80808f0:	4601      	mov	r1, r0
 80808f2:	4640      	mov	r0, r8
 80808f4:	f003 fbce 	bl	8084094 <__aeabi_fsub>
 80808f8:	4979      	ldr	r1, [pc, #484]	; (8080ae0 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 80808fa:	f003 fd89 	bl	8084410 <__aeabi_fdiv>
 80808fe:	4607      	mov	r7, r0
 8080900:	4628      	mov	r0, r5
 8080902:	f003 fc7d 	bl	8084200 <__aeabi_i2f>
 8080906:	4601      	mov	r1, r0
 8080908:	4638      	mov	r0, r7
 808090a:	f003 fbc5 	bl	8084098 <__addsf3>
 808090e:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8080910:	212c      	movs	r1, #44	; 0x2c
 8080912:	4630      	mov	r0, r6
 8080914:	f004 f826 	bl	8084964 <strchr>
 8080918:	4603      	mov	r3, r0
    if (',' != *p)
 808091a:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 808091c:	3001      	adds	r0, #1
    if (',' != *p)
 808091e:	2a2c      	cmp	r2, #44	; 0x2c
 8080920:	d010      	beq.n	8080944 <_ZN12Adafruit_GPS5parseEPc+0x1a8>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 8080922:	2a53      	cmp	r2, #83	; 0x53
 8080924:	bf02      	ittt	eq
 8080926:	69a2      	ldreq	r2, [r4, #24]
 8080928:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 808092c:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 808092e:	785b      	ldrb	r3, [r3, #1]
 8080930:	2b4e      	cmp	r3, #78	; 0x4e
 8080932:	d005      	beq.n	8080940 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == 'S') lat = 'S';
 8080934:	2b53      	cmp	r3, #83	; 0x53
 8080936:	d003      	beq.n	8080940 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == ',') lat = 0;
 8080938:	2b2c      	cmp	r3, #44	; 0x2c
 808093a:	f47f af52 	bne.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
 808093e:	2300      	movs	r3, #0
 8080940:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080944:	212c      	movs	r1, #44	; 0x2c
 8080946:	f004 f80d 	bl	8084964 <strchr>
    if (',' != *p)
 808094a:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 808094c:	4605      	mov	r5, r0
    if (',' != *p)
 808094e:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080950:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080954:	d051      	beq.n	80809fa <_ZN12Adafruit_GPS5parseEPc+0x25e>
    {
      strncpy(degreebuff, p, 3);
 8080956:	4631      	mov	r1, r6
 8080958:	2203      	movs	r2, #3
 808095a:	a801      	add	r0, sp, #4
 808095c:	f004 f85a 	bl	8084a14 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 8080960:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 8080964:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 8080966:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 808096a:	f003 feb0 	bl	80846ce <atol>
 808096e:	4f58      	ldr	r7, [pc, #352]	; (8080ad0 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 8080970:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 8080972:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8080974:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8080976:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080978:	a801      	add	r0, sp, #4
 808097a:	f004 f84b 	bl	8084a14 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 808097e:	2204      	movs	r2, #4
 8080980:	4631      	mov	r1, r6
 8080982:	f10d 0006 	add.w	r0, sp, #6
 8080986:	f004 f845 	bl	8084a14 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 808098a:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 808098c:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 8080990:	f003 fe9d 	bl	80846ce <atol>
 8080994:	2532      	movs	r5, #50	; 0x32
 8080996:	4345      	muls	r5, r0
 8080998:	2003      	movs	r0, #3
 808099a:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 808099e:	484d      	ldr	r0, [pc, #308]	; (8080ad4 <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 80809a0:	197b      	adds	r3, r7, r5
 80809a2:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 80809a4:	fb97 f0f0 	sdiv	r0, r7, r0
 80809a8:	f003 fc2a 	bl	8084200 <__aeabi_i2f>
 80809ac:	4607      	mov	r7, r0
 80809ae:	4628      	mov	r0, r5
 80809b0:	f003 fc26 	bl	8084200 <__aeabi_i2f>
 80809b4:	4948      	ldr	r1, [pc, #288]	; (8080ad8 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80809b6:	f003 fc77 	bl	80842a8 <__aeabi_fmul>
 80809ba:	4601      	mov	r1, r0
 80809bc:	4638      	mov	r0, r7
 80809be:	f003 fb6b 	bl	8084098 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80809c2:	4946      	ldr	r1, [pc, #280]	; (8080adc <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80809c4:	60e0      	str	r0, [r4, #12]
 80809c6:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80809c8:	f003 fd22 	bl	8084410 <__aeabi_fdiv>
 80809cc:	f003 fe32 	bl	8084634 <__aeabi_f2iz>
 80809d0:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 80809d2:	2064      	movs	r0, #100	; 0x64
 80809d4:	4368      	muls	r0, r5
 80809d6:	f003 fc13 	bl	8084200 <__aeabi_i2f>
 80809da:	4601      	mov	r1, r0
 80809dc:	4638      	mov	r0, r7
 80809de:	f003 fb59 	bl	8084094 <__aeabi_fsub>
 80809e2:	493f      	ldr	r1, [pc, #252]	; (8080ae0 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 80809e4:	f003 fd14 	bl	8084410 <__aeabi_fdiv>
 80809e8:	4607      	mov	r7, r0
 80809ea:	4628      	mov	r0, r5
 80809ec:	f003 fc08 	bl	8084200 <__aeabi_i2f>
 80809f0:	4601      	mov	r1, r0
 80809f2:	4638      	mov	r0, r7
 80809f4:	f003 fb50 	bl	8084098 <__addsf3>
 80809f8:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 80809fa:	212c      	movs	r1, #44	; 0x2c
 80809fc:	4630      	mov	r0, r6
 80809fe:	f003 ffb1 	bl	8084964 <strchr>
 8080a02:	4603      	mov	r3, r0
    if (',' != *p)
 8080a04:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 8080a06:	3001      	adds	r0, #1
    if (',' != *p)
 8080a08:	2a2c      	cmp	r2, #44	; 0x2c
 8080a0a:	d010      	beq.n	8080a2e <_ZN12Adafruit_GPS5parseEPc+0x292>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 8080a0c:	2a57      	cmp	r2, #87	; 0x57
 8080a0e:	bf02      	ittt	eq
 8080a10:	69e2      	ldreq	r2, [r4, #28]
 8080a12:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080a16:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8080a18:	785b      	ldrb	r3, [r3, #1]
 8080a1a:	2b57      	cmp	r3, #87	; 0x57
 8080a1c:	d005      	beq.n	8080a2a <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == 'E') lon = 'E';
 8080a1e:	2b45      	cmp	r3, #69	; 0x45
 8080a20:	d003      	beq.n	8080a2a <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == ',') lon = 0;
 8080a22:	2b2c      	cmp	r3, #44	; 0x2c
 8080a24:	f47f aedd 	bne.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080a28:	2300      	movs	r3, #0
 8080a2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
 8080a2e:	212c      	movs	r1, #44	; 0x2c
 8080a30:	f003 ff98 	bl	8084964 <strchr>
    if (',' != *p)
 8080a34:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
 8080a36:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080a38:	2b2c      	cmp	r3, #44	; 0x2c
 8080a3a:	d004      	beq.n	8080a46 <_ZN12Adafruit_GPS5parseEPc+0x2aa>
    {
      fixquality = atoi(p);
 8080a3c:	4628      	mov	r0, r5
 8080a3e:	f003 fe42 	bl	80846c6 <atoi>
 8080a42:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
 8080a46:	4628      	mov	r0, r5
 8080a48:	212c      	movs	r1, #44	; 0x2c
 8080a4a:	f003 ff8b 	bl	8084964 <strchr>
    if (',' != *p)
 8080a4e:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
 8080a50:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080a52:	2b2c      	cmp	r3, #44	; 0x2c
 8080a54:	d004      	beq.n	8080a60 <_ZN12Adafruit_GPS5parseEPc+0x2c4>
    {
      satellites = atoi(p);
 8080a56:	4628      	mov	r0, r5
 8080a58:	f003 fe35 	bl	80846c6 <atoi>
 8080a5c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
 8080a60:	4628      	mov	r0, r5
 8080a62:	212c      	movs	r1, #44	; 0x2c
 8080a64:	f003 ff7e 	bl	8084964 <strchr>
    if (',' != *p)
 8080a68:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
 8080a6a:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080a6c:	2b2c      	cmp	r3, #44	; 0x2c
 8080a6e:	d005      	beq.n	8080a7c <_ZN12Adafruit_GPS5parseEPc+0x2e0>
    {
      HDOP = atof(p);
 8080a70:	4628      	mov	r0, r5
 8080a72:	f003 fe25 	bl	80846c0 <atof>
 8080a76:	f003 fab9 	bl	8083fec <__aeabi_d2f>
 8080a7a:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
 8080a7c:	4628      	mov	r0, r5
 8080a7e:	212c      	movs	r1, #44	; 0x2c
 8080a80:	f003 ff70 	bl	8084964 <strchr>
    if (',' != *p)
 8080a84:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
 8080a86:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080a88:	2b2c      	cmp	r3, #44	; 0x2c
 8080a8a:	d005      	beq.n	8080a98 <_ZN12Adafruit_GPS5parseEPc+0x2fc>
    {
      altitude = atof(p);
 8080a8c:	4628      	mov	r0, r5
 8080a8e:	f003 fe17 	bl	80846c0 <atof>
 8080a92:	f003 faab 	bl	8083fec <__aeabi_d2f>
 8080a96:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
 8080a98:	212c      	movs	r1, #44	; 0x2c
 8080a9a:	4628      	mov	r0, r5
 8080a9c:	f003 ff62 	bl	8084964 <strchr>
    p = strchr(p, ',')+1;
 8080aa0:	212c      	movs	r1, #44	; 0x2c
 8080aa2:	3001      	adds	r0, #1
 8080aa4:	f003 ff5e 	bl	8084964 <strchr>
    if (',' != *p)
 8080aa8:	7843      	ldrb	r3, [r0, #1]
 8080aaa:	2b2c      	cmp	r3, #44	; 0x2c
 8080aac:	f000 8183 	beq.w	8080db6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      geoidheight = atof(p);
 8080ab0:	3001      	adds	r0, #1
 8080ab2:	f003 fe05 	bl	80846c0 <atof>
 8080ab6:	f003 fa99 	bl	8083fec <__aeabi_d2f>
 8080aba:	6220      	str	r0, [r4, #32]
 8080abc:	e17b      	b.n	8080db6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
 8080abe:	bf00      	nop
 8080ac0:	08086f75 	.word	0x08086f75
 8080ac4:	08086f7c 	.word	0x08086f7c
 8080ac8:	3ff00000 	.word	0x3ff00000
 8080acc:	408f4000 	.word	0x408f4000
 8080ad0:	00989680 	.word	0x00989680
 8080ad4:	000186a0 	.word	0x000186a0
 8080ad8:	36c9539c 	.word	0x36c9539c
 8080adc:	42c80000 	.word	0x42c80000
 8080ae0:	42700000 	.word	0x42700000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
 8080ae4:	49b6      	ldr	r1, [pc, #728]	; (8080dc0 <_ZN12Adafruit_GPS5parseEPc+0x624>)
 8080ae6:	4628      	mov	r0, r5
 8080ae8:	f003 ffa7 	bl	8084a3a <strstr>
 8080aec:	b930      	cbnz	r0, 8080afc <_ZN12Adafruit_GPS5parseEPc+0x360>
 8080aee:	49b5      	ldr	r1, [pc, #724]	; (8080dc4 <_ZN12Adafruit_GPS5parseEPc+0x628>)
 8080af0:	4628      	mov	r0, r5
 8080af2:	f003 ffa2 	bl	8084a3a <strstr>
 8080af6:	2800      	cmp	r0, #0
 8080af8:	f43f ae73 	beq.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
 8080afc:	212c      	movs	r1, #44	; 0x2c
 8080afe:	4628      	mov	r0, r5
 8080b00:	f003 ff30 	bl	8084964 <strchr>
 8080b04:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8080b06:	4628      	mov	r0, r5
 8080b08:	f003 fdda 	bl	80846c0 <atof>
 8080b0c:	f003 fa6e 	bl	8083fec <__aeabi_d2f>
 8080b10:	4606      	mov	r6, r0
    uint32_t time = timef;
 8080b12:	f003 fdb5 	bl	8084680 <__aeabi_f2uiz>
    hour = time / 10000;
 8080b16:	f242 7210 	movw	r2, #10000	; 0x2710
 8080b1a:	fbb0 f3f2 	udiv	r3, r0, r2
 8080b1e:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 8080b20:	fb02 0313 	mls	r3, r2, r3, r0
 8080b24:	2264      	movs	r2, #100	; 0x64
 8080b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8080b2a:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 8080b2c:	fbb0 f3f2 	udiv	r3, r0, r2
 8080b30:	fb02 0013 	mls	r0, r2, r3, r0
 8080b34:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 8080b36:	4630      	mov	r0, r6
 8080b38:	f002 ff0c 	bl	8083954 <__aeabi_f2d>
 8080b3c:	2200      	movs	r2, #0
 8080b3e:	4ba2      	ldr	r3, [pc, #648]	; (8080dc8 <_ZN12Adafruit_GPS5parseEPc+0x62c>)
 8080b40:	f002 fc22 	bl	8083388 <fmod>
 8080b44:	4ba1      	ldr	r3, [pc, #644]	; (8080dcc <_ZN12Adafruit_GPS5parseEPc+0x630>)
 8080b46:	2200      	movs	r2, #0
 8080b48:	f002 ff58 	bl	80839fc <__aeabi_dmul>
 8080b4c:	f003 fa2e 	bl	8083fac <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
 8080b50:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 8080b52:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
 8080b54:	4628      	mov	r0, r5
 8080b56:	f003 ff05 	bl	8084964 <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
 8080b5a:	7843      	ldrb	r3, [r0, #1]
 8080b5c:	2b41      	cmp	r3, #65	; 0x41
 8080b5e:	d101      	bne.n	8080b64 <_ZN12Adafruit_GPS5parseEPc+0x3c8>
      fix = true;
 8080b60:	2301      	movs	r3, #1
 8080b62:	e003      	b.n	8080b6c <_ZN12Adafruit_GPS5parseEPc+0x3d0>
    else if (p[0] == 'V')
 8080b64:	2b56      	cmp	r3, #86	; 0x56
 8080b66:	f47f ae3c 	bne.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
 8080b6a:	2300      	movs	r3, #0
 8080b6c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080b70:	212c      	movs	r1, #44	; 0x2c
 8080b72:	3001      	adds	r0, #1
 8080b74:	f003 fef6 	bl	8084964 <strchr>
    if (',' != *p)
 8080b78:	7843      	ldrb	r3, [r0, #1]
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080b7a:	4605      	mov	r5, r0
    if (',' != *p)
 8080b7c:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080b7e:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080b82:	d052      	beq.n	8080c2a <_ZN12Adafruit_GPS5parseEPc+0x48e>
    {
      strncpy(degreebuff, p, 2);
 8080b84:	4631      	mov	r1, r6
 8080b86:	2202      	movs	r2, #2
 8080b88:	a801      	add	r0, sp, #4
 8080b8a:	f003 ff43 	bl	8084a14 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 8080b8e:	f04f 0900 	mov.w	r9, #0
 8080b92:	f10d 0810 	add.w	r8, sp, #16
      long degree = atol(degreebuff) * 10000000;
 8080b96:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 8080b98:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
 8080b9c:	f003 fd97 	bl	80846ce <atol>
 8080ba0:	4f8b      	ldr	r7, [pc, #556]	; (8080dd0 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 8080ba2:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
 8080ba4:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8080ba6:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8080ba8:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080baa:	a801      	add	r0, sp, #4
 8080bac:	f003 ff32 	bl	8084a14 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8080bb0:	2204      	movs	r2, #4
 8080bb2:	4631      	mov	r1, r6
 8080bb4:	4640      	mov	r0, r8
 8080bb6:	f003 ff2d 	bl	8084a14 <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
 8080bba:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 8080bbc:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
 8080bc0:	f003 fd85 	bl	80846ce <atol>
 8080bc4:	2532      	movs	r5, #50	; 0x32
 8080bc6:	4345      	muls	r5, r0
 8080bc8:	2003      	movs	r0, #3
 8080bca:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8080bce:	4881      	ldr	r0, [pc, #516]	; (8080dd4 <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 8080bd0:	197b      	adds	r3, r7, r5
 8080bd2:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 8080bd4:	fb97 f0f0 	sdiv	r0, r7, r0
 8080bd8:	f003 fb12 	bl	8084200 <__aeabi_i2f>
 8080bdc:	4607      	mov	r7, r0
 8080bde:	4628      	mov	r0, r5
 8080be0:	f003 fb0e 	bl	8084200 <__aeabi_i2f>
 8080be4:	497c      	ldr	r1, [pc, #496]	; (8080dd8 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8080be6:	f003 fb5f 	bl	80842a8 <__aeabi_fmul>
 8080bea:	4601      	mov	r1, r0
 8080bec:	4638      	mov	r0, r7
 8080bee:	f003 fa53 	bl	8084098 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080bf2:	497a      	ldr	r1, [pc, #488]	; (8080ddc <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8080bf4:	60a0      	str	r0, [r4, #8]
 8080bf6:	4607      	mov	r7, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080bf8:	f003 fc0a 	bl	8084410 <__aeabi_fdiv>
 8080bfc:	f003 fd1a 	bl	8084634 <__aeabi_f2iz>
 8080c00:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 8080c02:	2064      	movs	r0, #100	; 0x64
 8080c04:	4368      	muls	r0, r5
 8080c06:	f003 fafb 	bl	8084200 <__aeabi_i2f>
 8080c0a:	4601      	mov	r1, r0
 8080c0c:	4638      	mov	r0, r7
 8080c0e:	f003 fa41 	bl	8084094 <__aeabi_fsub>
 8080c12:	4973      	ldr	r1, [pc, #460]	; (8080de0 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8080c14:	f003 fbfc 	bl	8084410 <__aeabi_fdiv>
 8080c18:	4607      	mov	r7, r0
 8080c1a:	4628      	mov	r0, r5
 8080c1c:	f003 faf0 	bl	8084200 <__aeabi_i2f>
 8080c20:	4601      	mov	r1, r0
 8080c22:	4638      	mov	r0, r7
 8080c24:	f003 fa38 	bl	8084098 <__addsf3>
 8080c28:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8080c2a:	212c      	movs	r1, #44	; 0x2c
 8080c2c:	4630      	mov	r0, r6
 8080c2e:	f003 fe99 	bl	8084964 <strchr>
 8080c32:	4603      	mov	r3, r0
    if (',' != *p)
 8080c34:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 8080c36:	3001      	adds	r0, #1
    if (',' != *p)
 8080c38:	2a2c      	cmp	r2, #44	; 0x2c
 8080c3a:	d010      	beq.n	8080c5e <_ZN12Adafruit_GPS5parseEPc+0x4c2>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 8080c3c:	2a53      	cmp	r2, #83	; 0x53
 8080c3e:	bf02      	ittt	eq
 8080c40:	69a2      	ldreq	r2, [r4, #24]
 8080c42:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080c46:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 8080c48:	785b      	ldrb	r3, [r3, #1]
 8080c4a:	2b4e      	cmp	r3, #78	; 0x4e
 8080c4c:	d005      	beq.n	8080c5a <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == 'S') lat = 'S';
 8080c4e:	2b53      	cmp	r3, #83	; 0x53
 8080c50:	d003      	beq.n	8080c5a <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == ',') lat = 0;
 8080c52:	2b2c      	cmp	r3, #44	; 0x2c
 8080c54:	f47f adc5 	bne.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080c58:	2300      	movs	r3, #0
 8080c5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080c5e:	212c      	movs	r1, #44	; 0x2c
 8080c60:	f003 fe80 	bl	8084964 <strchr>
    if (',' != *p)
 8080c64:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080c66:	4605      	mov	r5, r0
    if (',' != *p)
 8080c68:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080c6a:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080c6e:	d051      	beq.n	8080d14 <_ZN12Adafruit_GPS5parseEPc+0x578>
    {
      strncpy(degreebuff, p, 3);
 8080c70:	4631      	mov	r1, r6
 8080c72:	2203      	movs	r2, #3
 8080c74:	a801      	add	r0, sp, #4
 8080c76:	f003 fecd 	bl	8084a14 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 8080c7a:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 8080c7e:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 8080c80:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 8080c84:	f003 fd23 	bl	80846ce <atol>
 8080c88:	4f51      	ldr	r7, [pc, #324]	; (8080dd0 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 8080c8a:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 8080c8c:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8080c8e:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8080c90:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080c92:	a801      	add	r0, sp, #4
 8080c94:	f003 febe 	bl	8084a14 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8080c98:	2204      	movs	r2, #4
 8080c9a:	4631      	mov	r1, r6
 8080c9c:	f10d 0006 	add.w	r0, sp, #6
 8080ca0:	f003 feb8 	bl	8084a14 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 8080ca4:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 8080ca6:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 8080caa:	f003 fd10 	bl	80846ce <atol>
 8080cae:	2532      	movs	r5, #50	; 0x32
 8080cb0:	4345      	muls	r5, r0
 8080cb2:	2003      	movs	r0, #3
 8080cb4:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8080cb8:	4846      	ldr	r0, [pc, #280]	; (8080dd4 <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 8080cba:	197b      	adds	r3, r7, r5
 8080cbc:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 8080cbe:	fb97 f0f0 	sdiv	r0, r7, r0
 8080cc2:	f003 fa9d 	bl	8084200 <__aeabi_i2f>
 8080cc6:	4607      	mov	r7, r0
 8080cc8:	4628      	mov	r0, r5
 8080cca:	f003 fa99 	bl	8084200 <__aeabi_i2f>
 8080cce:	4942      	ldr	r1, [pc, #264]	; (8080dd8 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8080cd0:	f003 faea 	bl	80842a8 <__aeabi_fmul>
 8080cd4:	4601      	mov	r1, r0
 8080cd6:	4638      	mov	r0, r7
 8080cd8:	f003 f9de 	bl	8084098 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8080cdc:	493f      	ldr	r1, [pc, #252]	; (8080ddc <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8080cde:	60e0      	str	r0, [r4, #12]
 8080ce0:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8080ce2:	f003 fb95 	bl	8084410 <__aeabi_fdiv>
 8080ce6:	f003 fca5 	bl	8084634 <__aeabi_f2iz>
 8080cea:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 8080cec:	2064      	movs	r0, #100	; 0x64
 8080cee:	4368      	muls	r0, r5
 8080cf0:	f003 fa86 	bl	8084200 <__aeabi_i2f>
 8080cf4:	4601      	mov	r1, r0
 8080cf6:	4638      	mov	r0, r7
 8080cf8:	f003 f9cc 	bl	8084094 <__aeabi_fsub>
 8080cfc:	4938      	ldr	r1, [pc, #224]	; (8080de0 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8080cfe:	f003 fb87 	bl	8084410 <__aeabi_fdiv>
 8080d02:	4607      	mov	r7, r0
 8080d04:	4628      	mov	r0, r5
 8080d06:	f003 fa7b 	bl	8084200 <__aeabi_i2f>
 8080d0a:	4601      	mov	r1, r0
 8080d0c:	4638      	mov	r0, r7
 8080d0e:	f003 f9c3 	bl	8084098 <__addsf3>
 8080d12:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 8080d14:	212c      	movs	r1, #44	; 0x2c
 8080d16:	4630      	mov	r0, r6
 8080d18:	f003 fe24 	bl	8084964 <strchr>
 8080d1c:	4603      	mov	r3, r0
    if (',' != *p)
 8080d1e:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 8080d20:	3001      	adds	r0, #1
    if (',' != *p)
 8080d22:	2a2c      	cmp	r2, #44	; 0x2c
 8080d24:	d010      	beq.n	8080d48 <_ZN12Adafruit_GPS5parseEPc+0x5ac>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 8080d26:	2a57      	cmp	r2, #87	; 0x57
 8080d28:	bf02      	ittt	eq
 8080d2a:	69e2      	ldreq	r2, [r4, #28]
 8080d2c:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080d30:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8080d32:	785b      	ldrb	r3, [r3, #1]
 8080d34:	2b57      	cmp	r3, #87	; 0x57
 8080d36:	d005      	beq.n	8080d44 <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == 'E') lon = 'E';
 8080d38:	2b45      	cmp	r3, #69	; 0x45
 8080d3a:	d003      	beq.n	8080d44 <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == ',') lon = 0;
 8080d3c:	2b2c      	cmp	r3, #44	; 0x2c
 8080d3e:	f47f ad50 	bne.w	80807e2 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080d42:	2300      	movs	r3, #0
 8080d44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8080d48:	212c      	movs	r1, #44	; 0x2c
 8080d4a:	f003 fe0b 	bl	8084964 <strchr>
    if (',' != *p)
 8080d4e:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8080d50:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080d52:	2b2c      	cmp	r3, #44	; 0x2c
 8080d54:	d005      	beq.n	8080d62 <_ZN12Adafruit_GPS5parseEPc+0x5c6>
    {
      speed = atof(p);
 8080d56:	4628      	mov	r0, r5
 8080d58:	f003 fcb2 	bl	80846c0 <atof>
 8080d5c:	f003 f946 	bl	8083fec <__aeabi_d2f>
 8080d60:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
 8080d62:	4628      	mov	r0, r5
 8080d64:	212c      	movs	r1, #44	; 0x2c
 8080d66:	f003 fdfd 	bl	8084964 <strchr>
    if (',' != *p)
 8080d6a:	7843      	ldrb	r3, [r0, #1]
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
 8080d6c:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080d6e:	2b2c      	cmp	r3, #44	; 0x2c
 8080d70:	d005      	beq.n	8080d7e <_ZN12Adafruit_GPS5parseEPc+0x5e2>
    {
      angle = atof(p);
 8080d72:	4628      	mov	r0, r5
 8080d74:	f003 fca4 	bl	80846c0 <atof>
 8080d78:	f003 f938 	bl	8083fec <__aeabi_d2f>
 8080d7c:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
 8080d7e:	212c      	movs	r1, #44	; 0x2c
 8080d80:	4628      	mov	r0, r5
 8080d82:	f003 fdef 	bl	8084964 <strchr>
    if (',' != *p)
 8080d86:	7843      	ldrb	r3, [r0, #1]
 8080d88:	2b2c      	cmp	r3, #44	; 0x2c
 8080d8a:	d014      	beq.n	8080db6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      uint32_t fulldate = atof(p);
 8080d8c:	3001      	adds	r0, #1
 8080d8e:	f003 fc97 	bl	80846c0 <atof>
 8080d92:	f003 f90b 	bl	8083fac <__aeabi_d2uiz>
      day = fulldate / 10000;
 8080d96:	f242 7210 	movw	r2, #10000	; 0x2710
 8080d9a:	fbb0 f3f2 	udiv	r3, r0, r2
 8080d9e:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
 8080da0:	fb02 0313 	mls	r3, r2, r3, r0
 8080da4:	2264      	movs	r2, #100	; 0x64
 8080da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8080daa:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
 8080dac:	fbb0 f3f2 	udiv	r3, r0, r2
 8080db0:	fb02 0013 	mls	r0, r2, r3, r0
 8080db4:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
 8080db6:	2001      	movs	r0, #1
  }

  return false;
}
 8080db8:	b004      	add	sp, #16
 8080dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080dbe:	bf00      	nop
 8080dc0:	08086f83 	.word	0x08086f83
 8080dc4:	08086f8a 	.word	0x08086f8a
 8080dc8:	3ff00000 	.word	0x3ff00000
 8080dcc:	408f4000 	.word	0x408f4000
 8080dd0:	00989680 	.word	0x00989680
 8080dd4:	000186a0 	.word	0x000186a0
 8080dd8:	36c9539c 	.word	0x36c9539c
 8080ddc:	42c80000 	.word	0x42c80000
 8080de0:	42700000 	.word	0x42700000

08080de4 <_GLOBAL__sub_I_line1>:
 8080de4:	f000 bbf6 	b.w	80815d4 <HAL_Pin_Map>

08080de8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8080de8:	4770      	bx	lr

08080dea <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 8080dea:	4770      	bx	lr

08080dec <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8080dec:	b538      	push	{r3, r4, r5, lr}
 8080dee:	460c      	mov	r4, r1
 8080df0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8080df2:	2228      	movs	r2, #40	; 0x28
 8080df4:	2100      	movs	r1, #0
 8080df6:	4620      	mov	r0, r4
 8080df8:	f003 fd83 	bl	8084902 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8080dfc:	220b      	movs	r2, #11
 8080dfe:	4908      	ldr	r1, [pc, #32]	; (8080e20 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 8080e00:	4620      	mov	r0, r4
 8080e02:	f003 fe07 	bl	8084a14 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8080e06:	2300      	movs	r3, #0
  sensor->version     = 1;
 8080e08:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8080e0a:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 8080e0c:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 8080e0e:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 8080e10:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 8080e12:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 8080e14:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 8080e16:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 8080e18:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 8080e1a:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 8080e1c:	6223      	str	r3, [r4, #32]
 8080e1e:	bd38      	pop	{r3, r4, r5, pc}
 8080e20:	08086ff2 	.word	0x08086ff2

08080e24 <_ZN15Adafruit_LIS3DHD0Ev>:
 8080e24:	b510      	push	{r4, lr}
 8080e26:	4604      	mov	r4, r0
 8080e28:	212c      	movs	r1, #44	; 0x2c
 8080e2a:	f002 f946 	bl	80830ba <_ZdlPvj>
 8080e2e:	4620      	mov	r0, r4
 8080e30:	bd10      	pop	{r4, pc}

08080e32 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8080e32:	6803      	ldr	r3, [r0, #0]
 8080e34:	b2c9      	uxtb	r1, r1
 8080e36:	689b      	ldr	r3, [r3, #8]
 8080e38:	4718      	bx	r3
	...

08080e3c <_ZN15Adafruit_LIS3DHC1Ea>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
 8080e3c:	4a06      	ldr	r2, [pc, #24]	; (8080e58 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 8080e3e:	7741      	strb	r1, [r0, #29]
 8080e40:	6002      	str	r2, [r0, #0]
 8080e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080e46:	6182      	str	r2, [r0, #24]
 8080e48:	7782      	strb	r2, [r0, #30]
 8080e4a:	21ff      	movs	r1, #255	; 0xff
 8080e4c:	f880 2020 	strb.w	r2, [r0, #32]
 8080e50:	2211      	movs	r2, #17
 8080e52:	77c1      	strb	r1, [r0, #31]
 8080e54:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8080e56:	4770      	bx	lr
 8080e58:	08087004 	.word	0x08087004

08080e5c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080e60:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080e64:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080e66:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080e68:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080e6a:	d106      	bne.n	8080e7a <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    return SPI.transfer(x);
 8080e6c:	f002 f900 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
 8080e70:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8080e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
    return SPI.transfer(x);
 8080e76:	f001 bc10 	b.w	808269a <_ZN8SPIClass8transferEh>
 8080e7a:	2607      	movs	r6, #7
 8080e7c:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 8080e7e:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 8080e82:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8080e86:	2100      	movs	r1, #0
 8080e88:	b280      	uxth	r0, r0
 8080e8a:	f002 f83a 	bl	8082f02 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 8080e8e:	f995 001e 	ldrsb.w	r0, [r5, #30]
 8080e92:	fa08 f106 	lsl.w	r1, r8, r6
 8080e96:	4039      	ands	r1, r7
 8080e98:	b280      	uxth	r0, r0
 8080e9a:	f002 f832 	bl	8082f02 <digitalWrite>
    digitalWrite(_sck, HIGH);
 8080e9e:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8080ea2:	2101      	movs	r1, #1
 8080ea4:	b280      	uxth	r0, r0
 8080ea6:	f002 f82c 	bl	8082f02 <digitalWrite>
    if (digitalRead(_miso))
 8080eaa:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8080eae:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8080eb0:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8080eb2:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8080eb4:	f002 f83e 	bl	8082f34 <digitalRead>
 8080eb8:	b108      	cbz	r0, 8080ebe <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 8080eba:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8080ebe:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8080ec2:	d2de      	bcs.n	8080e82 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8080ec4:	4620      	mov	r0, r4
 8080ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08080ecc <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 8080ecc:	b508      	push	{r3, lr}
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
 8080ece:	f002 f8cf 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
 8080ed2:	2101      	movs	r1, #1
 8080ed4:	f001 fb7a 	bl	80825cc <_ZN8SPIClass11setBitOrderEh>
    SPI.setClockSpeed(500000);
 8080ed8:	f002 f8ca 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
 8080edc:	4905      	ldr	r1, [pc, #20]	; (8080ef4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 8080ede:	2201      	movs	r2, #1
 8080ee0:	f001 fbaa 	bl	8082638 <_ZN8SPIClass13setClockSpeedEjj>
    SPI.setDataMode(SPI_MODE0);
 8080ee4:	f002 f8c4 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8080ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void Adafruit_LIS3DH::beginTransaction() {
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
 8080eec:	2100      	movs	r1, #0
 8080eee:	f001 bb7d 	b.w	80825ec <_ZN8SPIClass11setDataModeEh>
 8080ef2:	bf00      	nop
 8080ef4:	0007a120 	.word	0x0007a120

08080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080ef8:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 8080efa:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080efe:	4604      	mov	r4, r0
  if (_cs == -1) {
 8080f00:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080f02:	460e      	mov	r6, r1
 8080f04:	4615      	mov	r5, r2
  if (_cs == -1) {
 8080f06:	d116      	bne.n	8080f36 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8080f08:	f002 f84e 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f0c:	7f21      	ldrb	r1, [r4, #28]
 8080f0e:	f001 f9ca 	bl	80822a6 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8080f12:	f002 f849 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f16:	6803      	ldr	r3, [r0, #0]
 8080f18:	4631      	mov	r1, r6
 8080f1a:	689b      	ldr	r3, [r3, #8]
 8080f1c:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8080f1e:	f002 f843 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f22:	6803      	ldr	r3, [r0, #0]
 8080f24:	4629      	mov	r1, r5
 8080f26:	689b      	ldr	r3, [r3, #8]
 8080f28:	4798      	blx	r3
    Wire.endTransmission();
 8080f2a:	f002 f83d 	bl	8082fa8 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8080f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 8080f32:	f001 b9c3 	b.w	80822bc <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 8080f36:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8080f3a:	3301      	adds	r3, #1
 8080f3c:	d101      	bne.n	8080f42 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 8080f3e:	f7ff ffc5 	bl	8080ecc <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 8080f42:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080f46:	2100      	movs	r1, #0
 8080f48:	b280      	uxth	r0, r0
 8080f4a:	f001 ffda 	bl	8082f02 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 8080f4e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 8080f52:	4620      	mov	r0, r4
 8080f54:	f7ff ff82 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8080f58:	4629      	mov	r1, r5
 8080f5a:	4620      	mov	r0, r4
 8080f5c:	f7ff ff7e 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 8080f60:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080f64:	2101      	movs	r1, #1
 8080f66:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8080f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
 8080f6c:	f001 bfc9 	b.w	8082f02 <digitalWrite>

08080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080f70:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 8080f72:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080f76:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 8080f78:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080f7a:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 8080f7c:	d11c      	bne.n	8080fb8 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
 8080f7e:	f002 f813 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f82:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8080f86:	f001 f992 	bl	80822ae <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8080f8a:	f002 f80d 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f8e:	6803      	ldr	r3, [r0, #0]
 8080f90:	4629      	mov	r1, r5
 8080f92:	689b      	ldr	r3, [r3, #8]
 8080f94:	4798      	blx	r3
    Wire.endTransmission();
 8080f96:	f002 f807 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080f9a:	f001 f98f 	bl	80822bc <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 8080f9e:	f002 f803 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080fa2:	2201      	movs	r2, #1
 8080fa4:	7f21      	ldrb	r1, [r4, #28]
 8080fa6:	f001 f97b 	bl	80822a0 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8080faa:	f001 fffd 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8080fae:	6803      	ldr	r3, [r0, #0]
 8080fb0:	695b      	ldr	r3, [r3, #20]
 8080fb2:	4798      	blx	r3
 8080fb4:	b2c5      	uxtb	r5, r0
 8080fb6:	e01b      	b.n	8080ff0 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 8080fb8:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8080fbc:	3301      	adds	r3, #1
 8080fbe:	d101      	bne.n	8080fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
 8080fc0:	f7ff ff84 	bl	8080ecc <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 8080fc4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080fc8:	2100      	movs	r1, #0
 8080fca:	b280      	uxth	r0, r0
 8080fcc:	f001 ff99 	bl	8082f02 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 8080fd0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8080fd4:	4620      	mov	r0, r4
 8080fd6:	f7ff ff41 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 8080fda:	2100      	movs	r1, #0
 8080fdc:	4620      	mov	r0, r4
 8080fde:	f7ff ff3d 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 8080fe2:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 8080fe4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080fe8:	2101      	movs	r1, #1
 8080fea:	b280      	uxth	r0, r0
 8080fec:	f001 ff89 	bl	8082f02 <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 8080ff0:	4628      	mov	r0, r5
 8080ff2:	bd38      	pop	{r3, r4, r5, pc}

08080ff4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 8080ff4:	b538      	push	{r3, r4, r5, lr}
 8080ff6:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8080ff8:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 8080ffa:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8080ffc:	f7ff ffb8 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
 8081000:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8081004:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8081008:	b2d2      	uxtb	r2, r2
 808100a:	4620      	mov	r0, r4
}
 808100c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8081010:	2123      	movs	r1, #35	; 0x23
 8081012:	f7ff bf71 	b.w	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08081016 <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 8081016:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8081018:	2123      	movs	r1, #35	; 0x23
 808101a:	f7ff ffa9 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 808101e:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8081022:	bd08      	pop	{r3, pc}

08081024 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 8081024:	b538      	push	{r3, r4, r5, lr}
 8081026:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8081028:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 808102a:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 808102c:	f7ff ffa0 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
 8081030:	f000 000f 	and.w	r0, r0, #15
 8081034:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8081038:	b2d2      	uxtb	r2, r2
 808103a:	4620      	mov	r0, r4
}
 808103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8081040:	2120      	movs	r1, #32
 8081042:	f7ff bf59 	b.w	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08081046 <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 8081046:	b510      	push	{r4, lr}
 8081048:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 808104a:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
 808104c:	f990 001d 	ldrsb.w	r0, [r0, #29]
 8081050:	1c42      	adds	r2, r0, #1
 8081052:	d104      	bne.n	808105e <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
 8081054:	f001 ffa8 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081058:	f001 f8ee 	bl	8082238 <_ZN7TwoWire5beginEv>
 808105c:	e022      	b.n	80810a4 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
  } else {
    digitalWrite(_cs, HIGH);
 808105e:	2101      	movs	r1, #1
 8081060:	b280      	uxth	r0, r0
 8081062:	f001 ff4e 	bl	8082f02 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8081066:	f994 001d 	ldrsb.w	r0, [r4, #29]
 808106a:	2101      	movs	r1, #1
 808106c:	b280      	uxth	r0, r0
 808106e:	f001 ff37 	bl	8082ee0 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
 8081072:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8081076:	1c43      	adds	r3, r0, #1
 8081078:	d104      	bne.n	8081084 <_ZN15Adafruit_LIS3DH5beginEh+0x3e>
      // hardware SPI
      SPI.begin();
 808107a:	f001 fff9 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
 808107e:	f001 fa95 	bl	80825ac <_ZN8SPIClass5beginEv>
 8081082:	e00f      	b.n	80810a4 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
 8081084:	2101      	movs	r1, #1
 8081086:	b280      	uxth	r0, r0
 8081088:	f001 ff2a 	bl	8082ee0 <pinMode>
      pinMode(_mosi, OUTPUT);
 808108c:	f994 001e 	ldrsb.w	r0, [r4, #30]
 8081090:	2101      	movs	r1, #1
 8081092:	b280      	uxth	r0, r0
 8081094:	f001 ff24 	bl	8082ee0 <pinMode>
      pinMode(_miso, INPUT);
 8081098:	f994 001f 	ldrsb.w	r0, [r4, #31]
 808109c:	2100      	movs	r1, #0
 808109e:	b280      	uxth	r0, r0
 80810a0:	f001 ff1e 	bl	8082ee0 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 80810a4:	210f      	movs	r1, #15
 80810a6:	4620      	mov	r0, r4
 80810a8:	f7ff ff62 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 80810ac:	2833      	cmp	r0, #51	; 0x33
 80810ae:	d119      	bne.n	80810e4 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 80810b0:	2207      	movs	r2, #7
 80810b2:	4620      	mov	r0, r4
 80810b4:	2120      	movs	r1, #32
 80810b6:	f7ff ff1f 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
 80810ba:	4620      	mov	r0, r4
 80810bc:	2107      	movs	r1, #7
 80810be:	f7ff ffb1 	bl	8081024 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 80810c2:	4620      	mov	r0, r4
 80810c4:	2288      	movs	r2, #136	; 0x88
 80810c6:	2123      	movs	r1, #35	; 0x23
 80810c8:	f7ff ff16 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 80810cc:	4620      	mov	r0, r4
 80810ce:	2210      	movs	r2, #16
 80810d0:	2122      	movs	r1, #34	; 0x22
 80810d2:	f7ff ff11 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 80810d6:	4620      	mov	r0, r4
 80810d8:	2280      	movs	r2, #128	; 0x80
 80810da:	211f      	movs	r1, #31
 80810dc:	f7ff ff0c 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
 80810e0:	2001      	movs	r0, #1
 80810e2:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 80810e4:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
 80810e6:	bd10      	pop	{r4, pc}

080810e8 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>:

    The movementThreshold value default is 16. Lower values are more sensitive.
*/
/**************************************************************************/

bool Adafruit_LIS3DH::setupLowPowerWakeMode(uint8_t movementThreshold) {
 80810e8:	b538      	push	{r3, r4, r5, lr}
 80810ea:	4604      	mov	r4, r0
 80810ec:	460d      	mov	r5, r1

	// Enable 10 Hz, low power, with XYZ detection enabled
	writeRegister8(LIS3DH_REG_CTRL1, LIS3DH_CTRL_REG1_ODR1 | LIS3DH_CTRL_REG1_LPEN | LIS3DH_CTRL_REG1_ZEN | LIS3DH_CTRL_REG1_YEN | LIS3DH_CTRL_REG1_XEN);
 80810ee:	222f      	movs	r2, #47	; 0x2f
 80810f0:	2120      	movs	r1, #32
 80810f2:	f7ff ff01 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// High pass filters disabled
	// Enable reference mode LIS3DH_CTRL_REG2_HPM0 | LIS3DH_CTRL_REG2_HPIS1
	// Tried enabling CTRL_REG2_HPM0 | CTRL_REG2_HPM1 for auto-reset, did not seem to help
	writeRegister8(LIS3DH_REG_CTRL2, 0);
 80810f6:	2200      	movs	r2, #0
 80810f8:	2121      	movs	r1, #33	; 0x21
 80810fa:	4620      	mov	r0, r4
 80810fc:	f7ff fefc 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Enable INT1
	writeRegister8(LIS3DH_REG_CTRL3, LIS3DH_CTRL_REG3_I1_INT1);
 8081100:	2240      	movs	r2, #64	; 0x40
 8081102:	2122      	movs	r1, #34	; 0x22
 8081104:	4620      	mov	r0, r4
 8081106:	f7ff fef7 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Disable high resolution mode
	writeRegister8(LIS3DH_REG_CTRL4, 0);
 808110a:	2200      	movs	r2, #0
 808110c:	2123      	movs	r1, #35	; 0x23
 808110e:	4620      	mov	r0, r4
 8081110:	f7ff fef2 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Page 12 of the app note says to do this last, but page 25 says to do them in order.
	// Disable FIFO, enable latch interrupt on INT1_SRC
	writeRegister8(LIS3DH_REG_CTRL5, LIS3DH_CTRL_REG5_LIR_INT1);
 8081114:	2208      	movs	r2, #8
 8081116:	2124      	movs	r1, #36	; 0x24
 8081118:	4620      	mov	r0, r4
 808111a:	f7ff feed 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// CTRL_REG6_H_LACTIVE means active low, not needed here
	writeRegister8(LIS3DH_REG_CTRL6, 0);
 808111e:	2200      	movs	r2, #0
 8081120:	2125      	movs	r1, #37	; 0x25
 8081122:	4620      	mov	r0, r4
 8081124:	f7ff fee8 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// In normal mode, reading the reference register sets it for the current normal force
	// (the normal force of gravity acting on the device)
	readRegister8(LIS3DH_REG_REFERENCE);
 8081128:	2126      	movs	r1, #38	; 0x26
 808112a:	4620      	mov	r0, r4
 808112c:	f7ff ff20 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>

	// 250 mg threshold = 16
	writeRegister8(LIS3DH_REG_INT1THS, movementThreshold);
 8081130:	462a      	mov	r2, r5
 8081132:	2132      	movs	r1, #50	; 0x32
 8081134:	4620      	mov	r0, r4
 8081136:	f7ff fedf 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	//
	writeRegister8(LIS3DH_REG_INT1DUR, 0);
 808113a:	2200      	movs	r2, #0
 808113c:	2133      	movs	r1, #51	; 0x33
 808113e:	4620      	mov	r0, r4
 8081140:	f7ff feda 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>


	if (intPin >= 0) {
 8081144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081146:	2b00      	cmp	r3, #0
 8081148:	db0b      	blt.n	8081162 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x7a>
		// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
		// interrupt for me.

		// Remember the INT1_CFG setting because we're apparently supposed to set it again after
		// clearing an interrupt.
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
 808114a:	220a      	movs	r2, #10
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 808114c:	4620      	mov	r0, r4
		// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
		// interrupt for me.

		// Remember the INT1_CFG setting because we're apparently supposed to set it again after
		// clearing an interrupt.
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
 808114e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 8081152:	2130      	movs	r1, #48	; 0x30
 8081154:	f7ff fed0 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

		// Clear the interrupt just in case
		readRegister8(LIS3DH_REG_INT1SRC);
 8081158:	2131      	movs	r1, #49	; 0x31
 808115a:	4620      	mov	r0, r4
 808115c:	f7ff ff08 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
 8081160:	e006      	b.n	8081170 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x88>
	}
	else {
		int1_cfg = 0;
 8081162:	2200      	movs	r2, #0
 8081164:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, 0);
 8081168:	2130      	movs	r1, #48	; 0x30
 808116a:	4620      	mov	r0, r4
 808116c:	f7ff fec4 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	}

	return true;
}
 8081170:	2001      	movs	r0, #1
 8081172:	bd38      	pop	{r3, r4, r5, pc}

08081174 <_ZN15Adafruit_LIS3DH14clearInterruptEv>:
    the interrupt on the WKP pin. Manual reset mode is used so you can tell the
    difference between timeout and movement wakeup when using stop mode sleep.
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::clearInterrupt() {
 8081174:	b538      	push	{r3, r4, r5, lr}
 8081176:	4604      	mov	r4, r0
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);
 8081178:	2131      	movs	r1, #49	; 0x31
 808117a:	f7ff fef9 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>

	if (intPin >= 0) {
 808117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    difference between timeout and movement wakeup when using stop mode sleep.
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::clearInterrupt() {
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);
 8081180:	4605      	mov	r5, r0

	if (intPin >= 0) {
 8081182:	2b00      	cmp	r3, #0
 8081184:	db12      	blt.n	80811ac <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x38>
		while(digitalRead(intPin) == HIGH) {
 8081186:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8081188:	f001 fed4 	bl	8082f34 <digitalRead>
 808118c:	2801      	cmp	r0, #1
 808118e:	d10d      	bne.n	80811ac <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x38>
			delay(10);
 8081190:	200a      	movs	r0, #10
 8081192:	f000 fc85 	bl	8081aa0 <delay>
			readRegister8(LIS3DH_REG_INT1SRC);
 8081196:	2131      	movs	r1, #49	; 0x31
 8081198:	4620      	mov	r0, r4
 808119a:	f7ff fee9 	bl	8080f70 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
			writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 808119e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80811a2:	2130      	movs	r1, #48	; 0x30
 80811a4:	4620      	mov	r0, r4
 80811a6:	f7ff fea7 	bl	8080ef8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

uint8_t Adafruit_LIS3DH::clearInterrupt() {
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);

	if (intPin >= 0) {
		while(digitalRead(intPin) == HIGH) {
 80811aa:	e7ec      	b.n	8081186 <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x12>
			writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
		}
	}

	return int1_src;
}
 80811ac:	4628      	mov	r0, r5
 80811ae:	bd38      	pop	{r3, r4, r5, pc}

080811b0 <_ZN15Adafruit_LIS3DH4readEv>:

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80811b0:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 80811b2:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80811b6:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 80811b8:	3301      	adds	r3, #1
 80811ba:	d142      	bne.n	8081242 <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
 80811bc:	f001 fef4 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811c0:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80811c4:	f001 f873 	bl	80822ae <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 80811c8:	f001 feee 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811cc:	21a8      	movs	r1, #168	; 0xa8
 80811ce:	f7ff fe30 	bl	8080e32 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 80811d2:	f001 fee9 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811d6:	f001 f871 	bl	80822bc <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 80811da:	f001 fee5 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811de:	2206      	movs	r2, #6
 80811e0:	7f21      	ldrb	r1, [r4, #28]
 80811e2:	f001 f85d 	bl	80822a0 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 80811e6:	f001 fedf 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811ea:	6803      	ldr	r3, [r0, #0]
 80811ec:	695b      	ldr	r3, [r3, #20]
 80811ee:	4798      	blx	r3
 80811f0:	80e0      	strh	r0, [r4, #6]
 80811f2:	f001 fed9 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80811f6:	6803      	ldr	r3, [r0, #0]
 80811f8:	695b      	ldr	r3, [r3, #20]
 80811fa:	4798      	blx	r3
 80811fc:	88e3      	ldrh	r3, [r4, #6]
 80811fe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8081202:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 8081204:	f001 fed0 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081208:	6803      	ldr	r3, [r0, #0]
 808120a:	695b      	ldr	r3, [r3, #20]
 808120c:	4798      	blx	r3
 808120e:	8120      	strh	r0, [r4, #8]
 8081210:	f001 feca 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081214:	6803      	ldr	r3, [r0, #0]
 8081216:	695b      	ldr	r3, [r3, #20]
 8081218:	4798      	blx	r3
 808121a:	8923      	ldrh	r3, [r4, #8]
 808121c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8081220:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 8081222:	f001 fec1 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081226:	6803      	ldr	r3, [r0, #0]
 8081228:	695b      	ldr	r3, [r3, #20]
 808122a:	4798      	blx	r3
 808122c:	8160      	strh	r0, [r4, #10]
 808122e:	f001 febb 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081232:	6803      	ldr	r3, [r0, #0]
 8081234:	695b      	ldr	r3, [r3, #20]
 8081236:	4798      	blx	r3
 8081238:	8963      	ldrh	r3, [r4, #10]
 808123a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808123e:	8160      	strh	r0, [r4, #10]
 8081240:	e03c      	b.n	80812bc <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 8081242:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8081246:	3301      	adds	r3, #1
 8081248:	d101      	bne.n	808124e <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
 808124a:	f7ff fe3f 	bl	8080ecc <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 808124e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8081252:	2100      	movs	r1, #0
 8081254:	b280      	uxth	r0, r0
 8081256:	f001 fe54 	bl	8082f02 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 808125a:	21e8      	movs	r1, #232	; 0xe8
 808125c:	4620      	mov	r0, r4
 808125e:	f7ff fdfd 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8081262:	21ff      	movs	r1, #255	; 0xff
 8081264:	4620      	mov	r0, r4
 8081266:	f7ff fdf9 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 808126a:	21ff      	movs	r1, #255	; 0xff
 808126c:	80e0      	strh	r0, [r4, #6]
 808126e:	4620      	mov	r0, r4
 8081270:	f7ff fdf4 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 8081274:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8081276:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8081278:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808127c:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808127e:	4620      	mov	r0, r4
 8081280:	f7ff fdec 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 8081284:	21ff      	movs	r1, #255	; 0xff
 8081286:	8120      	strh	r0, [r4, #8]
 8081288:	4620      	mov	r0, r4
 808128a:	f7ff fde7 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 808128e:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8081290:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8081292:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8081296:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8081298:	4620      	mov	r0, r4
 808129a:	f7ff fddf 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 808129e:	21ff      	movs	r1, #255	; 0xff
 80812a0:	8160      	strh	r0, [r4, #10]
 80812a2:	4620      	mov	r0, r4
 80812a4:	f7ff fdda 	bl	8080e5c <_ZN15Adafruit_LIS3DH7spixferEh>
 80812a8:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 80812aa:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80812ac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80812b0:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 80812b2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80812b6:	b280      	uxth	r0, r0
 80812b8:	f001 fe23 	bl	8082f02 <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 80812bc:	4620      	mov	r0, r4
 80812be:	f7ff feaa 	bl	8081016 <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80812c2:	2803      	cmp	r0, #3
 80812c4:	d009      	beq.n	80812da <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80812c6:	2802      	cmp	r0, #2
 80812c8:	d00a      	beq.n	80812e0 <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80812ca:	2801      	cmp	r0, #1
 80812cc:	d00b      	beq.n	80812e6 <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80812ce:	2800      	cmp	r0, #0
 80812d0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80812d4:	bf18      	it	ne
 80812d6:	2001      	movne	r0, #1
 80812d8:	e007      	b.n	80812ea <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80812da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80812de:	e004      	b.n	80812ea <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80812e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80812e4:	e001      	b.n	80812ea <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80812e6:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 80812ea:	f002 ff89 	bl	8084200 <__aeabi_i2f>
 80812ee:	4605      	mov	r5, r0
 80812f0:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80812f4:	f002 ff84 	bl	8084200 <__aeabi_i2f>
 80812f8:	4629      	mov	r1, r5
 80812fa:	f003 f889 	bl	8084410 <__aeabi_fdiv>
 80812fe:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 8081300:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8081304:	f002 ff7c 	bl	8084200 <__aeabi_i2f>
 8081308:	4629      	mov	r1, r5
 808130a:	f003 f881 	bl	8084410 <__aeabi_fdiv>
 808130e:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 8081310:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8081314:	f002 ff74 	bl	8084200 <__aeabi_i2f>
 8081318:	4629      	mov	r1, r5
 808131a:	f003 f879 	bl	8084410 <__aeabi_fdiv>
 808131e:	6160      	str	r0, [r4, #20]
 8081320:	bd38      	pop	{r3, r4, r5, pc}

08081322 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 8081322:	b570      	push	{r4, r5, r6, lr}
 8081324:	460c      	mov	r4, r1
 8081326:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8081328:	2624      	movs	r6, #36	; 0x24
 808132a:	4632      	mov	r2, r6
 808132c:	2100      	movs	r1, #0
 808132e:	4620      	mov	r0, r4
 8081330:	f003 fae7 	bl	8084902 <memset>

  event->version   = sizeof(sensors_event_t);
 8081334:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 8081336:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();
 8081338:	4628      	mov	r0, r5
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 808133a:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 808133c:	2301      	movs	r3, #1
 808133e:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
 8081340:	2300      	movs	r3, #0
 8081342:	6123      	str	r3, [r4, #16]

  read();
 8081344:	f7ff ff34 	bl	80811b0 <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 8081348:	68eb      	ldr	r3, [r5, #12]
 808134a:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 808134c:	692b      	ldr	r3, [r5, #16]
 808134e:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 8081350:	696b      	ldr	r3, [r5, #20]
 8081352:	61e3      	str	r3, [r4, #28]
}
 8081354:	bd70      	pop	{r4, r5, r6, pc}

08081356 <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 8081356:	f000 b93d 	b.w	80815d4 <HAL_Pin_Map>

0808135a <_ZN12AssetTrackerC1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker::AssetTracker() {

}
 808135a:	4770      	bx	lr

0808135c <_ZN12AssetTracker5beginEv>:

void AssetTracker::begin() {
 808135c:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 808135e:	4c07      	ldr	r4, [pc, #28]	; (808137c <_ZN12AssetTracker5beginEv+0x20>)
 8081360:	2118      	movs	r1, #24
 8081362:	4620      	mov	r0, r4
 8081364:	f7ff fe6f 	bl	8081046 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 8081368:	4620      	mov	r0, r4
 808136a:	2109      	movs	r1, #9
 808136c:	f7ff fe5a 	bl	8081024 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 8081370:	4620      	mov	r0, r4

    // Turn on the GPS module
    // gpsOn();
}
 8081372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 8081376:	2101      	movs	r1, #1
 8081378:	f7ff be3c 	b.w	8080ff4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 808137c:	200003ac 	.word	0x200003ac

08081380 <_ZN12AssetTracker7readLatEv>:
    // gpsOn();
}

float AssetTracker::readLat() {
    return gps.latitude;
}
 8081380:	4b01      	ldr	r3, [pc, #4]	; (8081388 <_ZN12AssetTracker7readLatEv+0x8>)
 8081382:	6898      	ldr	r0, [r3, #8]
 8081384:	4770      	bx	lr
 8081386:	bf00      	nop
 8081388:	200003d8 	.word	0x200003d8

0808138c <_ZN12AssetTracker7readLonEv>:

float AssetTracker::readLon() {
    return gps.longitude;
}
 808138c:	4b01      	ldr	r3, [pc, #4]	; (8081394 <_ZN12AssetTracker7readLonEv+0x8>)
 808138e:	68d8      	ldr	r0, [r3, #12]
 8081390:	4770      	bx	lr
 8081392:	bf00      	nop
 8081394:	200003d8 	.word	0x200003d8

08081398 <_ZN12AssetTracker5gpsOnEv>:
String AssetTracker::readLatLon() {
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
    return latLon;
}

void AssetTracker::gpsOn() {
 8081398:	b538      	push	{r3, r4, r5, lr}
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 808139a:	2101      	movs	r1, #1
 808139c:	2006      	movs	r0, #6
 808139e:	f001 fd9f 	bl	8082ee0 <pinMode>
    digitalWrite(D6,LOW);
 80813a2:	2100      	movs	r1, #0
 80813a4:	2006      	movs	r0, #6
 80813a6:	f001 fdac 	bl	8082f02 <digitalWrite>
    gps.begin(9600);
 80813aa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80813ae:	4816      	ldr	r0, [pc, #88]	; (8081408 <_ZN12AssetTracker5gpsOnEv+0x70>)
 80813b0:	f7ff f9c8 	bl	8080744 <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 80813b4:	4915      	ldr	r1, [pc, #84]	; (808140c <_ZN12AssetTracker5gpsOnEv+0x74>)
 80813b6:	4814      	ldr	r0, [pc, #80]	; (8081408 <_ZN12AssetTracker5gpsOnEv+0x70>)
 80813b8:	f7ff f9cd 	bl	8080756 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80813bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80813c0:	f000 fb6e 	bl	8081aa0 <delay>
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 80813c4:	4912      	ldr	r1, [pc, #72]	; (8081410 <_ZN12AssetTracker5gpsOnEv+0x78>)
 80813c6:	4810      	ldr	r0, [pc, #64]	; (8081408 <_ZN12AssetTracker5gpsOnEv+0x70>)
 80813c8:	f7ff f9c5 	bl	8080756 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80813cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80813d0:	f000 fb66 	bl	8081aa0 <delay>
    gps.sendCommand(PGCMD_NOANTENNA);
 80813d4:	490f      	ldr	r1, [pc, #60]	; (8081414 <_ZN12AssetTracker5gpsOnEv+0x7c>)
 80813d6:	480c      	ldr	r0, [pc, #48]	; (8081408 <_ZN12AssetTracker5gpsOnEv+0x70>)
 80813d8:	f7ff f9bd 	bl	8080756 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80813dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80813e0:	f000 fb5e 	bl	8081aa0 <delay>
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 80813e4:	4d0c      	ldr	r5, [pc, #48]	; (8081418 <_ZN12AssetTracker5gpsOnEv+0x80>)
    delay(500);
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
 80813e6:	2400      	movs	r4, #0
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 80813e8:	f001 fb6c 	bl	8082ac4 <_Z22__fetch_global_Serial1v>
 80813ec:	6803      	ldr	r3, [r0, #0]
 80813ee:	5d29      	ldrb	r1, [r5, r4]
 80813f0:	689b      	ldr	r3, [r3, #8]
 80813f2:	3401      	adds	r4, #1
 80813f4:	4798      	blx	r3
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
 80813f6:	2c0c      	cmp	r4, #12
 80813f8:	d1f6      	bne.n	80813e8 <_ZN12AssetTracker5gpsOnEv+0x50>
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 80813fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80813fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 8081402:	f000 bb4d 	b.w	8081aa0 <delay>
 8081406:	bf00      	nop
 8081408:	200003d8 	.word	0x200003d8
 808140c:	0808701e 	.word	0x0808701e
 8081410:	08087050 	.word	0x08087050
 8081414:	08087061 	.word	0x08087061
 8081418:	20000135 	.word	0x20000135

0808141c <_ZN12AssetTracker6gpsFixEv>:

char* AssetTracker::preNMEA() {
    return gps.lastNMEA();
}

bool AssetTracker::gpsFix() {
 808141c:	b570      	push	{r4, r5, r6, lr}
    if ((gps.latitude == 0.0) || (gps.longitude == 0.0)){
 808141e:	4e09      	ldr	r6, [pc, #36]	; (8081444 <_ZN12AssetTracker6gpsFixEv+0x28>)
 8081420:	2100      	movs	r1, #0
 8081422:	68b0      	ldr	r0, [r6, #8]
 8081424:	f003 f8d4 	bl	80845d0 <__aeabi_fcmpeq>
 8081428:	4605      	mov	r5, r0
 808142a:	b948      	cbnz	r0, 8081440 <_ZN12AssetTracker6gpsFixEv+0x24>
 808142c:	2100      	movs	r1, #0
 808142e:	68f0      	ldr	r0, [r6, #12]
 8081430:	f04f 0401 	mov.w	r4, #1
 8081434:	f003 f8cc 	bl	80845d0 <__aeabi_fcmpeq>
 8081438:	b100      	cbz	r0, 808143c <_ZN12AssetTracker6gpsFixEv+0x20>
 808143a:	462c      	mov	r4, r5
 808143c:	b2e0      	uxtb	r0, r4
 808143e:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8081440:	2000      	movs	r0, #0
    } else {
        return true;
    }
    //return gps.fix;
}
 8081442:	bd70      	pop	{r4, r5, r6, pc}
 8081444:	200003d8 	.word	0x200003d8

08081448 <_ZN12AssetTracker9updateGPSEv>:
// char AssetTracker::checkGPS(){
//     char c = gps.read();
//     return c;
// }

void AssetTracker::updateGPS() {
 8081448:	b508      	push	{r3, lr}
  //     // this also sets the newNMEAreceived() flag to false
  //     return;  // we can fail to parse a sentence in which case we should just wait for another
  //   }
  // }
  //read the complete sentence
  while (Serial1.available()) {
 808144a:	f001 fb3b 	bl	8082ac4 <_Z22__fetch_global_Serial1v>
 808144e:	6803      	ldr	r3, [r0, #0]
 8081450:	691b      	ldr	r3, [r3, #16]
 8081452:	4798      	blx	r3
 8081454:	b178      	cbz	r0, 8081476 <_ZN12AssetTracker9updateGPSEv+0x2e>
        char c = gps.read();
 8081456:	4808      	ldr	r0, [pc, #32]	; (8081478 <_ZN12AssetTracker9updateGPSEv+0x30>)
 8081458:	f7ff f8ee 	bl	8080638 <_ZN12Adafruit_GPS4readEv>
        if (gps.newNMEAreceived()) {
 808145c:	4806      	ldr	r0, [pc, #24]	; (8081478 <_ZN12AssetTracker9updateGPSEv+0x30>)
 808145e:	f7ff f97d 	bl	808075c <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 8081462:	2800      	cmp	r0, #0
 8081464:	d0f1      	beq.n	808144a <_ZN12AssetTracker9updateGPSEv+0x2>
            gps.parse(gps.lastNMEA());
 8081466:	4804      	ldr	r0, [pc, #16]	; (8081478 <_ZN12AssetTracker9updateGPSEv+0x30>)
 8081468:	f7ff f97e 	bl	8080768 <_ZN12Adafruit_GPS8lastNMEAEv>
 808146c:	4601      	mov	r1, r0
 808146e:	4802      	ldr	r0, [pc, #8]	; (8081478 <_ZN12AssetTracker9updateGPSEv+0x30>)
 8081470:	f7ff f994 	bl	808079c <_ZN12Adafruit_GPS5parseEPc>
 8081474:	e7e9      	b.n	808144a <_ZN12AssetTracker9updateGPSEv+0x2>
 8081476:	bd08      	pop	{r3, pc}
 8081478:	200003d8 	.word	0x200003d8

0808147c <_ZN12AssetTracker21setupLowPowerWakeModeEh>:
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
    return magnitude;
}

bool AssetTracker::setupLowPowerWakeMode(uint8_t movementThreshold) {
	return accel.setupLowPowerWakeMode(movementThreshold);
 808147c:	4801      	ldr	r0, [pc, #4]	; (8081484 <_ZN12AssetTracker21setupLowPowerWakeModeEh+0x8>)
 808147e:	f7ff be33 	b.w	80810e8 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>
 8081482:	bf00      	nop
 8081484:	200003ac 	.word	0x200003ac

08081488 <_ZN12AssetTracker19clearAccelInterruptEv>:
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
 8081488:	4801      	ldr	r0, [pc, #4]	; (8081490 <_ZN12AssetTracker19clearAccelInterruptEv+0x8>)
 808148a:	f7ff be73 	b.w	8081174 <_ZN15Adafruit_LIS3DH14clearInterruptEv>
 808148e:	bf00      	nop
 8081490:	200003ac 	.word	0x200003ac

08081494 <_GLOBAL__sub_I_gps>:
}
 8081494:	b510      	push	{r4, lr}
 8081496:	f000 f89d 	bl	80815d4 <HAL_Pin_Map>
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 808149a:	f001 fb13 	bl	8082ac4 <_Z22__fetch_global_Serial1v>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 808149e:	4c08      	ldr	r4, [pc, #32]	; (80814c0 <_GLOBAL__sub_I_gps+0x2c>)
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80814a0:	4601      	mov	r1, r0
 80814a2:	4808      	ldr	r0, [pc, #32]	; (80814c4 <_GLOBAL__sub_I_gps+0x30>)
 80814a4:	f7ff f948 	bl	8080738 <_ZN12Adafruit_GPSC1EP11USARTSerial>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80814a8:	210c      	movs	r1, #12
 80814aa:	4620      	mov	r0, r4
 80814ac:	f7ff fcc6 	bl	8080e3c <_ZN15Adafruit_LIS3DHC1Ea>
 80814b0:	4620      	mov	r0, r4
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 80814b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80814b6:	4a04      	ldr	r2, [pc, #16]	; (80814c8 <_GLOBAL__sub_I_gps+0x34>)
 80814b8:	4904      	ldr	r1, [pc, #16]	; (80814cc <_GLOBAL__sub_I_gps+0x38>)
 80814ba:	f001 bdf9 	b.w	80830b0 <__aeabi_atexit>
 80814be:	bf00      	nop
 80814c0:	200003ac 	.word	0x200003ac
 80814c4:	200003d8 	.word	0x200003d8
 80814c8:	20000238 	.word	0x20000238
 80814cc:	08080deb 	.word	0x08080deb

080814d0 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
 80814d0:	4770      	bx	lr

080814d2 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
 80814d2:	b538      	push	{r3, r4, r5, lr}
 80814d4:	4605      	mov	r5, r0
 80814d6:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
 80814d8:	f001 fd66 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80814dc:	7829      	ldrb	r1, [r5, #0]
 80814de:	f000 fee2 	bl	80822a6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
 80814e2:	f001 fd61 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80814e6:	0a21      	lsrs	r1, r4, #8
 80814e8:	f7ff fca3 	bl	8080e32 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
 80814ec:	f001 fd5c 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 80814f0:	b2e1      	uxtb	r1, r4
 80814f2:	f7ff fc9e 	bl	8080e32 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
 80814f6:	f001 fd57 	bl	8082fa8 <_Z19__fetch_global_Wirev>
}
 80814fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
 80814fe:	f000 bedd 	b.w	80822bc <_ZN7TwoWire15endTransmissionEv>

08081502 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
 8081502:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 8081504:	f243 01a2 	movw	r1, #12450	; 0x30a2
 8081508:	f7ff ffe3 	bl	80814d2 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
}
 808150c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
 8081510:	200a      	movs	r0, #10
 8081512:	f000 bac5 	b.w	8081aa0 <delay>

08081516 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
 8081516:	b538      	push	{r3, r4, r5, lr}
 8081518:	460d      	mov	r5, r1
 808151a:	4604      	mov	r4, r0
  Wire.begin();
 808151c:	f001 fd44 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8081520:	f000 fe8a 	bl	8082238 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
 8081524:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
 8081526:	7025      	strb	r5, [r4, #0]
  reset();
 8081528:	f7ff ffeb 	bl	8081502 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
 808152c:	2001      	movs	r0, #1
 808152e:	bd38      	pop	{r3, r4, r5, pc}

08081530 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
 8081530:	f000 b850 	b.w	80815d4 <HAL_Pin_Map>

08081534 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081534:	b508      	push	{r3, lr}
 8081536:	4b02      	ldr	r3, [pc, #8]	; (8081540 <inet_gethostbyname+0xc>)
 8081538:	681b      	ldr	r3, [r3, #0]
 808153a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808153c:	9301      	str	r3, [sp, #4]
 808153e:	bd08      	pop	{r3, pc}
 8081540:	08060020 	.word	0x08060020

08081544 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081544:	b508      	push	{r3, lr}
 8081546:	4b02      	ldr	r3, [pc, #8]	; (8081550 <os_mutex_recursive_create+0xc>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808154c:	9301      	str	r3, [sp, #4]
 808154e:	bd08      	pop	{r3, pc}
 8081550:	080401d0 	.word	0x080401d0

08081554 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081554:	b508      	push	{r3, lr}
 8081556:	4b02      	ldr	r3, [pc, #8]	; (8081560 <os_mutex_recursive_destroy+0xc>)
 8081558:	681b      	ldr	r3, [r3, #0]
 808155a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808155c:	9301      	str	r3, [sp, #4]
 808155e:	bd08      	pop	{r3, pc}
 8081560:	080401d0 	.word	0x080401d0

08081564 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8081564:	b508      	push	{r3, lr}
 8081566:	4b02      	ldr	r3, [pc, #8]	; (8081570 <os_mutex_recursive_lock+0xc>)
 8081568:	681b      	ldr	r3, [r3, #0]
 808156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808156c:	9301      	str	r3, [sp, #4]
 808156e:	bd08      	pop	{r3, pc}
 8081570:	080401d0 	.word	0x080401d0

08081574 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8081574:	b508      	push	{r3, lr}
 8081576:	4b02      	ldr	r3, [pc, #8]	; (8081580 <os_mutex_recursive_unlock+0xc>)
 8081578:	681b      	ldr	r3, [r3, #0]
 808157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808157c:	9301      	str	r3, [sp, #4]
 808157e:	bd08      	pop	{r3, pc}
 8081580:	080401d0 	.word	0x080401d0

08081584 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081584:	b508      	push	{r3, lr}
 8081586:	4b02      	ldr	r3, [pc, #8]	; (8081590 <HAL_Core_System_Reset_Ex+0xc>)
 8081588:	681b      	ldr	r3, [r3, #0]
 808158a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808158c:	9301      	str	r3, [sp, #4]
 808158e:	bd08      	pop	{r3, pc}
 8081590:	080401b8 	.word	0x080401b8

08081594 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081594:	b508      	push	{r3, lr}
 8081596:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <HAL_RNG_GetRandomNumber+0xc>)
 8081598:	681b      	ldr	r3, [r3, #0]
 808159a:	685b      	ldr	r3, [r3, #4]
 808159c:	9301      	str	r3, [sp, #4]
 808159e:	bd08      	pop	{r3, pc}
 80815a0:	0804019c 	.word	0x0804019c

080815a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80815a4:	b508      	push	{r3, lr}
 80815a6:	4b02      	ldr	r3, [pc, #8]	; (80815b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80815a8:	681b      	ldr	r3, [r3, #0]
 80815aa:	695b      	ldr	r3, [r3, #20]
 80815ac:	9301      	str	r3, [sp, #4]
 80815ae:	bd08      	pop	{r3, pc}
 80815b0:	0804019c 	.word	0x0804019c

080815b4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80815b4:	b508      	push	{r3, lr}
 80815b6:	4b02      	ldr	r3, [pc, #8]	; (80815c0 <HAL_RTC_Get_UnixTime+0xc>)
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	69db      	ldr	r3, [r3, #28]
 80815bc:	9301      	str	r3, [sp, #4]
 80815be:	bd08      	pop	{r3, pc}
 80815c0:	0804019c 	.word	0x0804019c

080815c4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <HAL_RTC_Time_Is_Valid+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	0804019c 	.word	0x0804019c

080815d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <HAL_Pin_Map+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	681b      	ldr	r3, [r3, #0]
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	080401b0 	.word	0x080401b0

080815e4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <HAL_Pin_Mode+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	689b      	ldr	r3, [r3, #8]
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401b0 	.word	0x080401b0

080815f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <HAL_Get_Pin_Mode+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	68db      	ldr	r3, [r3, #12]
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401b0 	.word	0x080401b0

08081604 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <HAL_GPIO_Write+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	691b      	ldr	r3, [r3, #16]
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401b0 	.word	0x080401b0

08081614 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <HAL_GPIO_Read+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	695b      	ldr	r3, [r3, #20]
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401b0 	.word	0x080401b0

08081624 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <HAL_I2C_Begin+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	68db      	ldr	r3, [r3, #12]
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	080401ac 	.word	0x080401ac

08081634 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <HAL_I2C_Begin_Transmission+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	699b      	ldr	r3, [r3, #24]
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	080401ac 	.word	0x080401ac

08081644 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <HAL_I2C_End_Transmission+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	69db      	ldr	r3, [r3, #28]
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	080401ac 	.word	0x080401ac

08081654 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <HAL_I2C_Write_Data+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	6a1b      	ldr	r3, [r3, #32]
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	080401ac 	.word	0x080401ac

08081664 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b02      	ldr	r3, [pc, #8]	; (8081670 <HAL_I2C_Available_Data+0xc>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	bd08      	pop	{r3, pc}
 8081670:	080401ac 	.word	0x080401ac

08081674 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081674:	b508      	push	{r3, lr}
 8081676:	4b02      	ldr	r3, [pc, #8]	; (8081680 <HAL_I2C_Read_Data+0xc>)
 8081678:	681b      	ldr	r3, [r3, #0]
 808167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808167c:	9301      	str	r3, [sp, #4]
 808167e:	bd08      	pop	{r3, pc}
 8081680:	080401ac 	.word	0x080401ac

08081684 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081684:	b508      	push	{r3, lr}
 8081686:	4b02      	ldr	r3, [pc, #8]	; (8081690 <HAL_I2C_Peek_Data+0xc>)
 8081688:	681b      	ldr	r3, [r3, #0]
 808168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808168c:	9301      	str	r3, [sp, #4]
 808168e:	bd08      	pop	{r3, pc}
 8081690:	080401ac 	.word	0x080401ac

08081694 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081694:	b508      	push	{r3, lr}
 8081696:	4b02      	ldr	r3, [pc, #8]	; (80816a0 <HAL_I2C_Flush_Data+0xc>)
 8081698:	681b      	ldr	r3, [r3, #0]
 808169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808169c:	9301      	str	r3, [sp, #4]
 808169e:	bd08      	pop	{r3, pc}
 80816a0:	080401ac 	.word	0x080401ac

080816a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80816a4:	b508      	push	{r3, lr}
 80816a6:	4b02      	ldr	r3, [pc, #8]	; (80816b0 <HAL_I2C_Is_Enabled+0xc>)
 80816a8:	681b      	ldr	r3, [r3, #0]
 80816aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80816ac:	9301      	str	r3, [sp, #4]
 80816ae:	bd08      	pop	{r3, pc}
 80816b0:	080401ac 	.word	0x080401ac

080816b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80816b4:	b508      	push	{r3, lr}
 80816b6:	4b02      	ldr	r3, [pc, #8]	; (80816c0 <HAL_I2C_Init+0xc>)
 80816b8:	681b      	ldr	r3, [r3, #0]
 80816ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80816bc:	9301      	str	r3, [sp, #4]
 80816be:	bd08      	pop	{r3, pc}
 80816c0:	080401ac 	.word	0x080401ac

080816c4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80816c4:	b508      	push	{r3, lr}
 80816c6:	4b02      	ldr	r3, [pc, #8]	; (80816d0 <HAL_I2C_Acquire+0xc>)
 80816c8:	681b      	ldr	r3, [r3, #0]
 80816ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80816cc:	9301      	str	r3, [sp, #4]
 80816ce:	bd08      	pop	{r3, pc}
 80816d0:	080401ac 	.word	0x080401ac

080816d4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80816d4:	b508      	push	{r3, lr}
 80816d6:	4b02      	ldr	r3, [pc, #8]	; (80816e0 <HAL_I2C_Release+0xc>)
 80816d8:	681b      	ldr	r3, [r3, #0]
 80816da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80816dc:	9301      	str	r3, [sp, #4]
 80816de:	bd08      	pop	{r3, pc}
 80816e0:	080401ac 	.word	0x080401ac

080816e4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80816e4:	b508      	push	{r3, lr}
 80816e6:	4b02      	ldr	r3, [pc, #8]	; (80816f0 <HAL_I2C_Request_Data_Ex+0xc>)
 80816e8:	681b      	ldr	r3, [r3, #0]
 80816ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80816ec:	9301      	str	r3, [sp, #4]
 80816ee:	bd08      	pop	{r3, pc}
 80816f0:	080401ac 	.word	0x080401ac

080816f4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <HAL_SPI_Begin+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	681b      	ldr	r3, [r3, #0]
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	080401b4 	.word	0x080401b4

08081704 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <HAL_SPI_Set_Bit_Order+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	689b      	ldr	r3, [r3, #8]
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	080401b4 	.word	0x080401b4

08081714 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <HAL_SPI_Set_Data_Mode+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	68db      	ldr	r3, [r3, #12]
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	080401b4 	.word	0x080401b4

08081724 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <HAL_SPI_Set_Clock_Divider+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	691b      	ldr	r3, [r3, #16]
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	080401b4 	.word	0x080401b4

08081734 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <HAL_SPI_Send_Receive_Data+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	695b      	ldr	r3, [r3, #20]
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	080401b4 	.word	0x080401b4

08081744 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <HAL_SPI_Init+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	69db      	ldr	r3, [r3, #28]
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	080401b4 	.word	0x080401b4

08081754 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <HAL_SPI_Is_Enabled+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	6a1b      	ldr	r3, [r3, #32]
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	080401b4 	.word	0x080401b4

08081764 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <HAL_SPI_Info+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	080401b4 	.word	0x080401b4

08081774 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <HAL_USART_Init+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	699b      	ldr	r3, [r3, #24]
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	080401c4 	.word	0x080401c4

08081784 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <HAL_USART_Write_Data+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	080401c4 	.word	0x080401c4

08081794 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <HAL_USART_Available_Data+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	080401c4 	.word	0x080401c4

080817a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <HAL_USART_Read_Data+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	080401c4 	.word	0x080401c4

080817b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b02      	ldr	r3, [pc, #8]	; (80817c0 <HAL_USART_Peek_Data+0xc>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817bc:	9301      	str	r3, [sp, #4]
 80817be:	bd08      	pop	{r3, pc}
 80817c0:	080401c4 	.word	0x080401c4

080817c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80817c4:	b508      	push	{r3, lr}
 80817c6:	4b02      	ldr	r3, [pc, #8]	; (80817d0 <HAL_USART_Flush_Data+0xc>)
 80817c8:	681b      	ldr	r3, [r3, #0]
 80817ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80817cc:	9301      	str	r3, [sp, #4]
 80817ce:	bd08      	pop	{r3, pc}
 80817d0:	080401c4 	.word	0x080401c4

080817d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80817d4:	b508      	push	{r3, lr}
 80817d6:	4b02      	ldr	r3, [pc, #8]	; (80817e0 <HAL_USART_Is_Enabled+0xc>)
 80817d8:	681b      	ldr	r3, [r3, #0]
 80817da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80817dc:	9301      	str	r3, [sp, #4]
 80817de:	bd08      	pop	{r3, pc}
 80817e0:	080401c4 	.word	0x080401c4

080817e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <HAL_USART_Available_Data_For_Write+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	080401c4 	.word	0x080401c4

080817f4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <HAL_USART_BeginConfig+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	080401c4 	.word	0x080401c4

08081804 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b02      	ldr	r3, [pc, #8]	; (8081810 <HAL_USB_USART_Init+0xc>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	681b      	ldr	r3, [r3, #0]
 808180c:	9301      	str	r3, [sp, #4]
 808180e:	bd08      	pop	{r3, pc}
 8081810:	0806001c 	.word	0x0806001c

08081814 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081814:	b508      	push	{r3, lr}
 8081816:	4b02      	ldr	r3, [pc, #8]	; (8081820 <HAL_USB_USART_Available_Data+0xc>)
 8081818:	681b      	ldr	r3, [r3, #0]
 808181a:	691b      	ldr	r3, [r3, #16]
 808181c:	9301      	str	r3, [sp, #4]
 808181e:	bd08      	pop	{r3, pc}
 8081820:	0806001c 	.word	0x0806001c

08081824 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081824:	b508      	push	{r3, lr}
 8081826:	4b02      	ldr	r3, [pc, #8]	; (8081830 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	695b      	ldr	r3, [r3, #20]
 808182c:	9301      	str	r3, [sp, #4]
 808182e:	bd08      	pop	{r3, pc}
 8081830:	0806001c 	.word	0x0806001c

08081834 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081834:	b508      	push	{r3, lr}
 8081836:	4b02      	ldr	r3, [pc, #8]	; (8081840 <HAL_USB_USART_Receive_Data+0xc>)
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	699b      	ldr	r3, [r3, #24]
 808183c:	9301      	str	r3, [sp, #4]
 808183e:	bd08      	pop	{r3, pc}
 8081840:	0806001c 	.word	0x0806001c

08081844 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081844:	b508      	push	{r3, lr}
 8081846:	4b02      	ldr	r3, [pc, #8]	; (8081850 <HAL_USB_USART_Send_Data+0xc>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	69db      	ldr	r3, [r3, #28]
 808184c:	9301      	str	r3, [sp, #4]
 808184e:	bd08      	pop	{r3, pc}
 8081850:	0806001c 	.word	0x0806001c

08081854 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081854:	b508      	push	{r3, lr}
 8081856:	4b02      	ldr	r3, [pc, #8]	; (8081860 <HAL_USB_USART_Flush_Data+0xc>)
 8081858:	681b      	ldr	r3, [r3, #0]
 808185a:	6a1b      	ldr	r3, [r3, #32]
 808185c:	9301      	str	r3, [sp, #4]
 808185e:	bd08      	pop	{r3, pc}
 8081860:	0806001c 	.word	0x0806001c

08081864 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081864:	b508      	push	{r3, lr}
 8081866:	4b02      	ldr	r3, [pc, #8]	; (8081870 <system_mode+0xc>)
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	681b      	ldr	r3, [r3, #0]
 808186c:	9301      	str	r3, [sp, #4]
 808186e:	bd08      	pop	{r3, pc}
 8081870:	080401a4 	.word	0x080401a4

08081874 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081874:	b508      	push	{r3, lr}
 8081876:	4b02      	ldr	r3, [pc, #8]	; (8081880 <set_system_mode+0xc>)
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	685b      	ldr	r3, [r3, #4]
 808187c:	9301      	str	r3, [sp, #4]
 808187e:	bd08      	pop	{r3, pc}
 8081880:	080401a4 	.word	0x080401a4

08081884 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081884:	b508      	push	{r3, lr}
 8081886:	4b02      	ldr	r3, [pc, #8]	; (8081890 <system_delay_ms+0xc>)
 8081888:	681b      	ldr	r3, [r3, #0]
 808188a:	695b      	ldr	r3, [r3, #20]
 808188c:	9301      	str	r3, [sp, #4]
 808188e:	bd08      	pop	{r3, pc}
 8081890:	080401a4 	.word	0x080401a4

08081894 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081894:	b508      	push	{r3, lr}
 8081896:	4b02      	ldr	r3, [pc, #8]	; (80818a0 <system_thread_set_state+0xc>)
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808189c:	9301      	str	r3, [sp, #4]
 808189e:	bd08      	pop	{r3, pc}
 80818a0:	080401a4 	.word	0x080401a4

080818a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80818a4:	b508      	push	{r3, lr}
 80818a6:	4b02      	ldr	r3, [pc, #8]	; (80818b0 <application_thread_current+0xc>)
 80818a8:	681b      	ldr	r3, [r3, #0]
 80818aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80818ac:	9301      	str	r3, [sp, #4]
 80818ae:	bd08      	pop	{r3, pc}
 80818b0:	080401a4 	.word	0x080401a4

080818b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80818b4:	b508      	push	{r3, lr}
 80818b6:	4b02      	ldr	r3, [pc, #8]	; (80818c0 <application_thread_invoke+0xc>)
 80818b8:	681b      	ldr	r3, [r3, #0]
 80818ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80818bc:	9301      	str	r3, [sp, #4]
 80818be:	bd08      	pop	{r3, pc}
 80818c0:	080401a4 	.word	0x080401a4

080818c4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80818c4:	b508      	push	{r3, lr}
 80818c6:	4b02      	ldr	r3, [pc, #8]	; (80818d0 <system_thread_get_state+0xc>)
 80818c8:	681b      	ldr	r3, [r3, #0]
 80818ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80818cc:	9301      	str	r3, [sp, #4]
 80818ce:	bd08      	pop	{r3, pc}
 80818d0:	080401a4 	.word	0x080401a4

080818d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80818d4:	b508      	push	{r3, lr}
 80818d6:	4b03      	ldr	r3, [pc, #12]	; (80818e4 <system_ctrl_set_app_request_handler+0x10>)
 80818d8:	681b      	ldr	r3, [r3, #0]
 80818da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80818de:	9301      	str	r3, [sp, #4]
 80818e0:	bd08      	pop	{r3, pc}
 80818e2:	0000      	.short	0x0000
 80818e4:	080401a4 	.word	0x080401a4

080818e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80818e8:	b508      	push	{r3, lr}
 80818ea:	4b03      	ldr	r3, [pc, #12]	; (80818f8 <system_ctrl_set_result+0x10>)
 80818ec:	681b      	ldr	r3, [r3, #0]
 80818ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80818f2:	9301      	str	r3, [sp, #4]
 80818f4:	bd08      	pop	{r3, pc}
 80818f6:	0000      	.short	0x0000
 80818f8:	080401a4 	.word	0x080401a4

080818fc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80818fc:	b508      	push	{r3, lr}
 80818fe:	4b03      	ldr	r3, [pc, #12]	; (808190c <system_sleep_pins+0x10>)
 8081900:	681b      	ldr	r3, [r3, #0]
 8081902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8081906:	9301      	str	r3, [sp, #4]
 8081908:	bd08      	pop	{r3, pc}
 808190a:	0000      	.short	0x0000
 808190c:	080401a4 	.word	0x080401a4

08081910 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081910:	b508      	push	{r3, lr}
 8081912:	4b02      	ldr	r3, [pc, #8]	; (808191c <spark_variable+0xc>)
 8081914:	681b      	ldr	r3, [r3, #0]
 8081916:	681b      	ldr	r3, [r3, #0]
 8081918:	9301      	str	r3, [sp, #4]
 808191a:	bd08      	pop	{r3, pc}
 808191c:	080401cc 	.word	0x080401cc

08081920 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081920:	b508      	push	{r3, lr}
 8081922:	4b02      	ldr	r3, [pc, #8]	; (808192c <spark_process+0xc>)
 8081924:	681b      	ldr	r3, [r3, #0]
 8081926:	689b      	ldr	r3, [r3, #8]
 8081928:	9301      	str	r3, [sp, #4]
 808192a:	bd08      	pop	{r3, pc}
 808192c:	080401cc 	.word	0x080401cc

08081930 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081930:	b508      	push	{r3, lr}
 8081932:	4b02      	ldr	r3, [pc, #8]	; (808193c <spark_cloud_flag_connected+0xc>)
 8081934:	681b      	ldr	r3, [r3, #0]
 8081936:	695b      	ldr	r3, [r3, #20]
 8081938:	9301      	str	r3, [sp, #4]
 808193a:	bd08      	pop	{r3, pc}
 808193c:	080401cc 	.word	0x080401cc

08081940 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081940:	b508      	push	{r3, lr}
 8081942:	4b02      	ldr	r3, [pc, #8]	; (808194c <spark_send_event+0xc>)
 8081944:	681b      	ldr	r3, [r3, #0]
 8081946:	6a1b      	ldr	r3, [r3, #32]
 8081948:	9301      	str	r3, [sp, #4]
 808194a:	bd08      	pop	{r3, pc}
 808194c:	080401cc 	.word	0x080401cc

08081950 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081950:	b508      	push	{r3, lr}
 8081952:	4b02      	ldr	r3, [pc, #8]	; (808195c <spark_sync_time+0xc>)
 8081954:	681b      	ldr	r3, [r3, #0]
 8081956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081958:	9301      	str	r3, [sp, #4]
 808195a:	bd08      	pop	{r3, pc}
 808195c:	080401cc 	.word	0x080401cc

08081960 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081960:	b508      	push	{r3, lr}
 8081962:	4b02      	ldr	r3, [pc, #8]	; (808196c <spark_sync_time_pending+0xc>)
 8081964:	681b      	ldr	r3, [r3, #0]
 8081966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081968:	9301      	str	r3, [sp, #4]
 808196a:	bd08      	pop	{r3, pc}
 808196c:	080401cc 	.word	0x080401cc

08081970 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081970:	b508      	push	{r3, lr}
 8081972:	4b02      	ldr	r3, [pc, #8]	; (808197c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081974:	681b      	ldr	r3, [r3, #0]
 8081976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081978:	9301      	str	r3, [sp, #4]
 808197a:	bd08      	pop	{r3, pc}
 808197c:	080401cc 	.word	0x080401cc

08081980 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081980:	b508      	push	{r3, lr}
 8081982:	4b02      	ldr	r3, [pc, #8]	; (808198c <network_connect+0xc>)
 8081984:	681b      	ldr	r3, [r3, #0]
 8081986:	685b      	ldr	r3, [r3, #4]
 8081988:	9301      	str	r3, [sp, #4]
 808198a:	bd08      	pop	{r3, pc}
 808198c:	080401c8 	.word	0x080401c8

08081990 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081990:	b508      	push	{r3, lr}
 8081992:	4b02      	ldr	r3, [pc, #8]	; (808199c <network_connecting+0xc>)
 8081994:	681b      	ldr	r3, [r3, #0]
 8081996:	689b      	ldr	r3, [r3, #8]
 8081998:	9301      	str	r3, [sp, #4]
 808199a:	bd08      	pop	{r3, pc}
 808199c:	080401c8 	.word	0x080401c8

080819a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80819a0:	b508      	push	{r3, lr}
 80819a2:	4b02      	ldr	r3, [pc, #8]	; (80819ac <network_disconnect+0xc>)
 80819a4:	681b      	ldr	r3, [r3, #0]
 80819a6:	68db      	ldr	r3, [r3, #12]
 80819a8:	9301      	str	r3, [sp, #4]
 80819aa:	bd08      	pop	{r3, pc}
 80819ac:	080401c8 	.word	0x080401c8

080819b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80819b0:	b508      	push	{r3, lr}
 80819b2:	4b02      	ldr	r3, [pc, #8]	; (80819bc <network_ready+0xc>)
 80819b4:	681b      	ldr	r3, [r3, #0]
 80819b6:	691b      	ldr	r3, [r3, #16]
 80819b8:	9301      	str	r3, [sp, #4]
 80819ba:	bd08      	pop	{r3, pc}
 80819bc:	080401c8 	.word	0x080401c8

080819c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80819c0:	b508      	push	{r3, lr}
 80819c2:	4b02      	ldr	r3, [pc, #8]	; (80819cc <network_on+0xc>)
 80819c4:	681b      	ldr	r3, [r3, #0]
 80819c6:	695b      	ldr	r3, [r3, #20]
 80819c8:	9301      	str	r3, [sp, #4]
 80819ca:	bd08      	pop	{r3, pc}
 80819cc:	080401c8 	.word	0x080401c8

080819d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80819d0:	b508      	push	{r3, lr}
 80819d2:	4b02      	ldr	r3, [pc, #8]	; (80819dc <network_off+0xc>)
 80819d4:	681b      	ldr	r3, [r3, #0]
 80819d6:	699b      	ldr	r3, [r3, #24]
 80819d8:	9301      	str	r3, [sp, #4]
 80819da:	bd08      	pop	{r3, pc}
 80819dc:	080401c8 	.word	0x080401c8

080819e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80819e0:	b508      	push	{r3, lr}
 80819e2:	4b02      	ldr	r3, [pc, #8]	; (80819ec <network_listen+0xc>)
 80819e4:	681b      	ldr	r3, [r3, #0]
 80819e6:	69db      	ldr	r3, [r3, #28]
 80819e8:	9301      	str	r3, [sp, #4]
 80819ea:	bd08      	pop	{r3, pc}
 80819ec:	080401c8 	.word	0x080401c8

080819f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80819f0:	b508      	push	{r3, lr}
 80819f2:	4b02      	ldr	r3, [pc, #8]	; (80819fc <network_listening+0xc>)
 80819f4:	681b      	ldr	r3, [r3, #0]
 80819f6:	6a1b      	ldr	r3, [r3, #32]
 80819f8:	9301      	str	r3, [sp, #4]
 80819fa:	bd08      	pop	{r3, pc}
 80819fc:	080401c8 	.word	0x080401c8

08081a00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081a00:	b508      	push	{r3, lr}
 8081a02:	4b02      	ldr	r3, [pc, #8]	; (8081a0c <network_set_listen_timeout+0xc>)
 8081a04:	681b      	ldr	r3, [r3, #0]
 8081a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a08:	9301      	str	r3, [sp, #4]
 8081a0a:	bd08      	pop	{r3, pc}
 8081a0c:	080401c8 	.word	0x080401c8

08081a10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081a10:	b508      	push	{r3, lr}
 8081a12:	4b02      	ldr	r3, [pc, #8]	; (8081a1c <network_get_listen_timeout+0xc>)
 8081a14:	681b      	ldr	r3, [r3, #0]
 8081a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081a18:	9301      	str	r3, [sp, #4]
 8081a1a:	bd08      	pop	{r3, pc}
 8081a1c:	080401c8 	.word	0x080401c8

08081a20 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081a20:	b508      	push	{r3, lr}
 8081a22:	4b02      	ldr	r3, [pc, #8]	; (8081a2c <malloc+0xc>)
 8081a24:	681b      	ldr	r3, [r3, #0]
 8081a26:	681b      	ldr	r3, [r3, #0]
 8081a28:	9301      	str	r3, [sp, #4]
 8081a2a:	bd08      	pop	{r3, pc}
 8081a2c:	080401a0 	.word	0x080401a0

08081a30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081a30:	b508      	push	{r3, lr}
 8081a32:	4b02      	ldr	r3, [pc, #8]	; (8081a3c <free+0xc>)
 8081a34:	681b      	ldr	r3, [r3, #0]
 8081a36:	685b      	ldr	r3, [r3, #4]
 8081a38:	9301      	str	r3, [sp, #4]
 8081a3a:	bd08      	pop	{r3, pc}
 8081a3c:	080401a0 	.word	0x080401a0

08081a40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081a40:	b508      	push	{r3, lr}
 8081a42:	4b02      	ldr	r3, [pc, #8]	; (8081a4c <realloc+0xc>)
 8081a44:	681b      	ldr	r3, [r3, #0]
 8081a46:	689b      	ldr	r3, [r3, #8]
 8081a48:	9301      	str	r3, [sp, #4]
 8081a4a:	bd08      	pop	{r3, pc}
 8081a4c:	080401a0 	.word	0x080401a0

08081a50 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081a50:	b508      	push	{r3, lr}
 8081a52:	4b02      	ldr	r3, [pc, #8]	; (8081a5c <siscanf+0xc>)
 8081a54:	681b      	ldr	r3, [r3, #0]
 8081a56:	699b      	ldr	r3, [r3, #24]
 8081a58:	9301      	str	r3, [sp, #4]
 8081a5a:	bd08      	pop	{r3, pc}
 8081a5c:	080401a0 	.word	0x080401a0

08081a60 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081a60:	b508      	push	{r3, lr}
 8081a62:	4b02      	ldr	r3, [pc, #8]	; (8081a6c <snprintf+0xc>)
 8081a64:	681b      	ldr	r3, [r3, #0]
 8081a66:	69db      	ldr	r3, [r3, #28]
 8081a68:	9301      	str	r3, [sp, #4]
 8081a6a:	bd08      	pop	{r3, pc}
 8081a6c:	080401a0 	.word	0x080401a0

08081a70 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081a70:	b508      	push	{r3, lr}
 8081a72:	4b02      	ldr	r3, [pc, #8]	; (8081a7c <abort+0xc>)
 8081a74:	681b      	ldr	r3, [r3, #0]
 8081a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081a78:	9301      	str	r3, [sp, #4]
 8081a7a:	bd08      	pop	{r3, pc}
 8081a7c:	080401a0 	.word	0x080401a0

08081a80 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081a80:	b508      	push	{r3, lr}
 8081a82:	4b02      	ldr	r3, [pc, #8]	; (8081a8c <_malloc_r+0xc>)
 8081a84:	681b      	ldr	r3, [r3, #0]
 8081a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a88:	9301      	str	r3, [sp, #4]
 8081a8a:	bd08      	pop	{r3, pc}
 8081a8c:	080401a0 	.word	0x080401a0

08081a90 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8081a90:	b508      	push	{r3, lr}
 8081a92:	4b02      	ldr	r3, [pc, #8]	; (8081a9c <__errno+0xc>)
 8081a94:	681b      	ldr	r3, [r3, #0]
 8081a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081a98:	9301      	str	r3, [sp, #4]
 8081a9a:	bd08      	pop	{r3, pc}
 8081a9c:	080401a0 	.word	0x080401a0

08081aa0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081aa0:	2100      	movs	r1, #0
 8081aa2:	f7ff beef 	b.w	8081884 <system_delay_ms>

08081aa6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081aa6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081aa8:	6883      	ldr	r3, [r0, #8]
 8081aaa:	4604      	mov	r4, r0
 8081aac:	b90b      	cbnz	r3, 8081ab2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081aae:	f001 fb20 	bl	80830f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081ab2:	68c3      	ldr	r3, [r0, #12]
 8081ab4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081ab6:	68a3      	ldr	r3, [r4, #8]
 8081ab8:	b11b      	cbz	r3, 8081ac2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081aba:	2203      	movs	r2, #3
 8081abc:	4621      	mov	r1, r4
 8081abe:	4620      	mov	r0, r4
 8081ac0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081ac2:	4620      	mov	r0, r4
}
 8081ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081ac8:	2110      	movs	r1, #16
 8081aca:	f001 baf6 	b.w	80830ba <_ZdlPvj>

08081ace <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081ace:	2200      	movs	r2, #0
 8081ad0:	4611      	mov	r1, r2
 8081ad2:	6840      	ldr	r0, [r0, #4]
 8081ad4:	f7ff bf6c 	b.w	80819b0 <network_ready>

08081ad8 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081ad8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081adc:	2600      	movs	r6, #0
 8081ade:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081ae0:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081ae2:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081ae4:	4688      	mov	r8, r1
 8081ae6:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081ae8:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081aec:	f002 ff75 	bl	80849da <strlen>
 8081af0:	9600      	str	r6, [sp, #0]
 8081af2:	b281      	uxth	r1, r0
 8081af4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081af8:	4622      	mov	r2, r4
 8081afa:	4638      	mov	r0, r7
 8081afc:	f7ff fd1a 	bl	8081534 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081b00:	b120      	cbz	r0, 8081b0c <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081b02:	4631      	mov	r1, r6
 8081b04:	4628      	mov	r0, r5
 8081b06:	f000 fc23 	bl	8082350 <_ZN9IPAddressC1Em>
 8081b0a:	e003      	b.n	8081b14 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081b0c:	4621      	mov	r1, r4
 8081b0e:	4628      	mov	r0, r5
 8081b10:	f000 fc16 	bl	8082340 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081b14:	4628      	mov	r0, r5
 8081b16:	b004      	add	sp, #16
 8081b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081b1c <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081b1c:	2200      	movs	r2, #0
 8081b1e:	4611      	mov	r1, r2
 8081b20:	6840      	ldr	r0, [r0, #4]
 8081b22:	f7ff bf65 	b.w	80819f0 <network_listening>

08081b26 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081b26:	2200      	movs	r2, #0
 8081b28:	4611      	mov	r1, r2
 8081b2a:	6840      	ldr	r0, [r0, #4]
 8081b2c:	f7ff bf70 	b.w	8081a10 <network_get_listen_timeout>

08081b30 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081b30:	2200      	movs	r2, #0
 8081b32:	6840      	ldr	r0, [r0, #4]
 8081b34:	f7ff bf64 	b.w	8081a00 <network_set_listen_timeout>

08081b38 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081b38:	2200      	movs	r2, #0
 8081b3a:	f081 0101 	eor.w	r1, r1, #1
 8081b3e:	6840      	ldr	r0, [r0, #4]
 8081b40:	f7ff bf4e 	b.w	80819e0 <network_listen>

08081b44 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081b44:	2300      	movs	r3, #0
 8081b46:	461a      	mov	r2, r3
 8081b48:	4619      	mov	r1, r3
 8081b4a:	6840      	ldr	r0, [r0, #4]
 8081b4c:	f7ff bf40 	b.w	80819d0 <network_off>

08081b50 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081b50:	2300      	movs	r3, #0
 8081b52:	461a      	mov	r2, r3
 8081b54:	4619      	mov	r1, r3
 8081b56:	6840      	ldr	r0, [r0, #4]
 8081b58:	f7ff bf32 	b.w	80819c0 <network_on>

08081b5c <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081b5c:	2200      	movs	r2, #0
 8081b5e:	4611      	mov	r1, r2
 8081b60:	6840      	ldr	r0, [r0, #4]
 8081b62:	f7ff bf15 	b.w	8081990 <network_connecting>

08081b66 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081b66:	2200      	movs	r2, #0
 8081b68:	2102      	movs	r1, #2
 8081b6a:	6840      	ldr	r0, [r0, #4]
 8081b6c:	f7ff bf18 	b.w	80819a0 <network_disconnect>

08081b70 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081b70:	2300      	movs	r3, #0
 8081b72:	461a      	mov	r2, r3
 8081b74:	6840      	ldr	r0, [r0, #4]
 8081b76:	f7ff bf03 	b.w	8081980 <network_connect>
	...

08081b7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081b7c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081b7e:	4c08      	ldr	r4, [pc, #32]	; (8081ba0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081b80:	2528      	movs	r5, #40	; 0x28
 8081b82:	462a      	mov	r2, r5
 8081b84:	2100      	movs	r1, #0
 8081b86:	4620      	mov	r0, r4
 8081b88:	f002 febb 	bl	8084902 <memset>
        cid = -1;
 8081b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081b90:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081b92:	4b04      	ldr	r3, [pc, #16]	; (8081ba4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081b94:	2204      	movs	r2, #4
 8081b96:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081b98:	4a03      	ldr	r2, [pc, #12]	; (8081ba8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8081b9a:	8025      	strh	r5, [r4, #0]
 8081b9c:	601a      	str	r2, [r3, #0]
 8081b9e:	bd38      	pop	{r3, r4, r5, pc}
 8081ba0:	20000430 	.word	0x20000430
 8081ba4:	20000428 	.word	0x20000428
 8081ba8:	08087078 	.word	0x08087078

08081bac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081bac:	4770      	bx	lr

08081bae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081bae:	2000      	movs	r0, #0
 8081bb0:	4770      	bx	lr

08081bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081bb2:	b510      	push	{r4, lr}
 8081bb4:	4604      	mov	r4, r0
 8081bb6:	2110      	movs	r1, #16
 8081bb8:	f001 fa7f 	bl	80830ba <_ZdlPvj>
 8081bbc:	4620      	mov	r0, r4
 8081bbe:	bd10      	pop	{r4, pc}

08081bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081bc0:	b508      	push	{r3, lr}
      { delete this; }
 8081bc2:	b108      	cbz	r0, 8081bc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081bc4:	f7ff fff5 	bl	8081bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081bc8:	bd08      	pop	{r3, pc}

08081bca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081bca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081bcc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081bce:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081bd0:	b113      	cbz	r3, 8081bd8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081bd2:	2203      	movs	r2, #3
 8081bd4:	4601      	mov	r1, r0
 8081bd6:	4798      	blx	r3
    }
 8081bd8:	4620      	mov	r0, r4
 8081bda:	bd10      	pop	{r4, pc}

08081bdc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081bdc:	2200      	movs	r2, #0
 8081bde:	6002      	str	r2, [r0, #0]
 8081be0:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8081be4:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081be6:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081be8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081bec:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081bee:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081bf0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081bf2:	680c      	ldr	r4, [r1, #0]
 8081bf4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081bf6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081bf8:	bd10      	pop	{r4, pc}

08081bfa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081bfa:	b510      	push	{r4, lr}
 8081bfc:	4604      	mov	r4, r0
    free((void*)msg_);
 8081bfe:	6800      	ldr	r0, [r0, #0]
 8081c00:	f7ff ff16 	bl	8081a30 <free>
}
 8081c04:	4620      	mov	r0, r4
 8081c06:	bd10      	pop	{r4, pc}

08081c08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081c08:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081c0a:	68c4      	ldr	r4, [r0, #12]
 8081c0c:	b1f4      	cbz	r4, 8081c4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081c0e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081c10:	2b02      	cmp	r3, #2
 8081c12:	d103      	bne.n	8081c1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081c14:	f104 000c 	add.w	r0, r4, #12
 8081c18:	f7ff ffef 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081c1c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081c1e:	b135      	cbz	r5, 8081c2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c20:	4628      	mov	r0, r5
 8081c22:	f7ff ffd2 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
 8081c26:	2110      	movs	r1, #16
 8081c28:	4628      	mov	r0, r5
 8081c2a:	f001 fa46 	bl	80830ba <_ZdlPvj>
 8081c2e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081c30:	b135      	cbz	r5, 8081c40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081c32:	4628      	mov	r0, r5
 8081c34:	f7ff ffc9 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
 8081c38:	2110      	movs	r1, #16
 8081c3a:	4628      	mov	r0, r5
 8081c3c:	f001 fa3d 	bl	80830ba <_ZdlPvj>
 8081c40:	4620      	mov	r0, r4
 8081c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081c46:	2114      	movs	r1, #20
 8081c48:	f001 ba37 	b.w	80830ba <_ZdlPvj>
 8081c4c:	bd38      	pop	{r3, r4, r5, pc}

08081c4e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081c4e:	b513      	push	{r0, r1, r4, lr}
 8081c50:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081c52:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081c56:	2300      	movs	r3, #0
 8081c58:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c5a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081c5c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081c5e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c60:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081c62:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c64:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c66:	f7fe fa50 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081c6a:	4620      	mov	r0, r4
 8081c6c:	b002      	add	sp, #8
 8081c6e:	bd10      	pop	{r4, pc}

08081c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081c70:	680b      	ldr	r3, [r1, #0]
 8081c72:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081c74:	b113      	cbz	r3, 8081c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081c76:	685a      	ldr	r2, [r3, #4]
 8081c78:	3201      	adds	r2, #1
 8081c7a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081c7c:	4770      	bx	lr

08081c7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081c80:	460c      	mov	r4, r1
 8081c82:	4606      	mov	r6, r0
 8081c84:	460f      	mov	r7, r1
 8081c86:	f854 3b04 	ldr.w	r3, [r4], #4
 8081c8a:	ad02      	add	r5, sp, #8
 8081c8c:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081c90:	4621      	mov	r1, r4
 8081c92:	a801      	add	r0, sp, #4
 8081c94:	f7ff ffec 	bl	8081c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081c98:	4629      	mov	r1, r5
 8081c9a:	4630      	mov	r0, r6
 8081c9c:	f7ff ffd7 	bl	8081c4e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081ca0:	a801      	add	r0, sp, #4
 8081ca2:	f7fe fa32 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081ca6:	4620      	mov	r0, r4
 8081ca8:	f7fe fa2f 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081cac:	4638      	mov	r0, r7
 8081cae:	2108      	movs	r1, #8
 8081cb0:	f001 fa03 	bl	80830ba <_ZdlPvj>
        return p;
    }
 8081cb4:	4630      	mov	r0, r6
 8081cb6:	b003      	add	sp, #12
 8081cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081cba <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081cba:	b513      	push	{r0, r1, r4, lr}
 8081cbc:	460b      	mov	r3, r1
 8081cbe:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cc0:	c803      	ldmia	r0, {r0, r1}
 8081cc2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081cc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081cca:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081cce:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081cd2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081cd6:	b002      	add	sp, #8
 8081cd8:	bd10      	pop	{r4, pc}
	...

08081cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081cdc:	b538      	push	{r3, r4, r5, lr}
 8081cde:	2300      	movs	r3, #0
 8081ce0:	4604      	mov	r4, r0
 8081ce2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ce4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081ce6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ce8:	f7fe f9d9 	bl	808009e <_Znwj>
 8081cec:	b128      	cbz	r0, 8081cfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081cee:	2301      	movs	r3, #1
 8081cf0:	6043      	str	r3, [r0, #4]
 8081cf2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081cf4:	4b02      	ldr	r3, [pc, #8]	; (8081d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081cf6:	60c5      	str	r5, [r0, #12]
 8081cf8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081cfa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8081cfc:	4620      	mov	r0, r4
 8081cfe:	bd38      	pop	{r3, r4, r5, pc}
 8081d00:	080870ac 	.word	0x080870ac

08081d04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d04:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081d06:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d08:	b90a      	cbnz	r2, 8081d0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081d0a:	f001 f9f2 	bl	80830f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d0e:	68c3      	ldr	r3, [r0, #12]
    }
 8081d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d14:	4718      	bx	r3

08081d16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081d16:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081d18:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081d1a:	f100 0110 	add.w	r1, r0, #16
 8081d1e:	f7ff fff1 	bl	8081d04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081d22:	bd08      	pop	{r3, pc}

08081d24 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d24:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081d26:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d28:	b90a      	cbnz	r2, 8081d2e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081d2a:	f001 f9e2 	bl	80830f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d2e:	68c3      	ldr	r3, [r0, #12]
    }
 8081d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d34:	4718      	bx	r3

08081d36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081d36:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081d38:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081d3a:	f100 0110 	add.w	r1, r0, #16
 8081d3e:	f7ff fff1 	bl	8081d24 <_ZNKSt8functionIFvRKbEEclES1_>
 8081d42:	bd08      	pop	{r3, pc}

08081d44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d44:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d46:	2300      	movs	r3, #0
 8081d48:	6083      	str	r3, [r0, #8]
 8081d4a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d4c:	4604      	mov	r4, r0
 8081d4e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081d50:	b12b      	cbz	r3, 8081d5e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d52:	2202      	movs	r2, #2
 8081d54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d56:	68eb      	ldr	r3, [r5, #12]
 8081d58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081d5a:	68ab      	ldr	r3, [r5, #8]
 8081d5c:	60a3      	str	r3, [r4, #8]
	}
    }
 8081d5e:	4620      	mov	r0, r4
 8081d60:	bd38      	pop	{r3, r4, r5, pc}
	...

08081d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d66:	b089      	sub	sp, #36	; 0x24
 8081d68:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081d6a:	4668      	mov	r0, sp
 8081d6c:	f7ff ff36 	bl	8081bdc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081d70:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081d74:	2300      	movs	r3, #0
 8081d76:	f88d 3008 	strb.w	r3, [sp, #8]
 8081d7a:	e8d4 3f4f 	ldrexb	r3, [r4]
 8081d7e:	2b00      	cmp	r3, #0
 8081d80:	d103      	bne.n	8081d8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8081d82:	e8c4 2f41 	strexb	r1, r2, [r4]
 8081d86:	2900      	cmp	r1, #0
 8081d88:	d1f7      	bne.n	8081d7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8081d8a:	d002      	beq.n	8081d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8081d8c:	f88d 3008 	strb.w	r3, [sp, #8]
 8081d90:	e063      	b.n	8081e5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081d92:	f114 050c 	adds.w	r5, r4, #12
 8081d96:	d003      	beq.n	8081da0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081d98:	4669      	mov	r1, sp
 8081d9a:	4628      	mov	r0, r5
 8081d9c:	f7ff ff1e 	bl	8081bdc <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081da0:	f3bf 8f5f 	dmb	sy
 8081da4:	2301      	movs	r3, #1
 8081da6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081da8:	f3bf 8f5f 	dmb	sy
 8081dac:	f104 0308 	add.w	r3, r4, #8
 8081db0:	2000      	movs	r0, #0
 8081db2:	e853 6f00 	ldrex	r6, [r3]
 8081db6:	e843 0200 	strex	r2, r0, [r3]
 8081dba:	2a00      	cmp	r2, #0
 8081dbc:	d1f9      	bne.n	8081db2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8081dbe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081dc2:	2e00      	cmp	r6, #0
 8081dc4:	d049      	beq.n	8081e5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081dc6:	f7ff fd6d 	bl	80818a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081dca:	b120      	cbz	r0, 8081dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081dcc:	4629      	mov	r1, r5
 8081dce:	4630      	mov	r0, r6
 8081dd0:	f7ff ff98 	bl	8081d04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081dd4:	e03a      	b.n	8081e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081dd6:	4631      	mov	r1, r6
 8081dd8:	a802      	add	r0, sp, #8
 8081dda:	f7ff ffb3 	bl	8081d44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081dde:	68e0      	ldr	r0, [r4, #12]
 8081de0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081de4:	b108      	cbz	r0, 8081dea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8081de6:	f002 fddd 	bl	80849a4 <strdup>
 8081dea:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081dec:	2010      	movs	r0, #16
 8081dee:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081df2:	f7fe f954 	bl	808009e <_Znwj>
 8081df6:	4605      	mov	r5, r0
 8081df8:	b1e8      	cbz	r0, 8081e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081dfa:	2700      	movs	r7, #0
 8081dfc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081dfe:	2018      	movs	r0, #24
 8081e00:	f7fe f94d 	bl	808009e <_Znwj>
 8081e04:	4604      	mov	r4, r0
 8081e06:	b188      	cbz	r0, 8081e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081e08:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e0a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081e0c:	a802      	add	r0, sp, #8
 8081e0e:	f7ff ff54 	bl	8081cba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e12:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081e14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e18:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081e1a:	9204      	str	r2, [sp, #16]
 8081e1c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081e1e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081e20:	60e3      	str	r3, [r4, #12]
 8081e22:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081e26:	9205      	str	r2, [sp, #20]
 8081e28:	f7ff fed8 	bl	8081bdc <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081e2c:	4b0d      	ldr	r3, [pc, #52]	; (8081e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e2e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081e30:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081e32:	4b0d      	ldr	r3, [pc, #52]	; (8081e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081e34:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081e36:	a806      	add	r0, sp, #24
 8081e38:	f7ff fedf 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081e3c:	a802      	add	r0, sp, #8
 8081e3e:	f7ff fec4 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081e42:	2200      	movs	r2, #0
 8081e44:	4629      	mov	r1, r5
 8081e46:	4809      	ldr	r0, [pc, #36]	; (8081e6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081e48:	f7ff fd34 	bl	80818b4 <application_thread_invoke>
 8081e4c:	4630      	mov	r0, r6
 8081e4e:	f7ff febc 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081e52:	2110      	movs	r1, #16
 8081e54:	4630      	mov	r0, r6
 8081e56:	f001 f930 	bl	80830ba <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081e5a:	4668      	mov	r0, sp
 8081e5c:	f7ff fecd 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
    }
 8081e60:	b009      	add	sp, #36	; 0x24
 8081e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081e64:	08081d17 	.word	0x08081d17
 8081e68:	08081f8d 	.word	0x08081f8d
 8081e6c:	08081aa7 	.word	0x08081aa7

08081e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e74:	b08b      	sub	sp, #44	; 0x2c
 8081e76:	4606      	mov	r6, r0
 8081e78:	460f      	mov	r7, r1
 8081e7a:	4690      	mov	r8, r2
 8081e7c:	4699      	mov	r9, r3
 8081e7e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081e82:	f7ff fd55 	bl	8081930 <spark_cloud_flag_connected>
 8081e86:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8081e88:	4683      	mov	fp, r0
 8081e8a:	bb30      	cbnz	r0, 8081eda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081e8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081e90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081e92:	a905      	add	r1, sp, #20
 8081e94:	4628      	mov	r0, r5
 8081e96:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081e9a:	f7ff fe9f 	bl	8081bdc <_ZN8particle5ErrorC1EOS0_>
 8081e9e:	2014      	movs	r0, #20
 8081ea0:	f7fe f8fd 	bl	808009e <_Znwj>
 8081ea4:	4604      	mov	r4, r0
 8081ea6:	b158      	cbz	r0, 8081ec0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081ea8:	2302      	movs	r3, #2
 8081eaa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081eac:	2301      	movs	r3, #1
 8081eae:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081eb0:	f8c0 b004 	str.w	fp, [r0, #4]
 8081eb4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081eb8:	4629      	mov	r1, r5
 8081eba:	300c      	adds	r0, #12
 8081ebc:	f7ff fe8e 	bl	8081bdc <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081ec0:	4630      	mov	r0, r6
 8081ec2:	4621      	mov	r1, r4
 8081ec4:	f840 4b04 	str.w	r4, [r0], #4
 8081ec8:	f7ff ff08 	bl	8081cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081ecc:	4628      	mov	r0, r5
 8081ece:	f7ff fe94 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081ed2:	a805      	add	r0, sp, #20
 8081ed4:	f7ff fe91 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
 8081ed8:	e052      	b.n	8081f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081eda:	2400      	movs	r4, #0
 8081edc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081ede:	2014      	movs	r0, #20
 8081ee0:	606c      	str	r4, [r5, #4]
 8081ee2:	60ac      	str	r4, [r5, #8]
 8081ee4:	9307      	str	r3, [sp, #28]
 8081ee6:	f7fe f8da 	bl	808009e <_Znwj>
 8081eea:	4601      	mov	r1, r0
 8081eec:	b118      	cbz	r0, 8081ef6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8081eee:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081ef0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081ef2:	6044      	str	r4, [r0, #4]
 8081ef4:	6084      	str	r4, [r0, #8]
 8081ef6:	a804      	add	r0, sp, #16
 8081ef8:	9103      	str	r1, [sp, #12]
 8081efa:	f7ff feef 	bl	8081cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081efe:	4b22      	ldr	r3, [pc, #136]	; (8081f88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081f00:	2008      	movs	r0, #8
 8081f02:	9308      	str	r3, [sp, #32]
 8081f04:	f7fe f8cb 	bl	808009e <_Znwj>
 8081f08:	4604      	mov	r4, r0
 8081f0a:	b128      	cbz	r0, 8081f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f0c:	9b03      	ldr	r3, [sp, #12]
 8081f0e:	a904      	add	r1, sp, #16
 8081f10:	f840 3b04 	str.w	r3, [r0], #4
 8081f14:	f7ff feac 	bl	8081c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f18:	9500      	str	r5, [sp, #0]
 8081f1a:	fa5f f38a 	uxtb.w	r3, sl
 8081f1e:	464a      	mov	r2, r9
 8081f20:	4641      	mov	r1, r8
 8081f22:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081f24:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f26:	f7ff fd0b 	bl	8081940 <spark_send_event>
 8081f2a:	b920      	cbnz	r0, 8081f36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081f2c:	9b03      	ldr	r3, [sp, #12]
 8081f2e:	785b      	ldrb	r3, [r3, #1]
 8081f30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081f34:	b183      	cbz	r3, 8081f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8081f36:	9b03      	ldr	r3, [sp, #12]
 8081f38:	a904      	add	r1, sp, #16
 8081f3a:	a806      	add	r0, sp, #24
 8081f3c:	9305      	str	r3, [sp, #20]
 8081f3e:	f7ff fe97 	bl	8081c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081f42:	a905      	add	r1, sp, #20
 8081f44:	4630      	mov	r0, r6
 8081f46:	f7ff fe82 	bl	8081c4e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f4a:	a806      	add	r0, sp, #24
 8081f4c:	f7fe f8dd 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f50:	a804      	add	r0, sp, #16
 8081f52:	f7fe f8da 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f56:	e013      	b.n	8081f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081f58:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081f5c:	a905      	add	r1, sp, #20
 8081f5e:	a803      	add	r0, sp, #12
 8081f60:	9205      	str	r2, [sp, #20]
 8081f62:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081f66:	f7ff fefd 	bl	8081d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081f6a:	a805      	add	r0, sp, #20
 8081f6c:	f7ff fe45 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081f70:	a805      	add	r0, sp, #20
 8081f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081f74:	f7ff fe83 	bl	8081c7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081f78:	a806      	add	r0, sp, #24
 8081f7a:	f7fe f8c6 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f7e:	e7da      	b.n	8081f36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8081f80:	4630      	mov	r0, r6
 8081f82:	b00b      	add	sp, #44	; 0x2c
 8081f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081f88:	080820fd 	.word	0x080820fd

08081f8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f8c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f90:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f92:	d006      	beq.n	8081fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081f94:	2a03      	cmp	r2, #3
 8081f96:	d017      	beq.n	8081fc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081f98:	2a01      	cmp	r2, #1
 8081f9a:	d122      	bne.n	8081fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081f9c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081f9e:	6003      	str	r3, [r0, #0]
	      break;
 8081fa0:	e01f      	b.n	8081fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081fa2:	2018      	movs	r0, #24
 8081fa4:	680e      	ldr	r6, [r1, #0]
 8081fa6:	f7fe f87a 	bl	808009e <_Znwj>
 8081faa:	4605      	mov	r5, r0
 8081fac:	b150      	cbz	r0, 8081fc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081fae:	4631      	mov	r1, r6
 8081fb0:	f7ff fec8 	bl	8081d44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081fb4:	6930      	ldr	r0, [r6, #16]
 8081fb6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081fba:	b108      	cbz	r0, 8081fc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081fbc:	f002 fcf2 	bl	80849a4 <strdup>
 8081fc0:	6128      	str	r0, [r5, #16]
 8081fc2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081fc4:	6025      	str	r5, [r4, #0]
 8081fc6:	e00c      	b.n	8081fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081fc8:	6804      	ldr	r4, [r0, #0]
 8081fca:	b154      	cbz	r4, 8081fe2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8081fcc:	f104 0010 	add.w	r0, r4, #16
 8081fd0:	f7ff fe13 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081fd4:	4620      	mov	r0, r4
 8081fd6:	f7ff fdf8 	bl	8081bca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081fda:	2118      	movs	r1, #24
 8081fdc:	4620      	mov	r0, r4
 8081fde:	f001 f86c 	bl	80830ba <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081fe2:	2000      	movs	r0, #0
 8081fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081fe6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081fe6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081fe8:	2300      	movs	r3, #0
 8081fea:	6083      	str	r3, [r0, #8]
 8081fec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081fee:	4604      	mov	r4, r0
 8081ff0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081ff2:	b12b      	cbz	r3, 8082000 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081ff4:	2202      	movs	r2, #2
 8081ff6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081ff8:	68eb      	ldr	r3, [r5, #12]
 8081ffa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081ffc:	68ab      	ldr	r3, [r5, #8]
 8081ffe:	60a3      	str	r3, [r4, #8]
	}
    }
 8082000:	4620      	mov	r0, r4
 8082002:	bd38      	pop	{r3, r4, r5, pc}

08082004 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082004:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082006:	b570      	push	{r4, r5, r6, lr}
 8082008:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808200a:	d006      	beq.n	808201a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808200c:	2a03      	cmp	r2, #3
 808200e:	d011      	beq.n	8082034 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082010:	2a01      	cmp	r2, #1
 8082012:	d118      	bne.n	8082046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082014:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082016:	6003      	str	r3, [r0, #0]
	      break;
 8082018:	e015      	b.n	8082046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808201a:	2014      	movs	r0, #20
 808201c:	680e      	ldr	r6, [r1, #0]
 808201e:	f7fe f83e 	bl	808009e <_Znwj>
 8082022:	4605      	mov	r5, r0
 8082024:	b120      	cbz	r0, 8082030 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082026:	4631      	mov	r1, r6
 8082028:	f7ff ffdd 	bl	8081fe6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808202c:	7c33      	ldrb	r3, [r6, #16]
 808202e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082030:	6025      	str	r5, [r4, #0]
 8082032:	e008      	b.n	8082046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082034:	6804      	ldr	r4, [r0, #0]
 8082036:	b134      	cbz	r4, 8082046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082038:	4620      	mov	r0, r4
 808203a:	f7ff fdc6 	bl	8081bca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808203e:	2114      	movs	r1, #20
 8082040:	4620      	mov	r0, r4
 8082042:	f001 f83a 	bl	80830ba <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082046:	2000      	movs	r0, #0
 8082048:	bd70      	pop	{r4, r5, r6, pc}
	...

0808204c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808204e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082050:	f3bf 8f5f 	dmb	sy
 8082054:	b087      	sub	sp, #28
 8082056:	2300      	movs	r3, #0
 8082058:	e850 6f00 	ldrex	r6, [r0]
 808205c:	e840 3200 	strex	r2, r3, [r0]
 8082060:	2a00      	cmp	r2, #0
 8082062:	d1f9      	bne.n	8082058 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082064:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082068:	2e00      	cmp	r6, #0
 808206a:	d03f      	beq.n	80820ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808206c:	4618      	mov	r0, r3
 808206e:	f7ff fc19 	bl	80818a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082072:	4607      	mov	r7, r0
 8082074:	b120      	cbz	r0, 8082080 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082076:	4621      	mov	r1, r4
 8082078:	4630      	mov	r0, r6
 808207a:	f7ff fe53 	bl	8081d24 <_ZNKSt8functionIFvRKbEEclES1_>
 808207e:	e02e      	b.n	80820de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082080:	4631      	mov	r1, r6
 8082082:	a801      	add	r0, sp, #4
 8082084:	f7ff ffaf 	bl	8081fe6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082088:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808208a:	2010      	movs	r0, #16
 808208c:	f88d 3014 	strb.w	r3, [sp, #20]
 8082090:	f7fe f805 	bl	808009e <_Znwj>
 8082094:	4605      	mov	r5, r0
 8082096:	b1d0      	cbz	r0, 80820ce <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082098:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808209a:	2014      	movs	r0, #20
 808209c:	f7fd ffff 	bl	808009e <_Znwj>
 80820a0:	4604      	mov	r4, r0
 80820a2:	b178      	cbz	r0, 80820c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80820a4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80820a6:	4601      	mov	r1, r0
 80820a8:	a801      	add	r0, sp, #4
 80820aa:	f7ff fe06 	bl	8081cba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820ae:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80820b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80820b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820b4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80820b6:	9203      	str	r2, [sp, #12]
 80820b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80820ba:	60e3      	str	r3, [r4, #12]
 80820bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80820c0:	9204      	str	r2, [sp, #16]
 80820c2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80820c4:	4b0a      	ldr	r3, [pc, #40]	; (80820f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80820c6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80820c8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80820ca:	4b0a      	ldr	r3, [pc, #40]	; (80820f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80820cc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80820ce:	a801      	add	r0, sp, #4
 80820d0:	f7ff fd7b 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80820d4:	2200      	movs	r2, #0
 80820d6:	4629      	mov	r1, r5
 80820d8:	4807      	ldr	r0, [pc, #28]	; (80820f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80820da:	f7ff fbeb 	bl	80818b4 <application_thread_invoke>
 80820de:	4630      	mov	r0, r6
 80820e0:	f7ff fd73 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80820e4:	2110      	movs	r1, #16
 80820e6:	4630      	mov	r0, r6
 80820e8:	f000 ffe7 	bl	80830ba <_ZdlPvj>
        }
    }
 80820ec:	b007      	add	sp, #28
 80820ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820f0:	08081d37 	.word	0x08081d37
 80820f4:	08082005 	.word	0x08082005
 80820f8:	08081aa7 	.word	0x08081aa7

080820fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80820fc:	b530      	push	{r4, r5, lr}
 80820fe:	4604      	mov	r4, r0
 8082100:	b085      	sub	sp, #20
 8082102:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082104:	4668      	mov	r0, sp
 8082106:	4611      	mov	r1, r2
 8082108:	f7ff fdb9 	bl	8081c7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808210c:	b17c      	cbz	r4, 808212e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808210e:	b224      	sxth	r4, r4
 8082110:	4628      	mov	r0, r5
 8082112:	b10d      	cbz	r5, 8082118 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082114:	f002 fc46 	bl	80849a4 <strdup>
 8082118:	9002      	str	r0, [sp, #8]
 808211a:	a902      	add	r1, sp, #8
 808211c:	4668      	mov	r0, sp
 808211e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8082122:	f7ff fe1f 	bl	8081d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082126:	a802      	add	r0, sp, #8
 8082128:	f7ff fd67 	bl	8081bfa <_ZN8particle5ErrorD1Ev>
 808212c:	e01d      	b.n	808216a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808212e:	f04f 0201 	mov.w	r2, #1
 8082132:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082134:	f88d 4008 	strb.w	r4, [sp, #8]
 8082138:	e8d0 3f4f 	ldrexb	r3, [r0]
 808213c:	42a3      	cmp	r3, r4
 808213e:	d103      	bne.n	8082148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8082140:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082144:	2900      	cmp	r1, #0
 8082146:	d1f7      	bne.n	8082138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082148:	d002      	beq.n	8082150 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808214a:	f88d 3008 	strb.w	r3, [sp, #8]
 808214e:	e00c      	b.n	808216a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082150:	f110 010c 	adds.w	r1, r0, #12
 8082154:	f04f 0301 	mov.w	r3, #1
 8082158:	bf18      	it	ne
 808215a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808215c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082160:	3004      	adds	r0, #4
 8082162:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082166:	f7ff ff71 	bl	808204c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808216a:	a801      	add	r0, sp, #4
 808216c:	f7fd ffcd 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082170:	b005      	add	sp, #20
 8082172:	bd30      	pop	{r4, r5, pc}

08082174 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082174:	6800      	ldr	r0, [r0, #0]
 8082176:	f000 b8a8 	b.w	80822ca <_ZN7TwoWire4lockEv>

0808217a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808217a:	b510      	push	{r4, lr}
 808217c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808217e:	6001      	str	r1, [r0, #0]
 8082180:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8082182:	b10a      	cbz	r2, 8082188 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082184:	f7ff fff6 	bl	8082174 <_ZN9FuelGauge4lockEv>
    }
}
 8082188:	4620      	mov	r0, r4
 808218a:	bd10      	pop	{r4, pc}

0808218c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808218c:	b538      	push	{r3, r4, r5, lr}
 808218e:	4604      	mov	r4, r0
 8082190:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082192:	f000 ff2f 	bl	8082ff4 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8082196:	462a      	mov	r2, r5
 8082198:	4601      	mov	r1, r0
 808219a:	4620      	mov	r0, r4
 808219c:	f7ff ffed 	bl	808217a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80821a0:	4620      	mov	r0, r4
 80821a2:	bd38      	pop	{r3, r4, r5, pc}

080821a4 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80821a4:	6800      	ldr	r0, [r0, #0]
 80821a6:	f000 b899 	b.w	80822dc <_ZN7TwoWire6unlockEv>

080821aa <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80821aa:	b510      	push	{r4, lr}
{
    if (lock_) {
 80821ac:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80821ae:	4604      	mov	r4, r0
{
    if (lock_) {
 80821b0:	b10b      	cbz	r3, 80821b6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80821b2:	f7ff fff7 	bl	80821a4 <_ZN9FuelGauge6unlockEv>
    }
}
 80821b6:	4620      	mov	r0, r4
 80821b8:	bd10      	pop	{r4, pc}

080821ba <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80821ba:	4770      	bx	lr

080821bc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80821bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80821be:	4606      	mov	r6, r0
 80821c0:	4615      	mov	r5, r2
 80821c2:	460c      	mov	r4, r1
 80821c4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80821c6:	42bc      	cmp	r4, r7
 80821c8:	d006      	beq.n	80821d8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80821ca:	6833      	ldr	r3, [r6, #0]
 80821cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80821d0:	689b      	ldr	r3, [r3, #8]
 80821d2:	4630      	mov	r0, r6
 80821d4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80821d6:	e7f6      	b.n	80821c6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80821d8:	4628      	mov	r0, r5
 80821da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080821dc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80821dc:	2200      	movs	r2, #0
 80821de:	7c00      	ldrb	r0, [r0, #16]
 80821e0:	f7ff ba38 	b.w	8081654 <HAL_I2C_Write_Data>

080821e4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80821e4:	2100      	movs	r1, #0
 80821e6:	7c00      	ldrb	r0, [r0, #16]
 80821e8:	f7ff ba3c 	b.w	8081664 <HAL_I2C_Available_Data>

080821ec <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80821ec:	2100      	movs	r1, #0
 80821ee:	7c00      	ldrb	r0, [r0, #16]
 80821f0:	f7ff ba40 	b.w	8081674 <HAL_I2C_Read_Data>

080821f4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80821f4:	2100      	movs	r1, #0
 80821f6:	7c00      	ldrb	r0, [r0, #16]
 80821f8:	f7ff ba44 	b.w	8081684 <HAL_I2C_Peek_Data>

080821fc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80821fc:	2100      	movs	r1, #0
 80821fe:	7c00      	ldrb	r0, [r0, #16]
 8082200:	f7ff ba48 	b.w	8081694 <HAL_I2C_Flush_Data>

08082204 <_ZN7TwoWireD0Ev>:
 8082204:	b510      	push	{r4, lr}
 8082206:	4604      	mov	r4, r0
 8082208:	2114      	movs	r1, #20
 808220a:	f000 ff56 	bl	80830ba <_ZdlPvj>
 808220e:	4620      	mov	r0, r4
 8082210:	bd10      	pop	{r4, pc}
	...

08082214 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082214:	b510      	push	{r4, lr}
 8082216:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082218:	2300      	movs	r3, #0
 808221a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808221c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082220:	60a3      	str	r3, [r4, #8]
 8082222:	4b04      	ldr	r3, [pc, #16]	; (8082234 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8082224:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082226:	4608      	mov	r0, r1
 8082228:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 808222a:	4611      	mov	r1, r2
 808222c:	f7ff fa42 	bl	80816b4 <HAL_I2C_Init>
}
 8082230:	4620      	mov	r0, r4
 8082232:	bd10      	pop	{r4, pc}
 8082234:	080870c8 	.word	0x080870c8

08082238 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082238:	2300      	movs	r3, #0
 808223a:	461a      	mov	r2, r3
 808223c:	4619      	mov	r1, r3
 808223e:	7c00      	ldrb	r0, [r0, #16]
 8082240:	f7ff b9f0 	b.w	8081624 <HAL_I2C_Begin>

08082244 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082244:	b570      	push	{r4, r5, r6, lr}
 8082246:	460c      	mov	r4, r1
 8082248:	4606      	mov	r6, r0
 808224a:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 808224c:	2514      	movs	r5, #20
 808224e:	462a      	mov	r2, r5
 8082250:	2100      	movs	r1, #0
 8082252:	a801      	add	r0, sp, #4
 8082254:	f002 fb55 	bl	8084902 <memset>
 8082258:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 808225a:	2200      	movs	r2, #0
 808225c:	f88d 3008 	strb.w	r3, [sp, #8]
 8082260:	6863      	ldr	r3, [r4, #4]
 8082262:	a901      	add	r1, sp, #4
 8082264:	9303      	str	r3, [sp, #12]
 8082266:	68e3      	ldr	r3, [r4, #12]
 8082268:	7c30      	ldrb	r0, [r6, #16]
 808226a:	9304      	str	r3, [sp, #16]
 808226c:	7a23      	ldrb	r3, [r4, #8]
 808226e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8082272:	9305      	str	r3, [sp, #20]
 8082274:	f7ff fa36 	bl	80816e4 <HAL_I2C_Request_Data_Ex>
}
 8082278:	b006      	add	sp, #24
 808227a:	bd70      	pop	{r4, r5, r6, pc}

0808227c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 808227c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808227e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082280:	f88d 1000 	strb.w	r1, [sp]
 8082284:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082288:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808228a:	bf18      	it	ne
 808228c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808228e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8082290:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082292:	f88d 3008 	strb.w	r3, [sp, #8]
 8082296:	f7ff ffd5 	bl	8082244 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808229a:	b005      	add	sp, #20
 808229c:	f85d fb04 	ldr.w	pc, [sp], #4

080822a0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80822a0:	2301      	movs	r3, #1
 80822a2:	f7ff bfeb 	b.w	808227c <_ZN7TwoWire11requestFromEhjh>

080822a6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80822a6:	2200      	movs	r2, #0
 80822a8:	7c00      	ldrb	r0, [r0, #16]
 80822aa:	f7ff b9c3 	b.w	8081634 <HAL_I2C_Begin_Transmission>

080822ae <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80822ae:	b2c9      	uxtb	r1, r1
 80822b0:	f7ff bff9 	b.w	80822a6 <_ZN7TwoWire17beginTransmissionEh>

080822b4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80822b4:	2200      	movs	r2, #0
 80822b6:	7c00      	ldrb	r0, [r0, #16]
 80822b8:	f7ff b9c4 	b.w	8081644 <HAL_I2C_End_Transmission>

080822bc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80822bc:	2101      	movs	r1, #1
 80822be:	f7ff bff9 	b.w	80822b4 <_ZN7TwoWire15endTransmissionEh>

080822c2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80822c2:	2100      	movs	r1, #0
 80822c4:	7c00      	ldrb	r0, [r0, #16]
 80822c6:	f7ff b9ed 	b.w	80816a4 <HAL_I2C_Is_Enabled>

080822ca <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80822ca:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80822cc:	2100      	movs	r1, #0
 80822ce:	7c00      	ldrb	r0, [r0, #16]
 80822d0:	f7ff f9f8 	bl	80816c4 <HAL_I2C_Acquire>
}
 80822d4:	fab0 f080 	clz	r0, r0
 80822d8:	0940      	lsrs	r0, r0, #5
 80822da:	bd08      	pop	{r3, pc}

080822dc <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80822dc:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80822de:	2100      	movs	r1, #0
 80822e0:	7c00      	ldrb	r0, [r0, #16]
 80822e2:	f7ff f9f7 	bl	80816d4 <HAL_I2C_Release>
}
 80822e6:	fab0 f080 	clz	r0, r0
 80822ea:	0940      	lsrs	r0, r0, #5
 80822ec:	bd08      	pop	{r3, pc}

080822ee <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80822ee:	4770      	bx	lr

080822f0 <_ZN9IPAddressD0Ev>:
 80822f0:	b510      	push	{r4, lr}
 80822f2:	4604      	mov	r4, r0
 80822f4:	2108      	movs	r1, #8
 80822f6:	f000 fee0 	bl	80830ba <_ZdlPvj>
 80822fa:	4620      	mov	r0, r4
 80822fc:	bd10      	pop	{r4, pc}

080822fe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80822fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082300:	460f      	mov	r7, r1
 8082302:	f100 0608 	add.w	r6, r0, #8
 8082306:	1d05      	adds	r5, r0, #4
 8082308:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808230a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808230e:	220a      	movs	r2, #10
 8082310:	4638      	mov	r0, r7
 8082312:	f000 f8ea 	bl	80824ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082316:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082318:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808231a:	d007      	beq.n	808232c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808231c:	2c00      	cmp	r4, #0
 808231e:	d0f4      	beq.n	808230a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082320:	212e      	movs	r1, #46	; 0x2e
 8082322:	4638      	mov	r0, r7
 8082324:	f000 f8c8 	bl	80824b8 <_ZN5Print5printEc>
 8082328:	4404      	add	r4, r0
 808232a:	e7ee      	b.n	808230a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808232c:	4620      	mov	r0, r4
 808232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082330 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082330:	4a02      	ldr	r2, [pc, #8]	; (808233c <_ZN9IPAddressC1Ev+0xc>)
 8082332:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082334:	2200      	movs	r2, #0
 8082336:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082338:	4770      	bx	lr
 808233a:	bf00      	nop
 808233c:	080870f0 	.word	0x080870f0

08082340 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082340:	4a02      	ldr	r2, [pc, #8]	; (808234c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082342:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082344:	680a      	ldr	r2, [r1, #0]
 8082346:	6042      	str	r2, [r0, #4]
}
 8082348:	4770      	bx	lr
 808234a:	bf00      	nop
 808234c:	080870f0 	.word	0x080870f0

08082350 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082350:	4a01      	ldr	r2, [pc, #4]	; (8082358 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082352:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082354:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082356:	4770      	bx	lr
 8082358:	080870f0 	.word	0x080870f0

0808235c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808235c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808235e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082362:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082366:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808236a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808236e:	6041      	str	r1, [r0, #4]
 8082370:	bd10      	pop	{r4, pc}
	...

08082374 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082376:	4d04      	ldr	r5, [pc, #16]	; (8082388 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082378:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808237a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808237e:	9500      	str	r5, [sp, #0]
 8082380:	f7ff ffec 	bl	808235c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082384:	b003      	add	sp, #12
 8082386:	bd30      	pop	{r4, r5, pc}
 8082388:	080870f0 	.word	0x080870f0

0808238c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 808238c:	6800      	ldr	r0, [r0, #0]
 808238e:	f7ff b8e9 	b.w	8081564 <os_mutex_recursive_lock>
	...

08082394 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082394:	4a01      	ldr	r2, [pc, #4]	; (808239c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082396:	4b02      	ldr	r3, [pc, #8]	; (80823a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082398:	601a      	str	r2, [r3, #0]
 808239a:	4770      	bx	lr
 808239c:	08087172 	.word	0x08087172
 80823a0:	20000458 	.word	0x20000458

080823a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80823a4:	2300      	movs	r3, #0
 80823a6:	461a      	mov	r2, r3
 80823a8:	6840      	ldr	r0, [r0, #4]
 80823aa:	f7ff bae9 	b.w	8081980 <network_connect>

080823ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80823ae:	2200      	movs	r2, #0
 80823b0:	2102      	movs	r1, #2
 80823b2:	6840      	ldr	r0, [r0, #4]
 80823b4:	f7ff baf4 	b.w	80819a0 <network_disconnect>

080823b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80823b8:	2200      	movs	r2, #0
 80823ba:	4611      	mov	r1, r2
 80823bc:	6840      	ldr	r0, [r0, #4]
 80823be:	f7ff bae7 	b.w	8081990 <network_connecting>

080823c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80823c2:	2200      	movs	r2, #0
 80823c4:	4611      	mov	r1, r2
 80823c6:	6840      	ldr	r0, [r0, #4]
 80823c8:	f7ff baf2 	b.w	80819b0 <network_ready>

080823cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80823cc:	2300      	movs	r3, #0
 80823ce:	461a      	mov	r2, r3
 80823d0:	4619      	mov	r1, r3
 80823d2:	6840      	ldr	r0, [r0, #4]
 80823d4:	f7ff baf4 	b.w	80819c0 <network_on>

080823d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80823d8:	2300      	movs	r3, #0
 80823da:	461a      	mov	r2, r3
 80823dc:	4619      	mov	r1, r3
 80823de:	6840      	ldr	r0, [r0, #4]
 80823e0:	f7ff baf6 	b.w	80819d0 <network_off>

080823e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80823e4:	2200      	movs	r2, #0
 80823e6:	f081 0101 	eor.w	r1, r1, #1
 80823ea:	6840      	ldr	r0, [r0, #4]
 80823ec:	f7ff baf8 	b.w	80819e0 <network_listen>

080823f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80823f0:	2200      	movs	r2, #0
 80823f2:	6840      	ldr	r0, [r0, #4]
 80823f4:	f7ff bb04 	b.w	8081a00 <network_set_listen_timeout>

080823f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80823f8:	2200      	movs	r2, #0
 80823fa:	4611      	mov	r1, r2
 80823fc:	6840      	ldr	r0, [r0, #4]
 80823fe:	f7ff bb07 	b.w	8081a10 <network_get_listen_timeout>

08082402 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082402:	2200      	movs	r2, #0
 8082404:	4611      	mov	r1, r2
 8082406:	6840      	ldr	r0, [r0, #4]
 8082408:	f7ff baf2 	b.w	80819f0 <network_listening>

0808240c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808240e:	4617      	mov	r7, r2
 8082410:	b087      	sub	sp, #28
 8082412:	4605      	mov	r5, r0
    IPAddress addr;
 8082414:	a804      	add	r0, sp, #16
 8082416:	f7ff ff8b 	bl	8082330 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808241a:	2600      	movs	r6, #0
 808241c:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808241e:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082420:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082424:	f002 fad9 	bl	80849da <strlen>
 8082428:	4b0a      	ldr	r3, [pc, #40]	; (8082454 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808242a:	9600      	str	r6, [sp, #0]
 808242c:	b281      	uxth	r1, r0
 808242e:	685b      	ldr	r3, [r3, #4]
 8082430:	4622      	mov	r2, r4
 8082432:	4638      	mov	r0, r7
 8082434:	f7ff f87e 	bl	8081534 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082438:	b120      	cbz	r0, 8082444 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808243a:	4631      	mov	r1, r6
 808243c:	4628      	mov	r0, r5
 808243e:	f7ff ff87 	bl	8082350 <_ZN9IPAddressC1Em>
 8082442:	e003      	b.n	808244c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082444:	4621      	mov	r1, r4
 8082446:	4628      	mov	r0, r5
 8082448:	f7ff ff7a 	bl	8082340 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808244c:	4628      	mov	r0, r5
 808244e:	b007      	add	sp, #28
 8082450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082452:	bf00      	nop
 8082454:	20000428 	.word	0x20000428

08082458 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082458:	4b02      	ldr	r3, [pc, #8]	; (8082464 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808245a:	4a03      	ldr	r2, [pc, #12]	; (8082468 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808245c:	601a      	str	r2, [r3, #0]
 808245e:	2200      	movs	r2, #0
 8082460:	605a      	str	r2, [r3, #4]
 8082462:	4770      	bx	lr
 8082464:	2000045c 	.word	0x2000045c
 8082468:	080871e8 	.word	0x080871e8

0808246c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808246e:	4606      	mov	r6, r0
 8082470:	460d      	mov	r5, r1
 8082472:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082474:	2400      	movs	r4, #0
  while (size--) {
 8082476:	42bd      	cmp	r5, r7
 8082478:	d00c      	beq.n	8082494 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808247a:	6833      	ldr	r3, [r6, #0]
 808247c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082480:	689b      	ldr	r3, [r3, #8]
 8082482:	4630      	mov	r0, r6
 8082484:	4798      	blx	r3
     if (chunk>=0)
 8082486:	2800      	cmp	r0, #0
 8082488:	db01      	blt.n	808248e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808248a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808248c:	e7f3      	b.n	8082476 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808248e:	2c00      	cmp	r4, #0
 8082490:	bf08      	it	eq
 8082492:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082494:	4620      	mov	r0, r4
 8082496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082498 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082498:	b570      	push	{r4, r5, r6, lr}
 808249a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808249c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808249e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80824a0:	b149      	cbz	r1, 80824b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80824a2:	f002 fa9a 	bl	80849da <strlen>
 80824a6:	682b      	ldr	r3, [r5, #0]
 80824a8:	4602      	mov	r2, r0
 80824aa:	4621      	mov	r1, r4
 80824ac:	4628      	mov	r0, r5
    }
 80824ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80824b2:	68db      	ldr	r3, [r3, #12]
 80824b4:	4718      	bx	r3
    }
 80824b6:	bd70      	pop	{r4, r5, r6, pc}

080824b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80824b8:	6803      	ldr	r3, [r0, #0]
 80824ba:	689b      	ldr	r3, [r3, #8]
 80824bc:	4718      	bx	r3

080824be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80824be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80824c0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80824c2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80824c4:	f7ff fff8 	bl	80824b8 <_ZN5Print5printEc>
  n += print('\n');
 80824c8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80824ca:	4604      	mov	r4, r0
  n += print('\n');
 80824cc:	4628      	mov	r0, r5
 80824ce:	f7ff fff3 	bl	80824b8 <_ZN5Print5printEc>
  return n;
}
 80824d2:	4420      	add	r0, r4
 80824d4:	bd38      	pop	{r3, r4, r5, pc}

080824d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80824d6:	b538      	push	{r3, r4, r5, lr}
 80824d8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80824da:	f7ff ffdd 	bl	8082498 <_ZN5Print5writeEPKc>
 80824de:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80824e0:	4628      	mov	r0, r5
 80824e2:	f7ff ffec 	bl	80824be <_ZN5Print7printlnEv>
  return n;
}
 80824e6:	4420      	add	r0, r4
 80824e8:	bd38      	pop	{r3, r4, r5, pc}

080824ea <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80824ea:	2a01      	cmp	r2, #1
 80824ec:	bf98      	it	ls
 80824ee:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80824f0:	b530      	push	{r4, r5, lr}
 80824f2:	460b      	mov	r3, r1
 80824f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80824f6:	2100      	movs	r1, #0
 80824f8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80824fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8082500:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8082504:	fb05 3312 	mls	r3, r5, r2, r3
 8082508:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808250a:	2b09      	cmp	r3, #9
 808250c:	bf94      	ite	ls
 808250e:	3330      	addls	r3, #48	; 0x30
 8082510:	3337      	addhi	r3, #55	; 0x37
 8082512:	b2db      	uxtb	r3, r3
 8082514:	4621      	mov	r1, r4
 8082516:	f804 3901 	strb.w	r3, [r4], #-1
 808251a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808251c:	2d00      	cmp	r5, #0
 808251e:	d1ef      	bne.n	8082500 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082520:	f7ff ffba 	bl	8082498 <_ZN5Print5writeEPKc>
}
 8082524:	b00b      	add	sp, #44	; 0x2c
 8082526:	bd30      	pop	{r4, r5, pc}

08082528 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082528:	b510      	push	{r4, lr}
 808252a:	4604      	mov	r4, r0
 808252c:	f7ff fb4d 	bl	8081bca <_ZNSt14_Function_baseD1Ev>
 8082530:	4620      	mov	r0, r4
 8082532:	bd10      	pop	{r4, pc}

08082534 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082534:	4803      	ldr	r0, [pc, #12]	; (8082544 <_GLOBAL__sub_I_RGB+0x10>)
 8082536:	2300      	movs	r3, #0
 8082538:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808253a:	4a03      	ldr	r2, [pc, #12]	; (8082548 <_GLOBAL__sub_I_RGB+0x14>)
 808253c:	4903      	ldr	r1, [pc, #12]	; (808254c <_GLOBAL__sub_I_RGB+0x18>)
 808253e:	f000 bdb7 	b.w	80830b0 <__aeabi_atexit>
 8082542:	bf00      	nop
 8082544:	20000464 	.word	0x20000464
 8082548:	20000238 	.word	0x20000238
 808254c:	08082529 	.word	0x08082529

08082550 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082550:	b510      	push	{r4, lr}
 8082552:	4b04      	ldr	r3, [pc, #16]	; (8082564 <_ZN8SPIClassD1Ev+0x14>)
 8082554:	4604      	mov	r4, r0
 8082556:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8082558:	68c0      	ldr	r0, [r0, #12]
 808255a:	b108      	cbz	r0, 8082560 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 808255c:	f7fe fffa 	bl	8081554 <os_mutex_recursive_destroy>
 8082560:	4620      	mov	r0, r4
 8082562:	bd10      	pop	{r4, pc}
 8082564:	0808721c 	.word	0x0808721c

08082568 <_ZN8SPIClassD0Ev>:
 8082568:	b510      	push	{r4, lr}
 808256a:	4604      	mov	r4, r0
 808256c:	f7ff fff0 	bl	8082550 <_ZN8SPIClassD1Ev>
 8082570:	4620      	mov	r0, r4
 8082572:	2110      	movs	r1, #16
 8082574:	f000 fda1 	bl	80830ba <_ZdlPvj>
 8082578:	4620      	mov	r0, r4
 808257a:	bd10      	pop	{r4, pc}

0808257c <_ZN14RecursiveMutex6unlockEv>:
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808257c:	6800      	ldr	r0, [r0, #0]
 808257e:	f7fe bff9 	b.w	8081574 <os_mutex_recursive_unlock>
	...

08082584 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082584:	b570      	push	{r4, r5, r6, lr}
 8082586:	4604      	mov	r4, r0
 8082588:	460e      	mov	r6, r1
 808258a:	4b07      	ldr	r3, [pc, #28]	; (80825a8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808258c:	2500      	movs	r5, #0
 808258e:	6003      	str	r3, [r0, #0]
 8082590:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 8082594:	f7fe ffd6 	bl	8081544 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8082598:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 808259a:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 808259c:	f7ff f8d2 	bl	8081744 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80825a0:	60a5      	str	r5, [r4, #8]
}
 80825a2:	4620      	mov	r0, r4
 80825a4:	bd70      	pop	{r4, r5, r6, pc}
 80825a6:	bf00      	nop
 80825a8:	0808721c 	.word	0x0808721c

080825ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80825ac:	b538      	push	{r3, r4, r5, lr}
 80825ae:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80825b0:	f100 040c 	add.w	r4, r0, #12
 80825b4:	4620      	mov	r0, r4
 80825b6:	f7ff fee9 	bl	808238c <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80825ba:	7928      	ldrb	r0, [r5, #4]
 80825bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80825c0:	f7ff f898 	bl	80816f4 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80825c4:	4620      	mov	r0, r4
 80825c6:	f7ff ffd9 	bl	808257c <_ZN14RecursiveMutex6unlockEv>
 80825ca:	bd38      	pop	{r3, r4, r5, pc}

080825cc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80825cc:	b570      	push	{r4, r5, r6, lr}
 80825ce:	4605      	mov	r5, r0
 80825d0:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80825d2:	f100 040c 	add.w	r4, r0, #12
 80825d6:	4620      	mov	r0, r4
 80825d8:	f7ff fed8 	bl	808238c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80825dc:	7928      	ldrb	r0, [r5, #4]
 80825de:	4631      	mov	r1, r6
 80825e0:	f7ff f890 	bl	8081704 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80825e4:	4620      	mov	r0, r4
 80825e6:	f7ff ffc9 	bl	808257c <_ZN14RecursiveMutex6unlockEv>
 80825ea:	bd70      	pop	{r4, r5, r6, pc}

080825ec <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80825ec:	b570      	push	{r4, r5, r6, lr}
 80825ee:	4605      	mov	r5, r0
 80825f0:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80825f2:	f100 040c 	add.w	r4, r0, #12
 80825f6:	4620      	mov	r0, r4
 80825f8:	f7ff fec8 	bl	808238c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80825fc:	7928      	ldrb	r0, [r5, #4]
 80825fe:	4631      	mov	r1, r6
 8082600:	f7ff f888 	bl	8081714 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082604:	4620      	mov	r0, r4
 8082606:	f7ff ffb9 	bl	808257c <_ZN14RecursiveMutex6unlockEv>
 808260a:	bd70      	pop	{r4, r5, r6, pc}

0808260c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808260c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808260e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8082610:	6018      	str	r0, [r3, #0]
 8082612:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8082614:	6818      	ldr	r0, [r3, #0]
 8082616:	b2e5      	uxtb	r5, r4
 8082618:	4288      	cmp	r0, r1
 808261a:	d906      	bls.n	808262a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808261c:	3401      	adds	r4, #1
 808261e:	2c08      	cmp	r4, #8
 8082620:	d002      	beq.n	8082628 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8082622:	0840      	lsrs	r0, r0, #1
 8082624:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8082626:	e7f5      	b.n	8082614 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8082628:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808262a:	4b02      	ldr	r3, [pc, #8]	; (8082634 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808262c:	5d5b      	ldrb	r3, [r3, r5]
 808262e:	7013      	strb	r3, [r2, #0]
 8082630:	bd30      	pop	{r4, r5, pc}
 8082632:	bf00      	nop
 8082634:	08087224 	.word	0x08087224

08082638 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8082638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808263c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 808263e:	f100 060c 	add.w	r6, r0, #12
 8082642:	b088      	sub	sp, #32
    unsigned clock = 0;
 8082644:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8082646:	fb02 f701 	mul.w	r7, r2, r1
 808264a:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 808264c:	9402      	str	r4, [sp, #8]
 808264e:	f7ff fe9d 	bl	808238c <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8082652:	f895 8004 	ldrb.w	r8, [r5, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8082656:	4621      	mov	r1, r4
 8082658:	2214      	movs	r2, #20
 808265a:	a803      	add	r0, sp, #12
 808265c:	f002 f951 	bl	8084902 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8082660:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8082662:	4622      	mov	r2, r4
 8082664:	a903      	add	r1, sp, #12
 8082666:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8082668:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 808266c:	f7ff f87a 	bl	8081764 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8082670:	ab02      	add	r3, sp, #8
 8082672:	f10d 0207 	add.w	r2, sp, #7
 8082676:	4639      	mov	r1, r7
 8082678:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 808267a:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808267e:	f7ff ffc5 	bl	808260c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 8082682:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8082686:	7928      	ldrb	r0, [r5, #4]
 8082688:	f7ff f84c 	bl	8081724 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 808268c:	4630      	mov	r0, r6
 808268e:	f7ff ff75 	bl	808257c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 8082692:	9802      	ldr	r0, [sp, #8]
 8082694:	b008      	add	sp, #32
 8082696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808269a <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 808269a:	b570      	push	{r4, r5, r6, lr}
 808269c:	4605      	mov	r5, r0
 808269e:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80826a0:	f100 040c 	add.w	r4, r0, #12
 80826a4:	4620      	mov	r0, r4
 80826a6:	f7ff fe71 	bl	808238c <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 80826aa:	4631      	mov	r1, r6
 80826ac:	7928      	ldrb	r0, [r5, #4]
 80826ae:	f7ff f841 	bl	8081734 <HAL_SPI_Send_Receive_Data>
 80826b2:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80826b4:	4620      	mov	r0, r4
 80826b6:	f7ff ff61 	bl	808257c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 80826ba:	b2e8      	uxtb	r0, r5
 80826bc:	bd70      	pop	{r4, r5, r6, pc}

080826be <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80826be:	7900      	ldrb	r0, [r0, #4]
 80826c0:	f7ff b848 	b.w	8081754 <HAL_SPI_Is_Enabled>

080826c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80826c4:	b510      	push	{r4, lr}
 80826c6:	4604      	mov	r4, r0
{
	free(buffer);
 80826c8:	6800      	ldr	r0, [r0, #0]
 80826ca:	f7ff f9b1 	bl	8081a30 <free>
}
 80826ce:	4620      	mov	r0, r4
 80826d0:	bd10      	pop	{r4, pc}

080826d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80826d2:	b510      	push	{r4, lr}
 80826d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80826d6:	6800      	ldr	r0, [r0, #0]
 80826d8:	b108      	cbz	r0, 80826de <_ZN6String10invalidateEv+0xc>
 80826da:	f7ff f9a9 	bl	8081a30 <free>
	buffer = NULL;
 80826de:	2300      	movs	r3, #0
 80826e0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80826e2:	60a3      	str	r3, [r4, #8]
 80826e4:	6063      	str	r3, [r4, #4]
 80826e6:	bd10      	pop	{r4, pc}

080826e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80826e8:	b538      	push	{r3, r4, r5, lr}
 80826ea:	4604      	mov	r4, r0
 80826ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80826ee:	6800      	ldr	r0, [r0, #0]
 80826f0:	3101      	adds	r1, #1
 80826f2:	f7ff f9a5 	bl	8081a40 <realloc>
	if (newbuffer) {
 80826f6:	b110      	cbz	r0, 80826fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80826f8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80826fc:	2001      	movs	r0, #1
	}
	return 0;
}
 80826fe:	bd38      	pop	{r3, r4, r5, pc}

08082700 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082700:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082702:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082704:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082706:	b113      	cbz	r3, 808270e <_ZN6String7reserveEj+0xe>
 8082708:	6843      	ldr	r3, [r0, #4]
 808270a:	428b      	cmp	r3, r1
 808270c:	d207      	bcs.n	808271e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808270e:	4620      	mov	r0, r4
 8082710:	f7ff ffea 	bl	80826e8 <_ZN6String12changeBufferEj>
 8082714:	b120      	cbz	r0, 8082720 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082716:	68a3      	ldr	r3, [r4, #8]
 8082718:	b90b      	cbnz	r3, 808271e <_ZN6String7reserveEj+0x1e>
 808271a:	6822      	ldr	r2, [r4, #0]
 808271c:	7013      	strb	r3, [r2, #0]
 808271e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082720:	bd10      	pop	{r4, pc}

08082722 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082722:	b570      	push	{r4, r5, r6, lr}
 8082724:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082726:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082728:	4604      	mov	r4, r0
 808272a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808272c:	f7ff ffe8 	bl	8082700 <_ZN6String7reserveEj>
 8082730:	b918      	cbnz	r0, 808273a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082732:	4620      	mov	r0, r4
 8082734:	f7ff ffcd 	bl	80826d2 <_ZN6String10invalidateEv>
		return *this;
 8082738:	e009      	b.n	808274e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808273a:	462a      	mov	r2, r5
 808273c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808273e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082740:	6820      	ldr	r0, [r4, #0]
 8082742:	f002 f8d3 	bl	80848ec <memcpy>
	buffer[len] = 0;
 8082746:	6822      	ldr	r2, [r4, #0]
 8082748:	68a3      	ldr	r3, [r4, #8]
 808274a:	2100      	movs	r1, #0
 808274c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808274e:	4620      	mov	r0, r4
 8082750:	bd70      	pop	{r4, r5, r6, pc}

08082752 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8082752:	b538      	push	{r3, r4, r5, lr}
 8082754:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082756:	460c      	mov	r4, r1
 8082758:	b141      	cbz	r1, 808276c <_ZN6StringaSEPKc+0x1a>
 808275a:	4608      	mov	r0, r1
 808275c:	f002 f93d 	bl	80849da <strlen>
 8082760:	4621      	mov	r1, r4
 8082762:	4602      	mov	r2, r0
 8082764:	4628      	mov	r0, r5
 8082766:	f7ff ffdc 	bl	8082722 <_ZN6String4copyEPKcj>
 808276a:	e001      	b.n	8082770 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808276c:	f7ff ffb1 	bl	80826d2 <_ZN6String10invalidateEv>

	return *this;
}
 8082770:	4628      	mov	r0, r5
 8082772:	bd38      	pop	{r3, r4, r5, pc}

08082774 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082774:	b510      	push	{r4, lr}
 8082776:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082778:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808277a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808277c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808277e:	6063      	str	r3, [r4, #4]
	len = 0;
 8082780:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8082782:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082784:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8082786:	a901      	add	r1, sp, #4
 8082788:	f000 fac9 	bl	8082d1e <itoa>
	*this = buf;
 808278c:	a901      	add	r1, sp, #4
 808278e:	4620      	mov	r0, r4
 8082790:	f7ff ffdf 	bl	8082752 <_ZN6StringaSEPKc>
}
 8082794:	4620      	mov	r0, r4
 8082796:	b00a      	add	sp, #40	; 0x28
 8082798:	bd10      	pop	{r4, pc}

0808279a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808279a:	b510      	push	{r4, lr}
 808279c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808279e:	6800      	ldr	r0, [r0, #0]
 80827a0:	b118      	cbz	r0, 80827aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80827a2:	f7ff f945 	bl	8081a30 <free>
            wakeupSource_ = nullptr;
 80827a6:	2300      	movs	r3, #0
 80827a8:	6023      	str	r3, [r4, #0]
 80827aa:	bd10      	pop	{r4, pc}

080827ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80827ac:	b510      	push	{r4, lr}
 80827ae:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80827b0:	f7ff fff3 	bl	808279a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80827b4:	4620      	mov	r0, r4
 80827b6:	bd10      	pop	{r4, pc}

080827b8 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827b8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80827ba:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827be:	460d      	mov	r5, r1
        error_ = result.error_;
 80827c0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80827c2:	460b      	mov	r3, r1
 80827c4:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827c8:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 80827ca:	f8c0 2006 	str.w	r2, [r0, #6]
 80827ce:	889b      	ldrh	r3, [r3, #4]
 80827d0:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80827d2:	f7ff ffe2 	bl	808279a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 80827d6:	682b      	ldr	r3, [r5, #0]
 80827d8:	b113      	cbz	r3, 80827e0 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80827da:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80827dc:	2300      	movs	r3, #0
 80827de:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 80827e0:	4620      	mov	r0, r4
 80827e2:	bd38      	pop	{r3, r4, r5, pc}

080827e4 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80827e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 80827e8:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80827ea:	b90b      	cbnz	r3, 80827f0 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 80827ec:	680a      	ldr	r2, [r1, #0]
 80827ee:	b19a      	cbz	r2, 8082818 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 80827f0:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 80827f2:	b15c      	cbz	r4, 808280c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 80827f4:	88a2      	ldrh	r2, [r4, #4]
 80827f6:	2a01      	cmp	r2, #1
 80827f8:	d003      	beq.n	8082802 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 80827fa:	2a04      	cmp	r2, #4
 80827fc:	d106      	bne.n	808280c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80827fe:	2202      	movs	r2, #2
 8082800:	e005      	b.n	808280e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082802:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082804:	718a      	strb	r2, [r1, #6]
 8082806:	810b      	strh	r3, [r1, #8]
 8082808:	814c      	strh	r4, [r1, #10]
                    break;
 808280a:	e005      	b.n	8082818 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808280c:	2204      	movs	r2, #4
 808280e:	810b      	strh	r3, [r1, #8]
 8082810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082814:	718a      	strb	r2, [r1, #6]
 8082816:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8082818:	f851 3f06 	ldr.w	r3, [r1, #6]!
 808281c:	6003      	str	r3, [r0, #0]
 808281e:	888b      	ldrh	r3, [r1, #4]
 8082820:	8083      	strh	r3, [r0, #4]
    }
 8082822:	bd10      	pop	{r4, pc}

08082824 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082824:	4601      	mov	r1, r0
 8082826:	2200      	movs	r2, #0
 8082828:	208c      	movs	r0, #140	; 0x8c
 808282a:	f7fe beab 	b.w	8081584 <HAL_Core_System_Reset_Ex>

0808282e <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 808282e:	2000      	movs	r0, #0
 8082830:	f7ff bff8 	b.w	8082824 <_ZN11SystemClass5resetEm>

08082834 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8082834:	b510      	push	{r4, lr}
 8082836:	2400      	movs	r4, #0
 8082838:	7004      	strb	r4, [r0, #0]
 808283a:	8044      	strh	r4, [r0, #2]
 808283c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8082840:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8082842:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8082844:	dd07      	ble.n	8082856 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8082846:	3901      	subs	r1, #1
 8082848:	4299      	cmp	r1, r3
 808284a:	d209      	bcs.n	8082860 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 808284c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8082850:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8082852:	2301      	movs	r3, #1
 8082854:	e001      	b.n	808285a <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8082856:	d102      	bne.n	808285e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8082858:	2302      	movs	r3, #2
 808285a:	7003      	strb	r3, [r0, #0]
 808285c:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 808285e:	8041      	strh	r1, [r0, #2]
    }
}
 8082860:	bd10      	pop	{r4, pc}
	...

08082864 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8082864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082866:	460e      	mov	r6, r1
 8082868:	4617      	mov	r7, r2
 808286a:	b08b      	sub	sp, #44	; 0x2c
 808286c:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808286e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8082870:	2400      	movs	r4, #0
 8082872:	9301      	str	r3, [sp, #4]
 8082874:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8082876:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8082878:	9402      	str	r4, [sp, #8]
 808287a:	9300      	str	r3, [sp, #0]
 808287c:	4639      	mov	r1, r7
 808287e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8082880:	4630      	mov	r0, r6
 8082882:	f7ff f83b 	bl	80818fc <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8082886:	463b      	mov	r3, r7
 8082888:	4632      	mov	r2, r6
 808288a:	4601      	mov	r1, r0
 808288c:	a805      	add	r0, sp, #20
 808288e:	f7ff ffd1 	bl	8082834 <_ZN11SleepResultC1EiPKtj>
 8082892:	f89d 1014 	ldrb.w	r1, [sp, #20]
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8082896:	9407      	str	r4, [sp, #28]
 8082898:	f8ad 4020 	strh.w	r4, [sp, #32]
 808289c:	4c0c      	ldr	r4, [pc, #48]	; (80828d0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 808289e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80828a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80828a6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80828aa:	4620      	mov	r0, r4
 80828ac:	a907      	add	r1, sp, #28
 80828ae:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80828b2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80828b6:	f7ff ff7f 	bl	80827b8 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80828ba:	a807      	add	r0, sp, #28
 80828bc:	f7ff ff6d 	bl	808279a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 80828c0:	4628      	mov	r0, r5
 80828c2:	4621      	mov	r1, r4
 80828c4:	f7ff ff8e 	bl	80827e4 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 80828c8:	4628      	mov	r0, r5
 80828ca:	b00b      	add	sp, #44	; 0x2c
 80828cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80828ce:	bf00      	nop
 80828d0:	20000474 	.word	0x20000474

080828d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80828d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80828d8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80828da:	4c08      	ldr	r4, [pc, #32]	; (80828fc <_GLOBAL__sub_I_System+0x28>)
 80828dc:	2000      	movs	r0, #0
 80828de:	6020      	str	r0, [r4, #0]
 80828e0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80828e2:	71a0      	strb	r0, [r4, #6]
 80828e4:	8120      	strh	r0, [r4, #8]
 80828e6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80828e8:	f7fe ffc4 	bl	8081874 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80828ec:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80828ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80828f2:	4a03      	ldr	r2, [pc, #12]	; (8082900 <_GLOBAL__sub_I_System+0x2c>)
 80828f4:	4903      	ldr	r1, [pc, #12]	; (8082904 <_GLOBAL__sub_I_System+0x30>)
 80828f6:	f000 bbdb 	b.w	80830b0 <__aeabi_atexit>
 80828fa:	bf00      	nop
 80828fc:	20000474 	.word	0x20000474
 8082900:	20000238 	.word	0x20000238
 8082904:	080827ad 	.word	0x080827ad

08082908 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082908:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808290a:	4b14      	ldr	r3, [pc, #80]	; (808295c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808290c:	4f14      	ldr	r7, [pc, #80]	; (8082960 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808290e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082910:	4b14      	ldr	r3, [pc, #80]	; (8082964 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082912:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082914:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082916:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082918:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808291a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808291c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808291e:	d01b      	beq.n	8082958 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082920:	a80a      	add	r0, sp, #40	; 0x28
 8082922:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082926:	f001 fee5 	bl	80846f4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808292a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808292c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808292e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082930:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082934:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808293a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808293c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808293e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082942:	4c09      	ldr	r4, [pc, #36]	; (8082968 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082944:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082948:	ad01      	add	r5, sp, #4
 808294a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808294c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808294e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082952:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082954:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082958:	b00b      	add	sp, #44	; 0x2c
 808295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808295c:	200004b0 	.word	0x200004b0
 8082960:	200004ac 	.word	0x200004ac
 8082964:	200004a8 	.word	0x200004a8
 8082968:	20000480 	.word	0x20000480

0808296c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808296c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808296e:	2000      	movs	r0, #0
 8082970:	f7fe fff6 	bl	8081960 <spark_sync_time_pending>
 8082974:	b128      	cbz	r0, 8082982 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082976:	f7fe ffdb 	bl	8081930 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808297a:	f080 0001 	eor.w	r0, r0, #1
 808297e:	b2c0      	uxtb	r0, r0
 8082980:	bd08      	pop	{r3, pc}
 8082982:	2001      	movs	r0, #1
    }
 8082984:	bd08      	pop	{r3, pc}

08082986 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082986:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082988:	2000      	movs	r0, #0
 808298a:	f7fe fe1b 	bl	80815c4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808298e:	4604      	mov	r4, r0
 8082990:	b968      	cbnz	r0, 80829ae <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082992:	f7fe ff67 	bl	8081864 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082996:	2801      	cmp	r0, #1
 8082998:	d10b      	bne.n	80829b2 <_ZN9TimeClass7isValidEv+0x2c>
 808299a:	4620      	mov	r0, r4
 808299c:	f7fe ff92 	bl	80818c4 <system_thread_get_state>
 80829a0:	b938      	cbnz	r0, 80829b2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80829a2:	f7ff ffe3 	bl	808296c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80829a6:	b930      	cbnz	r0, 80829b6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80829a8:	f7fe ffba 	bl	8081920 <spark_process>
 80829ac:	e7f9      	b.n	80829a2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80829ae:	2001      	movs	r0, #1
 80829b0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80829b2:	2000      	movs	r0, #0
 80829b4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80829b6:	f7ff ffd9 	bl	808296c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80829ba:	2000      	movs	r0, #0
 80829bc:	f7fe fe02 	bl	80815c4 <HAL_RTC_Time_Is_Valid>
 80829c0:	3000      	adds	r0, #0
 80829c2:	bf18      	it	ne
 80829c4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80829c6:	bd10      	pop	{r4, pc}

080829c8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80829c8:	b508      	push	{r3, lr}
    (void)isValid();
 80829ca:	f7ff ffdc 	bl	8082986 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80829ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80829d2:	f7fe bdef 	b.w	80815b4 <HAL_RTC_Get_UnixTime>
	...

080829d8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80829d8:	b508      	push	{r3, lr}
	return hour(now());
 80829da:	f7ff fff5 	bl	80829c8 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80829de:	f7ff ff93 	bl	8082908 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80829e2:	4b01      	ldr	r3, [pc, #4]	; (80829e8 <_ZN9TimeClass4hourEv+0x10>)
 80829e4:	6898      	ldr	r0, [r3, #8]
 80829e6:	bd08      	pop	{r3, pc}
 80829e8:	20000480 	.word	0x20000480

080829ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80829ec:	4b02      	ldr	r3, [pc, #8]	; (80829f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80829ee:	681a      	ldr	r2, [r3, #0]
 80829f0:	4b02      	ldr	r3, [pc, #8]	; (80829fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80829f2:	601a      	str	r2, [r3, #0]
 80829f4:	4770      	bx	lr
 80829f6:	bf00      	nop
 80829f8:	20000144 	.word	0x20000144
 80829fc:	200004a4 	.word	0x200004a4

08082a00 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082a00:	4770      	bx	lr

08082a02 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082a02:	7441      	strb	r1, [r0, #17]
 8082a04:	4770      	bx	lr

08082a06 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8082a06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082a08:	7c00      	ldrb	r0, [r0, #16]
 8082a0a:	f7fe feeb 	bl	80817e4 <HAL_USART_Available_Data_For_Write>
}
 8082a0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082a12:	bd08      	pop	{r3, pc}

08082a14 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082a14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8082a16:	7c00      	ldrb	r0, [r0, #16]
 8082a18:	f7fe febc 	bl	8081794 <HAL_USART_Available_Data>
}
 8082a1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082a20:	bd08      	pop	{r3, pc}

08082a22 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082a22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082a24:	7c00      	ldrb	r0, [r0, #16]
 8082a26:	f7fe fec5 	bl	80817b4 <HAL_USART_Peek_Data>
}
 8082a2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082a2e:	bf28      	it	cs
 8082a30:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082a34:	bd08      	pop	{r3, pc}

08082a36 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082a36:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082a38:	7c00      	ldrb	r0, [r0, #16]
 8082a3a:	f7fe feb3 	bl	80817a4 <HAL_USART_Read_Data>
}
 8082a3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082a42:	bf28      	it	cs
 8082a44:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082a48:	bd08      	pop	{r3, pc}

08082a4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082a4a:	7c00      	ldrb	r0, [r0, #16]
 8082a4c:	f7fe beba 	b.w	80817c4 <HAL_USART_Flush_Data>

08082a50 <_ZN11USARTSerialD0Ev>:
 8082a50:	b510      	push	{r4, lr}
 8082a52:	4604      	mov	r4, r0
 8082a54:	2114      	movs	r1, #20
 8082a56:	f000 fb30 	bl	80830ba <_ZdlPvj>
 8082a5a:	4620      	mov	r0, r4
 8082a5c:	bd10      	pop	{r4, pc}

08082a5e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082a5e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082a60:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082a62:	4604      	mov	r4, r0
 8082a64:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082a66:	b925      	cbnz	r5, 8082a72 <_ZN11USARTSerial5writeEh+0x14>
 8082a68:	7c00      	ldrb	r0, [r0, #16]
 8082a6a:	f7fe febb 	bl	80817e4 <HAL_USART_Available_Data_For_Write>
 8082a6e:	2800      	cmp	r0, #0
 8082a70:	dd05      	ble.n	8082a7e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082a72:	4631      	mov	r1, r6
 8082a74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082a7a:	f7fe be83 	b.w	8081784 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082a7e:	4628      	mov	r0, r5
 8082a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08082a84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082a84:	b510      	push	{r4, lr}
 8082a86:	4604      	mov	r4, r0
 8082a88:	4608      	mov	r0, r1
 8082a8a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082a8c:	2200      	movs	r2, #0
 8082a8e:	6062      	str	r2, [r4, #4]
 8082a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082a94:	60a2      	str	r2, [r4, #8]
 8082a96:	4a05      	ldr	r2, [pc, #20]	; (8082aac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082a98:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082a9a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082a9c:	2201      	movs	r2, #1
 8082a9e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082aa0:	461a      	mov	r2, r3
 8082aa2:	f7fe fe67 	bl	8081774 <HAL_USART_Init>
}
 8082aa6:	4620      	mov	r0, r4
 8082aa8:	bd10      	pop	{r4, pc}
 8082aaa:	bf00      	nop
 8082aac:	0808725c 	.word	0x0808725c

08082ab0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8082ab0:	2300      	movs	r3, #0
 8082ab2:	7c00      	ldrb	r0, [r0, #16]
 8082ab4:	f7fe be9e 	b.w	80817f4 <HAL_USART_BeginConfig>

08082ab8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8082ab8:	2200      	movs	r2, #0
 8082aba:	f7ff bff9 	b.w	8082ab0 <_ZN11USARTSerial5beginEmm>

08082abe <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082abe:	7c00      	ldrb	r0, [r0, #16]
 8082ac0:	f7fe be88 	b.w	80817d4 <HAL_USART_Is_Enabled>

08082ac4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082ac4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082ac6:	4d0c      	ldr	r5, [pc, #48]	; (8082af8 <_Z22__fetch_global_Serial1v+0x34>)
 8082ac8:	6829      	ldr	r1, [r5, #0]
 8082aca:	f011 0401 	ands.w	r4, r1, #1
 8082ace:	d111      	bne.n	8082af4 <_Z22__fetch_global_Serial1v+0x30>
 8082ad0:	4628      	mov	r0, r5
 8082ad2:	f7fd fae8 	bl	80800a6 <__cxa_guard_acquire>
 8082ad6:	b168      	cbz	r0, 8082af4 <_Z22__fetch_global_Serial1v+0x30>
 8082ad8:	4a08      	ldr	r2, [pc, #32]	; (8082afc <_Z22__fetch_global_Serial1v+0x38>)
 8082ada:	4621      	mov	r1, r4
 8082adc:	4b08      	ldr	r3, [pc, #32]	; (8082b00 <_Z22__fetch_global_Serial1v+0x3c>)
 8082ade:	4809      	ldr	r0, [pc, #36]	; (8082b04 <_Z22__fetch_global_Serial1v+0x40>)
 8082ae0:	f7ff ffd0 	bl	8082a84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082ae4:	4628      	mov	r0, r5
 8082ae6:	f7fd fae3 	bl	80800b0 <__cxa_guard_release>
 8082aea:	4a07      	ldr	r2, [pc, #28]	; (8082b08 <_Z22__fetch_global_Serial1v+0x44>)
 8082aec:	4907      	ldr	r1, [pc, #28]	; (8082b0c <_Z22__fetch_global_Serial1v+0x48>)
 8082aee:	4805      	ldr	r0, [pc, #20]	; (8082b04 <_Z22__fetch_global_Serial1v+0x40>)
 8082af0:	f000 fade 	bl	80830b0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082af4:	4803      	ldr	r0, [pc, #12]	; (8082b04 <_Z22__fetch_global_Serial1v+0x40>)
 8082af6:	bd38      	pop	{r3, r4, r5, pc}
 8082af8:	2000054c 	.word	0x2000054c
 8082afc:	20000550 	.word	0x20000550
 8082b00:	200004c8 	.word	0x200004c8
 8082b04:	200004b4 	.word	0x200004b4
 8082b08:	20000238 	.word	0x20000238
 8082b0c:	08082a01 	.word	0x08082a01

08082b10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082b10:	7441      	strb	r1, [r0, #17]
 8082b12:	4770      	bx	lr

08082b14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082b14:	4770      	bx	lr

08082b16 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082b16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082b18:	2100      	movs	r1, #0
 8082b1a:	7c00      	ldrb	r0, [r0, #16]
 8082b1c:	f7fe fe8a 	bl	8081834 <HAL_USB_USART_Receive_Data>
}
 8082b20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082b24:	bf28      	it	cs
 8082b26:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082b2a:	bd08      	pop	{r3, pc}

08082b2c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082b2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082b2e:	2101      	movs	r1, #1
 8082b30:	7c00      	ldrb	r0, [r0, #16]
 8082b32:	f7fe fe7f 	bl	8081834 <HAL_USB_USART_Receive_Data>
}
 8082b36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082b3a:	bf28      	it	cs
 8082b3c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082b40:	bd08      	pop	{r3, pc}

08082b42 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082b42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082b44:	7c00      	ldrb	r0, [r0, #16]
 8082b46:	f7fe fe6d 	bl	8081824 <HAL_USB_USART_Available_Data_For_Write>
}
 8082b4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082b4e:	bd08      	pop	{r3, pc}

08082b50 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082b50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082b52:	7c00      	ldrb	r0, [r0, #16]
 8082b54:	f7fe fe5e 	bl	8081814 <HAL_USB_USART_Available_Data>
}
 8082b58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082b5c:	bd08      	pop	{r3, pc}

08082b5e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082b5e:	7c00      	ldrb	r0, [r0, #16]
 8082b60:	f7fe be78 	b.w	8081854 <HAL_USB_USART_Flush_Data>

08082b64 <_ZN9USBSerialD0Ev>:
 8082b64:	b510      	push	{r4, lr}
 8082b66:	4604      	mov	r4, r0
 8082b68:	2114      	movs	r1, #20
 8082b6a:	f000 faa6 	bl	80830ba <_ZdlPvj>
 8082b6e:	4620      	mov	r0, r4
 8082b70:	bd10      	pop	{r4, pc}

08082b72 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082b72:	b538      	push	{r3, r4, r5, lr}
 8082b74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082b76:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082b78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082b7a:	f7fe fe53 	bl	8081824 <HAL_USB_USART_Available_Data_For_Write>
 8082b7e:	2800      	cmp	r0, #0
 8082b80:	dc01      	bgt.n	8082b86 <_ZN9USBSerial5writeEh+0x14>
 8082b82:	7c60      	ldrb	r0, [r4, #17]
 8082b84:	b128      	cbz	r0, 8082b92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082b86:	4629      	mov	r1, r5
 8082b88:	7c20      	ldrb	r0, [r4, #16]
 8082b8a:	f7fe fe5b 	bl	8081844 <HAL_USB_USART_Send_Data>
 8082b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082b92:	bd38      	pop	{r3, r4, r5, pc}

08082b94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082b94:	b510      	push	{r4, lr}
 8082b96:	4604      	mov	r4, r0
 8082b98:	2300      	movs	r3, #0
 8082b9a:	6063      	str	r3, [r4, #4]
 8082b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082ba0:	60a3      	str	r3, [r4, #8]
 8082ba2:	4b05      	ldr	r3, [pc, #20]	; (8082bb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082ba4:	4608      	mov	r0, r1
 8082ba6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082ba8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082baa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082bac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082bae:	4611      	mov	r1, r2
 8082bb0:	f7fe fe28 	bl	8081804 <HAL_USB_USART_Init>
}
 8082bb4:	4620      	mov	r0, r4
 8082bb6:	bd10      	pop	{r4, pc}
 8082bb8:	0808728c 	.word	0x0808728c

08082bbc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082bbc:	b510      	push	{r4, lr}
 8082bbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082bc0:	2214      	movs	r2, #20
 8082bc2:	2100      	movs	r1, #0
 8082bc4:	f001 fe9d 	bl	8084902 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082bc8:	4b05      	ldr	r3, [pc, #20]	; (8082be0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082bca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082bcc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082bce:	4b05      	ldr	r3, [pc, #20]	; (8082be4 <_Z19acquireSerialBufferv+0x28>)
 8082bd0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082bd2:	f240 1301 	movw	r3, #257	; 0x101
 8082bd6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082bd8:	2381      	movs	r3, #129	; 0x81
 8082bda:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082bdc:	bd10      	pop	{r4, pc}
 8082bde:	bf00      	nop
 8082be0:	20000659 	.word	0x20000659
 8082be4:	200005d8 	.word	0x200005d8

08082be8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082be8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082bea:	4d0e      	ldr	r5, [pc, #56]	; (8082c24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082bec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082bee:	a801      	add	r0, sp, #4
 8082bf0:	f7ff ffe4 	bl	8082bbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082bf4:	6829      	ldr	r1, [r5, #0]
 8082bf6:	f011 0401 	ands.w	r4, r1, #1
 8082bfa:	d110      	bne.n	8082c1e <_Z16_fetch_usbserialv+0x36>
 8082bfc:	4628      	mov	r0, r5
 8082bfe:	f7fd fa52 	bl	80800a6 <__cxa_guard_acquire>
 8082c02:	b160      	cbz	r0, 8082c1e <_Z16_fetch_usbserialv+0x36>
 8082c04:	aa01      	add	r2, sp, #4
 8082c06:	4621      	mov	r1, r4
 8082c08:	4807      	ldr	r0, [pc, #28]	; (8082c28 <_Z16_fetch_usbserialv+0x40>)
 8082c0a:	f7ff ffc3 	bl	8082b94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082c0e:	4628      	mov	r0, r5
 8082c10:	f7fd fa4e 	bl	80800b0 <__cxa_guard_release>
 8082c14:	4a05      	ldr	r2, [pc, #20]	; (8082c2c <_Z16_fetch_usbserialv+0x44>)
 8082c16:	4906      	ldr	r1, [pc, #24]	; (8082c30 <_Z16_fetch_usbserialv+0x48>)
 8082c18:	4803      	ldr	r0, [pc, #12]	; (8082c28 <_Z16_fetch_usbserialv+0x40>)
 8082c1a:	f000 fa49 	bl	80830b0 <__aeabi_atexit>
	return _usbserial;
}
 8082c1e:	4802      	ldr	r0, [pc, #8]	; (8082c28 <_Z16_fetch_usbserialv+0x40>)
 8082c20:	b007      	add	sp, #28
 8082c22:	bd30      	pop	{r4, r5, pc}
 8082c24:	200005d4 	.word	0x200005d4
 8082c28:	2000075c 	.word	0x2000075c
 8082c2c:	20000238 	.word	0x20000238
 8082c30:	08082b15 	.word	0x08082b15

08082c34 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082c34:	b510      	push	{r4, lr}
 8082c36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082c38:	2214      	movs	r2, #20
 8082c3a:	2100      	movs	r1, #0
 8082c3c:	f001 fe61 	bl	8084902 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082c40:	4b05      	ldr	r3, [pc, #20]	; (8082c58 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082c42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082c44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082c46:	4b05      	ldr	r3, [pc, #20]	; (8082c5c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082c48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082c4a:	f240 1301 	movw	r3, #257	; 0x101
 8082c4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082c50:	2381      	movs	r3, #129	; 0x81
 8082c52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082c54:	bd10      	pop	{r4, pc}
 8082c56:	bf00      	nop
 8082c58:	2000080c 	.word	0x2000080c
 8082c5c:	20000774 	.word	0x20000774

08082c60 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082c60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082c62:	4c0e      	ldr	r4, [pc, #56]	; (8082c9c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082c64:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082c66:	a801      	add	r0, sp, #4
 8082c68:	f7ff ffe4 	bl	8082c34 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082c6c:	6823      	ldr	r3, [r4, #0]
 8082c6e:	07db      	lsls	r3, r3, #31
 8082c70:	d410      	bmi.n	8082c94 <_Z17_fetch_usbserial1v+0x34>
 8082c72:	4620      	mov	r0, r4
 8082c74:	f7fd fa17 	bl	80800a6 <__cxa_guard_acquire>
 8082c78:	b160      	cbz	r0, 8082c94 <_Z17_fetch_usbserial1v+0x34>
 8082c7a:	aa01      	add	r2, sp, #4
 8082c7c:	2101      	movs	r1, #1
 8082c7e:	4808      	ldr	r0, [pc, #32]	; (8082ca0 <_Z17_fetch_usbserial1v+0x40>)
 8082c80:	f7ff ff88 	bl	8082b94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082c84:	4620      	mov	r0, r4
 8082c86:	f7fd fa13 	bl	80800b0 <__cxa_guard_release>
 8082c8a:	4a06      	ldr	r2, [pc, #24]	; (8082ca4 <_Z17_fetch_usbserial1v+0x44>)
 8082c8c:	4906      	ldr	r1, [pc, #24]	; (8082ca8 <_Z17_fetch_usbserial1v+0x48>)
 8082c8e:	4804      	ldr	r0, [pc, #16]	; (8082ca0 <_Z17_fetch_usbserial1v+0x40>)
 8082c90:	f000 fa0e 	bl	80830b0 <__aeabi_atexit>
  return _usbserial1;
}
 8082c94:	4802      	ldr	r0, [pc, #8]	; (8082ca0 <_Z17_fetch_usbserial1v+0x40>)
 8082c96:	b006      	add	sp, #24
 8082c98:	bd10      	pop	{r4, pc}
 8082c9a:	bf00      	nop
 8082c9c:	20000770 	.word	0x20000770
 8082ca0:	200007f8 	.word	0x200007f8
 8082ca4:	20000238 	.word	0x20000238
 8082ca8:	08082b15 	.word	0x08082b15

08082cac <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8082cac:	b510      	push	{r4, lr}
 8082cae:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8082cb0:	f001 fe93 	bl	80849da <strlen>
 8082cb4:	3801      	subs	r0, #1
 8082cb6:	1823      	adds	r3, r4, r0
 8082cb8:	4620      	mov	r0, r4
	while(i<j){
 8082cba:	4298      	cmp	r0, r3
 8082cbc:	d206      	bcs.n	8082ccc <_Z11str_reversePc+0x20>
		c = *i;
 8082cbe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8082cc0:	7819      	ldrb	r1, [r3, #0]
 8082cc2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8082cc6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8082cca:	e7f6      	b.n	8082cba <_Z11str_reversePc+0xe>
 8082ccc:	bd10      	pop	{r4, pc}

08082cce <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8082cce:	b570      	push	{r4, r5, r6, lr}
 8082cd0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8082cd2:	1e91      	subs	r1, r2, #2
 8082cd4:	2922      	cmp	r1, #34	; 0x22
 8082cd6:	d820      	bhi.n	8082d1a <ultoa+0x4c>
 8082cd8:	4625      	mov	r5, r4
 8082cda:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082cdc:	b910      	cbnz	r0, 8082ce4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082cde:	4423      	add	r3, r4
            *ptr++ = '0';
 8082ce0:	2230      	movs	r2, #48	; 0x30
 8082ce2:	e00e      	b.n	8082d02 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082ce4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8082ce8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082cec:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8082cee:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8082cf0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8082cf4:	bf94      	ite	ls
 8082cf6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082cf8:	3157      	addhi	r1, #87	; 0x57
 8082cfa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8082cfe:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082d00:	e7eb      	b.n	8082cda <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d02:	4299      	cmp	r1, r3
 8082d04:	d202      	bcs.n	8082d0c <ultoa+0x3e>
            *ptr++ = '0';
 8082d06:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d0a:	e7fa      	b.n	8082d02 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8082d0c:	2300      	movs	r3, #0
	str_reverse(buffer);
 8082d0e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8082d10:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8082d12:	f7ff ffcb 	bl	8082cac <_Z11str_reversePc>
	return buffer;
 8082d16:	4620      	mov	r0, r4
 8082d18:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8082d1a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8082d1c:	bd70      	pop	{r4, r5, r6, pc}

08082d1e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082d1e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082d20:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082d22:	460c      	mov	r4, r1
 8082d24:	4615      	mov	r5, r2
	if(a<0){
 8082d26:	da0b      	bge.n	8082d40 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082d2c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082d30:	bf14      	ite	ne
 8082d32:	4258      	negne	r0, r3
 8082d34:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082d36:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082d38:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8082d3a:	462a      	mov	r2, r5
 8082d3c:	4419      	add	r1, r3
 8082d3e:	e000      	b.n	8082d42 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8082d40:	2301      	movs	r3, #1
 8082d42:	f7ff ffc4 	bl	8082cce <ultoa>
	}
	return buffer;
}
 8082d46:	4620      	mov	r0, r4
 8082d48:	bd38      	pop	{r3, r4, r5, pc}
	...

08082d4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082d4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082d4e:	4b18      	ldr	r3, [pc, #96]	; (8082db0 <serialEventRun+0x64>)
 8082d50:	b133      	cbz	r3, 8082d60 <serialEventRun+0x14>
 8082d52:	f7ff ff49 	bl	8082be8 <_Z16_fetch_usbserialv>
 8082d56:	6803      	ldr	r3, [r0, #0]
 8082d58:	691b      	ldr	r3, [r3, #16]
 8082d5a:	4798      	blx	r3
 8082d5c:	2800      	cmp	r0, #0
 8082d5e:	dc1e      	bgt.n	8082d9e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082d60:	4b14      	ldr	r3, [pc, #80]	; (8082db4 <serialEventRun+0x68>)
 8082d62:	b133      	cbz	r3, 8082d72 <serialEventRun+0x26>
 8082d64:	f7ff feae 	bl	8082ac4 <_Z22__fetch_global_Serial1v>
 8082d68:	6803      	ldr	r3, [r0, #0]
 8082d6a:	691b      	ldr	r3, [r3, #16]
 8082d6c:	4798      	blx	r3
 8082d6e:	2800      	cmp	r0, #0
 8082d70:	dc18      	bgt.n	8082da4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082d72:	4b11      	ldr	r3, [pc, #68]	; (8082db8 <serialEventRun+0x6c>)
 8082d74:	b10b      	cbz	r3, 8082d7a <serialEventRun+0x2e>
 8082d76:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082d7a:	4b10      	ldr	r3, [pc, #64]	; (8082dbc <serialEventRun+0x70>)
 8082d7c:	b10b      	cbz	r3, 8082d82 <serialEventRun+0x36>
 8082d7e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082d82:	4b0f      	ldr	r3, [pc, #60]	; (8082dc0 <serialEventRun+0x74>)
 8082d84:	b10b      	cbz	r3, 8082d8a <serialEventRun+0x3e>
 8082d86:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082d8a:	4b0e      	ldr	r3, [pc, #56]	; (8082dc4 <serialEventRun+0x78>)
 8082d8c:	b17b      	cbz	r3, 8082dae <serialEventRun+0x62>
 8082d8e:	f7ff ff67 	bl	8082c60 <_Z17_fetch_usbserial1v>
 8082d92:	6803      	ldr	r3, [r0, #0]
 8082d94:	691b      	ldr	r3, [r3, #16]
 8082d96:	4798      	blx	r3
 8082d98:	2800      	cmp	r0, #0
 8082d9a:	dc06      	bgt.n	8082daa <serialEventRun+0x5e>
 8082d9c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082d9e:	f3af 8000 	nop.w
 8082da2:	e7dd      	b.n	8082d60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082da4:	f3af 8000 	nop.w
 8082da8:	e7e3      	b.n	8082d72 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082daa:	f3af 8000 	nop.w
 8082dae:	bd08      	pop	{r3, pc}
	...

08082dc8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082dc8:	b508      	push	{r3, lr}
	serialEventRun();
 8082dca:	f7ff ffbf 	bl	8082d4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082dce:	f7fe fbe9 	bl	80815a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082dd2:	4b01      	ldr	r3, [pc, #4]	; (8082dd8 <_post_loop+0x10>)
 8082dd4:	6018      	str	r0, [r3, #0]
 8082dd6:	bd08      	pop	{r3, pc}
 8082dd8:	20000918 	.word	0x20000918

08082ddc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082ddc:	4802      	ldr	r0, [pc, #8]	; (8082de8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082dde:	4a03      	ldr	r2, [pc, #12]	; (8082dec <_Z33system_initialize_user_backup_ramv+0x10>)
 8082de0:	4903      	ldr	r1, [pc, #12]	; (8082df0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082de2:	1a12      	subs	r2, r2, r0
 8082de4:	f001 bd82 	b.w	80848ec <memcpy>
 8082de8:	40024000 	.word	0x40024000
 8082dec:	40024004 	.word	0x40024004
 8082df0:	08087680 	.word	0x08087680

08082df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082df4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082df6:	2300      	movs	r3, #0
 8082df8:	9300      	str	r3, [sp, #0]
 8082dfa:	461a      	mov	r2, r3
 8082dfc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082e00:	f7fe fd72 	bl	80818e8 <system_ctrl_set_result>
}
 8082e04:	b003      	add	sp, #12
 8082e06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082e0c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082e0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082e0e:	8843      	ldrh	r3, [r0, #2]
 8082e10:	2b0a      	cmp	r3, #10
 8082e12:	d008      	beq.n	8082e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082e14:	2b50      	cmp	r3, #80	; 0x50
 8082e16:	d109      	bne.n	8082e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082e18:	4b09      	ldr	r3, [pc, #36]	; (8082e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082e1a:	681b      	ldr	r3, [r3, #0]
 8082e1c:	b13b      	cbz	r3, 8082e2e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082e1e:	b003      	add	sp, #12
 8082e20:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082e24:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082e26:	f7ff ffe5 	bl	8082df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082e2a:	e006      	b.n	8082e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082e2c:	2300      	movs	r3, #0
 8082e2e:	9300      	str	r3, [sp, #0]
 8082e30:	461a      	mov	r2, r3
 8082e32:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082e36:	f7fe fd57 	bl	80818e8 <system_ctrl_set_result>
        break;
    }
}
 8082e3a:	b003      	add	sp, #12
 8082e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8082e40:	20000910 	.word	0x20000910

08082e44 <module_user_init_hook>:

void module_user_init_hook()
{
 8082e44:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082e46:	4c10      	ldr	r4, [pc, #64]	; (8082e88 <module_user_init_hook+0x44>)
 8082e48:	4d10      	ldr	r5, [pc, #64]	; (8082e8c <module_user_init_hook+0x48>)
 8082e4a:	6823      	ldr	r3, [r4, #0]
 8082e4c:	42ab      	cmp	r3, r5
 8082e4e:	4b10      	ldr	r3, [pc, #64]	; (8082e90 <module_user_init_hook+0x4c>)
 8082e50:	bf0c      	ite	eq
 8082e52:	2201      	moveq	r2, #1
 8082e54:	2200      	movne	r2, #0
 8082e56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082e58:	d002      	beq.n	8082e60 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8082e5a:	f7ff ffbf 	bl	8082ddc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082e5e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082e60:	f7fe fb98 	bl	8081594 <HAL_RNG_GetRandomNumber>
 8082e64:	4604      	mov	r4, r0
    srand(seed);
 8082e66:	f001 fd55 	bl	8084914 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082e6a:	4b0a      	ldr	r3, [pc, #40]	; (8082e94 <module_user_init_hook+0x50>)
 8082e6c:	b113      	cbz	r3, 8082e74 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8082e6e:	4620      	mov	r0, r4
 8082e70:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082e74:	2100      	movs	r1, #0
 8082e76:	4807      	ldr	r0, [pc, #28]	; (8082e94 <module_user_init_hook+0x50>)
 8082e78:	f7fe fd7a 	bl	8081970 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082e80:	2100      	movs	r1, #0
 8082e82:	4805      	ldr	r0, [pc, #20]	; (8082e98 <module_user_init_hook+0x54>)
 8082e84:	f7fe bd26 	b.w	80818d4 <system_ctrl_set_app_request_handler>
 8082e88:	40024000 	.word	0x40024000
 8082e8c:	9a271c1e 	.word	0x9a271c1e
 8082e90:	20000914 	.word	0x20000914
 8082e94:	00000000 	.word	0x00000000
 8082e98:	08082e0d 	.word	0x08082e0d

08082e9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082e9c:	b510      	push	{r4, lr}
 8082e9e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082ea0:	f000 f8e6 	bl	8083070 <_ZN8particle7globals11instanceSpiEv>
 8082ea4:	f7ff fc0b 	bl	80826be <_ZN8SPIClass9isEnabledEv>
 8082ea8:	b128      	cbz	r0, 8082eb6 <pinAvailable+0x1a>
 8082eaa:	f1a4 030d 	sub.w	r3, r4, #13
 8082eae:	2b02      	cmp	r3, #2
 8082eb0:	d801      	bhi.n	8082eb6 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 8082eb2:	2000      	movs	r0, #0
 8082eb4:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082eb6:	f000 f877 	bl	8082fa8 <_Z19__fetch_global_Wirev>
 8082eba:	f7ff fa02 	bl	80822c2 <_ZN7TwoWire9isEnabledEv>
 8082ebe:	b108      	cbz	r0, 8082ec4 <pinAvailable+0x28>
 8082ec0:	2c01      	cmp	r4, #1
 8082ec2:	d9f6      	bls.n	8082eb2 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082ec4:	f7ff fdfe 	bl	8082ac4 <_Z22__fetch_global_Serial1v>
 8082ec8:	f7ff fdf9 	bl	8082abe <_ZN11USARTSerial9isEnabledEv>
 8082ecc:	b118      	cbz	r0, 8082ed6 <pinAvailable+0x3a>
 8082ece:	f1a4 0312 	sub.w	r3, r4, #18
 8082ed2:	2b01      	cmp	r3, #1
 8082ed4:	d9ed      	bls.n	8082eb2 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082ed6:	2c2e      	cmp	r4, #46	; 0x2e
 8082ed8:	bf8c      	ite	hi
 8082eda:	2000      	movhi	r0, #0
 8082edc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082ede:	bd10      	pop	{r4, pc}

08082ee0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082ee0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082ee2:	b538      	push	{r3, r4, r5, lr}
 8082ee4:	4604      	mov	r4, r0
 8082ee6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082ee8:	d80a      	bhi.n	8082f00 <pinMode+0x20>
 8082eea:	29ff      	cmp	r1, #255	; 0xff
 8082eec:	d008      	beq.n	8082f00 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082eee:	f7ff ffd5 	bl	8082e9c <pinAvailable>
 8082ef2:	b128      	cbz	r0, 8082f00 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082ef4:	4629      	mov	r1, r5
 8082ef6:	4620      	mov	r0, r4
}
 8082ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082efc:	f7fe bb72 	b.w	80815e4 <HAL_Pin_Mode>
 8082f00:	bd38      	pop	{r3, r4, r5, pc}

08082f02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082f02:	b538      	push	{r3, r4, r5, lr}
 8082f04:	4604      	mov	r4, r0
 8082f06:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082f08:	f7fe fb74 	bl	80815f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082f0c:	28ff      	cmp	r0, #255	; 0xff
 8082f0e:	d010      	beq.n	8082f32 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082f10:	2806      	cmp	r0, #6
 8082f12:	d804      	bhi.n	8082f1e <digitalWrite+0x1c>
 8082f14:	234d      	movs	r3, #77	; 0x4d
 8082f16:	fa23 f000 	lsr.w	r0, r3, r0
 8082f1a:	07c3      	lsls	r3, r0, #31
 8082f1c:	d409      	bmi.n	8082f32 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082f1e:	4620      	mov	r0, r4
 8082f20:	f7ff ffbc 	bl	8082e9c <pinAvailable>
 8082f24:	b128      	cbz	r0, 8082f32 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082f26:	4629      	mov	r1, r5
 8082f28:	4620      	mov	r0, r4
}
 8082f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082f2e:	f7fe bb69 	b.w	8081604 <HAL_GPIO_Write>
 8082f32:	bd38      	pop	{r3, r4, r5, pc}

08082f34 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082f34:	b510      	push	{r4, lr}
 8082f36:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082f38:	f7fe fb5c 	bl	80815f4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082f3c:	3804      	subs	r0, #4
 8082f3e:	b2c0      	uxtb	r0, r0
 8082f40:	2801      	cmp	r0, #1
 8082f42:	d908      	bls.n	8082f56 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082f44:	4620      	mov	r0, r4
 8082f46:	f7ff ffa9 	bl	8082e9c <pinAvailable>
 8082f4a:	b120      	cbz	r0, 8082f56 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082f4c:	4620      	mov	r0, r4
}
 8082f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082f52:	f7fe bb5f 	b.w	8081614 <HAL_GPIO_Read>
}
 8082f56:	2000      	movs	r0, #0
 8082f58:	bd10      	pop	{r4, pc}
	...

08082f5c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8082f5c:	b570      	push	{r4, r5, r6, lr}
 8082f5e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082f60:	2514      	movs	r5, #20
 8082f62:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082f64:	4e09      	ldr	r6, [pc, #36]	; (8082f8c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082f66:	2100      	movs	r1, #0
 8082f68:	f001 fccb 	bl	8084902 <memset>
 8082f6c:	8025      	strh	r5, [r4, #0]
 8082f6e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082f70:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082f72:	60a5      	str	r5, [r4, #8]
 8082f74:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082f76:	4628      	mov	r0, r5
 8082f78:	f000 f8b9 	bl	80830ee <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082f7c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082f7e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082f80:	4628      	mov	r0, r5
 8082f82:	f000 f8b4 	bl	80830ee <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082f86:	60e0      	str	r0, [r4, #12]

	return config;
}
 8082f88:	4620      	mov	r0, r4
 8082f8a:	bd70      	pop	{r4, r5, r6, pc}
 8082f8c:	080872b4 	.word	0x080872b4

08082f90 <_Z17acquireWireBufferv>:
 8082f90:	b510      	push	{r4, lr}
 8082f92:	4604      	mov	r4, r0
 8082f94:	f7ff ffe2 	bl	8082f5c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8082f98:	4620      	mov	r0, r4
 8082f9a:	bd10      	pop	{r4, pc}

08082f9c <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8082f9c:	b510      	push	{r4, lr}
 8082f9e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8082fa0:	f7ff ffdc 	bl	8082f5c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8082fa4:	4620      	mov	r0, r4
 8082fa6:	bd10      	pop	{r4, pc}

08082fa8 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8082fa8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8082faa:	4d0e      	ldr	r5, [pc, #56]	; (8082fe4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8082fac:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8082fae:	6829      	ldr	r1, [r5, #0]
 8082fb0:	f011 0401 	ands.w	r4, r1, #1
 8082fb4:	d113      	bne.n	8082fde <_Z19__fetch_global_Wirev+0x36>
 8082fb6:	4628      	mov	r0, r5
 8082fb8:	f7fd f875 	bl	80800a6 <__cxa_guard_acquire>
 8082fbc:	b178      	cbz	r0, 8082fde <_Z19__fetch_global_Wirev+0x36>
 8082fbe:	a801      	add	r0, sp, #4
 8082fc0:	f7ff ffe6 	bl	8082f90 <_Z17acquireWireBufferv>
 8082fc4:	aa01      	add	r2, sp, #4
 8082fc6:	4621      	mov	r1, r4
 8082fc8:	4807      	ldr	r0, [pc, #28]	; (8082fe8 <_Z19__fetch_global_Wirev+0x40>)
 8082fca:	f7ff f923 	bl	8082214 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8082fce:	4628      	mov	r0, r5
 8082fd0:	f7fd f86e 	bl	80800b0 <__cxa_guard_release>
 8082fd4:	4a05      	ldr	r2, [pc, #20]	; (8082fec <_Z19__fetch_global_Wirev+0x44>)
 8082fd6:	4906      	ldr	r1, [pc, #24]	; (8082ff0 <_Z19__fetch_global_Wirev+0x48>)
 8082fd8:	4803      	ldr	r0, [pc, #12]	; (8082fe8 <_Z19__fetch_global_Wirev+0x40>)
 8082fda:	f000 f869 	bl	80830b0 <__aeabi_atexit>
	return wire;
}
 8082fde:	4802      	ldr	r0, [pc, #8]	; (8082fe8 <_Z19__fetch_global_Wirev+0x40>)
 8082fe0:	b007      	add	sp, #28
 8082fe2:	bd30      	pop	{r4, r5, pc}
 8082fe4:	2000091c 	.word	0x2000091c
 8082fe8:	20000934 	.word	0x20000934
 8082fec:	20000238 	.word	0x20000238
 8082ff0:	080821bb 	.word	0x080821bb

08082ff4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082ff4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8082ff6:	4c0e      	ldr	r4, [pc, #56]	; (8083030 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082ff8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8082ffa:	6823      	ldr	r3, [r4, #0]
 8082ffc:	07db      	lsls	r3, r3, #31
 8082ffe:	d413      	bmi.n	8083028 <_Z20__fetch_global_Wire3v+0x34>
 8083000:	4620      	mov	r0, r4
 8083002:	f7fd f850 	bl	80800a6 <__cxa_guard_acquire>
 8083006:	b178      	cbz	r0, 8083028 <_Z20__fetch_global_Wire3v+0x34>
 8083008:	a801      	add	r0, sp, #4
 808300a:	f7ff ffc7 	bl	8082f9c <_Z18acquireWire3Bufferv>
 808300e:	aa01      	add	r2, sp, #4
 8083010:	2102      	movs	r1, #2
 8083012:	4808      	ldr	r0, [pc, #32]	; (8083034 <_Z20__fetch_global_Wire3v+0x40>)
 8083014:	f7ff f8fe 	bl	8082214 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8083018:	4620      	mov	r0, r4
 808301a:	f7fd f849 	bl	80800b0 <__cxa_guard_release>
 808301e:	4a06      	ldr	r2, [pc, #24]	; (8083038 <_Z20__fetch_global_Wire3v+0x44>)
 8083020:	4906      	ldr	r1, [pc, #24]	; (808303c <_Z20__fetch_global_Wire3v+0x48>)
 8083022:	4804      	ldr	r0, [pc, #16]	; (8083034 <_Z20__fetch_global_Wire3v+0x40>)
 8083024:	f000 f844 	bl	80830b0 <__aeabi_atexit>
	return wire;
}
 8083028:	4802      	ldr	r0, [pc, #8]	; (8083034 <_Z20__fetch_global_Wire3v+0x40>)
 808302a:	b006      	add	sp, #24
 808302c:	bd10      	pop	{r4, pc}
 808302e:	bf00      	nop
 8083030:	20000948 	.word	0x20000948
 8083034:	20000920 	.word	0x20000920
 8083038:	20000238 	.word	0x20000238
 808303c:	080821bb 	.word	0x080821bb

08083040 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083040:	b513      	push	{r0, r1, r4, lr}
 8083042:	4c08      	ldr	r4, [pc, #32]	; (8083064 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083044:	2300      	movs	r3, #0
 8083046:	461a      	mov	r2, r3
 8083048:	4619      	mov	r1, r3
 808304a:	9300      	str	r3, [sp, #0]
 808304c:	4620      	mov	r0, r4
 808304e:	f7ff f991 	bl	8082374 <_ZN9IPAddressC1Ehhhh>
 8083052:	4620      	mov	r0, r4
 8083054:	4a04      	ldr	r2, [pc, #16]	; (8083068 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083056:	4905      	ldr	r1, [pc, #20]	; (808306c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083058:	b002      	add	sp, #8
 808305a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808305e:	f000 b827 	b.w	80830b0 <__aeabi_atexit>
 8083062:	bf00      	nop
 8083064:	2000094c 	.word	0x2000094c
 8083068:	20000238 	.word	0x20000238
 808306c:	080822ef 	.word	0x080822ef

08083070 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 8083070:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 8083072:	4d0b      	ldr	r5, [pc, #44]	; (80830a0 <_ZN8particle7globals11instanceSpiEv+0x30>)
 8083074:	6829      	ldr	r1, [r5, #0]
 8083076:	f011 0401 	ands.w	r4, r1, #1
 808307a:	d10f      	bne.n	808309c <_ZN8particle7globals11instanceSpiEv+0x2c>
 808307c:	4628      	mov	r0, r5
 808307e:	f7fd f812 	bl	80800a6 <__cxa_guard_acquire>
 8083082:	b158      	cbz	r0, 808309c <_ZN8particle7globals11instanceSpiEv+0x2c>
 8083084:	4621      	mov	r1, r4
 8083086:	4807      	ldr	r0, [pc, #28]	; (80830a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8083088:	f7ff fa7c 	bl	8082584 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808308c:	4628      	mov	r0, r5
 808308e:	f7fd f80f 	bl	80800b0 <__cxa_guard_release>
 8083092:	4a05      	ldr	r2, [pc, #20]	; (80830a8 <_ZN8particle7globals11instanceSpiEv+0x38>)
 8083094:	4905      	ldr	r1, [pc, #20]	; (80830ac <_ZN8particle7globals11instanceSpiEv+0x3c>)
 8083096:	4803      	ldr	r0, [pc, #12]	; (80830a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8083098:	f000 f80a 	bl	80830b0 <__aeabi_atexit>
    return instance;
}
 808309c:	4801      	ldr	r0, [pc, #4]	; (80830a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
 808309e:	bd38      	pop	{r3, r4, r5, pc}
 80830a0:	20000964 	.word	0x20000964
 80830a4:	20000954 	.word	0x20000954
 80830a8:	20000238 	.word	0x20000238
 80830ac:	08082551 	.word	0x08082551

080830b0 <__aeabi_atexit>:
 80830b0:	460b      	mov	r3, r1
 80830b2:	4601      	mov	r1, r0
 80830b4:	4618      	mov	r0, r3
 80830b6:	f001 bb0f 	b.w	80846d8 <__cxa_atexit>

080830ba <_ZdlPvj>:
 80830ba:	f7fc bff2 	b.w	80800a2 <_ZdlPv>
	...

080830c0 <_ZSt15get_new_handlerv>:
 80830c0:	4b02      	ldr	r3, [pc, #8]	; (80830cc <_ZSt15get_new_handlerv+0xc>)
 80830c2:	6818      	ldr	r0, [r3, #0]
 80830c4:	f3bf 8f5f 	dmb	sy
 80830c8:	4770      	bx	lr
 80830ca:	bf00      	nop
 80830cc:	20000968 	.word	0x20000968

080830d0 <_ZnwjRKSt9nothrow_t>:
 80830d0:	b510      	push	{r4, lr}
 80830d2:	2800      	cmp	r0, #0
 80830d4:	bf14      	ite	ne
 80830d6:	4604      	movne	r4, r0
 80830d8:	2401      	moveq	r4, #1
 80830da:	4620      	mov	r0, r4
 80830dc:	f7fe fca0 	bl	8081a20 <malloc>
 80830e0:	b920      	cbnz	r0, 80830ec <_ZnwjRKSt9nothrow_t+0x1c>
 80830e2:	f7ff ffed 	bl	80830c0 <_ZSt15get_new_handlerv>
 80830e6:	b108      	cbz	r0, 80830ec <_ZnwjRKSt9nothrow_t+0x1c>
 80830e8:	4780      	blx	r0
 80830ea:	e7f6      	b.n	80830da <_ZnwjRKSt9nothrow_t+0xa>
 80830ec:	bd10      	pop	{r4, pc}

080830ee <_ZnajRKSt9nothrow_t>:
 80830ee:	f7ff bfef 	b.w	80830d0 <_ZnwjRKSt9nothrow_t>

080830f2 <_ZSt25__throw_bad_function_callv>:
 80830f2:	b508      	push	{r3, lr}
 80830f4:	f7fe fcbc 	bl	8081a70 <abort>

080830f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80830f8:	4b24      	ldr	r3, [pc, #144]	; (808318c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80830fa:	681a      	ldr	r2, [r3, #0]
 80830fc:	07d0      	lsls	r0, r2, #31
 80830fe:	bf5c      	itt	pl
 8083100:	2201      	movpl	r2, #1
 8083102:	601a      	strpl	r2, [r3, #0]
 8083104:	4b22      	ldr	r3, [pc, #136]	; (8083190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083106:	681a      	ldr	r2, [r3, #0]
 8083108:	07d1      	lsls	r1, r2, #31
 808310a:	bf5c      	itt	pl
 808310c:	2201      	movpl	r2, #1
 808310e:	601a      	strpl	r2, [r3, #0]
 8083110:	4b20      	ldr	r3, [pc, #128]	; (8083194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083112:	681a      	ldr	r2, [r3, #0]
 8083114:	07d2      	lsls	r2, r2, #31
 8083116:	bf5c      	itt	pl
 8083118:	2201      	movpl	r2, #1
 808311a:	601a      	strpl	r2, [r3, #0]
 808311c:	4b1e      	ldr	r3, [pc, #120]	; (8083198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808311e:	681a      	ldr	r2, [r3, #0]
 8083120:	07d0      	lsls	r0, r2, #31
 8083122:	bf5c      	itt	pl
 8083124:	2201      	movpl	r2, #1
 8083126:	601a      	strpl	r2, [r3, #0]
 8083128:	4b1c      	ldr	r3, [pc, #112]	; (808319c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808312a:	681a      	ldr	r2, [r3, #0]
 808312c:	07d1      	lsls	r1, r2, #31
 808312e:	bf5c      	itt	pl
 8083130:	2201      	movpl	r2, #1
 8083132:	601a      	strpl	r2, [r3, #0]
 8083134:	4b1a      	ldr	r3, [pc, #104]	; (80831a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083136:	681a      	ldr	r2, [r3, #0]
 8083138:	07d2      	lsls	r2, r2, #31
 808313a:	bf5c      	itt	pl
 808313c:	2201      	movpl	r2, #1
 808313e:	601a      	strpl	r2, [r3, #0]
 8083140:	4b18      	ldr	r3, [pc, #96]	; (80831a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083142:	681a      	ldr	r2, [r3, #0]
 8083144:	07d0      	lsls	r0, r2, #31
 8083146:	bf5c      	itt	pl
 8083148:	2201      	movpl	r2, #1
 808314a:	601a      	strpl	r2, [r3, #0]
 808314c:	4b16      	ldr	r3, [pc, #88]	; (80831a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808314e:	681a      	ldr	r2, [r3, #0]
 8083150:	07d1      	lsls	r1, r2, #31
 8083152:	bf5c      	itt	pl
 8083154:	2201      	movpl	r2, #1
 8083156:	601a      	strpl	r2, [r3, #0]
 8083158:	4b14      	ldr	r3, [pc, #80]	; (80831ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808315a:	681a      	ldr	r2, [r3, #0]
 808315c:	07d2      	lsls	r2, r2, #31
 808315e:	bf5c      	itt	pl
 8083160:	2201      	movpl	r2, #1
 8083162:	601a      	strpl	r2, [r3, #0]
 8083164:	4b12      	ldr	r3, [pc, #72]	; (80831b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083166:	681a      	ldr	r2, [r3, #0]
 8083168:	07d0      	lsls	r0, r2, #31
 808316a:	bf5c      	itt	pl
 808316c:	2201      	movpl	r2, #1
 808316e:	601a      	strpl	r2, [r3, #0]
 8083170:	4b10      	ldr	r3, [pc, #64]	; (80831b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083172:	681a      	ldr	r2, [r3, #0]
 8083174:	07d1      	lsls	r1, r2, #31
 8083176:	bf5c      	itt	pl
 8083178:	2201      	movpl	r2, #1
 808317a:	601a      	strpl	r2, [r3, #0]
 808317c:	4b0e      	ldr	r3, [pc, #56]	; (80831b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808317e:	681a      	ldr	r2, [r3, #0]
 8083180:	07d2      	lsls	r2, r2, #31
 8083182:	bf5c      	itt	pl
 8083184:	2201      	movpl	r2, #1
 8083186:	601a      	strpl	r2, [r3, #0]
 8083188:	4770      	bx	lr
 808318a:	bf00      	nop
 808318c:	20000998 	.word	0x20000998
 8083190:	20000994 	.word	0x20000994
 8083194:	20000990 	.word	0x20000990
 8083198:	2000098c 	.word	0x2000098c
 808319c:	20000988 	.word	0x20000988
 80831a0:	20000984 	.word	0x20000984
 80831a4:	20000980 	.word	0x20000980
 80831a8:	2000097c 	.word	0x2000097c
 80831ac:	20000978 	.word	0x20000978
 80831b0:	20000974 	.word	0x20000974
 80831b4:	20000970 	.word	0x20000970
 80831b8:	2000096c 	.word	0x2000096c

080831bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80831bc:	4b18      	ldr	r3, [pc, #96]	; (8083220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80831be:	681a      	ldr	r2, [r3, #0]
 80831c0:	07d1      	lsls	r1, r2, #31
 80831c2:	bf5c      	itt	pl
 80831c4:	2201      	movpl	r2, #1
 80831c6:	601a      	strpl	r2, [r3, #0]
 80831c8:	4b16      	ldr	r3, [pc, #88]	; (8083224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80831ca:	681a      	ldr	r2, [r3, #0]
 80831cc:	07d2      	lsls	r2, r2, #31
 80831ce:	bf5c      	itt	pl
 80831d0:	2201      	movpl	r2, #1
 80831d2:	601a      	strpl	r2, [r3, #0]
 80831d4:	4b14      	ldr	r3, [pc, #80]	; (8083228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80831d6:	681a      	ldr	r2, [r3, #0]
 80831d8:	07d0      	lsls	r0, r2, #31
 80831da:	bf5c      	itt	pl
 80831dc:	2201      	movpl	r2, #1
 80831de:	601a      	strpl	r2, [r3, #0]
 80831e0:	4b12      	ldr	r3, [pc, #72]	; (808322c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80831e2:	681a      	ldr	r2, [r3, #0]
 80831e4:	07d1      	lsls	r1, r2, #31
 80831e6:	bf5c      	itt	pl
 80831e8:	2201      	movpl	r2, #1
 80831ea:	601a      	strpl	r2, [r3, #0]
 80831ec:	4b10      	ldr	r3, [pc, #64]	; (8083230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80831ee:	681a      	ldr	r2, [r3, #0]
 80831f0:	07d2      	lsls	r2, r2, #31
 80831f2:	bf5c      	itt	pl
 80831f4:	2201      	movpl	r2, #1
 80831f6:	601a      	strpl	r2, [r3, #0]
 80831f8:	4b0e      	ldr	r3, [pc, #56]	; (8083234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80831fa:	681a      	ldr	r2, [r3, #0]
 80831fc:	07d0      	lsls	r0, r2, #31
 80831fe:	bf5c      	itt	pl
 8083200:	2201      	movpl	r2, #1
 8083202:	601a      	strpl	r2, [r3, #0]
 8083204:	4b0c      	ldr	r3, [pc, #48]	; (8083238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083206:	681a      	ldr	r2, [r3, #0]
 8083208:	07d1      	lsls	r1, r2, #31
 808320a:	bf5c      	itt	pl
 808320c:	2201      	movpl	r2, #1
 808320e:	601a      	strpl	r2, [r3, #0]
 8083210:	4b0a      	ldr	r3, [pc, #40]	; (808323c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083212:	681a      	ldr	r2, [r3, #0]
 8083214:	07d2      	lsls	r2, r2, #31
 8083216:	bf5c      	itt	pl
 8083218:	2201      	movpl	r2, #1
 808321a:	601a      	strpl	r2, [r3, #0]
 808321c:	4770      	bx	lr
 808321e:	bf00      	nop
 8083220:	200009b8 	.word	0x200009b8
 8083224:	200009b4 	.word	0x200009b4
 8083228:	200009b0 	.word	0x200009b0
 808322c:	200009ac 	.word	0x200009ac
 8083230:	200009a8 	.word	0x200009a8
 8083234:	200009a4 	.word	0x200009a4
 8083238:	200009a0 	.word	0x200009a0
 808323c:	2000099c 	.word	0x2000099c

08083240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083240:	4b18      	ldr	r3, [pc, #96]	; (80832a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083242:	681a      	ldr	r2, [r3, #0]
 8083244:	07d1      	lsls	r1, r2, #31
 8083246:	bf5c      	itt	pl
 8083248:	2201      	movpl	r2, #1
 808324a:	601a      	strpl	r2, [r3, #0]
 808324c:	4b16      	ldr	r3, [pc, #88]	; (80832a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808324e:	681a      	ldr	r2, [r3, #0]
 8083250:	07d2      	lsls	r2, r2, #31
 8083252:	bf5c      	itt	pl
 8083254:	2201      	movpl	r2, #1
 8083256:	601a      	strpl	r2, [r3, #0]
 8083258:	4b14      	ldr	r3, [pc, #80]	; (80832ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808325a:	681a      	ldr	r2, [r3, #0]
 808325c:	07d0      	lsls	r0, r2, #31
 808325e:	bf5c      	itt	pl
 8083260:	2201      	movpl	r2, #1
 8083262:	601a      	strpl	r2, [r3, #0]
 8083264:	4b12      	ldr	r3, [pc, #72]	; (80832b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083266:	681a      	ldr	r2, [r3, #0]
 8083268:	07d1      	lsls	r1, r2, #31
 808326a:	bf5c      	itt	pl
 808326c:	2201      	movpl	r2, #1
 808326e:	601a      	strpl	r2, [r3, #0]
 8083270:	4b10      	ldr	r3, [pc, #64]	; (80832b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083272:	681a      	ldr	r2, [r3, #0]
 8083274:	07d2      	lsls	r2, r2, #31
 8083276:	bf5c      	itt	pl
 8083278:	2201      	movpl	r2, #1
 808327a:	601a      	strpl	r2, [r3, #0]
 808327c:	4b0e      	ldr	r3, [pc, #56]	; (80832b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808327e:	681a      	ldr	r2, [r3, #0]
 8083280:	07d0      	lsls	r0, r2, #31
 8083282:	bf5c      	itt	pl
 8083284:	2201      	movpl	r2, #1
 8083286:	601a      	strpl	r2, [r3, #0]
 8083288:	4b0c      	ldr	r3, [pc, #48]	; (80832bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808328a:	681a      	ldr	r2, [r3, #0]
 808328c:	07d1      	lsls	r1, r2, #31
 808328e:	bf5c      	itt	pl
 8083290:	2201      	movpl	r2, #1
 8083292:	601a      	strpl	r2, [r3, #0]
 8083294:	4b0a      	ldr	r3, [pc, #40]	; (80832c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083296:	681a      	ldr	r2, [r3, #0]
 8083298:	07d2      	lsls	r2, r2, #31
 808329a:	bf5c      	itt	pl
 808329c:	2201      	movpl	r2, #1
 808329e:	601a      	strpl	r2, [r3, #0]
 80832a0:	4770      	bx	lr
 80832a2:	bf00      	nop
 80832a4:	200009d8 	.word	0x200009d8
 80832a8:	200009d4 	.word	0x200009d4
 80832ac:	200009d0 	.word	0x200009d0
 80832b0:	200009cc 	.word	0x200009cc
 80832b4:	200009c8 	.word	0x200009c8
 80832b8:	200009c4 	.word	0x200009c4
 80832bc:	200009c0 	.word	0x200009c0
 80832c0:	200009bc 	.word	0x200009bc

080832c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80832c4:	4b24      	ldr	r3, [pc, #144]	; (8083358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80832c6:	681a      	ldr	r2, [r3, #0]
 80832c8:	07d0      	lsls	r0, r2, #31
 80832ca:	bf5c      	itt	pl
 80832cc:	2201      	movpl	r2, #1
 80832ce:	601a      	strpl	r2, [r3, #0]
 80832d0:	4b22      	ldr	r3, [pc, #136]	; (808335c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80832d2:	681a      	ldr	r2, [r3, #0]
 80832d4:	07d1      	lsls	r1, r2, #31
 80832d6:	bf5c      	itt	pl
 80832d8:	2201      	movpl	r2, #1
 80832da:	601a      	strpl	r2, [r3, #0]
 80832dc:	4b20      	ldr	r3, [pc, #128]	; (8083360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80832de:	681a      	ldr	r2, [r3, #0]
 80832e0:	07d2      	lsls	r2, r2, #31
 80832e2:	bf5c      	itt	pl
 80832e4:	2201      	movpl	r2, #1
 80832e6:	601a      	strpl	r2, [r3, #0]
 80832e8:	4b1e      	ldr	r3, [pc, #120]	; (8083364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80832ea:	681a      	ldr	r2, [r3, #0]
 80832ec:	07d0      	lsls	r0, r2, #31
 80832ee:	bf5c      	itt	pl
 80832f0:	2201      	movpl	r2, #1
 80832f2:	601a      	strpl	r2, [r3, #0]
 80832f4:	4b1c      	ldr	r3, [pc, #112]	; (8083368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80832f6:	681a      	ldr	r2, [r3, #0]
 80832f8:	07d1      	lsls	r1, r2, #31
 80832fa:	bf5c      	itt	pl
 80832fc:	2201      	movpl	r2, #1
 80832fe:	601a      	strpl	r2, [r3, #0]
 8083300:	4b1a      	ldr	r3, [pc, #104]	; (808336c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083302:	681a      	ldr	r2, [r3, #0]
 8083304:	07d2      	lsls	r2, r2, #31
 8083306:	bf5c      	itt	pl
 8083308:	2201      	movpl	r2, #1
 808330a:	601a      	strpl	r2, [r3, #0]
 808330c:	4b18      	ldr	r3, [pc, #96]	; (8083370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808330e:	681a      	ldr	r2, [r3, #0]
 8083310:	07d0      	lsls	r0, r2, #31
 8083312:	bf5c      	itt	pl
 8083314:	2201      	movpl	r2, #1
 8083316:	601a      	strpl	r2, [r3, #0]
 8083318:	4b16      	ldr	r3, [pc, #88]	; (8083374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808331a:	681a      	ldr	r2, [r3, #0]
 808331c:	07d1      	lsls	r1, r2, #31
 808331e:	bf5c      	itt	pl
 8083320:	2201      	movpl	r2, #1
 8083322:	601a      	strpl	r2, [r3, #0]
 8083324:	4b14      	ldr	r3, [pc, #80]	; (8083378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083326:	681a      	ldr	r2, [r3, #0]
 8083328:	07d2      	lsls	r2, r2, #31
 808332a:	bf5c      	itt	pl
 808332c:	2201      	movpl	r2, #1
 808332e:	601a      	strpl	r2, [r3, #0]
 8083330:	4b12      	ldr	r3, [pc, #72]	; (808337c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083332:	681a      	ldr	r2, [r3, #0]
 8083334:	07d0      	lsls	r0, r2, #31
 8083336:	bf5c      	itt	pl
 8083338:	2201      	movpl	r2, #1
 808333a:	601a      	strpl	r2, [r3, #0]
 808333c:	4b10      	ldr	r3, [pc, #64]	; (8083380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808333e:	681a      	ldr	r2, [r3, #0]
 8083340:	07d1      	lsls	r1, r2, #31
 8083342:	bf5c      	itt	pl
 8083344:	2201      	movpl	r2, #1
 8083346:	601a      	strpl	r2, [r3, #0]
 8083348:	4b0e      	ldr	r3, [pc, #56]	; (8083384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808334a:	681a      	ldr	r2, [r3, #0]
 808334c:	07d2      	lsls	r2, r2, #31
 808334e:	bf5c      	itt	pl
 8083350:	2201      	movpl	r2, #1
 8083352:	601a      	strpl	r2, [r3, #0]
 8083354:	4770      	bx	lr
 8083356:	bf00      	nop
 8083358:	20000a08 	.word	0x20000a08
 808335c:	20000a04 	.word	0x20000a04
 8083360:	20000a00 	.word	0x20000a00
 8083364:	200009fc 	.word	0x200009fc
 8083368:	200009f8 	.word	0x200009f8
 808336c:	200009f4 	.word	0x200009f4
 8083370:	200009f0 	.word	0x200009f0
 8083374:	200009ec 	.word	0x200009ec
 8083378:	200009e8 	.word	0x200009e8
 808337c:	200009e4 	.word	0x200009e4
 8083380:	200009e0 	.word	0x200009e0
 8083384:	200009dc 	.word	0x200009dc

08083388 <fmod>:
 8083388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808338c:	b08b      	sub	sp, #44	; 0x2c
 808338e:	461d      	mov	r5, r3
 8083390:	4680      	mov	r8, r0
 8083392:	4689      	mov	r9, r1
 8083394:	4614      	mov	r4, r2
 8083396:	f000 f859 	bl	808344c <__ieee754_fmod>
 808339a:	4b2a      	ldr	r3, [pc, #168]	; (8083444 <fmod+0xbc>)
 808339c:	4606      	mov	r6, r0
 808339e:	f993 a000 	ldrsb.w	sl, [r3]
 80833a2:	460f      	mov	r7, r1
 80833a4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80833a8:	d02f      	beq.n	808340a <fmod+0x82>
 80833aa:	4622      	mov	r2, r4
 80833ac:	462b      	mov	r3, r5
 80833ae:	4620      	mov	r0, r4
 80833b0:	4629      	mov	r1, r5
 80833b2:	f000 fdbd 	bl	8083f30 <__aeabi_dcmpun>
 80833b6:	bb40      	cbnz	r0, 808340a <fmod+0x82>
 80833b8:	4642      	mov	r2, r8
 80833ba:	464b      	mov	r3, r9
 80833bc:	4640      	mov	r0, r8
 80833be:	4649      	mov	r1, r9
 80833c0:	f000 fdb6 	bl	8083f30 <__aeabi_dcmpun>
 80833c4:	4683      	mov	fp, r0
 80833c6:	bb00      	cbnz	r0, 808340a <fmod+0x82>
 80833c8:	2200      	movs	r2, #0
 80833ca:	2300      	movs	r3, #0
 80833cc:	4620      	mov	r0, r4
 80833ce:	4629      	mov	r1, r5
 80833d0:	f000 fd7c 	bl	8083ecc <__aeabi_dcmpeq>
 80833d4:	b1c8      	cbz	r0, 808340a <fmod+0x82>
 80833d6:	4a1c      	ldr	r2, [pc, #112]	; (8083448 <fmod+0xc0>)
 80833d8:	2301      	movs	r3, #1
 80833da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80833de:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80833e2:	f8cd b020 	str.w	fp, [sp, #32]
 80833e6:	9201      	str	r2, [sp, #4]
 80833e8:	9300      	str	r3, [sp, #0]
 80833ea:	f1ba 0f00 	cmp.w	sl, #0
 80833ee:	d111      	bne.n	8083414 <fmod+0x8c>
 80833f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80833f4:	4668      	mov	r0, sp
 80833f6:	f000 f947 	bl	8083688 <matherr>
 80833fa:	b1b0      	cbz	r0, 808342a <fmod+0xa2>
 80833fc:	9b08      	ldr	r3, [sp, #32]
 80833fe:	b9db      	cbnz	r3, 8083438 <fmod+0xb0>
 8083400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8083404:	b00b      	add	sp, #44	; 0x2c
 8083406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808340a:	4630      	mov	r0, r6
 808340c:	4639      	mov	r1, r7
 808340e:	b00b      	add	sp, #44	; 0x2c
 8083410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083414:	2200      	movs	r2, #0
 8083416:	2300      	movs	r3, #0
 8083418:	4610      	mov	r0, r2
 808341a:	4619      	mov	r1, r3
 808341c:	f000 fc18 	bl	8083c50 <__aeabi_ddiv>
 8083420:	f1ba 0f02 	cmp.w	sl, #2
 8083424:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8083428:	d1e4      	bne.n	80833f4 <fmod+0x6c>
 808342a:	f7fe fb31 	bl	8081a90 <__errno>
 808342e:	2321      	movs	r3, #33	; 0x21
 8083430:	6003      	str	r3, [r0, #0]
 8083432:	9b08      	ldr	r3, [sp, #32]
 8083434:	2b00      	cmp	r3, #0
 8083436:	d0e3      	beq.n	8083400 <fmod+0x78>
 8083438:	f7fe fb2a 	bl	8081a90 <__errno>
 808343c:	9b08      	ldr	r3, [sp, #32]
 808343e:	6003      	str	r3, [r0, #0]
 8083440:	e7de      	b.n	8083400 <fmod+0x78>
 8083442:	bf00      	nop
 8083444:	20000148 	.word	0x20000148
 8083448:	080872b8 	.word	0x080872b8

0808344c <__ieee754_fmod>:
 808344c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083450:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8083454:	ea52 0609 	orrs.w	r6, r2, r9
 8083458:	d020      	beq.n	808349c <__ieee754_fmod+0x50>
 808345a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808345e:	4f83      	ldr	r7, [pc, #524]	; (808366c <__ieee754_fmod+0x220>)
 8083460:	ea81 0806 	eor.w	r8, r1, r6
 8083464:	45b8      	cmp	r8, r7
 8083466:	dc19      	bgt.n	808349c <__ieee754_fmod+0x50>
 8083468:	4257      	negs	r7, r2
 808346a:	4317      	orrs	r7, r2
 808346c:	f8df b214 	ldr.w	fp, [pc, #532]	; 8083684 <__ieee754_fmod+0x238>
 8083470:	ea49 77d7 	orr.w	r7, r9, r7, lsr #31
 8083474:	455f      	cmp	r7, fp
 8083476:	4694      	mov	ip, r2
 8083478:	d810      	bhi.n	808349c <__ieee754_fmod+0x50>
 808347a:	45c8      	cmp	r8, r9
 808347c:	461d      	mov	r5, r3
 808347e:	4682      	mov	sl, r0
 8083480:	4604      	mov	r4, r0
 8083482:	4696      	mov	lr, r2
 8083484:	dc12      	bgt.n	80834ac <__ieee754_fmod+0x60>
 8083486:	db0f      	blt.n	80834a8 <__ieee754_fmod+0x5c>
 8083488:	4290      	cmp	r0, r2
 808348a:	d30d      	bcc.n	80834a8 <__ieee754_fmod+0x5c>
 808348c:	d10e      	bne.n	80834ac <__ieee754_fmod+0x60>
 808348e:	4b78      	ldr	r3, [pc, #480]	; (8083670 <__ieee754_fmod+0x224>)
 8083490:	0ff6      	lsrs	r6, r6, #31
 8083492:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8083496:	e893 0003 	ldmia.w	r3, {r0, r1}
 808349a:	e005      	b.n	80834a8 <__ieee754_fmod+0x5c>
 808349c:	f000 faae 	bl	80839fc <__aeabi_dmul>
 80834a0:	4602      	mov	r2, r0
 80834a2:	460b      	mov	r3, r1
 80834a4:	f000 fbd4 	bl	8083c50 <__aeabi_ddiv>
 80834a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80834ac:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 80834b0:	da0e      	bge.n	80834d0 <__ieee754_fmod+0x84>
 80834b2:	f1b8 0f00 	cmp.w	r8, #0
 80834b6:	f040 809c 	bne.w	80835f2 <__ieee754_fmod+0x1a6>
 80834ba:	f1ba 0f00 	cmp.w	sl, #0
 80834be:	4653      	mov	r3, sl
 80834c0:	496c      	ldr	r1, [pc, #432]	; (8083674 <__ieee754_fmod+0x228>)
 80834c2:	dd09      	ble.n	80834d8 <__ieee754_fmod+0x8c>
 80834c4:	005b      	lsls	r3, r3, #1
 80834c6:	2b00      	cmp	r3, #0
 80834c8:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80834cc:	dcfa      	bgt.n	80834c4 <__ieee754_fmod+0x78>
 80834ce:	e003      	b.n	80834d8 <__ieee754_fmod+0x8c>
 80834d0:	ea4f 5128 	mov.w	r1, r8, asr #20
 80834d4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80834d8:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 80834dc:	da0e      	bge.n	80834fc <__ieee754_fmod+0xb0>
 80834de:	f1b9 0f00 	cmp.w	r9, #0
 80834e2:	f040 809f 	bne.w	8083624 <__ieee754_fmod+0x1d8>
 80834e6:	f1bc 0f00 	cmp.w	ip, #0
 80834ea:	4663      	mov	r3, ip
 80834ec:	4f61      	ldr	r7, [pc, #388]	; (8083674 <__ieee754_fmod+0x228>)
 80834ee:	dd09      	ble.n	8083504 <__ieee754_fmod+0xb8>
 80834f0:	005b      	lsls	r3, r3, #1
 80834f2:	2b00      	cmp	r3, #0
 80834f4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80834f8:	dcfa      	bgt.n	80834f0 <__ieee754_fmod+0xa4>
 80834fa:	e003      	b.n	8083504 <__ieee754_fmod+0xb8>
 80834fc:	ea4f 5729 	mov.w	r7, r9, asr #20
 8083500:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8083504:	4b5c      	ldr	r3, [pc, #368]	; (8083678 <__ieee754_fmod+0x22c>)
 8083506:	4299      	cmp	r1, r3
 8083508:	db56      	blt.n	80835b8 <__ieee754_fmod+0x16c>
 808350a:	f3c8 0313 	ubfx	r3, r8, #0, #20
 808350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083512:	4a59      	ldr	r2, [pc, #356]	; (8083678 <__ieee754_fmod+0x22c>)
 8083514:	4297      	cmp	r7, r2
 8083516:	db5e      	blt.n	80835d6 <__ieee754_fmod+0x18a>
 8083518:	f3c5 0513 	ubfx	r5, r5, #0, #20
 808351c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8083520:	1bc9      	subs	r1, r1, r7
 8083522:	e007      	b.n	8083534 <__ieee754_fmod+0xe8>
 8083524:	ea52 0300 	orrs.w	r3, r2, r0
 8083528:	d013      	beq.n	8083552 <__ieee754_fmod+0x106>
 808352a:	0fc3      	lsrs	r3, r0, #31
 808352c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8083530:	0044      	lsls	r4, r0, #1
 8083532:	3901      	subs	r1, #1
 8083534:	ebce 0004 	rsb	r0, lr, r4
 8083538:	1b5a      	subs	r2, r3, r5
 808353a:	b189      	cbz	r1, 8083560 <__ieee754_fmod+0x114>
 808353c:	4574      	cmp	r4, lr
 808353e:	bf38      	it	cc
 8083540:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8083544:	2a00      	cmp	r2, #0
 8083546:	daed      	bge.n	8083524 <__ieee754_fmod+0xd8>
 8083548:	0fe2      	lsrs	r2, r4, #31
 808354a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 808354e:	0064      	lsls	r4, r4, #1
 8083550:	e7ef      	b.n	8083532 <__ieee754_fmod+0xe6>
 8083552:	4b47      	ldr	r3, [pc, #284]	; (8083670 <__ieee754_fmod+0x224>)
 8083554:	0ff6      	lsrs	r6, r6, #31
 8083556:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 808355a:	e896 0003 	ldmia.w	r6, {r0, r1}
 808355e:	e7a3      	b.n	80834a8 <__ieee754_fmod+0x5c>
 8083560:	4615      	mov	r5, r2
 8083562:	4574      	cmp	r4, lr
 8083564:	bf38      	it	cc
 8083566:	f102 35ff 	addcc.w	r5, r2, #4294967295	; 0xffffffff
 808356a:	2d00      	cmp	r5, #0
 808356c:	bfb4      	ite	lt
 808356e:	461d      	movlt	r5, r3
 8083570:	ebce 0404 	rsbge	r4, lr, r4
 8083574:	ea55 0304 	orrs.w	r3, r5, r4
 8083578:	d0eb      	beq.n	8083552 <__ieee754_fmod+0x106>
 808357a:	4a40      	ldr	r2, [pc, #256]	; (808367c <__ieee754_fmod+0x230>)
 808357c:	4295      	cmp	r5, r2
 808357e:	dc08      	bgt.n	8083592 <__ieee754_fmod+0x146>
 8083580:	0fe3      	lsrs	r3, r4, #31
 8083582:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8083586:	4295      	cmp	r5, r2
 8083588:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 808358c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8083590:	ddf6      	ble.n	8083580 <__ieee754_fmod+0x134>
 8083592:	4b39      	ldr	r3, [pc, #228]	; (8083678 <__ieee754_fmod+0x22c>)
 8083594:	429f      	cmp	r7, r3
 8083596:	da4e      	bge.n	8083636 <__ieee754_fmod+0x1ea>
 8083598:	4a37      	ldr	r2, [pc, #220]	; (8083678 <__ieee754_fmod+0x22c>)
 808359a:	1bd2      	subs	r2, r2, r7
 808359c:	2a14      	cmp	r2, #20
 808359e:	dc54      	bgt.n	808364a <__ieee754_fmod+0x1fe>
 80835a0:	f1c2 0320 	rsb	r3, r2, #32
 80835a4:	40d4      	lsrs	r4, r2
 80835a6:	fa05 f303 	lsl.w	r3, r5, r3
 80835aa:	4323      	orrs	r3, r4
 80835ac:	fa45 f202 	asr.w	r2, r5, r2
 80835b0:	ea42 0106 	orr.w	r1, r2, r6
 80835b4:	4618      	mov	r0, r3
 80835b6:	e777      	b.n	80834a8 <__ieee754_fmod+0x5c>
 80835b8:	4c2f      	ldr	r4, [pc, #188]	; (8083678 <__ieee754_fmod+0x22c>)
 80835ba:	1a64      	subs	r4, r4, r1
 80835bc:	2c1f      	cmp	r4, #31
 80835be:	dc2b      	bgt.n	8083618 <__ieee754_fmod+0x1cc>
 80835c0:	f1c4 0320 	rsb	r3, r4, #32
 80835c4:	fa08 f804 	lsl.w	r8, r8, r4
 80835c8:	fa2a f303 	lsr.w	r3, sl, r3
 80835cc:	ea43 0308 	orr.w	r3, r3, r8
 80835d0:	fa0a f404 	lsl.w	r4, sl, r4
 80835d4:	e79d      	b.n	8083512 <__ieee754_fmod+0xc6>
 80835d6:	4828      	ldr	r0, [pc, #160]	; (8083678 <__ieee754_fmod+0x22c>)
 80835d8:	1bc0      	subs	r0, r0, r7
 80835da:	281f      	cmp	r0, #31
 80835dc:	dc15      	bgt.n	808360a <__ieee754_fmod+0x1be>
 80835de:	f1c0 0220 	rsb	r2, r0, #32
 80835e2:	fa09 f500 	lsl.w	r5, r9, r0
 80835e6:	fa2c f202 	lsr.w	r2, ip, r2
 80835ea:	4315      	orrs	r5, r2
 80835ec:	fa0c fe00 	lsl.w	lr, ip, r0
 80835f0:	e796      	b.n	8083520 <__ieee754_fmod+0xd4>
 80835f2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80835f6:	2b00      	cmp	r3, #0
 80835f8:	491f      	ldr	r1, [pc, #124]	; (8083678 <__ieee754_fmod+0x22c>)
 80835fa:	f77f af6d 	ble.w	80834d8 <__ieee754_fmod+0x8c>
 80835fe:	005b      	lsls	r3, r3, #1
 8083600:	2b00      	cmp	r3, #0
 8083602:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8083606:	dcfa      	bgt.n	80835fe <__ieee754_fmod+0x1b2>
 8083608:	e766      	b.n	80834d8 <__ieee754_fmod+0x8c>
 808360a:	4d1d      	ldr	r5, [pc, #116]	; (8083680 <__ieee754_fmod+0x234>)
 808360c:	f04f 0e00 	mov.w	lr, #0
 8083610:	1bed      	subs	r5, r5, r7
 8083612:	fa0c f505 	lsl.w	r5, ip, r5
 8083616:	e783      	b.n	8083520 <__ieee754_fmod+0xd4>
 8083618:	4b19      	ldr	r3, [pc, #100]	; (8083680 <__ieee754_fmod+0x234>)
 808361a:	2400      	movs	r4, #0
 808361c:	1a5b      	subs	r3, r3, r1
 808361e:	fa0a f303 	lsl.w	r3, sl, r3
 8083622:	e776      	b.n	8083512 <__ieee754_fmod+0xc6>
 8083624:	4f14      	ldr	r7, [pc, #80]	; (8083678 <__ieee754_fmod+0x22c>)
 8083626:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 808362a:	005b      	lsls	r3, r3, #1
 808362c:	2b00      	cmp	r3, #0
 808362e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8083632:	dcfa      	bgt.n	808362a <__ieee754_fmod+0x1de>
 8083634:	e766      	b.n	8083504 <__ieee754_fmod+0xb8>
 8083636:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 808363a:	432e      	orrs	r6, r5
 808363c:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
 8083640:	ea46 5307 	orr.w	r3, r6, r7, lsl #20
 8083644:	4620      	mov	r0, r4
 8083646:	4619      	mov	r1, r3
 8083648:	e72e      	b.n	80834a8 <__ieee754_fmod+0x5c>
 808364a:	2a1f      	cmp	r2, #31
 808364c:	dc07      	bgt.n	808365e <__ieee754_fmod+0x212>
 808364e:	f1c2 0320 	rsb	r3, r2, #32
 8083652:	40d4      	lsrs	r4, r2
 8083654:	409d      	lsls	r5, r3
 8083656:	ea45 0304 	orr.w	r3, r5, r4
 808365a:	4632      	mov	r2, r6
 808365c:	e7a8      	b.n	80835b0 <__ieee754_fmod+0x164>
 808365e:	4b08      	ldr	r3, [pc, #32]	; (8083680 <__ieee754_fmod+0x234>)
 8083660:	4632      	mov	r2, r6
 8083662:	1bdb      	subs	r3, r3, r7
 8083664:	fa45 f303 	asr.w	r3, r5, r3
 8083668:	e7a2      	b.n	80835b0 <__ieee754_fmod+0x164>
 808366a:	bf00      	nop
 808366c:	7fefffff 	.word	0x7fefffff
 8083670:	080872c0 	.word	0x080872c0
 8083674:	fffffbed 	.word	0xfffffbed
 8083678:	fffffc02 	.word	0xfffffc02
 808367c:	000fffff 	.word	0x000fffff
 8083680:	fffffbe2 	.word	0xfffffbe2
 8083684:	7ff00000 	.word	0x7ff00000

08083688 <matherr>:
 8083688:	2000      	movs	r0, #0
 808368a:	4770      	bx	lr

0808368c <__aeabi_drsub>:
 808368c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083690:	e002      	b.n	8083698 <__adddf3>
 8083692:	bf00      	nop

08083694 <__aeabi_dsub>:
 8083694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083698 <__adddf3>:
 8083698:	b530      	push	{r4, r5, lr}
 808369a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808369e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80836a2:	ea94 0f05 	teq	r4, r5
 80836a6:	bf08      	it	eq
 80836a8:	ea90 0f02 	teqeq	r0, r2
 80836ac:	bf1f      	itttt	ne
 80836ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80836b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80836b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80836ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80836be:	f000 80e2 	beq.w	8083886 <__adddf3+0x1ee>
 80836c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80836c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80836ca:	bfb8      	it	lt
 80836cc:	426d      	neglt	r5, r5
 80836ce:	dd0c      	ble.n	80836ea <__adddf3+0x52>
 80836d0:	442c      	add	r4, r5
 80836d2:	ea80 0202 	eor.w	r2, r0, r2
 80836d6:	ea81 0303 	eor.w	r3, r1, r3
 80836da:	ea82 0000 	eor.w	r0, r2, r0
 80836de:	ea83 0101 	eor.w	r1, r3, r1
 80836e2:	ea80 0202 	eor.w	r2, r0, r2
 80836e6:	ea81 0303 	eor.w	r3, r1, r3
 80836ea:	2d36      	cmp	r5, #54	; 0x36
 80836ec:	bf88      	it	hi
 80836ee:	bd30      	pophi	{r4, r5, pc}
 80836f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80836f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80836f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80836fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083700:	d002      	beq.n	8083708 <__adddf3+0x70>
 8083702:	4240      	negs	r0, r0
 8083704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083708:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808370c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083710:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083714:	d002      	beq.n	808371c <__adddf3+0x84>
 8083716:	4252      	negs	r2, r2
 8083718:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808371c:	ea94 0f05 	teq	r4, r5
 8083720:	f000 80a7 	beq.w	8083872 <__adddf3+0x1da>
 8083724:	f1a4 0401 	sub.w	r4, r4, #1
 8083728:	f1d5 0e20 	rsbs	lr, r5, #32
 808372c:	db0d      	blt.n	808374a <__adddf3+0xb2>
 808372e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083732:	fa22 f205 	lsr.w	r2, r2, r5
 8083736:	1880      	adds	r0, r0, r2
 8083738:	f141 0100 	adc.w	r1, r1, #0
 808373c:	fa03 f20e 	lsl.w	r2, r3, lr
 8083740:	1880      	adds	r0, r0, r2
 8083742:	fa43 f305 	asr.w	r3, r3, r5
 8083746:	4159      	adcs	r1, r3
 8083748:	e00e      	b.n	8083768 <__adddf3+0xd0>
 808374a:	f1a5 0520 	sub.w	r5, r5, #32
 808374e:	f10e 0e20 	add.w	lr, lr, #32
 8083752:	2a01      	cmp	r2, #1
 8083754:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083758:	bf28      	it	cs
 808375a:	f04c 0c02 	orrcs.w	ip, ip, #2
 808375e:	fa43 f305 	asr.w	r3, r3, r5
 8083762:	18c0      	adds	r0, r0, r3
 8083764:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808376c:	d507      	bpl.n	808377e <__adddf3+0xe6>
 808376e:	f04f 0e00 	mov.w	lr, #0
 8083772:	f1dc 0c00 	rsbs	ip, ip, #0
 8083776:	eb7e 0000 	sbcs.w	r0, lr, r0
 808377a:	eb6e 0101 	sbc.w	r1, lr, r1
 808377e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083782:	d31b      	bcc.n	80837bc <__adddf3+0x124>
 8083784:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083788:	d30c      	bcc.n	80837a4 <__adddf3+0x10c>
 808378a:	0849      	lsrs	r1, r1, #1
 808378c:	ea5f 0030 	movs.w	r0, r0, rrx
 8083790:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083794:	f104 0401 	add.w	r4, r4, #1
 8083798:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808379c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80837a0:	f080 809a 	bcs.w	80838d8 <__adddf3+0x240>
 80837a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80837a8:	bf08      	it	eq
 80837aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837ae:	f150 0000 	adcs.w	r0, r0, #0
 80837b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837b6:	ea41 0105 	orr.w	r1, r1, r5
 80837ba:	bd30      	pop	{r4, r5, pc}
 80837bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80837c0:	4140      	adcs	r0, r0
 80837c2:	eb41 0101 	adc.w	r1, r1, r1
 80837c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80837ca:	f1a4 0401 	sub.w	r4, r4, #1
 80837ce:	d1e9      	bne.n	80837a4 <__adddf3+0x10c>
 80837d0:	f091 0f00 	teq	r1, #0
 80837d4:	bf04      	itt	eq
 80837d6:	4601      	moveq	r1, r0
 80837d8:	2000      	moveq	r0, #0
 80837da:	fab1 f381 	clz	r3, r1
 80837de:	bf08      	it	eq
 80837e0:	3320      	addeq	r3, #32
 80837e2:	f1a3 030b 	sub.w	r3, r3, #11
 80837e6:	f1b3 0220 	subs.w	r2, r3, #32
 80837ea:	da0c      	bge.n	8083806 <__adddf3+0x16e>
 80837ec:	320c      	adds	r2, #12
 80837ee:	dd08      	ble.n	8083802 <__adddf3+0x16a>
 80837f0:	f102 0c14 	add.w	ip, r2, #20
 80837f4:	f1c2 020c 	rsb	r2, r2, #12
 80837f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80837fc:	fa21 f102 	lsr.w	r1, r1, r2
 8083800:	e00c      	b.n	808381c <__adddf3+0x184>
 8083802:	f102 0214 	add.w	r2, r2, #20
 8083806:	bfd8      	it	le
 8083808:	f1c2 0c20 	rsble	ip, r2, #32
 808380c:	fa01 f102 	lsl.w	r1, r1, r2
 8083810:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083814:	bfdc      	itt	le
 8083816:	ea41 010c 	orrle.w	r1, r1, ip
 808381a:	4090      	lslle	r0, r2
 808381c:	1ae4      	subs	r4, r4, r3
 808381e:	bfa2      	ittt	ge
 8083820:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083824:	4329      	orrge	r1, r5
 8083826:	bd30      	popge	{r4, r5, pc}
 8083828:	ea6f 0404 	mvn.w	r4, r4
 808382c:	3c1f      	subs	r4, #31
 808382e:	da1c      	bge.n	808386a <__adddf3+0x1d2>
 8083830:	340c      	adds	r4, #12
 8083832:	dc0e      	bgt.n	8083852 <__adddf3+0x1ba>
 8083834:	f104 0414 	add.w	r4, r4, #20
 8083838:	f1c4 0220 	rsb	r2, r4, #32
 808383c:	fa20 f004 	lsr.w	r0, r0, r4
 8083840:	fa01 f302 	lsl.w	r3, r1, r2
 8083844:	ea40 0003 	orr.w	r0, r0, r3
 8083848:	fa21 f304 	lsr.w	r3, r1, r4
 808384c:	ea45 0103 	orr.w	r1, r5, r3
 8083850:	bd30      	pop	{r4, r5, pc}
 8083852:	f1c4 040c 	rsb	r4, r4, #12
 8083856:	f1c4 0220 	rsb	r2, r4, #32
 808385a:	fa20 f002 	lsr.w	r0, r0, r2
 808385e:	fa01 f304 	lsl.w	r3, r1, r4
 8083862:	ea40 0003 	orr.w	r0, r0, r3
 8083866:	4629      	mov	r1, r5
 8083868:	bd30      	pop	{r4, r5, pc}
 808386a:	fa21 f004 	lsr.w	r0, r1, r4
 808386e:	4629      	mov	r1, r5
 8083870:	bd30      	pop	{r4, r5, pc}
 8083872:	f094 0f00 	teq	r4, #0
 8083876:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808387a:	bf06      	itte	eq
 808387c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083880:	3401      	addeq	r4, #1
 8083882:	3d01      	subne	r5, #1
 8083884:	e74e      	b.n	8083724 <__adddf3+0x8c>
 8083886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808388a:	bf18      	it	ne
 808388c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083890:	d029      	beq.n	80838e6 <__adddf3+0x24e>
 8083892:	ea94 0f05 	teq	r4, r5
 8083896:	bf08      	it	eq
 8083898:	ea90 0f02 	teqeq	r0, r2
 808389c:	d005      	beq.n	80838aa <__adddf3+0x212>
 808389e:	ea54 0c00 	orrs.w	ip, r4, r0
 80838a2:	bf04      	itt	eq
 80838a4:	4619      	moveq	r1, r3
 80838a6:	4610      	moveq	r0, r2
 80838a8:	bd30      	pop	{r4, r5, pc}
 80838aa:	ea91 0f03 	teq	r1, r3
 80838ae:	bf1e      	ittt	ne
 80838b0:	2100      	movne	r1, #0
 80838b2:	2000      	movne	r0, #0
 80838b4:	bd30      	popne	{r4, r5, pc}
 80838b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80838ba:	d105      	bne.n	80838c8 <__adddf3+0x230>
 80838bc:	0040      	lsls	r0, r0, #1
 80838be:	4149      	adcs	r1, r1
 80838c0:	bf28      	it	cs
 80838c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80838c6:	bd30      	pop	{r4, r5, pc}
 80838c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80838cc:	bf3c      	itt	cc
 80838ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80838d2:	bd30      	popcc	{r4, r5, pc}
 80838d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80838d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80838dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80838e0:	f04f 0000 	mov.w	r0, #0
 80838e4:	bd30      	pop	{r4, r5, pc}
 80838e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80838ea:	bf1a      	itte	ne
 80838ec:	4619      	movne	r1, r3
 80838ee:	4610      	movne	r0, r2
 80838f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80838f4:	bf1c      	itt	ne
 80838f6:	460b      	movne	r3, r1
 80838f8:	4602      	movne	r2, r0
 80838fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80838fe:	bf06      	itte	eq
 8083900:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083904:	ea91 0f03 	teqeq	r1, r3
 8083908:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808390c:	bd30      	pop	{r4, r5, pc}
 808390e:	bf00      	nop

08083910 <__aeabi_ui2d>:
 8083910:	f090 0f00 	teq	r0, #0
 8083914:	bf04      	itt	eq
 8083916:	2100      	moveq	r1, #0
 8083918:	4770      	bxeq	lr
 808391a:	b530      	push	{r4, r5, lr}
 808391c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083920:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083924:	f04f 0500 	mov.w	r5, #0
 8083928:	f04f 0100 	mov.w	r1, #0
 808392c:	e750      	b.n	80837d0 <__adddf3+0x138>
 808392e:	bf00      	nop

08083930 <__aeabi_i2d>:
 8083930:	f090 0f00 	teq	r0, #0
 8083934:	bf04      	itt	eq
 8083936:	2100      	moveq	r1, #0
 8083938:	4770      	bxeq	lr
 808393a:	b530      	push	{r4, r5, lr}
 808393c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083940:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083944:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083948:	bf48      	it	mi
 808394a:	4240      	negmi	r0, r0
 808394c:	f04f 0100 	mov.w	r1, #0
 8083950:	e73e      	b.n	80837d0 <__adddf3+0x138>
 8083952:	bf00      	nop

08083954 <__aeabi_f2d>:
 8083954:	0042      	lsls	r2, r0, #1
 8083956:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808395a:	ea4f 0131 	mov.w	r1, r1, rrx
 808395e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083962:	bf1f      	itttt	ne
 8083964:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083968:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808396c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083970:	4770      	bxne	lr
 8083972:	f092 0f00 	teq	r2, #0
 8083976:	bf14      	ite	ne
 8083978:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808397c:	4770      	bxeq	lr
 808397e:	b530      	push	{r4, r5, lr}
 8083980:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808398c:	e720      	b.n	80837d0 <__adddf3+0x138>
 808398e:	bf00      	nop

08083990 <__aeabi_ul2d>:
 8083990:	ea50 0201 	orrs.w	r2, r0, r1
 8083994:	bf08      	it	eq
 8083996:	4770      	bxeq	lr
 8083998:	b530      	push	{r4, r5, lr}
 808399a:	f04f 0500 	mov.w	r5, #0
 808399e:	e00a      	b.n	80839b6 <__aeabi_l2d+0x16>

080839a0 <__aeabi_l2d>:
 80839a0:	ea50 0201 	orrs.w	r2, r0, r1
 80839a4:	bf08      	it	eq
 80839a6:	4770      	bxeq	lr
 80839a8:	b530      	push	{r4, r5, lr}
 80839aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80839ae:	d502      	bpl.n	80839b6 <__aeabi_l2d+0x16>
 80839b0:	4240      	negs	r0, r0
 80839b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80839b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80839ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80839be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80839c2:	f43f aedc 	beq.w	808377e <__adddf3+0xe6>
 80839c6:	f04f 0203 	mov.w	r2, #3
 80839ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839ce:	bf18      	it	ne
 80839d0:	3203      	addne	r2, #3
 80839d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839d6:	bf18      	it	ne
 80839d8:	3203      	addne	r2, #3
 80839da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80839de:	f1c2 0320 	rsb	r3, r2, #32
 80839e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80839e6:	fa20 f002 	lsr.w	r0, r0, r2
 80839ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80839ee:	ea40 000e 	orr.w	r0, r0, lr
 80839f2:	fa21 f102 	lsr.w	r1, r1, r2
 80839f6:	4414      	add	r4, r2
 80839f8:	e6c1      	b.n	808377e <__adddf3+0xe6>
 80839fa:	bf00      	nop

080839fc <__aeabi_dmul>:
 80839fc:	b570      	push	{r4, r5, r6, lr}
 80839fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083a02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083a06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083a0a:	bf1d      	ittte	ne
 8083a0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083a10:	ea94 0f0c 	teqne	r4, ip
 8083a14:	ea95 0f0c 	teqne	r5, ip
 8083a18:	f000 f8de 	bleq	8083bd8 <__aeabi_dmul+0x1dc>
 8083a1c:	442c      	add	r4, r5
 8083a1e:	ea81 0603 	eor.w	r6, r1, r3
 8083a22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083a26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083a2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083a2e:	bf18      	it	ne
 8083a30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083a3c:	d038      	beq.n	8083ab0 <__aeabi_dmul+0xb4>
 8083a3e:	fba0 ce02 	umull	ip, lr, r0, r2
 8083a42:	f04f 0500 	mov.w	r5, #0
 8083a46:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083a4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083a4e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083a52:	f04f 0600 	mov.w	r6, #0
 8083a56:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083a5a:	f09c 0f00 	teq	ip, #0
 8083a5e:	bf18      	it	ne
 8083a60:	f04e 0e01 	orrne.w	lr, lr, #1
 8083a64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083a68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083a6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083a70:	d204      	bcs.n	8083a7c <__aeabi_dmul+0x80>
 8083a72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083a76:	416d      	adcs	r5, r5
 8083a78:	eb46 0606 	adc.w	r6, r6, r6
 8083a7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083a80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083a84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083a88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083a8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083a90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083a94:	bf88      	it	hi
 8083a96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083a9a:	d81e      	bhi.n	8083ada <__aeabi_dmul+0xde>
 8083a9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083aa0:	bf08      	it	eq
 8083aa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083aa6:	f150 0000 	adcs.w	r0, r0, #0
 8083aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083aae:	bd70      	pop	{r4, r5, r6, pc}
 8083ab0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083ab4:	ea46 0101 	orr.w	r1, r6, r1
 8083ab8:	ea40 0002 	orr.w	r0, r0, r2
 8083abc:	ea81 0103 	eor.w	r1, r1, r3
 8083ac0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083ac4:	bfc2      	ittt	gt
 8083ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083ace:	bd70      	popgt	{r4, r5, r6, pc}
 8083ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ad4:	f04f 0e00 	mov.w	lr, #0
 8083ad8:	3c01      	subs	r4, #1
 8083ada:	f300 80ab 	bgt.w	8083c34 <__aeabi_dmul+0x238>
 8083ade:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083ae2:	bfde      	ittt	le
 8083ae4:	2000      	movle	r0, #0
 8083ae6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083aea:	bd70      	pople	{r4, r5, r6, pc}
 8083aec:	f1c4 0400 	rsb	r4, r4, #0
 8083af0:	3c20      	subs	r4, #32
 8083af2:	da35      	bge.n	8083b60 <__aeabi_dmul+0x164>
 8083af4:	340c      	adds	r4, #12
 8083af6:	dc1b      	bgt.n	8083b30 <__aeabi_dmul+0x134>
 8083af8:	f104 0414 	add.w	r4, r4, #20
 8083afc:	f1c4 0520 	rsb	r5, r4, #32
 8083b00:	fa00 f305 	lsl.w	r3, r0, r5
 8083b04:	fa20 f004 	lsr.w	r0, r0, r4
 8083b08:	fa01 f205 	lsl.w	r2, r1, r5
 8083b0c:	ea40 0002 	orr.w	r0, r0, r2
 8083b10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083b14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b1c:	fa21 f604 	lsr.w	r6, r1, r4
 8083b20:	eb42 0106 	adc.w	r1, r2, r6
 8083b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b28:	bf08      	it	eq
 8083b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b2e:	bd70      	pop	{r4, r5, r6, pc}
 8083b30:	f1c4 040c 	rsb	r4, r4, #12
 8083b34:	f1c4 0520 	rsb	r5, r4, #32
 8083b38:	fa00 f304 	lsl.w	r3, r0, r4
 8083b3c:	fa20 f005 	lsr.w	r0, r0, r5
 8083b40:	fa01 f204 	lsl.w	r2, r1, r4
 8083b44:	ea40 0002 	orr.w	r0, r0, r2
 8083b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b50:	f141 0100 	adc.w	r1, r1, #0
 8083b54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b58:	bf08      	it	eq
 8083b5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b5e:	bd70      	pop	{r4, r5, r6, pc}
 8083b60:	f1c4 0520 	rsb	r5, r4, #32
 8083b64:	fa00 f205 	lsl.w	r2, r0, r5
 8083b68:	ea4e 0e02 	orr.w	lr, lr, r2
 8083b6c:	fa20 f304 	lsr.w	r3, r0, r4
 8083b70:	fa01 f205 	lsl.w	r2, r1, r5
 8083b74:	ea43 0302 	orr.w	r3, r3, r2
 8083b78:	fa21 f004 	lsr.w	r0, r1, r4
 8083b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b80:	fa21 f204 	lsr.w	r2, r1, r4
 8083b84:	ea20 0002 	bic.w	r0, r0, r2
 8083b88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083b8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b90:	bf08      	it	eq
 8083b92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b96:	bd70      	pop	{r4, r5, r6, pc}
 8083b98:	f094 0f00 	teq	r4, #0
 8083b9c:	d10f      	bne.n	8083bbe <__aeabi_dmul+0x1c2>
 8083b9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083ba2:	0040      	lsls	r0, r0, #1
 8083ba4:	eb41 0101 	adc.w	r1, r1, r1
 8083ba8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083bac:	bf08      	it	eq
 8083bae:	3c01      	subeq	r4, #1
 8083bb0:	d0f7      	beq.n	8083ba2 <__aeabi_dmul+0x1a6>
 8083bb2:	ea41 0106 	orr.w	r1, r1, r6
 8083bb6:	f095 0f00 	teq	r5, #0
 8083bba:	bf18      	it	ne
 8083bbc:	4770      	bxne	lr
 8083bbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083bc2:	0052      	lsls	r2, r2, #1
 8083bc4:	eb43 0303 	adc.w	r3, r3, r3
 8083bc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083bcc:	bf08      	it	eq
 8083bce:	3d01      	subeq	r5, #1
 8083bd0:	d0f7      	beq.n	8083bc2 <__aeabi_dmul+0x1c6>
 8083bd2:	ea43 0306 	orr.w	r3, r3, r6
 8083bd6:	4770      	bx	lr
 8083bd8:	ea94 0f0c 	teq	r4, ip
 8083bdc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083be0:	bf18      	it	ne
 8083be2:	ea95 0f0c 	teqne	r5, ip
 8083be6:	d00c      	beq.n	8083c02 <__aeabi_dmul+0x206>
 8083be8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083bec:	bf18      	it	ne
 8083bee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083bf2:	d1d1      	bne.n	8083b98 <__aeabi_dmul+0x19c>
 8083bf4:	ea81 0103 	eor.w	r1, r1, r3
 8083bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083bfc:	f04f 0000 	mov.w	r0, #0
 8083c00:	bd70      	pop	{r4, r5, r6, pc}
 8083c02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c06:	bf06      	itte	eq
 8083c08:	4610      	moveq	r0, r2
 8083c0a:	4619      	moveq	r1, r3
 8083c0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c10:	d019      	beq.n	8083c46 <__aeabi_dmul+0x24a>
 8083c12:	ea94 0f0c 	teq	r4, ip
 8083c16:	d102      	bne.n	8083c1e <__aeabi_dmul+0x222>
 8083c18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083c1c:	d113      	bne.n	8083c46 <__aeabi_dmul+0x24a>
 8083c1e:	ea95 0f0c 	teq	r5, ip
 8083c22:	d105      	bne.n	8083c30 <__aeabi_dmul+0x234>
 8083c24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083c28:	bf1c      	itt	ne
 8083c2a:	4610      	movne	r0, r2
 8083c2c:	4619      	movne	r1, r3
 8083c2e:	d10a      	bne.n	8083c46 <__aeabi_dmul+0x24a>
 8083c30:	ea81 0103 	eor.w	r1, r1, r3
 8083c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083c40:	f04f 0000 	mov.w	r0, #0
 8083c44:	bd70      	pop	{r4, r5, r6, pc}
 8083c46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083c4e:	bd70      	pop	{r4, r5, r6, pc}

08083c50 <__aeabi_ddiv>:
 8083c50:	b570      	push	{r4, r5, r6, lr}
 8083c52:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083c5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083c5e:	bf1d      	ittte	ne
 8083c60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083c64:	ea94 0f0c 	teqne	r4, ip
 8083c68:	ea95 0f0c 	teqne	r5, ip
 8083c6c:	f000 f8a7 	bleq	8083dbe <__aeabi_ddiv+0x16e>
 8083c70:	eba4 0405 	sub.w	r4, r4, r5
 8083c74:	ea81 0e03 	eor.w	lr, r1, r3
 8083c78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083c7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083c80:	f000 8088 	beq.w	8083d94 <__aeabi_ddiv+0x144>
 8083c84:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083c88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083c8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083c90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083c94:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083c98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083c9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083ca0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083ca4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083ca8:	429d      	cmp	r5, r3
 8083caa:	bf08      	it	eq
 8083cac:	4296      	cmpeq	r6, r2
 8083cae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083cb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083cb6:	d202      	bcs.n	8083cbe <__aeabi_ddiv+0x6e>
 8083cb8:	085b      	lsrs	r3, r3, #1
 8083cba:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cbe:	1ab6      	subs	r6, r6, r2
 8083cc0:	eb65 0503 	sbc.w	r5, r5, r3
 8083cc4:	085b      	lsrs	r3, r3, #1
 8083cc6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083cce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083cd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8083cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083cda:	bf22      	ittt	cs
 8083cdc:	1ab6      	subcs	r6, r6, r2
 8083cde:	4675      	movcs	r5, lr
 8083ce0:	ea40 000c 	orrcs.w	r0, r0, ip
 8083ce4:	085b      	lsrs	r3, r3, #1
 8083ce6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cea:	ebb6 0e02 	subs.w	lr, r6, r2
 8083cee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083cf2:	bf22      	ittt	cs
 8083cf4:	1ab6      	subcs	r6, r6, r2
 8083cf6:	4675      	movcs	r5, lr
 8083cf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083cfc:	085b      	lsrs	r3, r3, #1
 8083cfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d02:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d0a:	bf22      	ittt	cs
 8083d0c:	1ab6      	subcs	r6, r6, r2
 8083d0e:	4675      	movcs	r5, lr
 8083d10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083d14:	085b      	lsrs	r3, r3, #1
 8083d16:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d22:	bf22      	ittt	cs
 8083d24:	1ab6      	subcs	r6, r6, r2
 8083d26:	4675      	movcs	r5, lr
 8083d28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083d2c:	ea55 0e06 	orrs.w	lr, r5, r6
 8083d30:	d018      	beq.n	8083d64 <__aeabi_ddiv+0x114>
 8083d32:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083d36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083d3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083d3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083d42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083d46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083d4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083d4e:	d1c0      	bne.n	8083cd2 <__aeabi_ddiv+0x82>
 8083d50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d54:	d10b      	bne.n	8083d6e <__aeabi_ddiv+0x11e>
 8083d56:	ea41 0100 	orr.w	r1, r1, r0
 8083d5a:	f04f 0000 	mov.w	r0, #0
 8083d5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083d62:	e7b6      	b.n	8083cd2 <__aeabi_ddiv+0x82>
 8083d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d68:	bf04      	itt	eq
 8083d6a:	4301      	orreq	r1, r0
 8083d6c:	2000      	moveq	r0, #0
 8083d6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083d72:	bf88      	it	hi
 8083d74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083d78:	f63f aeaf 	bhi.w	8083ada <__aeabi_dmul+0xde>
 8083d7c:	ebb5 0c03 	subs.w	ip, r5, r3
 8083d80:	bf04      	itt	eq
 8083d82:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083d8a:	f150 0000 	adcs.w	r0, r0, #0
 8083d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083d92:	bd70      	pop	{r4, r5, r6, pc}
 8083d94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083d98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083d9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083da0:	bfc2      	ittt	gt
 8083da2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083da6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083daa:	bd70      	popgt	{r4, r5, r6, pc}
 8083dac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083db0:	f04f 0e00 	mov.w	lr, #0
 8083db4:	3c01      	subs	r4, #1
 8083db6:	e690      	b.n	8083ada <__aeabi_dmul+0xde>
 8083db8:	ea45 0e06 	orr.w	lr, r5, r6
 8083dbc:	e68d      	b.n	8083ada <__aeabi_dmul+0xde>
 8083dbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083dc2:	ea94 0f0c 	teq	r4, ip
 8083dc6:	bf08      	it	eq
 8083dc8:	ea95 0f0c 	teqeq	r5, ip
 8083dcc:	f43f af3b 	beq.w	8083c46 <__aeabi_dmul+0x24a>
 8083dd0:	ea94 0f0c 	teq	r4, ip
 8083dd4:	d10a      	bne.n	8083dec <__aeabi_ddiv+0x19c>
 8083dd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083dda:	f47f af34 	bne.w	8083c46 <__aeabi_dmul+0x24a>
 8083dde:	ea95 0f0c 	teq	r5, ip
 8083de2:	f47f af25 	bne.w	8083c30 <__aeabi_dmul+0x234>
 8083de6:	4610      	mov	r0, r2
 8083de8:	4619      	mov	r1, r3
 8083dea:	e72c      	b.n	8083c46 <__aeabi_dmul+0x24a>
 8083dec:	ea95 0f0c 	teq	r5, ip
 8083df0:	d106      	bne.n	8083e00 <__aeabi_ddiv+0x1b0>
 8083df2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083df6:	f43f aefd 	beq.w	8083bf4 <__aeabi_dmul+0x1f8>
 8083dfa:	4610      	mov	r0, r2
 8083dfc:	4619      	mov	r1, r3
 8083dfe:	e722      	b.n	8083c46 <__aeabi_dmul+0x24a>
 8083e00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e04:	bf18      	it	ne
 8083e06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e0a:	f47f aec5 	bne.w	8083b98 <__aeabi_dmul+0x19c>
 8083e0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083e12:	f47f af0d 	bne.w	8083c30 <__aeabi_dmul+0x234>
 8083e16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083e1a:	f47f aeeb 	bne.w	8083bf4 <__aeabi_dmul+0x1f8>
 8083e1e:	e712      	b.n	8083c46 <__aeabi_dmul+0x24a>

08083e20 <__gedf2>:
 8083e20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083e24:	e006      	b.n	8083e34 <__cmpdf2+0x4>
 8083e26:	bf00      	nop

08083e28 <__ledf2>:
 8083e28:	f04f 0c01 	mov.w	ip, #1
 8083e2c:	e002      	b.n	8083e34 <__cmpdf2+0x4>
 8083e2e:	bf00      	nop

08083e30 <__cmpdf2>:
 8083e30:	f04f 0c01 	mov.w	ip, #1
 8083e34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083e44:	bf18      	it	ne
 8083e46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083e4a:	d01b      	beq.n	8083e84 <__cmpdf2+0x54>
 8083e4c:	b001      	add	sp, #4
 8083e4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083e52:	bf0c      	ite	eq
 8083e54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083e58:	ea91 0f03 	teqne	r1, r3
 8083e5c:	bf02      	ittt	eq
 8083e5e:	ea90 0f02 	teqeq	r0, r2
 8083e62:	2000      	moveq	r0, #0
 8083e64:	4770      	bxeq	lr
 8083e66:	f110 0f00 	cmn.w	r0, #0
 8083e6a:	ea91 0f03 	teq	r1, r3
 8083e6e:	bf58      	it	pl
 8083e70:	4299      	cmppl	r1, r3
 8083e72:	bf08      	it	eq
 8083e74:	4290      	cmpeq	r0, r2
 8083e76:	bf2c      	ite	cs
 8083e78:	17d8      	asrcs	r0, r3, #31
 8083e7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083e7e:	f040 0001 	orr.w	r0, r0, #1
 8083e82:	4770      	bx	lr
 8083e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083e8c:	d102      	bne.n	8083e94 <__cmpdf2+0x64>
 8083e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083e92:	d107      	bne.n	8083ea4 <__cmpdf2+0x74>
 8083e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083e9c:	d1d6      	bne.n	8083e4c <__cmpdf2+0x1c>
 8083e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083ea2:	d0d3      	beq.n	8083e4c <__cmpdf2+0x1c>
 8083ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083ea8:	4770      	bx	lr
 8083eaa:	bf00      	nop

08083eac <__aeabi_cdrcmple>:
 8083eac:	4684      	mov	ip, r0
 8083eae:	4610      	mov	r0, r2
 8083eb0:	4662      	mov	r2, ip
 8083eb2:	468c      	mov	ip, r1
 8083eb4:	4619      	mov	r1, r3
 8083eb6:	4663      	mov	r3, ip
 8083eb8:	e000      	b.n	8083ebc <__aeabi_cdcmpeq>
 8083eba:	bf00      	nop

08083ebc <__aeabi_cdcmpeq>:
 8083ebc:	b501      	push	{r0, lr}
 8083ebe:	f7ff ffb7 	bl	8083e30 <__cmpdf2>
 8083ec2:	2800      	cmp	r0, #0
 8083ec4:	bf48      	it	mi
 8083ec6:	f110 0f00 	cmnmi.w	r0, #0
 8083eca:	bd01      	pop	{r0, pc}

08083ecc <__aeabi_dcmpeq>:
 8083ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ed0:	f7ff fff4 	bl	8083ebc <__aeabi_cdcmpeq>
 8083ed4:	bf0c      	ite	eq
 8083ed6:	2001      	moveq	r0, #1
 8083ed8:	2000      	movne	r0, #0
 8083eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ede:	bf00      	nop

08083ee0 <__aeabi_dcmplt>:
 8083ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ee4:	f7ff ffea 	bl	8083ebc <__aeabi_cdcmpeq>
 8083ee8:	bf34      	ite	cc
 8083eea:	2001      	movcc	r0, #1
 8083eec:	2000      	movcs	r0, #0
 8083eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ef2:	bf00      	nop

08083ef4 <__aeabi_dcmple>:
 8083ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ef8:	f7ff ffe0 	bl	8083ebc <__aeabi_cdcmpeq>
 8083efc:	bf94      	ite	ls
 8083efe:	2001      	movls	r0, #1
 8083f00:	2000      	movhi	r0, #0
 8083f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f06:	bf00      	nop

08083f08 <__aeabi_dcmpge>:
 8083f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f0c:	f7ff ffce 	bl	8083eac <__aeabi_cdrcmple>
 8083f10:	bf94      	ite	ls
 8083f12:	2001      	movls	r0, #1
 8083f14:	2000      	movhi	r0, #0
 8083f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f1a:	bf00      	nop

08083f1c <__aeabi_dcmpgt>:
 8083f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f20:	f7ff ffc4 	bl	8083eac <__aeabi_cdrcmple>
 8083f24:	bf34      	ite	cc
 8083f26:	2001      	movcc	r0, #1
 8083f28:	2000      	movcs	r0, #0
 8083f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f2e:	bf00      	nop

08083f30 <__aeabi_dcmpun>:
 8083f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f38:	d102      	bne.n	8083f40 <__aeabi_dcmpun+0x10>
 8083f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083f3e:	d10a      	bne.n	8083f56 <__aeabi_dcmpun+0x26>
 8083f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f48:	d102      	bne.n	8083f50 <__aeabi_dcmpun+0x20>
 8083f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083f4e:	d102      	bne.n	8083f56 <__aeabi_dcmpun+0x26>
 8083f50:	f04f 0000 	mov.w	r0, #0
 8083f54:	4770      	bx	lr
 8083f56:	f04f 0001 	mov.w	r0, #1
 8083f5a:	4770      	bx	lr

08083f5c <__aeabi_d2iz>:
 8083f5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083f60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083f64:	d215      	bcs.n	8083f92 <__aeabi_d2iz+0x36>
 8083f66:	d511      	bpl.n	8083f8c <__aeabi_d2iz+0x30>
 8083f68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083f6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083f70:	d912      	bls.n	8083f98 <__aeabi_d2iz+0x3c>
 8083f72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083f7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083f7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083f82:	fa23 f002 	lsr.w	r0, r3, r2
 8083f86:	bf18      	it	ne
 8083f88:	4240      	negne	r0, r0
 8083f8a:	4770      	bx	lr
 8083f8c:	f04f 0000 	mov.w	r0, #0
 8083f90:	4770      	bx	lr
 8083f92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083f96:	d105      	bne.n	8083fa4 <__aeabi_d2iz+0x48>
 8083f98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083f9c:	bf08      	it	eq
 8083f9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083fa2:	4770      	bx	lr
 8083fa4:	f04f 0000 	mov.w	r0, #0
 8083fa8:	4770      	bx	lr
 8083faa:	bf00      	nop

08083fac <__aeabi_d2uiz>:
 8083fac:	004a      	lsls	r2, r1, #1
 8083fae:	d211      	bcs.n	8083fd4 <__aeabi_d2uiz+0x28>
 8083fb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083fb4:	d211      	bcs.n	8083fda <__aeabi_d2uiz+0x2e>
 8083fb6:	d50d      	bpl.n	8083fd4 <__aeabi_d2uiz+0x28>
 8083fb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083fbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083fc0:	d40e      	bmi.n	8083fe0 <__aeabi_d2uiz+0x34>
 8083fc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083fca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083fce:	fa23 f002 	lsr.w	r0, r3, r2
 8083fd2:	4770      	bx	lr
 8083fd4:	f04f 0000 	mov.w	r0, #0
 8083fd8:	4770      	bx	lr
 8083fda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083fde:	d102      	bne.n	8083fe6 <__aeabi_d2uiz+0x3a>
 8083fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8083fe4:	4770      	bx	lr
 8083fe6:	f04f 0000 	mov.w	r0, #0
 8083fea:	4770      	bx	lr

08083fec <__aeabi_d2f>:
 8083fec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083ff0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083ff4:	bf24      	itt	cs
 8083ff6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083ffa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083ffe:	d90d      	bls.n	808401c <__aeabi_d2f+0x30>
 8084000:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084004:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084008:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808400c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084010:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8084014:	bf08      	it	eq
 8084016:	f020 0001 	biceq.w	r0, r0, #1
 808401a:	4770      	bx	lr
 808401c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084020:	d121      	bne.n	8084066 <__aeabi_d2f+0x7a>
 8084022:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8084026:	bfbc      	itt	lt
 8084028:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808402c:	4770      	bxlt	lr
 808402e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084032:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084036:	f1c2 0218 	rsb	r2, r2, #24
 808403a:	f1c2 0c20 	rsb	ip, r2, #32
 808403e:	fa10 f30c 	lsls.w	r3, r0, ip
 8084042:	fa20 f002 	lsr.w	r0, r0, r2
 8084046:	bf18      	it	ne
 8084048:	f040 0001 	orrne.w	r0, r0, #1
 808404c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084050:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084054:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084058:	ea40 000c 	orr.w	r0, r0, ip
 808405c:	fa23 f302 	lsr.w	r3, r3, r2
 8084060:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084064:	e7cc      	b.n	8084000 <__aeabi_d2f+0x14>
 8084066:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808406a:	d107      	bne.n	808407c <__aeabi_d2f+0x90>
 808406c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084070:	bf1e      	ittt	ne
 8084072:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084076:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808407a:	4770      	bxne	lr
 808407c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084080:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084088:	4770      	bx	lr
 808408a:	bf00      	nop

0808408c <__aeabi_frsub>:
 808408c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084090:	e002      	b.n	8084098 <__addsf3>
 8084092:	bf00      	nop

08084094 <__aeabi_fsub>:
 8084094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084098 <__addsf3>:
 8084098:	0042      	lsls	r2, r0, #1
 808409a:	bf1f      	itttt	ne
 808409c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80840a0:	ea92 0f03 	teqne	r2, r3
 80840a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80840a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80840ac:	d06a      	beq.n	8084184 <__addsf3+0xec>
 80840ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80840b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80840b6:	bfc1      	itttt	gt
 80840b8:	18d2      	addgt	r2, r2, r3
 80840ba:	4041      	eorgt	r1, r0
 80840bc:	4048      	eorgt	r0, r1
 80840be:	4041      	eorgt	r1, r0
 80840c0:	bfb8      	it	lt
 80840c2:	425b      	neglt	r3, r3
 80840c4:	2b19      	cmp	r3, #25
 80840c6:	bf88      	it	hi
 80840c8:	4770      	bxhi	lr
 80840ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80840ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80840d6:	bf18      	it	ne
 80840d8:	4240      	negne	r0, r0
 80840da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80840de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80840e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80840e6:	bf18      	it	ne
 80840e8:	4249      	negne	r1, r1
 80840ea:	ea92 0f03 	teq	r2, r3
 80840ee:	d03f      	beq.n	8084170 <__addsf3+0xd8>
 80840f0:	f1a2 0201 	sub.w	r2, r2, #1
 80840f4:	fa41 fc03 	asr.w	ip, r1, r3
 80840f8:	eb10 000c 	adds.w	r0, r0, ip
 80840fc:	f1c3 0320 	rsb	r3, r3, #32
 8084100:	fa01 f103 	lsl.w	r1, r1, r3
 8084104:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084108:	d502      	bpl.n	8084110 <__addsf3+0x78>
 808410a:	4249      	negs	r1, r1
 808410c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8084110:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8084114:	d313      	bcc.n	808413e <__addsf3+0xa6>
 8084116:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808411a:	d306      	bcc.n	808412a <__addsf3+0x92>
 808411c:	0840      	lsrs	r0, r0, #1
 808411e:	ea4f 0131 	mov.w	r1, r1, rrx
 8084122:	f102 0201 	add.w	r2, r2, #1
 8084126:	2afe      	cmp	r2, #254	; 0xfe
 8084128:	d251      	bcs.n	80841ce <__addsf3+0x136>
 808412a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808412e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084132:	bf08      	it	eq
 8084134:	f020 0001 	biceq.w	r0, r0, #1
 8084138:	ea40 0003 	orr.w	r0, r0, r3
 808413c:	4770      	bx	lr
 808413e:	0049      	lsls	r1, r1, #1
 8084140:	eb40 0000 	adc.w	r0, r0, r0
 8084144:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8084148:	f1a2 0201 	sub.w	r2, r2, #1
 808414c:	d1ed      	bne.n	808412a <__addsf3+0x92>
 808414e:	fab0 fc80 	clz	ip, r0
 8084152:	f1ac 0c08 	sub.w	ip, ip, #8
 8084156:	ebb2 020c 	subs.w	r2, r2, ip
 808415a:	fa00 f00c 	lsl.w	r0, r0, ip
 808415e:	bfaa      	itet	ge
 8084160:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084164:	4252      	neglt	r2, r2
 8084166:	4318      	orrge	r0, r3
 8084168:	bfbc      	itt	lt
 808416a:	40d0      	lsrlt	r0, r2
 808416c:	4318      	orrlt	r0, r3
 808416e:	4770      	bx	lr
 8084170:	f092 0f00 	teq	r2, #0
 8084174:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084178:	bf06      	itte	eq
 808417a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808417e:	3201      	addeq	r2, #1
 8084180:	3b01      	subne	r3, #1
 8084182:	e7b5      	b.n	80840f0 <__addsf3+0x58>
 8084184:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084188:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808418c:	bf18      	it	ne
 808418e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084192:	d021      	beq.n	80841d8 <__addsf3+0x140>
 8084194:	ea92 0f03 	teq	r2, r3
 8084198:	d004      	beq.n	80841a4 <__addsf3+0x10c>
 808419a:	f092 0f00 	teq	r2, #0
 808419e:	bf08      	it	eq
 80841a0:	4608      	moveq	r0, r1
 80841a2:	4770      	bx	lr
 80841a4:	ea90 0f01 	teq	r0, r1
 80841a8:	bf1c      	itt	ne
 80841aa:	2000      	movne	r0, #0
 80841ac:	4770      	bxne	lr
 80841ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80841b2:	d104      	bne.n	80841be <__addsf3+0x126>
 80841b4:	0040      	lsls	r0, r0, #1
 80841b6:	bf28      	it	cs
 80841b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80841bc:	4770      	bx	lr
 80841be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80841c2:	bf3c      	itt	cc
 80841c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80841c8:	4770      	bxcc	lr
 80841ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80841ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80841d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841d6:	4770      	bx	lr
 80841d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80841dc:	bf16      	itet	ne
 80841de:	4608      	movne	r0, r1
 80841e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80841e4:	4601      	movne	r1, r0
 80841e6:	0242      	lsls	r2, r0, #9
 80841e8:	bf06      	itte	eq
 80841ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80841ee:	ea90 0f01 	teqeq	r0, r1
 80841f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80841f6:	4770      	bx	lr

080841f8 <__aeabi_ui2f>:
 80841f8:	f04f 0300 	mov.w	r3, #0
 80841fc:	e004      	b.n	8084208 <__aeabi_i2f+0x8>
 80841fe:	bf00      	nop

08084200 <__aeabi_i2f>:
 8084200:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084204:	bf48      	it	mi
 8084206:	4240      	negmi	r0, r0
 8084208:	ea5f 0c00 	movs.w	ip, r0
 808420c:	bf08      	it	eq
 808420e:	4770      	bxeq	lr
 8084210:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8084214:	4601      	mov	r1, r0
 8084216:	f04f 0000 	mov.w	r0, #0
 808421a:	e01c      	b.n	8084256 <__aeabi_l2f+0x2a>

0808421c <__aeabi_ul2f>:
 808421c:	ea50 0201 	orrs.w	r2, r0, r1
 8084220:	bf08      	it	eq
 8084222:	4770      	bxeq	lr
 8084224:	f04f 0300 	mov.w	r3, #0
 8084228:	e00a      	b.n	8084240 <__aeabi_l2f+0x14>
 808422a:	bf00      	nop

0808422c <__aeabi_l2f>:
 808422c:	ea50 0201 	orrs.w	r2, r0, r1
 8084230:	bf08      	it	eq
 8084232:	4770      	bxeq	lr
 8084234:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084238:	d502      	bpl.n	8084240 <__aeabi_l2f+0x14>
 808423a:	4240      	negs	r0, r0
 808423c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084240:	ea5f 0c01 	movs.w	ip, r1
 8084244:	bf02      	ittt	eq
 8084246:	4684      	moveq	ip, r0
 8084248:	4601      	moveq	r1, r0
 808424a:	2000      	moveq	r0, #0
 808424c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084250:	bf08      	it	eq
 8084252:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084256:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808425a:	fabc f28c 	clz	r2, ip
 808425e:	3a08      	subs	r2, #8
 8084260:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084264:	db10      	blt.n	8084288 <__aeabi_l2f+0x5c>
 8084266:	fa01 fc02 	lsl.w	ip, r1, r2
 808426a:	4463      	add	r3, ip
 808426c:	fa00 fc02 	lsl.w	ip, r0, r2
 8084270:	f1c2 0220 	rsb	r2, r2, #32
 8084274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084278:	fa20 f202 	lsr.w	r2, r0, r2
 808427c:	eb43 0002 	adc.w	r0, r3, r2
 8084280:	bf08      	it	eq
 8084282:	f020 0001 	biceq.w	r0, r0, #1
 8084286:	4770      	bx	lr
 8084288:	f102 0220 	add.w	r2, r2, #32
 808428c:	fa01 fc02 	lsl.w	ip, r1, r2
 8084290:	f1c2 0220 	rsb	r2, r2, #32
 8084294:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084298:	fa21 f202 	lsr.w	r2, r1, r2
 808429c:	eb43 0002 	adc.w	r0, r3, r2
 80842a0:	bf08      	it	eq
 80842a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80842a6:	4770      	bx	lr

080842a8 <__aeabi_fmul>:
 80842a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80842ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80842b0:	bf1e      	ittt	ne
 80842b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80842b6:	ea92 0f0c 	teqne	r2, ip
 80842ba:	ea93 0f0c 	teqne	r3, ip
 80842be:	d06f      	beq.n	80843a0 <__aeabi_fmul+0xf8>
 80842c0:	441a      	add	r2, r3
 80842c2:	ea80 0c01 	eor.w	ip, r0, r1
 80842c6:	0240      	lsls	r0, r0, #9
 80842c8:	bf18      	it	ne
 80842ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80842ce:	d01e      	beq.n	808430e <__aeabi_fmul+0x66>
 80842d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80842d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80842d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80842dc:	fba0 3101 	umull	r3, r1, r0, r1
 80842e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80842e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80842e8:	bf3e      	ittt	cc
 80842ea:	0049      	lslcc	r1, r1, #1
 80842ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80842f0:	005b      	lslcc	r3, r3, #1
 80842f2:	ea40 0001 	orr.w	r0, r0, r1
 80842f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80842fa:	2afd      	cmp	r2, #253	; 0xfd
 80842fc:	d81d      	bhi.n	808433a <__aeabi_fmul+0x92>
 80842fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084302:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084306:	bf08      	it	eq
 8084308:	f020 0001 	biceq.w	r0, r0, #1
 808430c:	4770      	bx	lr
 808430e:	f090 0f00 	teq	r0, #0
 8084312:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084316:	bf08      	it	eq
 8084318:	0249      	lsleq	r1, r1, #9
 808431a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808431e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084322:	3a7f      	subs	r2, #127	; 0x7f
 8084324:	bfc2      	ittt	gt
 8084326:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808432a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808432e:	4770      	bxgt	lr
 8084330:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084334:	f04f 0300 	mov.w	r3, #0
 8084338:	3a01      	subs	r2, #1
 808433a:	dc5d      	bgt.n	80843f8 <__aeabi_fmul+0x150>
 808433c:	f112 0f19 	cmn.w	r2, #25
 8084340:	bfdc      	itt	le
 8084342:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084346:	4770      	bxle	lr
 8084348:	f1c2 0200 	rsb	r2, r2, #0
 808434c:	0041      	lsls	r1, r0, #1
 808434e:	fa21 f102 	lsr.w	r1, r1, r2
 8084352:	f1c2 0220 	rsb	r2, r2, #32
 8084356:	fa00 fc02 	lsl.w	ip, r0, r2
 808435a:	ea5f 0031 	movs.w	r0, r1, rrx
 808435e:	f140 0000 	adc.w	r0, r0, #0
 8084362:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084366:	bf08      	it	eq
 8084368:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808436c:	4770      	bx	lr
 808436e:	f092 0f00 	teq	r2, #0
 8084372:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084376:	bf02      	ittt	eq
 8084378:	0040      	lsleq	r0, r0, #1
 808437a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808437e:	3a01      	subeq	r2, #1
 8084380:	d0f9      	beq.n	8084376 <__aeabi_fmul+0xce>
 8084382:	ea40 000c 	orr.w	r0, r0, ip
 8084386:	f093 0f00 	teq	r3, #0
 808438a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808438e:	bf02      	ittt	eq
 8084390:	0049      	lsleq	r1, r1, #1
 8084392:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084396:	3b01      	subeq	r3, #1
 8084398:	d0f9      	beq.n	808438e <__aeabi_fmul+0xe6>
 808439a:	ea41 010c 	orr.w	r1, r1, ip
 808439e:	e78f      	b.n	80842c0 <__aeabi_fmul+0x18>
 80843a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80843a4:	ea92 0f0c 	teq	r2, ip
 80843a8:	bf18      	it	ne
 80843aa:	ea93 0f0c 	teqne	r3, ip
 80843ae:	d00a      	beq.n	80843c6 <__aeabi_fmul+0x11e>
 80843b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80843b4:	bf18      	it	ne
 80843b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80843ba:	d1d8      	bne.n	808436e <__aeabi_fmul+0xc6>
 80843bc:	ea80 0001 	eor.w	r0, r0, r1
 80843c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80843c4:	4770      	bx	lr
 80843c6:	f090 0f00 	teq	r0, #0
 80843ca:	bf17      	itett	ne
 80843cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80843d0:	4608      	moveq	r0, r1
 80843d2:	f091 0f00 	teqne	r1, #0
 80843d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80843da:	d014      	beq.n	8084406 <__aeabi_fmul+0x15e>
 80843dc:	ea92 0f0c 	teq	r2, ip
 80843e0:	d101      	bne.n	80843e6 <__aeabi_fmul+0x13e>
 80843e2:	0242      	lsls	r2, r0, #9
 80843e4:	d10f      	bne.n	8084406 <__aeabi_fmul+0x15e>
 80843e6:	ea93 0f0c 	teq	r3, ip
 80843ea:	d103      	bne.n	80843f4 <__aeabi_fmul+0x14c>
 80843ec:	024b      	lsls	r3, r1, #9
 80843ee:	bf18      	it	ne
 80843f0:	4608      	movne	r0, r1
 80843f2:	d108      	bne.n	8084406 <__aeabi_fmul+0x15e>
 80843f4:	ea80 0001 	eor.w	r0, r0, r1
 80843f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80843fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084404:	4770      	bx	lr
 8084406:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808440a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808440e:	4770      	bx	lr

08084410 <__aeabi_fdiv>:
 8084410:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084414:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084418:	bf1e      	ittt	ne
 808441a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808441e:	ea92 0f0c 	teqne	r2, ip
 8084422:	ea93 0f0c 	teqne	r3, ip
 8084426:	d069      	beq.n	80844fc <__aeabi_fdiv+0xec>
 8084428:	eba2 0203 	sub.w	r2, r2, r3
 808442c:	ea80 0c01 	eor.w	ip, r0, r1
 8084430:	0249      	lsls	r1, r1, #9
 8084432:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084436:	d037      	beq.n	80844a8 <__aeabi_fdiv+0x98>
 8084438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808443c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084440:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084444:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084448:	428b      	cmp	r3, r1
 808444a:	bf38      	it	cc
 808444c:	005b      	lslcc	r3, r3, #1
 808444e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084452:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084456:	428b      	cmp	r3, r1
 8084458:	bf24      	itt	cs
 808445a:	1a5b      	subcs	r3, r3, r1
 808445c:	ea40 000c 	orrcs.w	r0, r0, ip
 8084460:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084464:	bf24      	itt	cs
 8084466:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808446a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808446e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084472:	bf24      	itt	cs
 8084474:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084478:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808447c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084480:	bf24      	itt	cs
 8084482:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084486:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808448a:	011b      	lsls	r3, r3, #4
 808448c:	bf18      	it	ne
 808448e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084492:	d1e0      	bne.n	8084456 <__aeabi_fdiv+0x46>
 8084494:	2afd      	cmp	r2, #253	; 0xfd
 8084496:	f63f af50 	bhi.w	808433a <__aeabi_fmul+0x92>
 808449a:	428b      	cmp	r3, r1
 808449c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80844a0:	bf08      	it	eq
 80844a2:	f020 0001 	biceq.w	r0, r0, #1
 80844a6:	4770      	bx	lr
 80844a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80844ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80844b0:	327f      	adds	r2, #127	; 0x7f
 80844b2:	bfc2      	ittt	gt
 80844b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80844b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80844bc:	4770      	bxgt	lr
 80844be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80844c2:	f04f 0300 	mov.w	r3, #0
 80844c6:	3a01      	subs	r2, #1
 80844c8:	e737      	b.n	808433a <__aeabi_fmul+0x92>
 80844ca:	f092 0f00 	teq	r2, #0
 80844ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80844d2:	bf02      	ittt	eq
 80844d4:	0040      	lsleq	r0, r0, #1
 80844d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80844da:	3a01      	subeq	r2, #1
 80844dc:	d0f9      	beq.n	80844d2 <__aeabi_fdiv+0xc2>
 80844de:	ea40 000c 	orr.w	r0, r0, ip
 80844e2:	f093 0f00 	teq	r3, #0
 80844e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80844ea:	bf02      	ittt	eq
 80844ec:	0049      	lsleq	r1, r1, #1
 80844ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80844f2:	3b01      	subeq	r3, #1
 80844f4:	d0f9      	beq.n	80844ea <__aeabi_fdiv+0xda>
 80844f6:	ea41 010c 	orr.w	r1, r1, ip
 80844fa:	e795      	b.n	8084428 <__aeabi_fdiv+0x18>
 80844fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084500:	ea92 0f0c 	teq	r2, ip
 8084504:	d108      	bne.n	8084518 <__aeabi_fdiv+0x108>
 8084506:	0242      	lsls	r2, r0, #9
 8084508:	f47f af7d 	bne.w	8084406 <__aeabi_fmul+0x15e>
 808450c:	ea93 0f0c 	teq	r3, ip
 8084510:	f47f af70 	bne.w	80843f4 <__aeabi_fmul+0x14c>
 8084514:	4608      	mov	r0, r1
 8084516:	e776      	b.n	8084406 <__aeabi_fmul+0x15e>
 8084518:	ea93 0f0c 	teq	r3, ip
 808451c:	d104      	bne.n	8084528 <__aeabi_fdiv+0x118>
 808451e:	024b      	lsls	r3, r1, #9
 8084520:	f43f af4c 	beq.w	80843bc <__aeabi_fmul+0x114>
 8084524:	4608      	mov	r0, r1
 8084526:	e76e      	b.n	8084406 <__aeabi_fmul+0x15e>
 8084528:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808452c:	bf18      	it	ne
 808452e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084532:	d1ca      	bne.n	80844ca <__aeabi_fdiv+0xba>
 8084534:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084538:	f47f af5c 	bne.w	80843f4 <__aeabi_fmul+0x14c>
 808453c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084540:	f47f af3c 	bne.w	80843bc <__aeabi_fmul+0x114>
 8084544:	e75f      	b.n	8084406 <__aeabi_fmul+0x15e>
 8084546:	bf00      	nop

08084548 <__gesf2>:
 8084548:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808454c:	e006      	b.n	808455c <__cmpsf2+0x4>
 808454e:	bf00      	nop

08084550 <__lesf2>:
 8084550:	f04f 0c01 	mov.w	ip, #1
 8084554:	e002      	b.n	808455c <__cmpsf2+0x4>
 8084556:	bf00      	nop

08084558 <__cmpsf2>:
 8084558:	f04f 0c01 	mov.w	ip, #1
 808455c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084560:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084564:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084568:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808456c:	bf18      	it	ne
 808456e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084572:	d011      	beq.n	8084598 <__cmpsf2+0x40>
 8084574:	b001      	add	sp, #4
 8084576:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808457a:	bf18      	it	ne
 808457c:	ea90 0f01 	teqne	r0, r1
 8084580:	bf58      	it	pl
 8084582:	ebb2 0003 	subspl.w	r0, r2, r3
 8084586:	bf88      	it	hi
 8084588:	17c8      	asrhi	r0, r1, #31
 808458a:	bf38      	it	cc
 808458c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084590:	bf18      	it	ne
 8084592:	f040 0001 	orrne.w	r0, r0, #1
 8084596:	4770      	bx	lr
 8084598:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808459c:	d102      	bne.n	80845a4 <__cmpsf2+0x4c>
 808459e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80845a2:	d105      	bne.n	80845b0 <__cmpsf2+0x58>
 80845a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80845a8:	d1e4      	bne.n	8084574 <__cmpsf2+0x1c>
 80845aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80845ae:	d0e1      	beq.n	8084574 <__cmpsf2+0x1c>
 80845b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80845b4:	4770      	bx	lr
 80845b6:	bf00      	nop

080845b8 <__aeabi_cfrcmple>:
 80845b8:	4684      	mov	ip, r0
 80845ba:	4608      	mov	r0, r1
 80845bc:	4661      	mov	r1, ip
 80845be:	e7ff      	b.n	80845c0 <__aeabi_cfcmpeq>

080845c0 <__aeabi_cfcmpeq>:
 80845c0:	b50f      	push	{r0, r1, r2, r3, lr}
 80845c2:	f7ff ffc9 	bl	8084558 <__cmpsf2>
 80845c6:	2800      	cmp	r0, #0
 80845c8:	bf48      	it	mi
 80845ca:	f110 0f00 	cmnmi.w	r0, #0
 80845ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080845d0 <__aeabi_fcmpeq>:
 80845d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845d4:	f7ff fff4 	bl	80845c0 <__aeabi_cfcmpeq>
 80845d8:	bf0c      	ite	eq
 80845da:	2001      	moveq	r0, #1
 80845dc:	2000      	movne	r0, #0
 80845de:	f85d fb08 	ldr.w	pc, [sp], #8
 80845e2:	bf00      	nop

080845e4 <__aeabi_fcmplt>:
 80845e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845e8:	f7ff ffea 	bl	80845c0 <__aeabi_cfcmpeq>
 80845ec:	bf34      	ite	cc
 80845ee:	2001      	movcc	r0, #1
 80845f0:	2000      	movcs	r0, #0
 80845f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80845f6:	bf00      	nop

080845f8 <__aeabi_fcmple>:
 80845f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845fc:	f7ff ffe0 	bl	80845c0 <__aeabi_cfcmpeq>
 8084600:	bf94      	ite	ls
 8084602:	2001      	movls	r0, #1
 8084604:	2000      	movhi	r0, #0
 8084606:	f85d fb08 	ldr.w	pc, [sp], #8
 808460a:	bf00      	nop

0808460c <__aeabi_fcmpge>:
 808460c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084610:	f7ff ffd2 	bl	80845b8 <__aeabi_cfrcmple>
 8084614:	bf94      	ite	ls
 8084616:	2001      	movls	r0, #1
 8084618:	2000      	movhi	r0, #0
 808461a:	f85d fb08 	ldr.w	pc, [sp], #8
 808461e:	bf00      	nop

08084620 <__aeabi_fcmpgt>:
 8084620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084624:	f7ff ffc8 	bl	80845b8 <__aeabi_cfrcmple>
 8084628:	bf34      	ite	cc
 808462a:	2001      	movcc	r0, #1
 808462c:	2000      	movcs	r0, #0
 808462e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084632:	bf00      	nop

08084634 <__aeabi_f2iz>:
 8084634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084638:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808463c:	d30f      	bcc.n	808465e <__aeabi_f2iz+0x2a>
 808463e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084642:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084646:	d90d      	bls.n	8084664 <__aeabi_f2iz+0x30>
 8084648:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808464c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084650:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084654:	fa23 f002 	lsr.w	r0, r3, r2
 8084658:	bf18      	it	ne
 808465a:	4240      	negne	r0, r0
 808465c:	4770      	bx	lr
 808465e:	f04f 0000 	mov.w	r0, #0
 8084662:	4770      	bx	lr
 8084664:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084668:	d101      	bne.n	808466e <__aeabi_f2iz+0x3a>
 808466a:	0242      	lsls	r2, r0, #9
 808466c:	d105      	bne.n	808467a <__aeabi_f2iz+0x46>
 808466e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084672:	bf08      	it	eq
 8084674:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084678:	4770      	bx	lr
 808467a:	f04f 0000 	mov.w	r0, #0
 808467e:	4770      	bx	lr

08084680 <__aeabi_f2uiz>:
 8084680:	0042      	lsls	r2, r0, #1
 8084682:	d20e      	bcs.n	80846a2 <__aeabi_f2uiz+0x22>
 8084684:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084688:	d30b      	bcc.n	80846a2 <__aeabi_f2uiz+0x22>
 808468a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808468e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084692:	d409      	bmi.n	80846a8 <__aeabi_f2uiz+0x28>
 8084694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808469c:	fa23 f002 	lsr.w	r0, r3, r2
 80846a0:	4770      	bx	lr
 80846a2:	f04f 0000 	mov.w	r0, #0
 80846a6:	4770      	bx	lr
 80846a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80846ac:	d101      	bne.n	80846b2 <__aeabi_f2uiz+0x32>
 80846ae:	0242      	lsls	r2, r0, #9
 80846b0:	d102      	bne.n	80846b8 <__aeabi_f2uiz+0x38>
 80846b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80846b6:	4770      	bx	lr
 80846b8:	f04f 0000 	mov.w	r0, #0
 80846bc:	4770      	bx	lr
 80846be:	bf00      	nop

080846c0 <atof>:
 80846c0:	2100      	movs	r1, #0
 80846c2:	f000 bff5 	b.w	80856b0 <strtod>

080846c6 <atoi>:
 80846c6:	220a      	movs	r2, #10
 80846c8:	2100      	movs	r1, #0
 80846ca:	f001 b87f 	b.w	80857cc <strtol>

080846ce <atol>:
 80846ce:	220a      	movs	r2, #10
 80846d0:	2100      	movs	r1, #0
 80846d2:	f001 b87b 	b.w	80857cc <strtol>
	...

080846d8 <__cxa_atexit>:
 80846d8:	b510      	push	{r4, lr}
 80846da:	4c05      	ldr	r4, [pc, #20]	; (80846f0 <__cxa_atexit+0x18>)
 80846dc:	4613      	mov	r3, r2
 80846de:	b12c      	cbz	r4, 80846ec <__cxa_atexit+0x14>
 80846e0:	460a      	mov	r2, r1
 80846e2:	4601      	mov	r1, r0
 80846e4:	2002      	movs	r0, #2
 80846e6:	f3af 8000 	nop.w
 80846ea:	bd10      	pop	{r4, pc}
 80846ec:	4620      	mov	r0, r4
 80846ee:	bd10      	pop	{r4, pc}
 80846f0:	00000000 	.word	0x00000000

080846f4 <localtime>:
 80846f4:	b538      	push	{r3, r4, r5, lr}
 80846f6:	4b07      	ldr	r3, [pc, #28]	; (8084714 <localtime+0x20>)
 80846f8:	4605      	mov	r5, r0
 80846fa:	681c      	ldr	r4, [r3, #0]
 80846fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80846fe:	b91b      	cbnz	r3, 8084708 <localtime+0x14>
 8084700:	2024      	movs	r0, #36	; 0x24
 8084702:	f7fd f98d 	bl	8081a20 <malloc>
 8084706:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084708:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808470a:	4628      	mov	r0, r5
 808470c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084710:	f000 b802 	b.w	8084718 <localtime_r>
 8084714:	200001b0 	.word	0x200001b0

08084718 <localtime_r>:
 8084718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808471c:	460c      	mov	r4, r1
 808471e:	4680      	mov	r8, r0
 8084720:	f001 fe78 	bl	8086414 <__gettzinfo>
 8084724:	4621      	mov	r1, r4
 8084726:	4607      	mov	r7, r0
 8084728:	4640      	mov	r0, r8
 808472a:	f001 fe77 	bl	808641c <gmtime_r>
 808472e:	6946      	ldr	r6, [r0, #20]
 8084730:	4604      	mov	r4, r0
 8084732:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8084736:	07b3      	lsls	r3, r6, #30
 8084738:	d105      	bne.n	8084746 <localtime_r+0x2e>
 808473a:	2264      	movs	r2, #100	; 0x64
 808473c:	fb96 f3f2 	sdiv	r3, r6, r2
 8084740:	fb02 6313 	mls	r3, r2, r3, r6
 8084744:	b94b      	cbnz	r3, 808475a <localtime_r+0x42>
 8084746:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808474a:	fb96 f3f5 	sdiv	r3, r6, r5
 808474e:	fb05 6513 	mls	r5, r5, r3, r6
 8084752:	fab5 f385 	clz	r3, r5
 8084756:	095b      	lsrs	r3, r3, #5
 8084758:	e000      	b.n	808475c <localtime_r+0x44>
 808475a:	2301      	movs	r3, #1
 808475c:	4a5f      	ldr	r2, [pc, #380]	; (80848dc <localtime_r+0x1c4>)
 808475e:	2530      	movs	r5, #48	; 0x30
 8084760:	fb05 2503 	mla	r5, r5, r3, r2
 8084764:	f001 f96c 	bl	8085a40 <__tz_lock>
 8084768:	f001 f96c 	bl	8085a44 <_tzset_unlocked>
 808476c:	4b5c      	ldr	r3, [pc, #368]	; (80848e0 <localtime_r+0x1c8>)
 808476e:	681b      	ldr	r3, [r3, #0]
 8084770:	b1f3      	cbz	r3, 80847b0 <localtime_r+0x98>
 8084772:	687b      	ldr	r3, [r7, #4]
 8084774:	429e      	cmp	r6, r3
 8084776:	d105      	bne.n	8084784 <localtime_r+0x6c>
 8084778:	6839      	ldr	r1, [r7, #0]
 808477a:	f8d8 3000 	ldr.w	r3, [r8]
 808477e:	69fa      	ldr	r2, [r7, #28]
 8084780:	b941      	cbnz	r1, 8084794 <localtime_r+0x7c>
 8084782:	e00a      	b.n	808479a <localtime_r+0x82>
 8084784:	4630      	mov	r0, r6
 8084786:	f001 f8b3 	bl	80858f0 <__tzcalc_limits>
 808478a:	2800      	cmp	r0, #0
 808478c:	d1f4      	bne.n	8084778 <localtime_r+0x60>
 808478e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084792:	e00d      	b.n	80847b0 <localtime_r+0x98>
 8084794:	4293      	cmp	r3, r2
 8084796:	db08      	blt.n	80847aa <localtime_r+0x92>
 8084798:	e001      	b.n	808479e <localtime_r+0x86>
 808479a:	4293      	cmp	r3, r2
 808479c:	da07      	bge.n	80847ae <localtime_r+0x96>
 808479e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80847a0:	4293      	cmp	r3, r2
 80847a2:	bfac      	ite	ge
 80847a4:	2300      	movge	r3, #0
 80847a6:	2301      	movlt	r3, #1
 80847a8:	e002      	b.n	80847b0 <localtime_r+0x98>
 80847aa:	2300      	movs	r3, #0
 80847ac:	e000      	b.n	80847b0 <localtime_r+0x98>
 80847ae:	2301      	movs	r3, #1
 80847b0:	6223      	str	r3, [r4, #32]
 80847b2:	6a23      	ldr	r3, [r4, #32]
 80847b4:	203c      	movs	r0, #60	; 0x3c
 80847b6:	2b01      	cmp	r3, #1
 80847b8:	bf0c      	ite	eq
 80847ba:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80847bc:	6a39      	ldrne	r1, [r7, #32]
 80847be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80847c2:	fb91 f6f3 	sdiv	r6, r1, r3
 80847c6:	fb03 1316 	mls	r3, r3, r6, r1
 80847ca:	fb93 f2f0 	sdiv	r2, r3, r0
 80847ce:	fb00 3012 	mls	r0, r0, r2, r3
 80847d2:	6861      	ldr	r1, [r4, #4]
 80847d4:	6823      	ldr	r3, [r4, #0]
 80847d6:	1a89      	subs	r1, r1, r2
 80847d8:	68a2      	ldr	r2, [r4, #8]
 80847da:	1a1b      	subs	r3, r3, r0
 80847dc:	1b92      	subs	r2, r2, r6
 80847de:	2b3b      	cmp	r3, #59	; 0x3b
 80847e0:	6023      	str	r3, [r4, #0]
 80847e2:	6061      	str	r1, [r4, #4]
 80847e4:	60a2      	str	r2, [r4, #8]
 80847e6:	dd03      	ble.n	80847f0 <localtime_r+0xd8>
 80847e8:	3101      	adds	r1, #1
 80847ea:	6061      	str	r1, [r4, #4]
 80847ec:	3b3c      	subs	r3, #60	; 0x3c
 80847ee:	e004      	b.n	80847fa <localtime_r+0xe2>
 80847f0:	2b00      	cmp	r3, #0
 80847f2:	da03      	bge.n	80847fc <localtime_r+0xe4>
 80847f4:	3901      	subs	r1, #1
 80847f6:	6061      	str	r1, [r4, #4]
 80847f8:	333c      	adds	r3, #60	; 0x3c
 80847fa:	6023      	str	r3, [r4, #0]
 80847fc:	6863      	ldr	r3, [r4, #4]
 80847fe:	2b3b      	cmp	r3, #59	; 0x3b
 8084800:	dd03      	ble.n	808480a <localtime_r+0xf2>
 8084802:	3201      	adds	r2, #1
 8084804:	60a2      	str	r2, [r4, #8]
 8084806:	3b3c      	subs	r3, #60	; 0x3c
 8084808:	e004      	b.n	8084814 <localtime_r+0xfc>
 808480a:	2b00      	cmp	r3, #0
 808480c:	da03      	bge.n	8084816 <localtime_r+0xfe>
 808480e:	3a01      	subs	r2, #1
 8084810:	60a2      	str	r2, [r4, #8]
 8084812:	333c      	adds	r3, #60	; 0x3c
 8084814:	6063      	str	r3, [r4, #4]
 8084816:	68a3      	ldr	r3, [r4, #8]
 8084818:	2b17      	cmp	r3, #23
 808481a:	dd22      	ble.n	8084862 <localtime_r+0x14a>
 808481c:	69e2      	ldr	r2, [r4, #28]
 808481e:	3b18      	subs	r3, #24
 8084820:	3201      	adds	r2, #1
 8084822:	61e2      	str	r2, [r4, #28]
 8084824:	69a2      	ldr	r2, [r4, #24]
 8084826:	60a3      	str	r3, [r4, #8]
 8084828:	3201      	adds	r2, #1
 808482a:	2a06      	cmp	r2, #6
 808482c:	bfc8      	it	gt
 808482e:	2200      	movgt	r2, #0
 8084830:	61a2      	str	r2, [r4, #24]
 8084832:	68e2      	ldr	r2, [r4, #12]
 8084834:	6923      	ldr	r3, [r4, #16]
 8084836:	3201      	adds	r2, #1
 8084838:	60e2      	str	r2, [r4, #12]
 808483a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808483e:	428a      	cmp	r2, r1
 8084840:	dd46      	ble.n	80848d0 <localtime_r+0x1b8>
 8084842:	3301      	adds	r3, #1
 8084844:	2b0c      	cmp	r3, #12
 8084846:	bf08      	it	eq
 8084848:	6963      	ldreq	r3, [r4, #20]
 808484a:	eba2 0201 	sub.w	r2, r2, r1
 808484e:	60e2      	str	r2, [r4, #12]
 8084850:	bf05      	ittet	eq
 8084852:	3301      	addeq	r3, #1
 8084854:	2200      	moveq	r2, #0
 8084856:	6123      	strne	r3, [r4, #16]
 8084858:	6122      	streq	r2, [r4, #16]
 808485a:	bf04      	itt	eq
 808485c:	6163      	streq	r3, [r4, #20]
 808485e:	61e2      	streq	r2, [r4, #28]
 8084860:	e036      	b.n	80848d0 <localtime_r+0x1b8>
 8084862:	2b00      	cmp	r3, #0
 8084864:	da34      	bge.n	80848d0 <localtime_r+0x1b8>
 8084866:	69e2      	ldr	r2, [r4, #28]
 8084868:	3318      	adds	r3, #24
 808486a:	3a01      	subs	r2, #1
 808486c:	61e2      	str	r2, [r4, #28]
 808486e:	69a2      	ldr	r2, [r4, #24]
 8084870:	60a3      	str	r3, [r4, #8]
 8084872:	3a01      	subs	r2, #1
 8084874:	bf48      	it	mi
 8084876:	2206      	movmi	r2, #6
 8084878:	61a2      	str	r2, [r4, #24]
 808487a:	68e2      	ldr	r2, [r4, #12]
 808487c:	3a01      	subs	r2, #1
 808487e:	60e2      	str	r2, [r4, #12]
 8084880:	bb32      	cbnz	r2, 80848d0 <localtime_r+0x1b8>
 8084882:	6923      	ldr	r3, [r4, #16]
 8084884:	3b01      	subs	r3, #1
 8084886:	d401      	bmi.n	808488c <localtime_r+0x174>
 8084888:	6123      	str	r3, [r4, #16]
 808488a:	e01d      	b.n	80848c8 <localtime_r+0x1b0>
 808488c:	230b      	movs	r3, #11
 808488e:	6123      	str	r3, [r4, #16]
 8084890:	6963      	ldr	r3, [r4, #20]
 8084892:	1e5a      	subs	r2, r3, #1
 8084894:	f012 0f03 	tst.w	r2, #3
 8084898:	6162      	str	r2, [r4, #20]
 808489a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808489e:	d105      	bne.n	80848ac <localtime_r+0x194>
 80848a0:	2164      	movs	r1, #100	; 0x64
 80848a2:	fb93 f2f1 	sdiv	r2, r3, r1
 80848a6:	fb01 3212 	mls	r2, r1, r2, r3
 80848aa:	b94a      	cbnz	r2, 80848c0 <localtime_r+0x1a8>
 80848ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80848b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80848b4:	fb01 3312 	mls	r3, r1, r2, r3
 80848b8:	fab3 f383 	clz	r3, r3
 80848bc:	095b      	lsrs	r3, r3, #5
 80848be:	e000      	b.n	80848c2 <localtime_r+0x1aa>
 80848c0:	2301      	movs	r3, #1
 80848c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80848c6:	61e3      	str	r3, [r4, #28]
 80848c8:	6923      	ldr	r3, [r4, #16]
 80848ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80848ce:	60e3      	str	r3, [r4, #12]
 80848d0:	f001 f8b7 	bl	8085a42 <__tz_unlock>
 80848d4:	4620      	mov	r0, r4
 80848d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80848da:	bf00      	nop
 80848dc:	0808743c 	.word	0x0808743c
 80848e0:	20000a28 	.word	0x20000a28

080848e4 <_localeconv_r>:
 80848e4:	4800      	ldr	r0, [pc, #0]	; (80848e8 <_localeconv_r+0x4>)
 80848e6:	4770      	bx	lr
 80848e8:	200001b4 	.word	0x200001b4

080848ec <memcpy>:
 80848ec:	b510      	push	{r4, lr}
 80848ee:	1e43      	subs	r3, r0, #1
 80848f0:	440a      	add	r2, r1
 80848f2:	4291      	cmp	r1, r2
 80848f4:	d004      	beq.n	8084900 <memcpy+0x14>
 80848f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80848fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80848fe:	e7f8      	b.n	80848f2 <memcpy+0x6>
 8084900:	bd10      	pop	{r4, pc}

08084902 <memset>:
 8084902:	4603      	mov	r3, r0
 8084904:	4402      	add	r2, r0
 8084906:	4293      	cmp	r3, r2
 8084908:	d002      	beq.n	8084910 <memset+0xe>
 808490a:	f803 1b01 	strb.w	r1, [r3], #1
 808490e:	e7fa      	b.n	8084906 <memset+0x4>
 8084910:	4770      	bx	lr
	...

08084914 <srand>:
 8084914:	b538      	push	{r3, r4, r5, lr}
 8084916:	4b12      	ldr	r3, [pc, #72]	; (8084960 <srand+0x4c>)
 8084918:	4605      	mov	r5, r0
 808491a:	681c      	ldr	r4, [r3, #0]
 808491c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808491e:	b9d3      	cbnz	r3, 8084956 <srand+0x42>
 8084920:	2018      	movs	r0, #24
 8084922:	f7fd f87d 	bl	8081a20 <malloc>
 8084926:	f243 330e 	movw	r3, #13070	; 0x330e
 808492a:	63a0      	str	r0, [r4, #56]	; 0x38
 808492c:	8003      	strh	r3, [r0, #0]
 808492e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084932:	8043      	strh	r3, [r0, #2]
 8084934:	f241 2334 	movw	r3, #4660	; 0x1234
 8084938:	8083      	strh	r3, [r0, #4]
 808493a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808493e:	80c3      	strh	r3, [r0, #6]
 8084940:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084944:	8103      	strh	r3, [r0, #8]
 8084946:	2305      	movs	r3, #5
 8084948:	8143      	strh	r3, [r0, #10]
 808494a:	230b      	movs	r3, #11
 808494c:	8183      	strh	r3, [r0, #12]
 808494e:	2201      	movs	r2, #1
 8084950:	2300      	movs	r3, #0
 8084952:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084958:	2200      	movs	r2, #0
 808495a:	611d      	str	r5, [r3, #16]
 808495c:	615a      	str	r2, [r3, #20]
 808495e:	bd38      	pop	{r3, r4, r5, pc}
 8084960:	200001b0 	.word	0x200001b0

08084964 <strchr>:
 8084964:	b2c9      	uxtb	r1, r1
 8084966:	4603      	mov	r3, r0
 8084968:	f810 2b01 	ldrb.w	r2, [r0], #1
 808496c:	b11a      	cbz	r2, 8084976 <strchr+0x12>
 808496e:	4291      	cmp	r1, r2
 8084970:	d1f9      	bne.n	8084966 <strchr+0x2>
 8084972:	4618      	mov	r0, r3
 8084974:	4770      	bx	lr
 8084976:	2900      	cmp	r1, #0
 8084978:	bf0c      	ite	eq
 808497a:	4618      	moveq	r0, r3
 808497c:	2000      	movne	r0, #0
 808497e:	4770      	bx	lr

08084980 <strcmp>:
 8084980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084988:	2a01      	cmp	r2, #1
 808498a:	bf28      	it	cs
 808498c:	429a      	cmpcs	r2, r3
 808498e:	d0f7      	beq.n	8084980 <strcmp>
 8084990:	1ad0      	subs	r0, r2, r3
 8084992:	4770      	bx	lr

08084994 <strcpy>:
 8084994:	4603      	mov	r3, r0
 8084996:	f811 2b01 	ldrb.w	r2, [r1], #1
 808499a:	f803 2b01 	strb.w	r2, [r3], #1
 808499e:	2a00      	cmp	r2, #0
 80849a0:	d1f9      	bne.n	8084996 <strcpy+0x2>
 80849a2:	4770      	bx	lr

080849a4 <strdup>:
 80849a4:	4b02      	ldr	r3, [pc, #8]	; (80849b0 <strdup+0xc>)
 80849a6:	4601      	mov	r1, r0
 80849a8:	6818      	ldr	r0, [r3, #0]
 80849aa:	f000 b803 	b.w	80849b4 <_strdup_r>
 80849ae:	bf00      	nop
 80849b0:	200001b0 	.word	0x200001b0

080849b4 <_strdup_r>:
 80849b4:	b570      	push	{r4, r5, r6, lr}
 80849b6:	4606      	mov	r6, r0
 80849b8:	4608      	mov	r0, r1
 80849ba:	460c      	mov	r4, r1
 80849bc:	f000 f80d 	bl	80849da <strlen>
 80849c0:	1c45      	adds	r5, r0, #1
 80849c2:	4629      	mov	r1, r5
 80849c4:	4630      	mov	r0, r6
 80849c6:	f7fd f85b 	bl	8081a80 <_malloc_r>
 80849ca:	4606      	mov	r6, r0
 80849cc:	b118      	cbz	r0, 80849d6 <_strdup_r+0x22>
 80849ce:	462a      	mov	r2, r5
 80849d0:	4621      	mov	r1, r4
 80849d2:	f7ff ff8b 	bl	80848ec <memcpy>
 80849d6:	4630      	mov	r0, r6
 80849d8:	bd70      	pop	{r4, r5, r6, pc}

080849da <strlen>:
 80849da:	4603      	mov	r3, r0
 80849dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80849e0:	2a00      	cmp	r2, #0
 80849e2:	d1fb      	bne.n	80849dc <strlen+0x2>
 80849e4:	1a18      	subs	r0, r3, r0
 80849e6:	3801      	subs	r0, #1
 80849e8:	4770      	bx	lr

080849ea <strncmp>:
 80849ea:	b530      	push	{r4, r5, lr}
 80849ec:	b182      	cbz	r2, 8084a10 <strncmp+0x26>
 80849ee:	1e45      	subs	r5, r0, #1
 80849f0:	3901      	subs	r1, #1
 80849f2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80849f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80849fa:	42a3      	cmp	r3, r4
 80849fc:	d106      	bne.n	8084a0c <strncmp+0x22>
 80849fe:	43ec      	mvns	r4, r5
 8084a00:	4414      	add	r4, r2
 8084a02:	42e0      	cmn	r0, r4
 8084a04:	d001      	beq.n	8084a0a <strncmp+0x20>
 8084a06:	2b00      	cmp	r3, #0
 8084a08:	d1f3      	bne.n	80849f2 <strncmp+0x8>
 8084a0a:	461c      	mov	r4, r3
 8084a0c:	1b18      	subs	r0, r3, r4
 8084a0e:	bd30      	pop	{r4, r5, pc}
 8084a10:	4610      	mov	r0, r2
 8084a12:	bd30      	pop	{r4, r5, pc}

08084a14 <strncpy>:
 8084a14:	4603      	mov	r3, r0
 8084a16:	b510      	push	{r4, lr}
 8084a18:	b142      	cbz	r2, 8084a2c <strncpy+0x18>
 8084a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084a1e:	3a01      	subs	r2, #1
 8084a20:	f803 4b01 	strb.w	r4, [r3], #1
 8084a24:	2c00      	cmp	r4, #0
 8084a26:	d1f7      	bne.n	8084a18 <strncpy+0x4>
 8084a28:	441a      	add	r2, r3
 8084a2a:	e000      	b.n	8084a2e <strncpy+0x1a>
 8084a2c:	bd10      	pop	{r4, pc}
 8084a2e:	4293      	cmp	r3, r2
 8084a30:	d002      	beq.n	8084a38 <strncpy+0x24>
 8084a32:	f803 4b01 	strb.w	r4, [r3], #1
 8084a36:	e7fa      	b.n	8084a2e <strncpy+0x1a>
 8084a38:	bd10      	pop	{r4, pc}

08084a3a <strstr>:
 8084a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084a3c:	7803      	ldrb	r3, [r0, #0]
 8084a3e:	b963      	cbnz	r3, 8084a5a <strstr+0x20>
 8084a40:	780b      	ldrb	r3, [r1, #0]
 8084a42:	2b00      	cmp	r3, #0
 8084a44:	bf18      	it	ne
 8084a46:	2000      	movne	r0, #0
 8084a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084a4a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8084a4e:	b162      	cbz	r2, 8084a6a <strstr+0x30>
 8084a50:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8084a54:	4630      	mov	r0, r6
 8084a56:	4297      	cmp	r7, r2
 8084a58:	d0f7      	beq.n	8084a4a <strstr+0x10>
 8084a5a:	4603      	mov	r3, r0
 8084a5c:	1c46      	adds	r6, r0, #1
 8084a5e:	7800      	ldrb	r0, [r0, #0]
 8084a60:	b110      	cbz	r0, 8084a68 <strstr+0x2e>
 8084a62:	1e4d      	subs	r5, r1, #1
 8084a64:	1e5c      	subs	r4, r3, #1
 8084a66:	e7f0      	b.n	8084a4a <strstr+0x10>
 8084a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084a6a:	4618      	mov	r0, r3
 8084a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084a6e <sulp>:
 8084a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084a72:	460f      	mov	r7, r1
 8084a74:	4690      	mov	r8, r2
 8084a76:	f002 f82d 	bl	8086ad4 <__ulp>
 8084a7a:	4604      	mov	r4, r0
 8084a7c:	460d      	mov	r5, r1
 8084a7e:	f1b8 0f00 	cmp.w	r8, #0
 8084a82:	d011      	beq.n	8084aa8 <sulp+0x3a>
 8084a84:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8084a88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8084a8c:	2b00      	cmp	r3, #0
 8084a8e:	dd0b      	ble.n	8084aa8 <sulp+0x3a>
 8084a90:	051b      	lsls	r3, r3, #20
 8084a92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8084a96:	2400      	movs	r4, #0
 8084a98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8084a9c:	4622      	mov	r2, r4
 8084a9e:	462b      	mov	r3, r5
 8084aa0:	f7fe ffac 	bl	80839fc <__aeabi_dmul>
 8084aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084aa8:	4620      	mov	r0, r4
 8084aaa:	4629      	mov	r1, r5
 8084aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084ab0 <_strtod_r>:
 8084ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084ab4:	4682      	mov	sl, r0
 8084ab6:	460c      	mov	r4, r1
 8084ab8:	b09d      	sub	sp, #116	; 0x74
 8084aba:	2300      	movs	r3, #0
 8084abc:	9213      	str	r2, [sp, #76]	; 0x4c
 8084abe:	9318      	str	r3, [sp, #96]	; 0x60
 8084ac0:	f04f 0800 	mov.w	r8, #0
 8084ac4:	f04f 0900 	mov.w	r9, #0
 8084ac8:	9117      	str	r1, [sp, #92]	; 0x5c
 8084aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084acc:	781a      	ldrb	r2, [r3, #0]
 8084ace:	2a0d      	cmp	r2, #13
 8084ad0:	d805      	bhi.n	8084ade <_strtod_r+0x2e>
 8084ad2:	2a09      	cmp	r2, #9
 8084ad4:	d213      	bcs.n	8084afe <_strtod_r+0x4e>
 8084ad6:	2a00      	cmp	r2, #0
 8084ad8:	f000 81ad 	beq.w	8084e36 <_strtod_r+0x386>
 8084adc:	e012      	b.n	8084b04 <_strtod_r+0x54>
 8084ade:	2a2b      	cmp	r2, #43	; 0x2b
 8084ae0:	d004      	beq.n	8084aec <_strtod_r+0x3c>
 8084ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8084ae4:	d004      	beq.n	8084af0 <_strtod_r+0x40>
 8084ae6:	2a20      	cmp	r2, #32
 8084ae8:	d10c      	bne.n	8084b04 <_strtod_r+0x54>
 8084aea:	e008      	b.n	8084afe <_strtod_r+0x4e>
 8084aec:	2200      	movs	r2, #0
 8084aee:	e000      	b.n	8084af2 <_strtod_r+0x42>
 8084af0:	2201      	movs	r2, #1
 8084af2:	920c      	str	r2, [sp, #48]	; 0x30
 8084af4:	1c5a      	adds	r2, r3, #1
 8084af6:	9217      	str	r2, [sp, #92]	; 0x5c
 8084af8:	785b      	ldrb	r3, [r3, #1]
 8084afa:	b92b      	cbnz	r3, 8084b08 <_strtod_r+0x58>
 8084afc:	e19b      	b.n	8084e36 <_strtod_r+0x386>
 8084afe:	3301      	adds	r3, #1
 8084b00:	9317      	str	r3, [sp, #92]	; 0x5c
 8084b02:	e7e2      	b.n	8084aca <_strtod_r+0x1a>
 8084b04:	2300      	movs	r3, #0
 8084b06:	930c      	str	r3, [sp, #48]	; 0x30
 8084b08:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8084b0a:	782b      	ldrb	r3, [r5, #0]
 8084b0c:	2b30      	cmp	r3, #48	; 0x30
 8084b0e:	d15c      	bne.n	8084bca <_strtod_r+0x11a>
 8084b10:	786b      	ldrb	r3, [r5, #1]
 8084b12:	2b58      	cmp	r3, #88	; 0x58
 8084b14:	d001      	beq.n	8084b1a <_strtod_r+0x6a>
 8084b16:	2b78      	cmp	r3, #120	; 0x78
 8084b18:	d14c      	bne.n	8084bb4 <_strtod_r+0x104>
 8084b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084b1c:	4aa8      	ldr	r2, [pc, #672]	; (8084dc0 <_strtod_r+0x310>)
 8084b1e:	9301      	str	r3, [sp, #4]
 8084b20:	ab18      	add	r3, sp, #96	; 0x60
 8084b22:	9300      	str	r3, [sp, #0]
 8084b24:	a917      	add	r1, sp, #92	; 0x5c
 8084b26:	ab19      	add	r3, sp, #100	; 0x64
 8084b28:	4650      	mov	r0, sl
 8084b2a:	f001 f95c 	bl	8085de6 <__gethex>
 8084b2e:	f010 0607 	ands.w	r6, r0, #7
 8084b32:	4604      	mov	r4, r0
 8084b34:	f000 8585 	beq.w	8085642 <_strtod_r+0xb92>
 8084b38:	2e06      	cmp	r6, #6
 8084b3a:	d105      	bne.n	8084b48 <_strtod_r+0x98>
 8084b3c:	3501      	adds	r5, #1
 8084b3e:	2300      	movs	r3, #0
 8084b40:	9517      	str	r5, [sp, #92]	; 0x5c
 8084b42:	930c      	str	r3, [sp, #48]	; 0x30
 8084b44:	f000 bd7d 	b.w	8085642 <_strtod_r+0xb92>
 8084b48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8084b4a:	b13a      	cbz	r2, 8084b5c <_strtod_r+0xac>
 8084b4c:	2135      	movs	r1, #53	; 0x35
 8084b4e:	a81a      	add	r0, sp, #104	; 0x68
 8084b50:	f002 f8a7 	bl	8086ca2 <__copybits>
 8084b54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084b56:	4650      	mov	r0, sl
 8084b58:	f001 fd2b 	bl	80865b2 <_Bfree>
 8084b5c:	2e06      	cmp	r6, #6
 8084b5e:	d822      	bhi.n	8084ba6 <_strtod_r+0xf6>
 8084b60:	e8df f006 	tbb	[pc, r6]
 8084b64:	18080d04 	.word	0x18080d04
 8084b68:	0d1d      	.short	0x0d1d
 8084b6a:	04          	.byte	0x04
 8084b6b:	00          	.byte	0x00
 8084b6c:	f04f 0900 	mov.w	r9, #0
 8084b70:	46c8      	mov	r8, r9
 8084b72:	e018      	b.n	8084ba6 <_strtod_r+0xf6>
 8084b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084b78:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8084b7c:	e013      	b.n	8084ba6 <_strtod_r+0xf6>
 8084b7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084b80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8084b82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8084b86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8084b8a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084b8e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8084b92:	e008      	b.n	8084ba6 <_strtod_r+0xf6>
 8084b94:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8084dc4 <_strtod_r+0x314>
 8084b98:	f04f 0800 	mov.w	r8, #0
 8084b9c:	e003      	b.n	8084ba6 <_strtod_r+0xf6>
 8084b9e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8084ba2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8084ba6:	0721      	lsls	r1, r4, #28
 8084ba8:	f140 854b 	bpl.w	8085642 <_strtod_r+0xb92>
 8084bac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8084bb0:	f000 bd47 	b.w	8085642 <_strtod_r+0xb92>
 8084bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084bb6:	1c5a      	adds	r2, r3, #1
 8084bb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8084bba:	785b      	ldrb	r3, [r3, #1]
 8084bbc:	2b30      	cmp	r3, #48	; 0x30
 8084bbe:	d0f9      	beq.n	8084bb4 <_strtod_r+0x104>
 8084bc0:	2b00      	cmp	r3, #0
 8084bc2:	f000 853e 	beq.w	8085642 <_strtod_r+0xb92>
 8084bc6:	2301      	movs	r3, #1
 8084bc8:	e000      	b.n	8084bcc <_strtod_r+0x11c>
 8084bca:	2300      	movs	r3, #0
 8084bcc:	9305      	str	r3, [sp, #20]
 8084bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084bd0:	220a      	movs	r2, #10
 8084bd2:	9306      	str	r3, [sp, #24]
 8084bd4:	2300      	movs	r3, #0
 8084bd6:	469b      	mov	fp, r3
 8084bd8:	9302      	str	r3, [sp, #8]
 8084bda:	9304      	str	r3, [sp, #16]
 8084bdc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8084bde:	782e      	ldrb	r6, [r5, #0]
 8084be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8084be4:	b2d9      	uxtb	r1, r3
 8084be6:	2909      	cmp	r1, #9
 8084be8:	d811      	bhi.n	8084c0e <_strtod_r+0x15e>
 8084bea:	f1bb 0f08 	cmp.w	fp, #8
 8084bee:	bfd5      	itete	le
 8084bf0:	9904      	ldrle	r1, [sp, #16]
 8084bf2:	9902      	ldrgt	r1, [sp, #8]
 8084bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8084bf8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8084bfc:	f105 0501 	add.w	r5, r5, #1
 8084c00:	bfd4      	ite	le
 8084c02:	9304      	strle	r3, [sp, #16]
 8084c04:	9302      	strgt	r3, [sp, #8]
 8084c06:	f10b 0b01 	add.w	fp, fp, #1
 8084c0a:	9517      	str	r5, [sp, #92]	; 0x5c
 8084c0c:	e7e6      	b.n	8084bdc <_strtod_r+0x12c>
 8084c0e:	4650      	mov	r0, sl
 8084c10:	f7ff fe68 	bl	80848e4 <_localeconv_r>
 8084c14:	6807      	ldr	r7, [r0, #0]
 8084c16:	4650      	mov	r0, sl
 8084c18:	f7ff fe64 	bl	80848e4 <_localeconv_r>
 8084c1c:	6800      	ldr	r0, [r0, #0]
 8084c1e:	f7ff fedc 	bl	80849da <strlen>
 8084c22:	4639      	mov	r1, r7
 8084c24:	4602      	mov	r2, r0
 8084c26:	4628      	mov	r0, r5
 8084c28:	f7ff fedf 	bl	80849ea <strncmp>
 8084c2c:	4607      	mov	r7, r0
 8084c2e:	b128      	cbz	r0, 8084c3c <_strtod_r+0x18c>
 8084c30:	2000      	movs	r0, #0
 8084c32:	4633      	mov	r3, r6
 8084c34:	465d      	mov	r5, fp
 8084c36:	4602      	mov	r2, r0
 8084c38:	4601      	mov	r1, r0
 8084c3a:	e05a      	b.n	8084cf2 <_strtod_r+0x242>
 8084c3c:	4650      	mov	r0, sl
 8084c3e:	f7ff fe51 	bl	80848e4 <_localeconv_r>
 8084c42:	6800      	ldr	r0, [r0, #0]
 8084c44:	f7ff fec9 	bl	80849da <strlen>
 8084c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084c4a:	181a      	adds	r2, r3, r0
 8084c4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8084c4e:	5c1b      	ldrb	r3, [r3, r0]
 8084c50:	f1bb 0f00 	cmp.w	fp, #0
 8084c54:	d145      	bne.n	8084ce2 <_strtod_r+0x232>
 8084c56:	4658      	mov	r0, fp
 8084c58:	2b30      	cmp	r3, #48	; 0x30
 8084c5a:	d105      	bne.n	8084c68 <_strtod_r+0x1b8>
 8084c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084c5e:	3001      	adds	r0, #1
 8084c60:	1c5a      	adds	r2, r3, #1
 8084c62:	9217      	str	r2, [sp, #92]	; 0x5c
 8084c64:	785b      	ldrb	r3, [r3, #1]
 8084c66:	e7f7      	b.n	8084c58 <_strtod_r+0x1a8>
 8084c68:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8084c6c:	2a08      	cmp	r2, #8
 8084c6e:	d846      	bhi.n	8084cfe <_strtod_r+0x24e>
 8084c70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8084c72:	9206      	str	r2, [sp, #24]
 8084c74:	4602      	mov	r2, r0
 8084c76:	2000      	movs	r0, #0
 8084c78:	4605      	mov	r5, r0
 8084c7a:	3b30      	subs	r3, #48	; 0x30
 8084c7c:	f100 0101 	add.w	r1, r0, #1
 8084c80:	d029      	beq.n	8084cd6 <_strtod_r+0x226>
 8084c82:	440a      	add	r2, r1
 8084c84:	4629      	mov	r1, r5
 8084c86:	eb05 0c00 	add.w	ip, r5, r0
 8084c8a:	260a      	movs	r6, #10
 8084c8c:	4561      	cmp	r1, ip
 8084c8e:	d00f      	beq.n	8084cb0 <_strtod_r+0x200>
 8084c90:	3101      	adds	r1, #1
 8084c92:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8084c96:	f1be 0f08 	cmp.w	lr, #8
 8084c9a:	dc03      	bgt.n	8084ca4 <_strtod_r+0x1f4>
 8084c9c:	9f04      	ldr	r7, [sp, #16]
 8084c9e:	4377      	muls	r7, r6
 8084ca0:	9704      	str	r7, [sp, #16]
 8084ca2:	e7f3      	b.n	8084c8c <_strtod_r+0x1dc>
 8084ca4:	2910      	cmp	r1, #16
 8084ca6:	bfde      	ittt	le
 8084ca8:	9f02      	ldrle	r7, [sp, #8]
 8084caa:	4377      	mulle	r7, r6
 8084cac:	9702      	strle	r7, [sp, #8]
 8084cae:	e7ed      	b.n	8084c8c <_strtod_r+0x1dc>
 8084cb0:	4428      	add	r0, r5
 8084cb2:	2808      	cmp	r0, #8
 8084cb4:	f100 0501 	add.w	r5, r0, #1
 8084cb8:	dc05      	bgt.n	8084cc6 <_strtod_r+0x216>
 8084cba:	9804      	ldr	r0, [sp, #16]
 8084cbc:	210a      	movs	r1, #10
 8084cbe:	fb01 3300 	mla	r3, r1, r0, r3
 8084cc2:	9304      	str	r3, [sp, #16]
 8084cc4:	e006      	b.n	8084cd4 <_strtod_r+0x224>
 8084cc6:	2d10      	cmp	r5, #16
 8084cc8:	bfdf      	itttt	le
 8084cca:	9802      	ldrle	r0, [sp, #8]
 8084ccc:	210a      	movle	r1, #10
 8084cce:	fb01 3300 	mlale	r3, r1, r0, r3
 8084cd2:	9302      	strle	r3, [sp, #8]
 8084cd4:	2100      	movs	r1, #0
 8084cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084cd8:	1c58      	adds	r0, r3, #1
 8084cda:	9017      	str	r0, [sp, #92]	; 0x5c
 8084cdc:	785b      	ldrb	r3, [r3, #1]
 8084cde:	4608      	mov	r0, r1
 8084ce0:	e002      	b.n	8084ce8 <_strtod_r+0x238>
 8084ce2:	465d      	mov	r5, fp
 8084ce4:	4638      	mov	r0, r7
 8084ce6:	463a      	mov	r2, r7
 8084ce8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8084cec:	2909      	cmp	r1, #9
 8084cee:	d9c4      	bls.n	8084c7a <_strtod_r+0x1ca>
 8084cf0:	2101      	movs	r1, #1
 8084cf2:	2b65      	cmp	r3, #101	; 0x65
 8084cf4:	d001      	beq.n	8084cfa <_strtod_r+0x24a>
 8084cf6:	2b45      	cmp	r3, #69	; 0x45
 8084cf8:	d14f      	bne.n	8084d9a <_strtod_r+0x2ea>
 8084cfa:	b96d      	cbnz	r5, 8084d18 <_strtod_r+0x268>
 8084cfc:	e004      	b.n	8084d08 <_strtod_r+0x258>
 8084cfe:	2b65      	cmp	r3, #101	; 0x65
 8084d00:	f040 84ad 	bne.w	808565e <_strtod_r+0xbae>
 8084d04:	2200      	movs	r2, #0
 8084d06:	2101      	movs	r1, #1
 8084d08:	b928      	cbnz	r0, 8084d16 <_strtod_r+0x266>
 8084d0a:	9b05      	ldr	r3, [sp, #20]
 8084d0c:	2b00      	cmp	r3, #0
 8084d0e:	f000 8092 	beq.w	8084e36 <_strtod_r+0x386>
 8084d12:	4605      	mov	r5, r0
 8084d14:	e000      	b.n	8084d18 <_strtod_r+0x268>
 8084d16:	2500      	movs	r5, #0
 8084d18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8084d1a:	1c63      	adds	r3, r4, #1
 8084d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8084d1e:	7863      	ldrb	r3, [r4, #1]
 8084d20:	2b2b      	cmp	r3, #43	; 0x2b
 8084d22:	d006      	beq.n	8084d32 <_strtod_r+0x282>
 8084d24:	2b2d      	cmp	r3, #45	; 0x2d
 8084d26:	d002      	beq.n	8084d2e <_strtod_r+0x27e>
 8084d28:	2600      	movs	r6, #0
 8084d2a:	9603      	str	r6, [sp, #12]
 8084d2c:	e006      	b.n	8084d3c <_strtod_r+0x28c>
 8084d2e:	2301      	movs	r3, #1
 8084d30:	e000      	b.n	8084d34 <_strtod_r+0x284>
 8084d32:	2300      	movs	r3, #0
 8084d34:	9303      	str	r3, [sp, #12]
 8084d36:	1ca3      	adds	r3, r4, #2
 8084d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8084d3a:	78a3      	ldrb	r3, [r4, #2]
 8084d3c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8084d40:	2e09      	cmp	r6, #9
 8084d42:	d829      	bhi.n	8084d98 <_strtod_r+0x2e8>
 8084d44:	2b30      	cmp	r3, #48	; 0x30
 8084d46:	d104      	bne.n	8084d52 <_strtod_r+0x2a2>
 8084d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084d4a:	1c5e      	adds	r6, r3, #1
 8084d4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8084d4e:	785b      	ldrb	r3, [r3, #1]
 8084d50:	e7f8      	b.n	8084d44 <_strtod_r+0x294>
 8084d52:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8084d56:	2e08      	cmp	r6, #8
 8084d58:	d81f      	bhi.n	8084d9a <_strtod_r+0x2ea>
 8084d5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8084d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084d60:	461f      	mov	r7, r3
 8084d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084d64:	1c5e      	adds	r6, r3, #1
 8084d66:	9617      	str	r6, [sp, #92]	; 0x5c
 8084d68:	785b      	ldrb	r3, [r3, #1]
 8084d6a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8084d6e:	f1bc 0f09 	cmp.w	ip, #9
 8084d72:	d805      	bhi.n	8084d80 <_strtod_r+0x2d0>
 8084d74:	260a      	movs	r6, #10
 8084d76:	fb06 3e0e 	mla	lr, r6, lr, r3
 8084d7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8084d7e:	e7f0      	b.n	8084d62 <_strtod_r+0x2b2>
 8084d80:	1bf6      	subs	r6, r6, r7
 8084d82:	2e08      	cmp	r6, #8
 8084d84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8084d88:	dc02      	bgt.n	8084d90 <_strtod_r+0x2e0>
 8084d8a:	4576      	cmp	r6, lr
 8084d8c:	bfa8      	it	ge
 8084d8e:	4676      	movge	r6, lr
 8084d90:	9f03      	ldr	r7, [sp, #12]
 8084d92:	b11f      	cbz	r7, 8084d9c <_strtod_r+0x2ec>
 8084d94:	4276      	negs	r6, r6
 8084d96:	e001      	b.n	8084d9c <_strtod_r+0x2ec>
 8084d98:	9417      	str	r4, [sp, #92]	; 0x5c
 8084d9a:	2600      	movs	r6, #0
 8084d9c:	2d00      	cmp	r5, #0
 8084d9e:	d152      	bne.n	8084e46 <_strtod_r+0x396>
 8084da0:	2800      	cmp	r0, #0
 8084da2:	f040 844e 	bne.w	8085642 <_strtod_r+0xb92>
 8084da6:	9a05      	ldr	r2, [sp, #20]
 8084da8:	2a00      	cmp	r2, #0
 8084daa:	f040 844a 	bne.w	8085642 <_strtod_r+0xb92>
 8084dae:	2900      	cmp	r1, #0
 8084db0:	d141      	bne.n	8084e36 <_strtod_r+0x386>
 8084db2:	2b4e      	cmp	r3, #78	; 0x4e
 8084db4:	d020      	beq.n	8084df8 <_strtod_r+0x348>
 8084db6:	dc07      	bgt.n	8084dc8 <_strtod_r+0x318>
 8084db8:	2b49      	cmp	r3, #73	; 0x49
 8084dba:	d00a      	beq.n	8084dd2 <_strtod_r+0x322>
 8084dbc:	e03b      	b.n	8084e36 <_strtod_r+0x386>
 8084dbe:	bf00      	nop
 8084dc0:	0808749c 	.word	0x0808749c
 8084dc4:	7ff00000 	.word	0x7ff00000
 8084dc8:	2b69      	cmp	r3, #105	; 0x69
 8084dca:	d002      	beq.n	8084dd2 <_strtod_r+0x322>
 8084dcc:	2b6e      	cmp	r3, #110	; 0x6e
 8084dce:	d013      	beq.n	8084df8 <_strtod_r+0x348>
 8084dd0:	e031      	b.n	8084e36 <_strtod_r+0x386>
 8084dd2:	49aa      	ldr	r1, [pc, #680]	; (808507c <_strtod_r+0x5cc>)
 8084dd4:	a817      	add	r0, sp, #92	; 0x5c
 8084dd6:	f001 fa37 	bl	8086248 <__match>
 8084dda:	b360      	cbz	r0, 8084e36 <_strtod_r+0x386>
 8084ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084dde:	49a8      	ldr	r1, [pc, #672]	; (8085080 <_strtod_r+0x5d0>)
 8084de0:	3b01      	subs	r3, #1
 8084de2:	a817      	add	r0, sp, #92	; 0x5c
 8084de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8084de6:	f001 fa2f 	bl	8086248 <__match>
 8084dea:	b910      	cbnz	r0, 8084df2 <_strtod_r+0x342>
 8084dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084dee:	3301      	adds	r3, #1
 8084df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8084df2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808509c <_strtod_r+0x5ec>
 8084df6:	e01a      	b.n	8084e2e <_strtod_r+0x37e>
 8084df8:	49a2      	ldr	r1, [pc, #648]	; (8085084 <_strtod_r+0x5d4>)
 8084dfa:	a817      	add	r0, sp, #92	; 0x5c
 8084dfc:	f001 fa24 	bl	8086248 <__match>
 8084e00:	b1c8      	cbz	r0, 8084e36 <_strtod_r+0x386>
 8084e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084e04:	781b      	ldrb	r3, [r3, #0]
 8084e06:	2b28      	cmp	r3, #40	; 0x28
 8084e08:	d10f      	bne.n	8084e2a <_strtod_r+0x37a>
 8084e0a:	aa1a      	add	r2, sp, #104	; 0x68
 8084e0c:	499e      	ldr	r1, [pc, #632]	; (8085088 <_strtod_r+0x5d8>)
 8084e0e:	a817      	add	r0, sp, #92	; 0x5c
 8084e10:	f001 fa2d 	bl	808626e <__hexnan>
 8084e14:	2805      	cmp	r0, #5
 8084e16:	d108      	bne.n	8084e2a <_strtod_r+0x37a>
 8084e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084e1a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084e1e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8084e22:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8084e26:	f000 bc0c 	b.w	8085642 <_strtod_r+0xb92>
 8084e2a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80850a0 <_strtod_r+0x5f0>
 8084e2e:	f04f 0800 	mov.w	r8, #0
 8084e32:	f000 bc06 	b.w	8085642 <_strtod_r+0xb92>
 8084e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8084e38:	9417      	str	r4, [sp, #92]	; 0x5c
 8084e3a:	2b00      	cmp	r3, #0
 8084e3c:	f000 840c 	beq.w	8085658 <_strtod_r+0xba8>
 8084e40:	2300      	movs	r3, #0
 8084e42:	930c      	str	r3, [sp, #48]	; 0x30
 8084e44:	e3ff      	b.n	8085646 <_strtod_r+0xb96>
 8084e46:	462c      	mov	r4, r5
 8084e48:	f1bb 0f00 	cmp.w	fp, #0
 8084e4c:	bf08      	it	eq
 8084e4e:	46ab      	moveq	fp, r5
 8084e50:	9804      	ldr	r0, [sp, #16]
 8084e52:	2d10      	cmp	r5, #16
 8084e54:	bfa8      	it	ge
 8084e56:	2410      	movge	r4, #16
 8084e58:	1ab7      	subs	r7, r6, r2
 8084e5a:	f7fe fd59 	bl	8083910 <__aeabi_ui2d>
 8084e5e:	2c09      	cmp	r4, #9
 8084e60:	4680      	mov	r8, r0
 8084e62:	4689      	mov	r9, r1
 8084e64:	dd13      	ble.n	8084e8e <_strtod_r+0x3de>
 8084e66:	4b89      	ldr	r3, [pc, #548]	; (808508c <_strtod_r+0x5dc>)
 8084e68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8084e6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8084e70:	f7fe fdc4 	bl	80839fc <__aeabi_dmul>
 8084e74:	4680      	mov	r8, r0
 8084e76:	9802      	ldr	r0, [sp, #8]
 8084e78:	4689      	mov	r9, r1
 8084e7a:	f7fe fd49 	bl	8083910 <__aeabi_ui2d>
 8084e7e:	4602      	mov	r2, r0
 8084e80:	460b      	mov	r3, r1
 8084e82:	4640      	mov	r0, r8
 8084e84:	4649      	mov	r1, r9
 8084e86:	f7fe fc07 	bl	8083698 <__adddf3>
 8084e8a:	4680      	mov	r8, r0
 8084e8c:	4689      	mov	r9, r1
 8084e8e:	2d0f      	cmp	r5, #15
 8084e90:	dc33      	bgt.n	8084efa <_strtod_r+0x44a>
 8084e92:	2f00      	cmp	r7, #0
 8084e94:	f000 83d5 	beq.w	8085642 <_strtod_r+0xb92>
 8084e98:	dd22      	ble.n	8084ee0 <_strtod_r+0x430>
 8084e9a:	2f16      	cmp	r7, #22
 8084e9c:	dc07      	bgt.n	8084eae <_strtod_r+0x3fe>
 8084e9e:	4d7b      	ldr	r5, [pc, #492]	; (808508c <_strtod_r+0x5dc>)
 8084ea0:	4642      	mov	r2, r8
 8084ea2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8084ea6:	464b      	mov	r3, r9
 8084ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084eac:	e013      	b.n	8084ed6 <_strtod_r+0x426>
 8084eae:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8084eb2:	429f      	cmp	r7, r3
 8084eb4:	dc21      	bgt.n	8084efa <_strtod_r+0x44a>
 8084eb6:	4c75      	ldr	r4, [pc, #468]	; (808508c <_strtod_r+0x5dc>)
 8084eb8:	f1c5 050f 	rsb	r5, r5, #15
 8084ebc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8084ec0:	1b7d      	subs	r5, r7, r5
 8084ec2:	4642      	mov	r2, r8
 8084ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084ec8:	464b      	mov	r3, r9
 8084eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8084ece:	f7fe fd95 	bl	80839fc <__aeabi_dmul>
 8084ed2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084ed6:	f7fe fd91 	bl	80839fc <__aeabi_dmul>
 8084eda:	4680      	mov	r8, r0
 8084edc:	4689      	mov	r9, r1
 8084ede:	e3b0      	b.n	8085642 <_strtod_r+0xb92>
 8084ee0:	f117 0f16 	cmn.w	r7, #22
 8084ee4:	db09      	blt.n	8084efa <_strtod_r+0x44a>
 8084ee6:	4d69      	ldr	r5, [pc, #420]	; (808508c <_strtod_r+0x5dc>)
 8084ee8:	4640      	mov	r0, r8
 8084eea:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 8084eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084ef2:	4649      	mov	r1, r9
 8084ef4:	f7fe feac 	bl	8083c50 <__aeabi_ddiv>
 8084ef8:	e7ef      	b.n	8084eda <_strtod_r+0x42a>
 8084efa:	1b2c      	subs	r4, r5, r4
 8084efc:	443c      	add	r4, r7
 8084efe:	2c00      	cmp	r4, #0
 8084f00:	dd5d      	ble.n	8084fbe <_strtod_r+0x50e>
 8084f02:	f014 010f 	ands.w	r1, r4, #15
 8084f06:	d00a      	beq.n	8084f1e <_strtod_r+0x46e>
 8084f08:	4b60      	ldr	r3, [pc, #384]	; (808508c <_strtod_r+0x5dc>)
 8084f0a:	4642      	mov	r2, r8
 8084f0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8084f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084f14:	464b      	mov	r3, r9
 8084f16:	f7fe fd71 	bl	80839fc <__aeabi_dmul>
 8084f1a:	4680      	mov	r8, r0
 8084f1c:	4689      	mov	r9, r1
 8084f1e:	f034 040f 	bics.w	r4, r4, #15
 8084f22:	f000 80c1 	beq.w	80850a8 <_strtod_r+0x5f8>
 8084f26:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8084f2a:	dd0f      	ble.n	8084f4c <_strtod_r+0x49c>
 8084f2c:	f04f 0b00 	mov.w	fp, #0
 8084f30:	f8cd b008 	str.w	fp, [sp, #8]
 8084f34:	f8cd b014 	str.w	fp, [sp, #20]
 8084f38:	f8cd b010 	str.w	fp, [sp, #16]
 8084f3c:	2322      	movs	r3, #34	; 0x22
 8084f3e:	f8ca 3000 	str.w	r3, [sl]
 8084f42:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808509c <_strtod_r+0x5ec>
 8084f46:	f04f 0800 	mov.w	r8, #0
 8084f4a:	e189      	b.n	8085260 <_strtod_r+0x7b0>
 8084f4c:	4640      	mov	r0, r8
 8084f4e:	4649      	mov	r1, r9
 8084f50:	2300      	movs	r3, #0
 8084f52:	4e4f      	ldr	r6, [pc, #316]	; (8085090 <_strtod_r+0x5e0>)
 8084f54:	1124      	asrs	r4, r4, #4
 8084f56:	9302      	str	r3, [sp, #8]
 8084f58:	2c01      	cmp	r4, #1
 8084f5a:	dd0c      	ble.n	8084f76 <_strtod_r+0x4c6>
 8084f5c:	07e2      	lsls	r2, r4, #31
 8084f5e:	d504      	bpl.n	8084f6a <_strtod_r+0x4ba>
 8084f60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8084f64:	f7fe fd4a 	bl	80839fc <__aeabi_dmul>
 8084f68:	2301      	movs	r3, #1
 8084f6a:	9a02      	ldr	r2, [sp, #8]
 8084f6c:	1064      	asrs	r4, r4, #1
 8084f6e:	3201      	adds	r2, #1
 8084f70:	9202      	str	r2, [sp, #8]
 8084f72:	3608      	adds	r6, #8
 8084f74:	e7f0      	b.n	8084f58 <_strtod_r+0x4a8>
 8084f76:	b10b      	cbz	r3, 8084f7c <_strtod_r+0x4cc>
 8084f78:	4680      	mov	r8, r0
 8084f7a:	4689      	mov	r9, r1
 8084f7c:	4b44      	ldr	r3, [pc, #272]	; (8085090 <_strtod_r+0x5e0>)
 8084f7e:	9a02      	ldr	r2, [sp, #8]
 8084f80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8084f84:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8084f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084f8c:	4642      	mov	r2, r8
 8084f8e:	464b      	mov	r3, r9
 8084f90:	f7fe fd34 	bl	80839fc <__aeabi_dmul>
 8084f94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8084f98:	4689      	mov	r9, r1
 8084f9a:	460a      	mov	r2, r1
 8084f9c:	0d1b      	lsrs	r3, r3, #20
 8084f9e:	493d      	ldr	r1, [pc, #244]	; (8085094 <_strtod_r+0x5e4>)
 8084fa0:	051b      	lsls	r3, r3, #20
 8084fa2:	428b      	cmp	r3, r1
 8084fa4:	4680      	mov	r8, r0
 8084fa6:	d8c1      	bhi.n	8084f2c <_strtod_r+0x47c>
 8084fa8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8084fac:	428b      	cmp	r3, r1
 8084fae:	bf86      	itte	hi
 8084fb0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80850a4 <_strtod_r+0x5f4>
 8084fb4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8084fb8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8084fbc:	e074      	b.n	80850a8 <_strtod_r+0x5f8>
 8084fbe:	d073      	beq.n	80850a8 <_strtod_r+0x5f8>
 8084fc0:	4264      	negs	r4, r4
 8084fc2:	f014 020f 	ands.w	r2, r4, #15
 8084fc6:	d00a      	beq.n	8084fde <_strtod_r+0x52e>
 8084fc8:	4b30      	ldr	r3, [pc, #192]	; (808508c <_strtod_r+0x5dc>)
 8084fca:	4640      	mov	r0, r8
 8084fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8084fd0:	4649      	mov	r1, r9
 8084fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084fd6:	f7fe fe3b 	bl	8083c50 <__aeabi_ddiv>
 8084fda:	4680      	mov	r8, r0
 8084fdc:	4689      	mov	r9, r1
 8084fde:	1124      	asrs	r4, r4, #4
 8084fe0:	d062      	beq.n	80850a8 <_strtod_r+0x5f8>
 8084fe2:	2c1f      	cmp	r4, #31
 8084fe4:	dd08      	ble.n	8084ff8 <_strtod_r+0x548>
 8084fe6:	f04f 0b00 	mov.w	fp, #0
 8084fea:	f8cd b008 	str.w	fp, [sp, #8]
 8084fee:	f8cd b014 	str.w	fp, [sp, #20]
 8084ff2:	f8cd b010 	str.w	fp, [sp, #16]
 8084ff6:	e12c      	b.n	8085252 <_strtod_r+0x7a2>
 8084ff8:	4640      	mov	r0, r8
 8084ffa:	4649      	mov	r1, r9
 8084ffc:	f014 0f10 	tst.w	r4, #16
 8085000:	bf0c      	ite	eq
 8085002:	2300      	moveq	r3, #0
 8085004:	236a      	movne	r3, #106	; 0x6a
 8085006:	4e24      	ldr	r6, [pc, #144]	; (8085098 <_strtod_r+0x5e8>)
 8085008:	9303      	str	r3, [sp, #12]
 808500a:	2300      	movs	r3, #0
 808500c:	2c00      	cmp	r4, #0
 808500e:	dd09      	ble.n	8085024 <_strtod_r+0x574>
 8085010:	07e2      	lsls	r2, r4, #31
 8085012:	d504      	bpl.n	808501e <_strtod_r+0x56e>
 8085014:	e9d6 2300 	ldrd	r2, r3, [r6]
 8085018:	f7fe fcf0 	bl	80839fc <__aeabi_dmul>
 808501c:	2301      	movs	r3, #1
 808501e:	1064      	asrs	r4, r4, #1
 8085020:	3608      	adds	r6, #8
 8085022:	e7f3      	b.n	808500c <_strtod_r+0x55c>
 8085024:	b10b      	cbz	r3, 808502a <_strtod_r+0x57a>
 8085026:	4680      	mov	r8, r0
 8085028:	4689      	mov	r9, r1
 808502a:	9b03      	ldr	r3, [sp, #12]
 808502c:	b1eb      	cbz	r3, 808506a <_strtod_r+0x5ba>
 808502e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8085032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8085036:	2b00      	cmp	r3, #0
 8085038:	4649      	mov	r1, r9
 808503a:	dd16      	ble.n	808506a <_strtod_r+0x5ba>
 808503c:	2b1f      	cmp	r3, #31
 808503e:	dd0e      	ble.n	808505e <_strtod_r+0x5ae>
 8085040:	2b34      	cmp	r3, #52	; 0x34
 8085042:	bfde      	ittt	le
 8085044:	3b20      	suble	r3, #32
 8085046:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 808504a:	fa02 f303 	lslle.w	r3, r2, r3
 808504e:	f04f 0800 	mov.w	r8, #0
 8085052:	bfcc      	ite	gt
 8085054:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8085058:	ea03 0901 	andle.w	r9, r3, r1
 808505c:	e005      	b.n	808506a <_strtod_r+0x5ba>
 808505e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8085062:	fa02 f303 	lsl.w	r3, r2, r3
 8085066:	ea03 0808 	and.w	r8, r3, r8
 808506a:	2200      	movs	r2, #0
 808506c:	2300      	movs	r3, #0
 808506e:	4640      	mov	r0, r8
 8085070:	4649      	mov	r1, r9
 8085072:	f7fe ff2b 	bl	8083ecc <__aeabi_dcmpeq>
 8085076:	2800      	cmp	r0, #0
 8085078:	d1b5      	bne.n	8084fe6 <_strtod_r+0x536>
 808507a:	e017      	b.n	80850ac <_strtod_r+0x5fc>
 808507c:	080874b0 	.word	0x080874b0
 8085080:	080874b3 	.word	0x080874b3
 8085084:	080874b9 	.word	0x080874b9
 8085088:	080874bc 	.word	0x080874bc
 808508c:	08087538 	.word	0x08087538
 8085090:	08087600 	.word	0x08087600
 8085094:	7ca00000 	.word	0x7ca00000
 8085098:	080874d0 	.word	0x080874d0
 808509c:	7ff00000 	.word	0x7ff00000
 80850a0:	fff80000 	.word	0xfff80000
 80850a4:	7fefffff 	.word	0x7fefffff
 80850a8:	2300      	movs	r3, #0
 80850aa:	9303      	str	r3, [sp, #12]
 80850ac:	9b04      	ldr	r3, [sp, #16]
 80850ae:	465a      	mov	r2, fp
 80850b0:	9300      	str	r3, [sp, #0]
 80850b2:	9906      	ldr	r1, [sp, #24]
 80850b4:	462b      	mov	r3, r5
 80850b6:	4650      	mov	r0, sl
 80850b8:	f001 facd 	bl	8086656 <__s2b>
 80850bc:	9005      	str	r0, [sp, #20]
 80850be:	2800      	cmp	r0, #0
 80850c0:	f43f af34 	beq.w	8084f2c <_strtod_r+0x47c>
 80850c4:	2f00      	cmp	r7, #0
 80850c6:	f1c7 0300 	rsb	r3, r7, #0
 80850ca:	bfa8      	it	ge
 80850cc:	2300      	movge	r3, #0
 80850ce:	930d      	str	r3, [sp, #52]	; 0x34
 80850d0:	f04f 0b00 	mov.w	fp, #0
 80850d4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80850d8:	9312      	str	r3, [sp, #72]	; 0x48
 80850da:	f8cd b008 	str.w	fp, [sp, #8]
 80850de:	9b05      	ldr	r3, [sp, #20]
 80850e0:	4650      	mov	r0, sl
 80850e2:	6859      	ldr	r1, [r3, #4]
 80850e4:	f001 fa30 	bl	8086548 <_Balloc>
 80850e8:	9004      	str	r0, [sp, #16]
 80850ea:	2800      	cmp	r0, #0
 80850ec:	f43f af26 	beq.w	8084f3c <_strtod_r+0x48c>
 80850f0:	9b05      	ldr	r3, [sp, #20]
 80850f2:	300c      	adds	r0, #12
 80850f4:	691a      	ldr	r2, [r3, #16]
 80850f6:	f103 010c 	add.w	r1, r3, #12
 80850fa:	3202      	adds	r2, #2
 80850fc:	0092      	lsls	r2, r2, #2
 80850fe:	f7ff fbf5 	bl	80848ec <memcpy>
 8085102:	ab1a      	add	r3, sp, #104	; 0x68
 8085104:	9301      	str	r3, [sp, #4]
 8085106:	ab19      	add	r3, sp, #100	; 0x64
 8085108:	9300      	str	r3, [sp, #0]
 808510a:	4642      	mov	r2, r8
 808510c:	464b      	mov	r3, r9
 808510e:	4650      	mov	r0, sl
 8085110:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8085114:	f001 fd4f 	bl	8086bb6 <__d2b>
 8085118:	9018      	str	r0, [sp, #96]	; 0x60
 808511a:	2800      	cmp	r0, #0
 808511c:	f43f af0e 	beq.w	8084f3c <_strtod_r+0x48c>
 8085120:	2101      	movs	r1, #1
 8085122:	4650      	mov	r0, sl
 8085124:	f001 fb22 	bl	808676c <__i2b>
 8085128:	9002      	str	r0, [sp, #8]
 808512a:	2800      	cmp	r0, #0
 808512c:	f43f af06 	beq.w	8084f3c <_strtod_r+0x48c>
 8085130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8085132:	9903      	ldr	r1, [sp, #12]
 8085134:	2b00      	cmp	r3, #0
 8085136:	bfac      	ite	ge
 8085138:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808513a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808513c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808513e:	bfac      	ite	ge
 8085140:	18d6      	addge	r6, r2, r3
 8085142:	1ad2      	sublt	r2, r2, r3
 8085144:	eba3 0301 	sub.w	r3, r3, r1
 8085148:	4423      	add	r3, r4
 808514a:	49b1      	ldr	r1, [pc, #708]	; (8085410 <_strtod_r+0x960>)
 808514c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8085150:	bfac      	ite	ge
 8085152:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8085154:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 8085156:	428b      	cmp	r3, r1
 8085158:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808515c:	f280 8085 	bge.w	808526a <_strtod_r+0x7ba>
 8085160:	1ac9      	subs	r1, r1, r3
 8085162:	291f      	cmp	r1, #31
 8085164:	bfc8      	it	gt
 8085166:	4dab      	ldrgt	r5, [pc, #684]	; (8085414 <_strtod_r+0x964>)
 8085168:	f04f 0701 	mov.w	r7, #1
 808516c:	bfd4      	ite	le
 808516e:	fa07 f301 	lslle.w	r3, r7, r1
 8085172:	1aed      	subgt	r5, r5, r3
 8085174:	eba4 0401 	sub.w	r4, r4, r1
 8085178:	bfd9      	ittee	le
 808517a:	9307      	strle	r3, [sp, #28]
 808517c:	2500      	movle	r5, #0
 808517e:	fa07 f505 	lslgt.w	r5, r7, r5
 8085182:	9707      	strgt	r7, [sp, #28]
 8085184:	1937      	adds	r7, r6, r4
 8085186:	9b03      	ldr	r3, [sp, #12]
 8085188:	42be      	cmp	r6, r7
 808518a:	4414      	add	r4, r2
 808518c:	441c      	add	r4, r3
 808518e:	4633      	mov	r3, r6
 8085190:	bfa8      	it	ge
 8085192:	463b      	movge	r3, r7
 8085194:	42a3      	cmp	r3, r4
 8085196:	bfa8      	it	ge
 8085198:	4623      	movge	r3, r4
 808519a:	2b00      	cmp	r3, #0
 808519c:	bfc2      	ittt	gt
 808519e:	1aff      	subgt	r7, r7, r3
 80851a0:	1ae4      	subgt	r4, r4, r3
 80851a2:	1af6      	subgt	r6, r6, r3
 80851a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80851a6:	2b00      	cmp	r3, #0
 80851a8:	d163      	bne.n	8085272 <_strtod_r+0x7c2>
 80851aa:	2f00      	cmp	r7, #0
 80851ac:	dc7a      	bgt.n	80852a4 <_strtod_r+0x7f4>
 80851ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80851b0:	2b00      	cmp	r3, #0
 80851b2:	f040 8081 	bne.w	80852b8 <_strtod_r+0x808>
 80851b6:	2c00      	cmp	r4, #0
 80851b8:	f300 8088 	bgt.w	80852cc <_strtod_r+0x81c>
 80851bc:	2e00      	cmp	r6, #0
 80851be:	f300 808f 	bgt.w	80852e0 <_strtod_r+0x830>
 80851c2:	9a04      	ldr	r2, [sp, #16]
 80851c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80851c6:	4650      	mov	r0, sl
 80851c8:	f001 fc25 	bl	8086a16 <__mdiff>
 80851cc:	4683      	mov	fp, r0
 80851ce:	2800      	cmp	r0, #0
 80851d0:	f43f aeb4 	beq.w	8084f3c <_strtod_r+0x48c>
 80851d4:	68c3      	ldr	r3, [r0, #12]
 80851d6:	2400      	movs	r4, #0
 80851d8:	60c4      	str	r4, [r0, #12]
 80851da:	9902      	ldr	r1, [sp, #8]
 80851dc:	9306      	str	r3, [sp, #24]
 80851de:	f001 fbfe 	bl	80869de <__mcmp>
 80851e2:	42a0      	cmp	r0, r4
 80851e4:	f280 808b 	bge.w	80852fe <_strtod_r+0x84e>
 80851e8:	9b06      	ldr	r3, [sp, #24]
 80851ea:	2b00      	cmp	r3, #0
 80851ec:	f040 8202 	bne.w	80855f4 <_strtod_r+0xb44>
 80851f0:	f1b8 0f00 	cmp.w	r8, #0
 80851f4:	f040 81fe 	bne.w	80855f4 <_strtod_r+0xb44>
 80851f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80851fc:	2b00      	cmp	r3, #0
 80851fe:	f040 81f9 	bne.w	80855f4 <_strtod_r+0xb44>
 8085202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8085206:	0d1b      	lsrs	r3, r3, #20
 8085208:	051b      	lsls	r3, r3, #20
 808520a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808520e:	f240 81f1 	bls.w	80855f4 <_strtod_r+0xb44>
 8085212:	f8db 3014 	ldr.w	r3, [fp, #20]
 8085216:	2b00      	cmp	r3, #0
 8085218:	d06c      	beq.n	80852f4 <_strtod_r+0x844>
 808521a:	4659      	mov	r1, fp
 808521c:	2201      	movs	r2, #1
 808521e:	4650      	mov	r0, sl
 8085220:	f001 fb8c 	bl	808693c <__lshift>
 8085224:	9902      	ldr	r1, [sp, #8]
 8085226:	4683      	mov	fp, r0
 8085228:	f001 fbd9 	bl	80869de <__mcmp>
 808522c:	2800      	cmp	r0, #0
 808522e:	f340 81e1 	ble.w	80855f4 <_strtod_r+0xb44>
 8085232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8085236:	9a03      	ldr	r2, [sp, #12]
 8085238:	0d1b      	lsrs	r3, r3, #20
 808523a:	051b      	lsls	r3, r3, #20
 808523c:	2a00      	cmp	r2, #0
 808523e:	f000 808d 	beq.w	808535c <_strtod_r+0x8ac>
 8085242:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8085246:	f300 8089 	bgt.w	808535c <_strtod_r+0x8ac>
 808524a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808524e:	f300 81d3 	bgt.w	80855f8 <_strtod_r+0xb48>
 8085252:	2322      	movs	r3, #34	; 0x22
 8085254:	f04f 0800 	mov.w	r8, #0
 8085258:	f04f 0900 	mov.w	r9, #0
 808525c:	f8ca 3000 	str.w	r3, [sl]
 8085260:	9b05      	ldr	r3, [sp, #20]
 8085262:	2b00      	cmp	r3, #0
 8085264:	f040 81d9 	bne.w	808561a <_strtod_r+0xb6a>
 8085268:	e1eb      	b.n	8085642 <_strtod_r+0xb92>
 808526a:	2301      	movs	r3, #1
 808526c:	2500      	movs	r5, #0
 808526e:	9307      	str	r3, [sp, #28]
 8085270:	e788      	b.n	8085184 <_strtod_r+0x6d4>
 8085272:	461a      	mov	r2, r3
 8085274:	9902      	ldr	r1, [sp, #8]
 8085276:	4650      	mov	r0, sl
 8085278:	f001 fb12 	bl	80868a0 <__pow5mult>
 808527c:	9002      	str	r0, [sp, #8]
 808527e:	2800      	cmp	r0, #0
 8085280:	f43f ae5c 	beq.w	8084f3c <_strtod_r+0x48c>
 8085284:	4601      	mov	r1, r0
 8085286:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8085288:	4650      	mov	r0, sl
 808528a:	f001 fa78 	bl	808677e <__multiply>
 808528e:	9006      	str	r0, [sp, #24]
 8085290:	2800      	cmp	r0, #0
 8085292:	f43f ae53 	beq.w	8084f3c <_strtod_r+0x48c>
 8085296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085298:	4650      	mov	r0, sl
 808529a:	f001 f98a 	bl	80865b2 <_Bfree>
 808529e:	9b06      	ldr	r3, [sp, #24]
 80852a0:	9318      	str	r3, [sp, #96]	; 0x60
 80852a2:	e782      	b.n	80851aa <_strtod_r+0x6fa>
 80852a4:	463a      	mov	r2, r7
 80852a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80852a8:	4650      	mov	r0, sl
 80852aa:	f001 fb47 	bl	808693c <__lshift>
 80852ae:	9018      	str	r0, [sp, #96]	; 0x60
 80852b0:	2800      	cmp	r0, #0
 80852b2:	f47f af7c 	bne.w	80851ae <_strtod_r+0x6fe>
 80852b6:	e641      	b.n	8084f3c <_strtod_r+0x48c>
 80852b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80852ba:	9904      	ldr	r1, [sp, #16]
 80852bc:	4650      	mov	r0, sl
 80852be:	f001 faef 	bl	80868a0 <__pow5mult>
 80852c2:	9004      	str	r0, [sp, #16]
 80852c4:	2800      	cmp	r0, #0
 80852c6:	f47f af76 	bne.w	80851b6 <_strtod_r+0x706>
 80852ca:	e637      	b.n	8084f3c <_strtod_r+0x48c>
 80852cc:	4622      	mov	r2, r4
 80852ce:	9904      	ldr	r1, [sp, #16]
 80852d0:	4650      	mov	r0, sl
 80852d2:	f001 fb33 	bl	808693c <__lshift>
 80852d6:	9004      	str	r0, [sp, #16]
 80852d8:	2800      	cmp	r0, #0
 80852da:	f47f af6f 	bne.w	80851bc <_strtod_r+0x70c>
 80852de:	e62d      	b.n	8084f3c <_strtod_r+0x48c>
 80852e0:	4632      	mov	r2, r6
 80852e2:	9902      	ldr	r1, [sp, #8]
 80852e4:	4650      	mov	r0, sl
 80852e6:	f001 fb29 	bl	808693c <__lshift>
 80852ea:	9002      	str	r0, [sp, #8]
 80852ec:	2800      	cmp	r0, #0
 80852ee:	f47f af68 	bne.w	80851c2 <_strtod_r+0x712>
 80852f2:	e623      	b.n	8084f3c <_strtod_r+0x48c>
 80852f4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80852f8:	2b01      	cmp	r3, #1
 80852fa:	dc8e      	bgt.n	808521a <_strtod_r+0x76a>
 80852fc:	e17a      	b.n	80855f4 <_strtod_r+0xb44>
 80852fe:	d161      	bne.n	80853c4 <_strtod_r+0x914>
 8085300:	9a06      	ldr	r2, [sp, #24]
 8085302:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8085306:	b322      	cbz	r2, 8085352 <_strtod_r+0x8a2>
 8085308:	4943      	ldr	r1, [pc, #268]	; (8085418 <_strtod_r+0x968>)
 808530a:	464a      	mov	r2, r9
 808530c:	428b      	cmp	r3, r1
 808530e:	d12e      	bne.n	808536e <_strtod_r+0x8be>
 8085310:	9b03      	ldr	r3, [sp, #12]
 8085312:	4641      	mov	r1, r8
 8085314:	b163      	cbz	r3, 8085330 <_strtod_r+0x880>
 8085316:	4b41      	ldr	r3, [pc, #260]	; (808541c <_strtod_r+0x96c>)
 8085318:	4013      	ands	r3, r2
 808531a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808531e:	d807      	bhi.n	8085330 <_strtod_r+0x880>
 8085320:	0d1b      	lsrs	r3, r3, #20
 8085322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8085326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808532a:	fa00 f303 	lsl.w	r3, r0, r3
 808532e:	e001      	b.n	8085334 <_strtod_r+0x884>
 8085330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8085334:	428b      	cmp	r3, r1
 8085336:	d11a      	bne.n	808536e <_strtod_r+0x8be>
 8085338:	4939      	ldr	r1, [pc, #228]	; (8085420 <_strtod_r+0x970>)
 808533a:	428a      	cmp	r2, r1
 808533c:	d102      	bne.n	8085344 <_strtod_r+0x894>
 808533e:	3301      	adds	r3, #1
 8085340:	f43f adfc 	beq.w	8084f3c <_strtod_r+0x48c>
 8085344:	4b35      	ldr	r3, [pc, #212]	; (808541c <_strtod_r+0x96c>)
 8085346:	f04f 0800 	mov.w	r8, #0
 808534a:	4013      	ands	r3, r2
 808534c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8085350:	e150      	b.n	80855f4 <_strtod_r+0xb44>
 8085352:	b963      	cbnz	r3, 808536e <_strtod_r+0x8be>
 8085354:	f1b8 0f00 	cmp.w	r8, #0
 8085358:	d109      	bne.n	808536e <_strtod_r+0x8be>
 808535a:	e76a      	b.n	8085232 <_strtod_r+0x782>
 808535c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8085360:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8085364:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8085368:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808536c:	e142      	b.n	80855f4 <_strtod_r+0xb44>
 808536e:	b115      	cbz	r5, 8085376 <_strtod_r+0x8c6>
 8085370:	ea15 0f09 	tst.w	r5, r9
 8085374:	e002      	b.n	808537c <_strtod_r+0x8cc>
 8085376:	9b07      	ldr	r3, [sp, #28]
 8085378:	ea13 0f08 	tst.w	r3, r8
 808537c:	f000 813a 	beq.w	80855f4 <_strtod_r+0xb44>
 8085380:	9b06      	ldr	r3, [sp, #24]
 8085382:	9a03      	ldr	r2, [sp, #12]
 8085384:	4640      	mov	r0, r8
 8085386:	4649      	mov	r1, r9
 8085388:	b153      	cbz	r3, 80853a0 <_strtod_r+0x8f0>
 808538a:	f7ff fb70 	bl	8084a6e <sulp>
 808538e:	4602      	mov	r2, r0
 8085390:	460b      	mov	r3, r1
 8085392:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8085396:	f7fe f97f 	bl	8083698 <__adddf3>
 808539a:	4680      	mov	r8, r0
 808539c:	4689      	mov	r9, r1
 808539e:	e129      	b.n	80855f4 <_strtod_r+0xb44>
 80853a0:	f7ff fb65 	bl	8084a6e <sulp>
 80853a4:	4602      	mov	r2, r0
 80853a6:	460b      	mov	r3, r1
 80853a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80853ac:	f7fe f972 	bl	8083694 <__aeabi_dsub>
 80853b0:	2200      	movs	r2, #0
 80853b2:	2300      	movs	r3, #0
 80853b4:	4680      	mov	r8, r0
 80853b6:	4689      	mov	r9, r1
 80853b8:	f7fe fd88 	bl	8083ecc <__aeabi_dcmpeq>
 80853bc:	2800      	cmp	r0, #0
 80853be:	f47f af48 	bne.w	8085252 <_strtod_r+0x7a2>
 80853c2:	e117      	b.n	80855f4 <_strtod_r+0xb44>
 80853c4:	9902      	ldr	r1, [sp, #8]
 80853c6:	4658      	mov	r0, fp
 80853c8:	f001 fc43 	bl	8086c52 <__ratio>
 80853cc:	2200      	movs	r2, #0
 80853ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80853d2:	4606      	mov	r6, r0
 80853d4:	460f      	mov	r7, r1
 80853d6:	f7fe fd8d 	bl	8083ef4 <__aeabi_dcmple>
 80853da:	2800      	cmp	r0, #0
 80853dc:	d03f      	beq.n	808545e <_strtod_r+0x9ae>
 80853de:	9b06      	ldr	r3, [sp, #24]
 80853e0:	b113      	cbz	r3, 80853e8 <_strtod_r+0x938>
 80853e2:	2600      	movs	r6, #0
 80853e4:	4f0f      	ldr	r7, [pc, #60]	; (8085424 <_strtod_r+0x974>)
 80853e6:	e010      	b.n	808540a <_strtod_r+0x95a>
 80853e8:	f1b8 0f00 	cmp.w	r8, #0
 80853ec:	d103      	bne.n	80853f6 <_strtod_r+0x946>
 80853ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80853f2:	b93b      	cbnz	r3, 8085404 <_strtod_r+0x954>
 80853f4:	e01a      	b.n	808542c <_strtod_r+0x97c>
 80853f6:	f1b8 0f01 	cmp.w	r8, #1
 80853fa:	d103      	bne.n	8085404 <_strtod_r+0x954>
 80853fc:	f1b9 0f00 	cmp.w	r9, #0
 8085400:	f43f af27 	beq.w	8085252 <_strtod_r+0x7a2>
 8085404:	4f08      	ldr	r7, [pc, #32]	; (8085428 <_strtod_r+0x978>)
 8085406:	2600      	movs	r6, #0
 8085408:	2400      	movs	r4, #0
 808540a:	4d06      	ldr	r5, [pc, #24]	; (8085424 <_strtod_r+0x974>)
 808540c:	e03c      	b.n	8085488 <_strtod_r+0x9d8>
 808540e:	bf00      	nop
 8085410:	fffffc02 	.word	0xfffffc02
 8085414:	fffffbe2 	.word	0xfffffbe2
 8085418:	000fffff 	.word	0x000fffff
 808541c:	7ff00000 	.word	0x7ff00000
 8085420:	7fefffff 	.word	0x7fefffff
 8085424:	3ff00000 	.word	0x3ff00000
 8085428:	bff00000 	.word	0xbff00000
 808542c:	2200      	movs	r2, #0
 808542e:	4b9a      	ldr	r3, [pc, #616]	; (8085698 <_strtod_r+0xbe8>)
 8085430:	4630      	mov	r0, r6
 8085432:	4639      	mov	r1, r7
 8085434:	f7fe fd54 	bl	8083ee0 <__aeabi_dcmplt>
 8085438:	b940      	cbnz	r0, 808544c <_strtod_r+0x99c>
 808543a:	2200      	movs	r2, #0
 808543c:	4b97      	ldr	r3, [pc, #604]	; (808569c <_strtod_r+0xbec>)
 808543e:	4630      	mov	r0, r6
 8085440:	4639      	mov	r1, r7
 8085442:	f7fe fadb 	bl	80839fc <__aeabi_dmul>
 8085446:	4604      	mov	r4, r0
 8085448:	460d      	mov	r5, r1
 808544a:	e001      	b.n	8085450 <_strtod_r+0x9a0>
 808544c:	9c06      	ldr	r4, [sp, #24]
 808544e:	4d93      	ldr	r5, [pc, #588]	; (808569c <_strtod_r+0xbec>)
 8085450:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8085454:	9414      	str	r4, [sp, #80]	; 0x50
 8085456:	9315      	str	r3, [sp, #84]	; 0x54
 8085458:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808545c:	e014      	b.n	8085488 <_strtod_r+0x9d8>
 808545e:	4b8f      	ldr	r3, [pc, #572]	; (808569c <_strtod_r+0xbec>)
 8085460:	2200      	movs	r2, #0
 8085462:	4630      	mov	r0, r6
 8085464:	4639      	mov	r1, r7
 8085466:	f7fe fac9 	bl	80839fc <__aeabi_dmul>
 808546a:	9b06      	ldr	r3, [sp, #24]
 808546c:	4604      	mov	r4, r0
 808546e:	460d      	mov	r5, r1
 8085470:	b923      	cbnz	r3, 808547c <_strtod_r+0x9cc>
 8085472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8085476:	900e      	str	r0, [sp, #56]	; 0x38
 8085478:	930f      	str	r3, [sp, #60]	; 0x3c
 808547a:	e003      	b.n	8085484 <_strtod_r+0x9d4>
 808547c:	4602      	mov	r2, r0
 808547e:	460b      	mov	r3, r1
 8085480:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8085484:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8085488:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808548c:	0d1b      	lsrs	r3, r3, #20
 808548e:	051b      	lsls	r3, r3, #20
 8085490:	9307      	str	r3, [sp, #28]
 8085492:	9a07      	ldr	r2, [sp, #28]
 8085494:	4b82      	ldr	r3, [pc, #520]	; (80856a0 <_strtod_r+0xbf0>)
 8085496:	429a      	cmp	r2, r3
 8085498:	d12b      	bne.n	80854f2 <_strtod_r+0xa42>
 808549a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808549e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80854a2:	4640      	mov	r0, r8
 80854a4:	4649      	mov	r1, r9
 80854a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80854aa:	f001 fb13 	bl	8086ad4 <__ulp>
 80854ae:	4602      	mov	r2, r0
 80854b0:	460b      	mov	r3, r1
 80854b2:	4630      	mov	r0, r6
 80854b4:	4639      	mov	r1, r7
 80854b6:	f7fe faa1 	bl	80839fc <__aeabi_dmul>
 80854ba:	4642      	mov	r2, r8
 80854bc:	464b      	mov	r3, r9
 80854be:	f7fe f8eb 	bl	8083698 <__adddf3>
 80854c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80854c6:	0d1b      	lsrs	r3, r3, #20
 80854c8:	4a76      	ldr	r2, [pc, #472]	; (80856a4 <_strtod_r+0xbf4>)
 80854ca:	051b      	lsls	r3, r3, #20
 80854cc:	4293      	cmp	r3, r2
 80854ce:	4680      	mov	r8, r0
 80854d0:	d90c      	bls.n	80854ec <_strtod_r+0xa3c>
 80854d2:	4b75      	ldr	r3, [pc, #468]	; (80856a8 <_strtod_r+0xbf8>)
 80854d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80854d6:	429a      	cmp	r2, r3
 80854d8:	d103      	bne.n	80854e2 <_strtod_r+0xa32>
 80854da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80854dc:	3301      	adds	r3, #1
 80854de:	f43f ad2d 	beq.w	8084f3c <_strtod_r+0x48c>
 80854e2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80856a8 <_strtod_r+0xbf8>
 80854e6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80854ea:	e072      	b.n	80855d2 <_strtod_r+0xb22>
 80854ec:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80854f0:	e039      	b.n	8085566 <_strtod_r+0xab6>
 80854f2:	9b03      	ldr	r3, [sp, #12]
 80854f4:	b33b      	cbz	r3, 8085546 <_strtod_r+0xa96>
 80854f6:	9b07      	ldr	r3, [sp, #28]
 80854f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80854fc:	d823      	bhi.n	8085546 <_strtod_r+0xa96>
 80854fe:	a35e      	add	r3, pc, #376	; (adr r3, 8085678 <_strtod_r+0xbc8>)
 8085500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085504:	4620      	mov	r0, r4
 8085506:	4629      	mov	r1, r5
 8085508:	f7fe fcf4 	bl	8083ef4 <__aeabi_dcmple>
 808550c:	b1b8      	cbz	r0, 808553e <_strtod_r+0xa8e>
 808550e:	4629      	mov	r1, r5
 8085510:	4620      	mov	r0, r4
 8085512:	f7fe fd4b 	bl	8083fac <__aeabi_d2uiz>
 8085516:	2800      	cmp	r0, #0
 8085518:	bf08      	it	eq
 808551a:	2001      	moveq	r0, #1
 808551c:	f7fe f9f8 	bl	8083910 <__aeabi_ui2d>
 8085520:	9b06      	ldr	r3, [sp, #24]
 8085522:	4604      	mov	r4, r0
 8085524:	460d      	mov	r5, r1
 8085526:	b923      	cbnz	r3, 8085532 <_strtod_r+0xa82>
 8085528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808552c:	9010      	str	r0, [sp, #64]	; 0x40
 808552e:	9311      	str	r3, [sp, #68]	; 0x44
 8085530:	e003      	b.n	808553a <_strtod_r+0xa8a>
 8085532:	4602      	mov	r2, r0
 8085534:	460b      	mov	r3, r1
 8085536:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808553a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808553e:	9a07      	ldr	r2, [sp, #28]
 8085540:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8085544:	1a9f      	subs	r7, r3, r2
 8085546:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808554a:	f001 fac3 	bl	8086ad4 <__ulp>
 808554e:	4602      	mov	r2, r0
 8085550:	460b      	mov	r3, r1
 8085552:	4630      	mov	r0, r6
 8085554:	4639      	mov	r1, r7
 8085556:	f7fe fa51 	bl	80839fc <__aeabi_dmul>
 808555a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808555e:	f7fe f89b 	bl	8083698 <__adddf3>
 8085562:	4680      	mov	r8, r0
 8085564:	4689      	mov	r9, r1
 8085566:	9b03      	ldr	r3, [sp, #12]
 8085568:	bb9b      	cbnz	r3, 80855d2 <_strtod_r+0xb22>
 808556a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808556e:	0d1b      	lsrs	r3, r3, #20
 8085570:	9a07      	ldr	r2, [sp, #28]
 8085572:	051b      	lsls	r3, r3, #20
 8085574:	429a      	cmp	r2, r3
 8085576:	464e      	mov	r6, r9
 8085578:	d12b      	bne.n	80855d2 <_strtod_r+0xb22>
 808557a:	4629      	mov	r1, r5
 808557c:	4620      	mov	r0, r4
 808557e:	f7fe fced 	bl	8083f5c <__aeabi_d2iz>
 8085582:	f7fe f9d5 	bl	8083930 <__aeabi_i2d>
 8085586:	460b      	mov	r3, r1
 8085588:	4602      	mov	r2, r0
 808558a:	4629      	mov	r1, r5
 808558c:	4620      	mov	r0, r4
 808558e:	f7fe f881 	bl	8083694 <__aeabi_dsub>
 8085592:	9b06      	ldr	r3, [sp, #24]
 8085594:	4604      	mov	r4, r0
 8085596:	460d      	mov	r5, r1
 8085598:	b92b      	cbnz	r3, 80855a6 <_strtod_r+0xaf6>
 808559a:	f1b8 0f00 	cmp.w	r8, #0
 808559e:	d102      	bne.n	80855a6 <_strtod_r+0xaf6>
 80855a0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80855a4:	b17e      	cbz	r6, 80855c6 <_strtod_r+0xb16>
 80855a6:	a336      	add	r3, pc, #216	; (adr r3, 8085680 <_strtod_r+0xbd0>)
 80855a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855ac:	4620      	mov	r0, r4
 80855ae:	4629      	mov	r1, r5
 80855b0:	f7fe fc96 	bl	8083ee0 <__aeabi_dcmplt>
 80855b4:	bb88      	cbnz	r0, 808561a <_strtod_r+0xb6a>
 80855b6:	a334      	add	r3, pc, #208	; (adr r3, 8085688 <_strtod_r+0xbd8>)
 80855b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855bc:	4620      	mov	r0, r4
 80855be:	4629      	mov	r1, r5
 80855c0:	f7fe fcac 	bl	8083f1c <__aeabi_dcmpgt>
 80855c4:	e004      	b.n	80855d0 <_strtod_r+0xb20>
 80855c6:	a332      	add	r3, pc, #200	; (adr r3, 8085690 <_strtod_r+0xbe0>)
 80855c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855cc:	f7fe fc88 	bl	8083ee0 <__aeabi_dcmplt>
 80855d0:	bb18      	cbnz	r0, 808561a <_strtod_r+0xb6a>
 80855d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80855d4:	4650      	mov	r0, sl
 80855d6:	f000 ffec 	bl	80865b2 <_Bfree>
 80855da:	9904      	ldr	r1, [sp, #16]
 80855dc:	4650      	mov	r0, sl
 80855de:	f000 ffe8 	bl	80865b2 <_Bfree>
 80855e2:	9902      	ldr	r1, [sp, #8]
 80855e4:	4650      	mov	r0, sl
 80855e6:	f000 ffe4 	bl	80865b2 <_Bfree>
 80855ea:	4659      	mov	r1, fp
 80855ec:	4650      	mov	r0, sl
 80855ee:	f000 ffe0 	bl	80865b2 <_Bfree>
 80855f2:	e574      	b.n	80850de <_strtod_r+0x62e>
 80855f4:	9b03      	ldr	r3, [sp, #12]
 80855f6:	b183      	cbz	r3, 808561a <_strtod_r+0xb6a>
 80855f8:	4b2c      	ldr	r3, [pc, #176]	; (80856ac <_strtod_r+0xbfc>)
 80855fa:	4640      	mov	r0, r8
 80855fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80855fe:	2300      	movs	r3, #0
 8085600:	930a      	str	r3, [sp, #40]	; 0x28
 8085602:	4649      	mov	r1, r9
 8085604:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085608:	f7fe f9f8 	bl	80839fc <__aeabi_dmul>
 808560c:	4680      	mov	r8, r0
 808560e:	4689      	mov	r9, r1
 8085610:	b919      	cbnz	r1, 808561a <_strtod_r+0xb6a>
 8085612:	b910      	cbnz	r0, 808561a <_strtod_r+0xb6a>
 8085614:	2322      	movs	r3, #34	; 0x22
 8085616:	f8ca 3000 	str.w	r3, [sl]
 808561a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808561c:	4650      	mov	r0, sl
 808561e:	f000 ffc8 	bl	80865b2 <_Bfree>
 8085622:	9904      	ldr	r1, [sp, #16]
 8085624:	4650      	mov	r0, sl
 8085626:	f000 ffc4 	bl	80865b2 <_Bfree>
 808562a:	9902      	ldr	r1, [sp, #8]
 808562c:	4650      	mov	r0, sl
 808562e:	f000 ffc0 	bl	80865b2 <_Bfree>
 8085632:	9905      	ldr	r1, [sp, #20]
 8085634:	4650      	mov	r0, sl
 8085636:	f000 ffbc 	bl	80865b2 <_Bfree>
 808563a:	4659      	mov	r1, fp
 808563c:	4650      	mov	r0, sl
 808563e:	f000 ffb8 	bl	80865b2 <_Bfree>
 8085642:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8085644:	b113      	cbz	r3, 808564c <_strtod_r+0xb9c>
 8085646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808564a:	6013      	str	r3, [r2, #0]
 808564c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808564e:	b11b      	cbz	r3, 8085658 <_strtod_r+0xba8>
 8085650:	4642      	mov	r2, r8
 8085652:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8085656:	e007      	b.n	8085668 <_strtod_r+0xbb8>
 8085658:	4642      	mov	r2, r8
 808565a:	464b      	mov	r3, r9
 808565c:	e004      	b.n	8085668 <_strtod_r+0xbb8>
 808565e:	2500      	movs	r5, #0
 8085660:	462a      	mov	r2, r5
 8085662:	2101      	movs	r1, #1
 8085664:	f7ff bb47 	b.w	8084cf6 <_strtod_r+0x246>
 8085668:	4610      	mov	r0, r2
 808566a:	4619      	mov	r1, r3
 808566c:	b01d      	add	sp, #116	; 0x74
 808566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085672:	bf00      	nop
 8085674:	f3af 8000 	nop.w
 8085678:	ffc00000 	.word	0xffc00000
 808567c:	41dfffff 	.word	0x41dfffff
 8085680:	94a03595 	.word	0x94a03595
 8085684:	3fdfffff 	.word	0x3fdfffff
 8085688:	35afe535 	.word	0x35afe535
 808568c:	3fe00000 	.word	0x3fe00000
 8085690:	94a03595 	.word	0x94a03595
 8085694:	3fcfffff 	.word	0x3fcfffff
 8085698:	3ff00000 	.word	0x3ff00000
 808569c:	3fe00000 	.word	0x3fe00000
 80856a0:	7fe00000 	.word	0x7fe00000
 80856a4:	7c9fffff 	.word	0x7c9fffff
 80856a8:	7fefffff 	.word	0x7fefffff
 80856ac:	39500000 	.word	0x39500000

080856b0 <strtod>:
 80856b0:	4b02      	ldr	r3, [pc, #8]	; (80856bc <strtod+0xc>)
 80856b2:	460a      	mov	r2, r1
 80856b4:	4601      	mov	r1, r0
 80856b6:	6818      	ldr	r0, [r3, #0]
 80856b8:	f7ff b9fa 	b.w	8084ab0 <_strtod_r>
 80856bc:	200001b0 	.word	0x200001b0

080856c0 <_strtol_r>:
 80856c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80856c4:	460f      	mov	r7, r1
 80856c6:	4680      	mov	r8, r0
 80856c8:	483f      	ldr	r0, [pc, #252]	; (80857c8 <_strtol_r+0x108>)
 80856ca:	f8d0 9000 	ldr.w	r9, [r0]
 80856ce:	463d      	mov	r5, r7
 80856d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80856d4:	eb09 0004 	add.w	r0, r9, r4
 80856d8:	7840      	ldrb	r0, [r0, #1]
 80856da:	f000 0008 	and.w	r0, r0, #8
 80856de:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80856e2:	b108      	cbz	r0, 80856e8 <_strtol_r+0x28>
 80856e4:	462f      	mov	r7, r5
 80856e6:	e7f2      	b.n	80856ce <_strtol_r+0xe>
 80856e8:	2c2d      	cmp	r4, #45	; 0x2d
 80856ea:	d103      	bne.n	80856f4 <_strtol_r+0x34>
 80856ec:	1cbd      	adds	r5, r7, #2
 80856ee:	787c      	ldrb	r4, [r7, #1]
 80856f0:	2601      	movs	r6, #1
 80856f2:	e003      	b.n	80856fc <_strtol_r+0x3c>
 80856f4:	2c2b      	cmp	r4, #43	; 0x2b
 80856f6:	bf04      	itt	eq
 80856f8:	787c      	ldrbeq	r4, [r7, #1]
 80856fa:	1cbd      	addeq	r5, r7, #2
 80856fc:	b113      	cbz	r3, 8085704 <_strtol_r+0x44>
 80856fe:	2b10      	cmp	r3, #16
 8085700:	d10a      	bne.n	8085718 <_strtol_r+0x58>
 8085702:	e05b      	b.n	80857bc <_strtol_r+0xfc>
 8085704:	2c30      	cmp	r4, #48	; 0x30
 8085706:	d157      	bne.n	80857b8 <_strtol_r+0xf8>
 8085708:	7828      	ldrb	r0, [r5, #0]
 808570a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808570e:	2858      	cmp	r0, #88	; 0x58
 8085710:	d14d      	bne.n	80857ae <_strtol_r+0xee>
 8085712:	786c      	ldrb	r4, [r5, #1]
 8085714:	2310      	movs	r3, #16
 8085716:	3502      	adds	r5, #2
 8085718:	2e00      	cmp	r6, #0
 808571a:	bf14      	ite	ne
 808571c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8085720:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8085724:	fbbc faf3 	udiv	sl, ip, r3
 8085728:	2700      	movs	r7, #0
 808572a:	4638      	mov	r0, r7
 808572c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8085730:	eb09 0e04 	add.w	lr, r9, r4
 8085734:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085738:	f01e 0f04 	tst.w	lr, #4
 808573c:	d001      	beq.n	8085742 <_strtol_r+0x82>
 808573e:	3c30      	subs	r4, #48	; 0x30
 8085740:	e00b      	b.n	808575a <_strtol_r+0x9a>
 8085742:	f01e 0e03 	ands.w	lr, lr, #3
 8085746:	d01b      	beq.n	8085780 <_strtol_r+0xc0>
 8085748:	f1be 0f01 	cmp.w	lr, #1
 808574c:	bf0c      	ite	eq
 808574e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085752:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085756:	ebce 0404 	rsb	r4, lr, r4
 808575a:	42a3      	cmp	r3, r4
 808575c:	dd10      	ble.n	8085780 <_strtol_r+0xc0>
 808575e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8085762:	d00a      	beq.n	808577a <_strtol_r+0xba>
 8085764:	4550      	cmp	r0, sl
 8085766:	d806      	bhi.n	8085776 <_strtol_r+0xb6>
 8085768:	d101      	bne.n	808576e <_strtol_r+0xae>
 808576a:	4564      	cmp	r4, ip
 808576c:	dc03      	bgt.n	8085776 <_strtol_r+0xb6>
 808576e:	fb03 4000 	mla	r0, r3, r0, r4
 8085772:	2701      	movs	r7, #1
 8085774:	e001      	b.n	808577a <_strtol_r+0xba>
 8085776:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808577a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808577e:	e7d7      	b.n	8085730 <_strtol_r+0x70>
 8085780:	1c7b      	adds	r3, r7, #1
 8085782:	d10c      	bne.n	808579e <_strtol_r+0xde>
 8085784:	2e00      	cmp	r6, #0
 8085786:	f04f 0322 	mov.w	r3, #34	; 0x22
 808578a:	bf14      	ite	ne
 808578c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8085790:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085794:	f8c8 3000 	str.w	r3, [r8]
 8085798:	b92a      	cbnz	r2, 80857a6 <_strtol_r+0xe6>
 808579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808579e:	b106      	cbz	r6, 80857a2 <_strtol_r+0xe2>
 80857a0:	4240      	negs	r0, r0
 80857a2:	b172      	cbz	r2, 80857c2 <_strtol_r+0x102>
 80857a4:	b107      	cbz	r7, 80857a8 <_strtol_r+0xe8>
 80857a6:	1e69      	subs	r1, r5, #1
 80857a8:	6011      	str	r1, [r2, #0]
 80857aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80857ae:	2430      	movs	r4, #48	; 0x30
 80857b0:	2b00      	cmp	r3, #0
 80857b2:	d1b1      	bne.n	8085718 <_strtol_r+0x58>
 80857b4:	2308      	movs	r3, #8
 80857b6:	e7af      	b.n	8085718 <_strtol_r+0x58>
 80857b8:	230a      	movs	r3, #10
 80857ba:	e7ad      	b.n	8085718 <_strtol_r+0x58>
 80857bc:	2c30      	cmp	r4, #48	; 0x30
 80857be:	d0a3      	beq.n	8085708 <_strtol_r+0x48>
 80857c0:	e7aa      	b.n	8085718 <_strtol_r+0x58>
 80857c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80857c6:	bf00      	nop
 80857c8:	2000014c 	.word	0x2000014c

080857cc <strtol>:
 80857cc:	4613      	mov	r3, r2
 80857ce:	460a      	mov	r2, r1
 80857d0:	4601      	mov	r1, r0
 80857d2:	4802      	ldr	r0, [pc, #8]	; (80857dc <strtol+0x10>)
 80857d4:	6800      	ldr	r0, [r0, #0]
 80857d6:	f7ff bf73 	b.w	80856c0 <_strtol_r>
 80857da:	bf00      	nop
 80857dc:	200001b0 	.word	0x200001b0

080857e0 <_strtoul_r>:
 80857e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80857e4:	460e      	mov	r6, r1
 80857e6:	4680      	mov	r8, r0
 80857e8:	483b      	ldr	r0, [pc, #236]	; (80858d8 <_strtoul_r+0xf8>)
 80857ea:	f8d0 9000 	ldr.w	r9, [r0]
 80857ee:	4635      	mov	r5, r6
 80857f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80857f4:	eb09 0004 	add.w	r0, r9, r4
 80857f8:	7840      	ldrb	r0, [r0, #1]
 80857fa:	f000 0008 	and.w	r0, r0, #8
 80857fe:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085802:	b108      	cbz	r0, 8085808 <_strtoul_r+0x28>
 8085804:	462e      	mov	r6, r5
 8085806:	e7f2      	b.n	80857ee <_strtoul_r+0xe>
 8085808:	2c2d      	cmp	r4, #45	; 0x2d
 808580a:	d103      	bne.n	8085814 <_strtoul_r+0x34>
 808580c:	1cb5      	adds	r5, r6, #2
 808580e:	7874      	ldrb	r4, [r6, #1]
 8085810:	2701      	movs	r7, #1
 8085812:	e003      	b.n	808581c <_strtoul_r+0x3c>
 8085814:	2c2b      	cmp	r4, #43	; 0x2b
 8085816:	bf04      	itt	eq
 8085818:	7874      	ldrbeq	r4, [r6, #1]
 808581a:	1cb5      	addeq	r5, r6, #2
 808581c:	b113      	cbz	r3, 8085824 <_strtoul_r+0x44>
 808581e:	2b10      	cmp	r3, #16
 8085820:	d10a      	bne.n	8085838 <_strtoul_r+0x58>
 8085822:	e053      	b.n	80858cc <_strtoul_r+0xec>
 8085824:	2c30      	cmp	r4, #48	; 0x30
 8085826:	d14f      	bne.n	80858c8 <_strtoul_r+0xe8>
 8085828:	7828      	ldrb	r0, [r5, #0]
 808582a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808582e:	2858      	cmp	r0, #88	; 0x58
 8085830:	d145      	bne.n	80858be <_strtoul_r+0xde>
 8085832:	786c      	ldrb	r4, [r5, #1]
 8085834:	2310      	movs	r3, #16
 8085836:	3502      	adds	r5, #2
 8085838:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808583c:	fbbc fcf3 	udiv	ip, ip, r3
 8085840:	fb03 fa0c 	mul.w	sl, r3, ip
 8085844:	2600      	movs	r6, #0
 8085846:	ea6f 0a0a 	mvn.w	sl, sl
 808584a:	4630      	mov	r0, r6
 808584c:	eb09 0e04 	add.w	lr, r9, r4
 8085850:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085854:	f01e 0f04 	tst.w	lr, #4
 8085858:	d001      	beq.n	808585e <_strtoul_r+0x7e>
 808585a:	3c30      	subs	r4, #48	; 0x30
 808585c:	e00b      	b.n	8085876 <_strtoul_r+0x96>
 808585e:	f01e 0e03 	ands.w	lr, lr, #3
 8085862:	d01a      	beq.n	808589a <_strtoul_r+0xba>
 8085864:	f1be 0f01 	cmp.w	lr, #1
 8085868:	bf0c      	ite	eq
 808586a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808586e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085872:	ebce 0404 	rsb	r4, lr, r4
 8085876:	42a3      	cmp	r3, r4
 8085878:	dd0f      	ble.n	808589a <_strtoul_r+0xba>
 808587a:	2e00      	cmp	r6, #0
 808587c:	db08      	blt.n	8085890 <_strtoul_r+0xb0>
 808587e:	4560      	cmp	r0, ip
 8085880:	d806      	bhi.n	8085890 <_strtoul_r+0xb0>
 8085882:	d101      	bne.n	8085888 <_strtoul_r+0xa8>
 8085884:	4554      	cmp	r4, sl
 8085886:	dc03      	bgt.n	8085890 <_strtoul_r+0xb0>
 8085888:	fb03 4000 	mla	r0, r3, r0, r4
 808588c:	2601      	movs	r6, #1
 808588e:	e001      	b.n	8085894 <_strtoul_r+0xb4>
 8085890:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085894:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085898:	e7d8      	b.n	808584c <_strtoul_r+0x6c>
 808589a:	2e00      	cmp	r6, #0
 808589c:	da07      	bge.n	80858ae <_strtoul_r+0xce>
 808589e:	2322      	movs	r3, #34	; 0x22
 80858a0:	f8c8 3000 	str.w	r3, [r8]
 80858a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80858a8:	b92a      	cbnz	r2, 80858b6 <_strtoul_r+0xd6>
 80858aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80858ae:	b107      	cbz	r7, 80858b2 <_strtoul_r+0xd2>
 80858b0:	4240      	negs	r0, r0
 80858b2:	b172      	cbz	r2, 80858d2 <_strtoul_r+0xf2>
 80858b4:	b106      	cbz	r6, 80858b8 <_strtoul_r+0xd8>
 80858b6:	1e69      	subs	r1, r5, #1
 80858b8:	6011      	str	r1, [r2, #0]
 80858ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80858be:	2430      	movs	r4, #48	; 0x30
 80858c0:	2b00      	cmp	r3, #0
 80858c2:	d1b9      	bne.n	8085838 <_strtoul_r+0x58>
 80858c4:	2308      	movs	r3, #8
 80858c6:	e7b7      	b.n	8085838 <_strtoul_r+0x58>
 80858c8:	230a      	movs	r3, #10
 80858ca:	e7b5      	b.n	8085838 <_strtoul_r+0x58>
 80858cc:	2c30      	cmp	r4, #48	; 0x30
 80858ce:	d0ab      	beq.n	8085828 <_strtoul_r+0x48>
 80858d0:	e7b2      	b.n	8085838 <_strtoul_r+0x58>
 80858d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80858d6:	bf00      	nop
 80858d8:	2000014c 	.word	0x2000014c

080858dc <strtoul>:
 80858dc:	4613      	mov	r3, r2
 80858de:	460a      	mov	r2, r1
 80858e0:	4601      	mov	r1, r0
 80858e2:	4802      	ldr	r0, [pc, #8]	; (80858ec <strtoul+0x10>)
 80858e4:	6800      	ldr	r0, [r0, #0]
 80858e6:	f7ff bf7b 	b.w	80857e0 <_strtoul_r>
 80858ea:	bf00      	nop
 80858ec:	200001b0 	.word	0x200001b0

080858f0 <__tzcalc_limits>:
 80858f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80858f4:	4604      	mov	r4, r0
 80858f6:	f000 fd8d 	bl	8086414 <__gettzinfo>
 80858fa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80858fe:	429c      	cmp	r4, r3
 8085900:	f340 8096 	ble.w	8085a30 <__tzcalc_limits+0x140>
 8085904:	f240 156d 	movw	r5, #365	; 0x16d
 8085908:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808590c:	18e3      	adds	r3, r4, r3
 808590e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8085912:	109b      	asrs	r3, r3, #2
 8085914:	fb05 3502 	mla	r5, r5, r2, r3
 8085918:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808591c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8085920:	fb92 f3f3 	sdiv	r3, r2, r3
 8085924:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8085928:	442b      	add	r3, r5
 808592a:	18a5      	adds	r5, r4, r2
 808592c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085930:	fb94 f7f2 	sdiv	r7, r4, r2
 8085934:	fb95 f5f2 	sdiv	r5, r5, r2
 8085938:	fb02 4717 	mls	r7, r2, r7, r4
 808593c:	441d      	add	r5, r3
 808593e:	2364      	movs	r3, #100	; 0x64
 8085940:	fb94 f6f3 	sdiv	r6, r4, r3
 8085944:	fab7 fe87 	clz	lr, r7
 8085948:	4601      	mov	r1, r0
 808594a:	fb03 4616 	mls	r6, r3, r6, r4
 808594e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8085952:	9301      	str	r3, [sp, #4]
 8085954:	f004 0303 	and.w	r3, r4, #3
 8085958:	6044      	str	r4, [r0, #4]
 808595a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808595e:	9300      	str	r3, [sp, #0]
 8085960:	f04f 0c07 	mov.w	ip, #7
 8085964:	7a0b      	ldrb	r3, [r1, #8]
 8085966:	2b4a      	cmp	r3, #74	; 0x4a
 8085968:	d10e      	bne.n	8085988 <__tzcalc_limits+0x98>
 808596a:	694b      	ldr	r3, [r1, #20]
 808596c:	9a00      	ldr	r2, [sp, #0]
 808596e:	18ec      	adds	r4, r5, r3
 8085970:	b902      	cbnz	r2, 8085974 <__tzcalc_limits+0x84>
 8085972:	b906      	cbnz	r6, 8085976 <__tzcalc_limits+0x86>
 8085974:	b927      	cbnz	r7, 8085980 <__tzcalc_limits+0x90>
 8085976:	2b3b      	cmp	r3, #59	; 0x3b
 8085978:	bfd4      	ite	le
 808597a:	2300      	movle	r3, #0
 808597c:	2301      	movgt	r3, #1
 808597e:	e000      	b.n	8085982 <__tzcalc_limits+0x92>
 8085980:	2300      	movs	r3, #0
 8085982:	4423      	add	r3, r4
 8085984:	3b01      	subs	r3, #1
 8085986:	e03f      	b.n	8085a08 <__tzcalc_limits+0x118>
 8085988:	2b44      	cmp	r3, #68	; 0x44
 808598a:	d102      	bne.n	8085992 <__tzcalc_limits+0xa2>
 808598c:	694b      	ldr	r3, [r1, #20]
 808598e:	442b      	add	r3, r5
 8085990:	e03a      	b.n	8085a08 <__tzcalc_limits+0x118>
 8085992:	9b00      	ldr	r3, [sp, #0]
 8085994:	b92b      	cbnz	r3, 80859a2 <__tzcalc_limits+0xb2>
 8085996:	2e00      	cmp	r6, #0
 8085998:	bf0c      	ite	eq
 808599a:	46f0      	moveq	r8, lr
 808599c:	f04f 0801 	movne.w	r8, #1
 80859a0:	e000      	b.n	80859a4 <__tzcalc_limits+0xb4>
 80859a2:	46f0      	mov	r8, lr
 80859a4:	46a9      	mov	r9, r5
 80859a6:	4b24      	ldr	r3, [pc, #144]	; (8085a38 <__tzcalc_limits+0x148>)
 80859a8:	2230      	movs	r2, #48	; 0x30
 80859aa:	fb02 3808 	mla	r8, r2, r8, r3
 80859ae:	68cc      	ldr	r4, [r1, #12]
 80859b0:	f1a8 0a04 	sub.w	sl, r8, #4
 80859b4:	2301      	movs	r3, #1
 80859b6:	42a3      	cmp	r3, r4
 80859b8:	da04      	bge.n	80859c4 <__tzcalc_limits+0xd4>
 80859ba:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80859be:	3301      	adds	r3, #1
 80859c0:	44d9      	add	r9, fp
 80859c2:	e7f8      	b.n	80859b6 <__tzcalc_limits+0xc6>
 80859c4:	f109 0304 	add.w	r3, r9, #4
 80859c8:	fb93 fbfc 	sdiv	fp, r3, ip
 80859cc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80859d0:	ebca 0a03 	rsb	sl, sl, r3
 80859d4:	694b      	ldr	r3, [r1, #20]
 80859d6:	2c01      	cmp	r4, #1
 80859d8:	bfb8      	it	lt
 80859da:	2401      	movlt	r4, #1
 80859dc:	ebb3 0a0a 	subs.w	sl, r3, sl
 80859e0:	690b      	ldr	r3, [r1, #16]
 80859e2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80859e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80859ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80859ee:	bf48      	it	mi
 80859f0:	f10a 0a07 	addmi.w	sl, sl, #7
 80859f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80859f8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80859fc:	4453      	add	r3, sl
 80859fe:	42a3      	cmp	r3, r4
 8085a00:	db01      	blt.n	8085a06 <__tzcalc_limits+0x116>
 8085a02:	3b07      	subs	r3, #7
 8085a04:	e7fb      	b.n	80859fe <__tzcalc_limits+0x10e>
 8085a06:	444b      	add	r3, r9
 8085a08:	698c      	ldr	r4, [r1, #24]
 8085a0a:	4a0c      	ldr	r2, [pc, #48]	; (8085a3c <__tzcalc_limits+0x14c>)
 8085a0c:	fb02 4303 	mla	r3, r2, r3, r4
 8085a10:	6a0c      	ldr	r4, [r1, #32]
 8085a12:	4423      	add	r3, r4
 8085a14:	f841 3f1c 	str.w	r3, [r1, #28]!
 8085a18:	9b01      	ldr	r3, [sp, #4]
 8085a1a:	4299      	cmp	r1, r3
 8085a1c:	d1a2      	bne.n	8085964 <__tzcalc_limits+0x74>
 8085a1e:	69c3      	ldr	r3, [r0, #28]
 8085a20:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085a22:	4293      	cmp	r3, r2
 8085a24:	bfac      	ite	ge
 8085a26:	2300      	movge	r3, #0
 8085a28:	2301      	movlt	r3, #1
 8085a2a:	6003      	str	r3, [r0, #0]
 8085a2c:	2001      	movs	r0, #1
 8085a2e:	e000      	b.n	8085a32 <__tzcalc_limits+0x142>
 8085a30:	2000      	movs	r0, #0
 8085a32:	b003      	add	sp, #12
 8085a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085a38:	0808743c 	.word	0x0808743c
 8085a3c:	00015180 	.word	0x00015180

08085a40 <__tz_lock>:
 8085a40:	4770      	bx	lr

08085a42 <__tz_unlock>:
 8085a42:	4770      	bx	lr

08085a44 <_tzset_unlocked>:
 8085a44:	4b01      	ldr	r3, [pc, #4]	; (8085a4c <_tzset_unlocked+0x8>)
 8085a46:	6818      	ldr	r0, [r3, #0]
 8085a48:	f000 b802 	b.w	8085a50 <_tzset_unlocked_r>
 8085a4c:	200001b0 	.word	0x200001b0

08085a50 <_tzset_unlocked_r>:
 8085a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085a54:	b08d      	sub	sp, #52	; 0x34
 8085a56:	4607      	mov	r7, r0
 8085a58:	f000 fcdc 	bl	8086414 <__gettzinfo>
 8085a5c:	49b0      	ldr	r1, [pc, #704]	; (8085d20 <_tzset_unlocked_r+0x2d0>)
 8085a5e:	4604      	mov	r4, r0
 8085a60:	4638      	mov	r0, r7
 8085a62:	f000 fccf 	bl	8086404 <_getenv_r>
 8085a66:	4eaf      	ldr	r6, [pc, #700]	; (8085d24 <_tzset_unlocked_r+0x2d4>)
 8085a68:	4605      	mov	r5, r0
 8085a6a:	b960      	cbnz	r0, 8085a86 <_tzset_unlocked_r+0x36>
 8085a6c:	4bae      	ldr	r3, [pc, #696]	; (8085d28 <_tzset_unlocked_r+0x2d8>)
 8085a6e:	4aaf      	ldr	r2, [pc, #700]	; (8085d2c <_tzset_unlocked_r+0x2dc>)
 8085a70:	6018      	str	r0, [r3, #0]
 8085a72:	4baf      	ldr	r3, [pc, #700]	; (8085d30 <_tzset_unlocked_r+0x2e0>)
 8085a74:	6018      	str	r0, [r3, #0]
 8085a76:	4baf      	ldr	r3, [pc, #700]	; (8085d34 <_tzset_unlocked_r+0x2e4>)
 8085a78:	6830      	ldr	r0, [r6, #0]
 8085a7a:	601a      	str	r2, [r3, #0]
 8085a7c:	605a      	str	r2, [r3, #4]
 8085a7e:	f7fb ffd7 	bl	8081a30 <free>
 8085a82:	6035      	str	r5, [r6, #0]
 8085a84:	e148      	b.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085a86:	6831      	ldr	r1, [r6, #0]
 8085a88:	b979      	cbnz	r1, 8085aaa <_tzset_unlocked_r+0x5a>
 8085a8a:	6830      	ldr	r0, [r6, #0]
 8085a8c:	f7fb ffd0 	bl	8081a30 <free>
 8085a90:	4628      	mov	r0, r5
 8085a92:	f7fe ffa2 	bl	80849da <strlen>
 8085a96:	1c41      	adds	r1, r0, #1
 8085a98:	4638      	mov	r0, r7
 8085a9a:	f7fb fff1 	bl	8081a80 <_malloc_r>
 8085a9e:	6030      	str	r0, [r6, #0]
 8085aa0:	b148      	cbz	r0, 8085ab6 <_tzset_unlocked_r+0x66>
 8085aa2:	4629      	mov	r1, r5
 8085aa4:	f7fe ff76 	bl	8084994 <strcpy>
 8085aa8:	e005      	b.n	8085ab6 <_tzset_unlocked_r+0x66>
 8085aaa:	f7fe ff69 	bl	8084980 <strcmp>
 8085aae:	2800      	cmp	r0, #0
 8085ab0:	f000 8132 	beq.w	8085d18 <_tzset_unlocked_r+0x2c8>
 8085ab4:	e7e9      	b.n	8085a8a <_tzset_unlocked_r+0x3a>
 8085ab6:	782b      	ldrb	r3, [r5, #0]
 8085ab8:	ae0a      	add	r6, sp, #40	; 0x28
 8085aba:	2b3a      	cmp	r3, #58	; 0x3a
 8085abc:	bf08      	it	eq
 8085abe:	3501      	addeq	r5, #1
 8085ac0:	4633      	mov	r3, r6
 8085ac2:	4a9d      	ldr	r2, [pc, #628]	; (8085d38 <_tzset_unlocked_r+0x2e8>)
 8085ac4:	499d      	ldr	r1, [pc, #628]	; (8085d3c <_tzset_unlocked_r+0x2ec>)
 8085ac6:	4628      	mov	r0, r5
 8085ac8:	f7fb ffc2 	bl	8081a50 <siscanf>
 8085acc:	2800      	cmp	r0, #0
 8085ace:	f340 8123 	ble.w	8085d18 <_tzset_unlocked_r+0x2c8>
 8085ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085ad4:	18ef      	adds	r7, r5, r3
 8085ad6:	5ceb      	ldrb	r3, [r5, r3]
 8085ad8:	2b2d      	cmp	r3, #45	; 0x2d
 8085ada:	d103      	bne.n	8085ae4 <_tzset_unlocked_r+0x94>
 8085adc:	3701      	adds	r7, #1
 8085ade:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8085ae2:	e003      	b.n	8085aec <_tzset_unlocked_r+0x9c>
 8085ae4:	2b2b      	cmp	r3, #43	; 0x2b
 8085ae6:	bf08      	it	eq
 8085ae8:	3701      	addeq	r7, #1
 8085aea:	2501      	movs	r5, #1
 8085aec:	f10d 0a20 	add.w	sl, sp, #32
 8085af0:	f10d 0b1e 	add.w	fp, sp, #30
 8085af4:	f04f 0800 	mov.w	r8, #0
 8085af8:	9603      	str	r6, [sp, #12]
 8085afa:	f8cd a008 	str.w	sl, [sp, #8]
 8085afe:	9601      	str	r6, [sp, #4]
 8085b00:	f8cd b000 	str.w	fp, [sp]
 8085b04:	4633      	mov	r3, r6
 8085b06:	aa07      	add	r2, sp, #28
 8085b08:	498d      	ldr	r1, [pc, #564]	; (8085d40 <_tzset_unlocked_r+0x2f0>)
 8085b0a:	4638      	mov	r0, r7
 8085b0c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8085b10:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085b14:	f7fb ff9c 	bl	8081a50 <siscanf>
 8085b18:	4540      	cmp	r0, r8
 8085b1a:	f340 80fd 	ble.w	8085d18 <_tzset_unlocked_r+0x2c8>
 8085b1e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085b22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085b26:	213c      	movs	r1, #60	; 0x3c
 8085b28:	fb01 3302 	mla	r3, r1, r2, r3
 8085b2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085b30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085b34:	fb01 3302 	mla	r3, r1, r2, r3
 8085b38:	435d      	muls	r5, r3
 8085b3a:	4b7f      	ldr	r3, [pc, #508]	; (8085d38 <_tzset_unlocked_r+0x2e8>)
 8085b3c:	6225      	str	r5, [r4, #32]
 8085b3e:	4d7d      	ldr	r5, [pc, #500]	; (8085d34 <_tzset_unlocked_r+0x2e4>)
 8085b40:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8085d4c <_tzset_unlocked_r+0x2fc>
 8085b44:	602b      	str	r3, [r5, #0]
 8085b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085b48:	464a      	mov	r2, r9
 8085b4a:	441f      	add	r7, r3
 8085b4c:	497b      	ldr	r1, [pc, #492]	; (8085d3c <_tzset_unlocked_r+0x2ec>)
 8085b4e:	4633      	mov	r3, r6
 8085b50:	4638      	mov	r0, r7
 8085b52:	f7fb ff7d 	bl	8081a50 <siscanf>
 8085b56:	4540      	cmp	r0, r8
 8085b58:	dc08      	bgt.n	8085b6c <_tzset_unlocked_r+0x11c>
 8085b5a:	682b      	ldr	r3, [r5, #0]
 8085b5c:	6a22      	ldr	r2, [r4, #32]
 8085b5e:	606b      	str	r3, [r5, #4]
 8085b60:	4b71      	ldr	r3, [pc, #452]	; (8085d28 <_tzset_unlocked_r+0x2d8>)
 8085b62:	601a      	str	r2, [r3, #0]
 8085b64:	4b72      	ldr	r3, [pc, #456]	; (8085d30 <_tzset_unlocked_r+0x2e0>)
 8085b66:	f8c3 8000 	str.w	r8, [r3]
 8085b6a:	e0d5      	b.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085b6e:	f8c5 9004 	str.w	r9, [r5, #4]
 8085b72:	18fd      	adds	r5, r7, r3
 8085b74:	5cfb      	ldrb	r3, [r7, r3]
 8085b76:	2b2d      	cmp	r3, #45	; 0x2d
 8085b78:	d103      	bne.n	8085b82 <_tzset_unlocked_r+0x132>
 8085b7a:	3501      	adds	r5, #1
 8085b7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8085b80:	e003      	b.n	8085b8a <_tzset_unlocked_r+0x13a>
 8085b82:	2b2b      	cmp	r3, #43	; 0x2b
 8085b84:	bf08      	it	eq
 8085b86:	3501      	addeq	r5, #1
 8085b88:	2701      	movs	r7, #1
 8085b8a:	2300      	movs	r3, #0
 8085b8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085b94:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085b98:	930a      	str	r3, [sp, #40]	; 0x28
 8085b9a:	9603      	str	r6, [sp, #12]
 8085b9c:	f8cd a008 	str.w	sl, [sp, #8]
 8085ba0:	9601      	str	r6, [sp, #4]
 8085ba2:	f8cd b000 	str.w	fp, [sp]
 8085ba6:	4633      	mov	r3, r6
 8085ba8:	aa07      	add	r2, sp, #28
 8085baa:	4965      	ldr	r1, [pc, #404]	; (8085d40 <_tzset_unlocked_r+0x2f0>)
 8085bac:	4628      	mov	r0, r5
 8085bae:	f7fb ff4f 	bl	8081a50 <siscanf>
 8085bb2:	2800      	cmp	r0, #0
 8085bb4:	dc04      	bgt.n	8085bc0 <_tzset_unlocked_r+0x170>
 8085bb6:	6a23      	ldr	r3, [r4, #32]
 8085bb8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085bbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8085bbe:	e00e      	b.n	8085bde <_tzset_unlocked_r+0x18e>
 8085bc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085bc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085bc8:	213c      	movs	r1, #60	; 0x3c
 8085bca:	fb01 3302 	mla	r3, r1, r2, r3
 8085bce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085bd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085bd6:	fb01 3302 	mla	r3, r1, r2, r3
 8085bda:	435f      	muls	r7, r3
 8085bdc:	63e7      	str	r7, [r4, #60]	; 0x3c
 8085bde:	4627      	mov	r7, r4
 8085be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085be2:	f04f 0900 	mov.w	r9, #0
 8085be6:	441d      	add	r5, r3
 8085be8:	782b      	ldrb	r3, [r5, #0]
 8085bea:	2b2c      	cmp	r3, #44	; 0x2c
 8085bec:	bf08      	it	eq
 8085bee:	3501      	addeq	r5, #1
 8085bf0:	f895 8000 	ldrb.w	r8, [r5]
 8085bf4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8085bf8:	d126      	bne.n	8085c48 <_tzset_unlocked_r+0x1f8>
 8085bfa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085bfe:	9302      	str	r3, [sp, #8]
 8085c00:	ab09      	add	r3, sp, #36	; 0x24
 8085c02:	9300      	str	r3, [sp, #0]
 8085c04:	9603      	str	r6, [sp, #12]
 8085c06:	9601      	str	r6, [sp, #4]
 8085c08:	4633      	mov	r3, r6
 8085c0a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085c0e:	494d      	ldr	r1, [pc, #308]	; (8085d44 <_tzset_unlocked_r+0x2f4>)
 8085c10:	4628      	mov	r0, r5
 8085c12:	f7fb ff1d 	bl	8081a50 <siscanf>
 8085c16:	2803      	cmp	r0, #3
 8085c18:	d17e      	bne.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085c1a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085c1e:	1e4b      	subs	r3, r1, #1
 8085c20:	2b0b      	cmp	r3, #11
 8085c22:	d879      	bhi.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085c24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8085c28:	1e53      	subs	r3, r2, #1
 8085c2a:	2b04      	cmp	r3, #4
 8085c2c:	d874      	bhi.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085c2e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085c32:	2b06      	cmp	r3, #6
 8085c34:	d870      	bhi.n	8085d18 <_tzset_unlocked_r+0x2c8>
 8085c36:	f887 8008 	strb.w	r8, [r7, #8]
 8085c3a:	60f9      	str	r1, [r7, #12]
 8085c3c:	613a      	str	r2, [r7, #16]
 8085c3e:	617b      	str	r3, [r7, #20]
 8085c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085c42:	eb05 0803 	add.w	r8, r5, r3
 8085c46:	e02a      	b.n	8085c9e <_tzset_unlocked_r+0x24e>
 8085c48:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8085c4c:	bf06      	itte	eq
 8085c4e:	4643      	moveq	r3, r8
 8085c50:	3501      	addeq	r5, #1
 8085c52:	2344      	movne	r3, #68	; 0x44
 8085c54:	220a      	movs	r2, #10
 8085c56:	a90b      	add	r1, sp, #44	; 0x2c
 8085c58:	4628      	mov	r0, r5
 8085c5a:	9305      	str	r3, [sp, #20]
 8085c5c:	f7ff fe3e 	bl	80858dc <strtoul>
 8085c60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8085c64:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8085c68:	4545      	cmp	r5, r8
 8085c6a:	9b05      	ldr	r3, [sp, #20]
 8085c6c:	d114      	bne.n	8085c98 <_tzset_unlocked_r+0x248>
 8085c6e:	234d      	movs	r3, #77	; 0x4d
 8085c70:	f1b9 0f00 	cmp.w	r9, #0
 8085c74:	d107      	bne.n	8085c86 <_tzset_unlocked_r+0x236>
 8085c76:	7223      	strb	r3, [r4, #8]
 8085c78:	2303      	movs	r3, #3
 8085c7a:	60e3      	str	r3, [r4, #12]
 8085c7c:	2302      	movs	r3, #2
 8085c7e:	6123      	str	r3, [r4, #16]
 8085c80:	f8c4 9014 	str.w	r9, [r4, #20]
 8085c84:	e00b      	b.n	8085c9e <_tzset_unlocked_r+0x24e>
 8085c86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8085c8a:	230b      	movs	r3, #11
 8085c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8085c8e:	2301      	movs	r3, #1
 8085c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8085c92:	2300      	movs	r3, #0
 8085c94:	6323      	str	r3, [r4, #48]	; 0x30
 8085c96:	e002      	b.n	8085c9e <_tzset_unlocked_r+0x24e>
 8085c98:	b280      	uxth	r0, r0
 8085c9a:	723b      	strb	r3, [r7, #8]
 8085c9c:	6178      	str	r0, [r7, #20]
 8085c9e:	2302      	movs	r3, #2
 8085ca0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085ca4:	2300      	movs	r3, #0
 8085ca6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085caa:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085cae:	930a      	str	r3, [sp, #40]	; 0x28
 8085cb0:	f898 3000 	ldrb.w	r3, [r8]
 8085cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8085cb6:	d10b      	bne.n	8085cd0 <_tzset_unlocked_r+0x280>
 8085cb8:	9603      	str	r6, [sp, #12]
 8085cba:	f8cd a008 	str.w	sl, [sp, #8]
 8085cbe:	9601      	str	r6, [sp, #4]
 8085cc0:	f8cd b000 	str.w	fp, [sp]
 8085cc4:	4633      	mov	r3, r6
 8085cc6:	aa07      	add	r2, sp, #28
 8085cc8:	491f      	ldr	r1, [pc, #124]	; (8085d48 <_tzset_unlocked_r+0x2f8>)
 8085cca:	4640      	mov	r0, r8
 8085ccc:	f7fb fec0 	bl	8081a50 <siscanf>
 8085cd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085cd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085cd8:	213c      	movs	r1, #60	; 0x3c
 8085cda:	fb01 3302 	mla	r3, r1, r2, r3
 8085cde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085ce2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085ce6:	fb01 3302 	mla	r3, r1, r2, r3
 8085cea:	61bb      	str	r3, [r7, #24]
 8085cec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085cee:	f109 0901 	add.w	r9, r9, #1
 8085cf2:	f1b9 0f02 	cmp.w	r9, #2
 8085cf6:	4445      	add	r5, r8
 8085cf8:	f107 071c 	add.w	r7, r7, #28
 8085cfc:	f47f af74 	bne.w	8085be8 <_tzset_unlocked_r+0x198>
 8085d00:	6860      	ldr	r0, [r4, #4]
 8085d02:	f7ff fdf5 	bl	80858f0 <__tzcalc_limits>
 8085d06:	6a22      	ldr	r2, [r4, #32]
 8085d08:	4b07      	ldr	r3, [pc, #28]	; (8085d28 <_tzset_unlocked_r+0x2d8>)
 8085d0a:	601a      	str	r2, [r3, #0]
 8085d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085d0e:	1a9b      	subs	r3, r3, r2
 8085d10:	4a07      	ldr	r2, [pc, #28]	; (8085d30 <_tzset_unlocked_r+0x2e0>)
 8085d12:	bf18      	it	ne
 8085d14:	2301      	movne	r3, #1
 8085d16:	6013      	str	r3, [r2, #0]
 8085d18:	b00d      	add	sp, #52	; 0x34
 8085d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d1e:	bf00      	nop
 8085d20:	080874f8 	.word	0x080874f8
 8085d24:	20000a24 	.word	0x20000a24
 8085d28:	20000a2c 	.word	0x20000a2c
 8085d2c:	080874fb 	.word	0x080874fb
 8085d30:	20000a28 	.word	0x20000a28
 8085d34:	200001ec 	.word	0x200001ec
 8085d38:	20000a17 	.word	0x20000a17
 8085d3c:	080874ff 	.word	0x080874ff
 8085d40:	08087522 	.word	0x08087522
 8085d44:	0808750e 	.word	0x0808750e
 8085d48:	08087521 	.word	0x08087521
 8085d4c:	20000a0c 	.word	0x20000a0c

08085d50 <rshift>:
 8085d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085d52:	6906      	ldr	r6, [r0, #16]
 8085d54:	114b      	asrs	r3, r1, #5
 8085d56:	42b3      	cmp	r3, r6
 8085d58:	f100 0514 	add.w	r5, r0, #20
 8085d5c:	da27      	bge.n	8085dae <rshift+0x5e>
 8085d5e:	f011 011f 	ands.w	r1, r1, #31
 8085d62:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8085d66:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8085d6a:	d101      	bne.n	8085d70 <rshift+0x20>
 8085d6c:	4629      	mov	r1, r5
 8085d6e:	e016      	b.n	8085d9e <rshift+0x4e>
 8085d70:	1d14      	adds	r4, r2, #4
 8085d72:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8085d76:	462b      	mov	r3, r5
 8085d78:	f1c1 0e20 	rsb	lr, r1, #32
 8085d7c:	40ca      	lsrs	r2, r1
 8085d7e:	42b4      	cmp	r4, r6
 8085d80:	d209      	bcs.n	8085d96 <rshift+0x46>
 8085d82:	6827      	ldr	r7, [r4, #0]
 8085d84:	fa07 f70e 	lsl.w	r7, r7, lr
 8085d88:	433a      	orrs	r2, r7
 8085d8a:	f843 2b04 	str.w	r2, [r3], #4
 8085d8e:	f854 2b04 	ldr.w	r2, [r4], #4
 8085d92:	40ca      	lsrs	r2, r1
 8085d94:	e7f3      	b.n	8085d7e <rshift+0x2e>
 8085d96:	601a      	str	r2, [r3, #0]
 8085d98:	b152      	cbz	r2, 8085db0 <rshift+0x60>
 8085d9a:	3304      	adds	r3, #4
 8085d9c:	e008      	b.n	8085db0 <rshift+0x60>
 8085d9e:	42b2      	cmp	r2, r6
 8085da0:	460b      	mov	r3, r1
 8085da2:	d205      	bcs.n	8085db0 <rshift+0x60>
 8085da4:	f852 3b04 	ldr.w	r3, [r2], #4
 8085da8:	f841 3b04 	str.w	r3, [r1], #4
 8085dac:	e7f7      	b.n	8085d9e <rshift+0x4e>
 8085dae:	462b      	mov	r3, r5
 8085db0:	1b5b      	subs	r3, r3, r5
 8085db2:	109b      	asrs	r3, r3, #2
 8085db4:	6103      	str	r3, [r0, #16]
 8085db6:	b903      	cbnz	r3, 8085dba <rshift+0x6a>
 8085db8:	6143      	str	r3, [r0, #20]
 8085dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085dbc <__hexdig_fun>:
 8085dbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8085dc0:	2b09      	cmp	r3, #9
 8085dc2:	d801      	bhi.n	8085dc8 <__hexdig_fun+0xc>
 8085dc4:	3820      	subs	r0, #32
 8085dc6:	e00a      	b.n	8085dde <__hexdig_fun+0x22>
 8085dc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8085dcc:	2b05      	cmp	r3, #5
 8085dce:	d801      	bhi.n	8085dd4 <__hexdig_fun+0x18>
 8085dd0:	3847      	subs	r0, #71	; 0x47
 8085dd2:	e004      	b.n	8085dde <__hexdig_fun+0x22>
 8085dd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8085dd8:	2b05      	cmp	r3, #5
 8085dda:	d802      	bhi.n	8085de2 <__hexdig_fun+0x26>
 8085ddc:	3827      	subs	r0, #39	; 0x27
 8085dde:	b2c0      	uxtb	r0, r0
 8085de0:	4770      	bx	lr
 8085de2:	2000      	movs	r0, #0
 8085de4:	4770      	bx	lr

08085de6 <__gethex>:
 8085de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085dea:	b08b      	sub	sp, #44	; 0x2c
 8085dec:	468a      	mov	sl, r1
 8085dee:	4690      	mov	r8, r2
 8085df0:	9306      	str	r3, [sp, #24]
 8085df2:	9002      	str	r0, [sp, #8]
 8085df4:	f7fe fd76 	bl	80848e4 <_localeconv_r>
 8085df8:	6803      	ldr	r3, [r0, #0]
 8085dfa:	f04f 0b00 	mov.w	fp, #0
 8085dfe:	4618      	mov	r0, r3
 8085e00:	9303      	str	r3, [sp, #12]
 8085e02:	f7fe fdea 	bl	80849da <strlen>
 8085e06:	9b03      	ldr	r3, [sp, #12]
 8085e08:	9001      	str	r0, [sp, #4]
 8085e0a:	4403      	add	r3, r0
 8085e0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8085e10:	9307      	str	r3, [sp, #28]
 8085e12:	f8da 3000 	ldr.w	r3, [sl]
 8085e16:	3302      	adds	r3, #2
 8085e18:	461f      	mov	r7, r3
 8085e1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8085e1e:	2830      	cmp	r0, #48	; 0x30
 8085e20:	d102      	bne.n	8085e28 <__gethex+0x42>
 8085e22:	f10b 0b01 	add.w	fp, fp, #1
 8085e26:	e7f7      	b.n	8085e18 <__gethex+0x32>
 8085e28:	f7ff ffc8 	bl	8085dbc <__hexdig_fun>
 8085e2c:	4604      	mov	r4, r0
 8085e2e:	b9e0      	cbnz	r0, 8085e6a <__gethex+0x84>
 8085e30:	9a01      	ldr	r2, [sp, #4]
 8085e32:	9903      	ldr	r1, [sp, #12]
 8085e34:	4638      	mov	r0, r7
 8085e36:	f7fe fdd8 	bl	80849ea <strncmp>
 8085e3a:	2800      	cmp	r0, #0
 8085e3c:	d134      	bne.n	8085ea8 <__gethex+0xc2>
 8085e3e:	9b01      	ldr	r3, [sp, #4]
 8085e40:	5cf8      	ldrb	r0, [r7, r3]
 8085e42:	18fe      	adds	r6, r7, r3
 8085e44:	f7ff ffba 	bl	8085dbc <__hexdig_fun>
 8085e48:	b380      	cbz	r0, 8085eac <__gethex+0xc6>
 8085e4a:	4633      	mov	r3, r6
 8085e4c:	7818      	ldrb	r0, [r3, #0]
 8085e4e:	461f      	mov	r7, r3
 8085e50:	2830      	cmp	r0, #48	; 0x30
 8085e52:	f103 0301 	add.w	r3, r3, #1
 8085e56:	d0f9      	beq.n	8085e4c <__gethex+0x66>
 8085e58:	f7ff ffb0 	bl	8085dbc <__hexdig_fun>
 8085e5c:	fab0 f580 	clz	r5, r0
 8085e60:	4634      	mov	r4, r6
 8085e62:	096d      	lsrs	r5, r5, #5
 8085e64:	f04f 0b01 	mov.w	fp, #1
 8085e68:	e001      	b.n	8085e6e <__gethex+0x88>
 8085e6a:	2500      	movs	r5, #0
 8085e6c:	462c      	mov	r4, r5
 8085e6e:	463a      	mov	r2, r7
 8085e70:	4616      	mov	r6, r2
 8085e72:	7830      	ldrb	r0, [r6, #0]
 8085e74:	3201      	adds	r2, #1
 8085e76:	f7ff ffa1 	bl	8085dbc <__hexdig_fun>
 8085e7a:	2800      	cmp	r0, #0
 8085e7c:	d1f8      	bne.n	8085e70 <__gethex+0x8a>
 8085e7e:	9a01      	ldr	r2, [sp, #4]
 8085e80:	9903      	ldr	r1, [sp, #12]
 8085e82:	4630      	mov	r0, r6
 8085e84:	f7fe fdb1 	bl	80849ea <strncmp>
 8085e88:	b950      	cbnz	r0, 8085ea0 <__gethex+0xba>
 8085e8a:	b954      	cbnz	r4, 8085ea2 <__gethex+0xbc>
 8085e8c:	9b01      	ldr	r3, [sp, #4]
 8085e8e:	18f4      	adds	r4, r6, r3
 8085e90:	4622      	mov	r2, r4
 8085e92:	4616      	mov	r6, r2
 8085e94:	7830      	ldrb	r0, [r6, #0]
 8085e96:	3201      	adds	r2, #1
 8085e98:	f7ff ff90 	bl	8085dbc <__hexdig_fun>
 8085e9c:	2800      	cmp	r0, #0
 8085e9e:	d1f8      	bne.n	8085e92 <__gethex+0xac>
 8085ea0:	b134      	cbz	r4, 8085eb0 <__gethex+0xca>
 8085ea2:	1ba4      	subs	r4, r4, r6
 8085ea4:	00a4      	lsls	r4, r4, #2
 8085ea6:	e003      	b.n	8085eb0 <__gethex+0xca>
 8085ea8:	463e      	mov	r6, r7
 8085eaa:	e000      	b.n	8085eae <__gethex+0xc8>
 8085eac:	4604      	mov	r4, r0
 8085eae:	2501      	movs	r5, #1
 8085eb0:	7833      	ldrb	r3, [r6, #0]
 8085eb2:	2b50      	cmp	r3, #80	; 0x50
 8085eb4:	d001      	beq.n	8085eba <__gethex+0xd4>
 8085eb6:	2b70      	cmp	r3, #112	; 0x70
 8085eb8:	d12a      	bne.n	8085f10 <__gethex+0x12a>
 8085eba:	7873      	ldrb	r3, [r6, #1]
 8085ebc:	2b2b      	cmp	r3, #43	; 0x2b
 8085ebe:	d008      	beq.n	8085ed2 <__gethex+0xec>
 8085ec0:	2b2d      	cmp	r3, #45	; 0x2d
 8085ec2:	d003      	beq.n	8085ecc <__gethex+0xe6>
 8085ec4:	1c71      	adds	r1, r6, #1
 8085ec6:	f04f 0900 	mov.w	r9, #0
 8085eca:	e005      	b.n	8085ed8 <__gethex+0xf2>
 8085ecc:	f04f 0901 	mov.w	r9, #1
 8085ed0:	e001      	b.n	8085ed6 <__gethex+0xf0>
 8085ed2:	f04f 0900 	mov.w	r9, #0
 8085ed6:	1cb1      	adds	r1, r6, #2
 8085ed8:	7808      	ldrb	r0, [r1, #0]
 8085eda:	f7ff ff6f 	bl	8085dbc <__hexdig_fun>
 8085ede:	1e43      	subs	r3, r0, #1
 8085ee0:	b2db      	uxtb	r3, r3
 8085ee2:	2b18      	cmp	r3, #24
 8085ee4:	d814      	bhi.n	8085f10 <__gethex+0x12a>
 8085ee6:	f1a0 0210 	sub.w	r2, r0, #16
 8085eea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8085eee:	f7ff ff65 	bl	8085dbc <__hexdig_fun>
 8085ef2:	1e43      	subs	r3, r0, #1
 8085ef4:	b2db      	uxtb	r3, r3
 8085ef6:	2b18      	cmp	r3, #24
 8085ef8:	d804      	bhi.n	8085f04 <__gethex+0x11e>
 8085efa:	230a      	movs	r3, #10
 8085efc:	fb03 0202 	mla	r2, r3, r2, r0
 8085f00:	3a10      	subs	r2, #16
 8085f02:	e7f2      	b.n	8085eea <__gethex+0x104>
 8085f04:	f1b9 0f00 	cmp.w	r9, #0
 8085f08:	d000      	beq.n	8085f0c <__gethex+0x126>
 8085f0a:	4252      	negs	r2, r2
 8085f0c:	4414      	add	r4, r2
 8085f0e:	e000      	b.n	8085f12 <__gethex+0x12c>
 8085f10:	4631      	mov	r1, r6
 8085f12:	f8ca 1000 	str.w	r1, [sl]
 8085f16:	b12d      	cbz	r5, 8085f24 <__gethex+0x13e>
 8085f18:	f1bb 0f00 	cmp.w	fp, #0
 8085f1c:	bf14      	ite	ne
 8085f1e:	2000      	movne	r0, #0
 8085f20:	2006      	moveq	r0, #6
 8085f22:	e17c      	b.n	808621e <__gethex+0x438>
 8085f24:	4629      	mov	r1, r5
 8085f26:	1bf3      	subs	r3, r6, r7
 8085f28:	3b01      	subs	r3, #1
 8085f2a:	2b07      	cmp	r3, #7
 8085f2c:	dd02      	ble.n	8085f34 <__gethex+0x14e>
 8085f2e:	3101      	adds	r1, #1
 8085f30:	105b      	asrs	r3, r3, #1
 8085f32:	e7fa      	b.n	8085f2a <__gethex+0x144>
 8085f34:	9802      	ldr	r0, [sp, #8]
 8085f36:	f000 fb07 	bl	8086548 <_Balloc>
 8085f3a:	f04f 0900 	mov.w	r9, #0
 8085f3e:	4605      	mov	r5, r0
 8085f40:	46cb      	mov	fp, r9
 8085f42:	9b01      	ldr	r3, [sp, #4]
 8085f44:	f100 0a14 	add.w	sl, r0, #20
 8085f48:	f1c3 0301 	rsb	r3, r3, #1
 8085f4c:	f8cd a010 	str.w	sl, [sp, #16]
 8085f50:	9308      	str	r3, [sp, #32]
 8085f52:	42b7      	cmp	r7, r6
 8085f54:	d22f      	bcs.n	8085fb6 <__gethex+0x1d0>
 8085f56:	1e73      	subs	r3, r6, #1
 8085f58:	9305      	str	r3, [sp, #20]
 8085f5a:	9a07      	ldr	r2, [sp, #28]
 8085f5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8085f60:	4293      	cmp	r3, r2
 8085f62:	d00b      	beq.n	8085f7c <__gethex+0x196>
 8085f64:	f1bb 0f20 	cmp.w	fp, #32
 8085f68:	d116      	bne.n	8085f98 <__gethex+0x1b2>
 8085f6a:	9b04      	ldr	r3, [sp, #16]
 8085f6c:	f8c3 9000 	str.w	r9, [r3]
 8085f70:	3304      	adds	r3, #4
 8085f72:	f04f 0900 	mov.w	r9, #0
 8085f76:	9304      	str	r3, [sp, #16]
 8085f78:	46cb      	mov	fp, r9
 8085f7a:	e00d      	b.n	8085f98 <__gethex+0x1b2>
 8085f7c:	9b05      	ldr	r3, [sp, #20]
 8085f7e:	9a08      	ldr	r2, [sp, #32]
 8085f80:	4413      	add	r3, r2
 8085f82:	429f      	cmp	r7, r3
 8085f84:	d8ee      	bhi.n	8085f64 <__gethex+0x17e>
 8085f86:	4618      	mov	r0, r3
 8085f88:	9a01      	ldr	r2, [sp, #4]
 8085f8a:	9903      	ldr	r1, [sp, #12]
 8085f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8085f8e:	f7fe fd2c 	bl	80849ea <strncmp>
 8085f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085f94:	b168      	cbz	r0, 8085fb2 <__gethex+0x1cc>
 8085f96:	e7e5      	b.n	8085f64 <__gethex+0x17e>
 8085f98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8085f9c:	f7ff ff0e 	bl	8085dbc <__hexdig_fun>
 8085fa0:	f000 000f 	and.w	r0, r0, #15
 8085fa4:	fa00 f00b 	lsl.w	r0, r0, fp
 8085fa8:	9b05      	ldr	r3, [sp, #20]
 8085faa:	ea49 0900 	orr.w	r9, r9, r0
 8085fae:	f10b 0b04 	add.w	fp, fp, #4
 8085fb2:	461e      	mov	r6, r3
 8085fb4:	e7cd      	b.n	8085f52 <__gethex+0x16c>
 8085fb6:	9804      	ldr	r0, [sp, #16]
 8085fb8:	f840 9b04 	str.w	r9, [r0], #4
 8085fbc:	ebca 0000 	rsb	r0, sl, r0
 8085fc0:	1080      	asrs	r0, r0, #2
 8085fc2:	6128      	str	r0, [r5, #16]
 8085fc4:	0147      	lsls	r7, r0, #5
 8085fc6:	4648      	mov	r0, r9
 8085fc8:	f000 fb83 	bl	80866d2 <__hi0bits>
 8085fcc:	f8d8 6000 	ldr.w	r6, [r8]
 8085fd0:	1a38      	subs	r0, r7, r0
 8085fd2:	42b0      	cmp	r0, r6
 8085fd4:	dd26      	ble.n	8086024 <__gethex+0x23e>
 8085fd6:	1b87      	subs	r7, r0, r6
 8085fd8:	4639      	mov	r1, r7
 8085fda:	4628      	mov	r0, r5
 8085fdc:	f000 fe7b 	bl	8086cd6 <__any_on>
 8085fe0:	b1c8      	cbz	r0, 8086016 <__gethex+0x230>
 8085fe2:	1e7b      	subs	r3, r7, #1
 8085fe4:	1159      	asrs	r1, r3, #5
 8085fe6:	f003 021f 	and.w	r2, r3, #31
 8085fea:	f04f 0901 	mov.w	r9, #1
 8085fee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8085ff2:	fa09 f202 	lsl.w	r2, r9, r2
 8085ff6:	420a      	tst	r2, r1
 8085ff8:	d00e      	beq.n	8086018 <__gethex+0x232>
 8085ffa:	454b      	cmp	r3, r9
 8085ffc:	dc02      	bgt.n	8086004 <__gethex+0x21e>
 8085ffe:	f04f 0902 	mov.w	r9, #2
 8086002:	e009      	b.n	8086018 <__gethex+0x232>
 8086004:	1eb9      	subs	r1, r7, #2
 8086006:	4628      	mov	r0, r5
 8086008:	f000 fe65 	bl	8086cd6 <__any_on>
 808600c:	2800      	cmp	r0, #0
 808600e:	d0f6      	beq.n	8085ffe <__gethex+0x218>
 8086010:	f04f 0903 	mov.w	r9, #3
 8086014:	e000      	b.n	8086018 <__gethex+0x232>
 8086016:	4681      	mov	r9, r0
 8086018:	4639      	mov	r1, r7
 808601a:	4628      	mov	r0, r5
 808601c:	f7ff fe98 	bl	8085d50 <rshift>
 8086020:	443c      	add	r4, r7
 8086022:	e00c      	b.n	808603e <__gethex+0x258>
 8086024:	da09      	bge.n	808603a <__gethex+0x254>
 8086026:	1a37      	subs	r7, r6, r0
 8086028:	4629      	mov	r1, r5
 808602a:	463a      	mov	r2, r7
 808602c:	9802      	ldr	r0, [sp, #8]
 808602e:	f000 fc85 	bl	808693c <__lshift>
 8086032:	4605      	mov	r5, r0
 8086034:	1be4      	subs	r4, r4, r7
 8086036:	f100 0a14 	add.w	sl, r0, #20
 808603a:	f04f 0900 	mov.w	r9, #0
 808603e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086042:	429c      	cmp	r4, r3
 8086044:	dd08      	ble.n	8086058 <__gethex+0x272>
 8086046:	9802      	ldr	r0, [sp, #8]
 8086048:	4629      	mov	r1, r5
 808604a:	f000 fab2 	bl	80865b2 <_Bfree>
 808604e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8086050:	2300      	movs	r3, #0
 8086052:	6013      	str	r3, [r2, #0]
 8086054:	20a3      	movs	r0, #163	; 0xa3
 8086056:	e0e2      	b.n	808621e <__gethex+0x438>
 8086058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808605c:	4284      	cmp	r4, r0
 808605e:	da53      	bge.n	8086108 <__gethex+0x322>
 8086060:	1b04      	subs	r4, r0, r4
 8086062:	42a6      	cmp	r6, r4
 8086064:	dc2e      	bgt.n	80860c4 <__gethex+0x2de>
 8086066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808606a:	2b02      	cmp	r3, #2
 808606c:	d01a      	beq.n	80860a4 <__gethex+0x2be>
 808606e:	2b03      	cmp	r3, #3
 8086070:	d01c      	beq.n	80860ac <__gethex+0x2c6>
 8086072:	2b01      	cmp	r3, #1
 8086074:	d11d      	bne.n	80860b2 <__gethex+0x2cc>
 8086076:	42a6      	cmp	r6, r4
 8086078:	d11b      	bne.n	80860b2 <__gethex+0x2cc>
 808607a:	2e01      	cmp	r6, #1
 808607c:	dc0b      	bgt.n	8086096 <__gethex+0x2b0>
 808607e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8086082:	9a06      	ldr	r2, [sp, #24]
 8086084:	2062      	movs	r0, #98	; 0x62
 8086086:	6013      	str	r3, [r2, #0]
 8086088:	2301      	movs	r3, #1
 808608a:	612b      	str	r3, [r5, #16]
 808608c:	f8ca 3000 	str.w	r3, [sl]
 8086090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8086092:	601d      	str	r5, [r3, #0]
 8086094:	e0c3      	b.n	808621e <__gethex+0x438>
 8086096:	1e71      	subs	r1, r6, #1
 8086098:	4628      	mov	r0, r5
 808609a:	f000 fe1c 	bl	8086cd6 <__any_on>
 808609e:	2800      	cmp	r0, #0
 80860a0:	d1ed      	bne.n	808607e <__gethex+0x298>
 80860a2:	e006      	b.n	80860b2 <__gethex+0x2cc>
 80860a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80860a6:	2b00      	cmp	r3, #0
 80860a8:	d0e9      	beq.n	808607e <__gethex+0x298>
 80860aa:	e002      	b.n	80860b2 <__gethex+0x2cc>
 80860ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80860ae:	2b00      	cmp	r3, #0
 80860b0:	d1e5      	bne.n	808607e <__gethex+0x298>
 80860b2:	9802      	ldr	r0, [sp, #8]
 80860b4:	4629      	mov	r1, r5
 80860b6:	f000 fa7c 	bl	80865b2 <_Bfree>
 80860ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80860bc:	2300      	movs	r3, #0
 80860be:	6013      	str	r3, [r2, #0]
 80860c0:	2050      	movs	r0, #80	; 0x50
 80860c2:	e0ac      	b.n	808621e <__gethex+0x438>
 80860c4:	1e67      	subs	r7, r4, #1
 80860c6:	f1b9 0f00 	cmp.w	r9, #0
 80860ca:	d106      	bne.n	80860da <__gethex+0x2f4>
 80860cc:	b13f      	cbz	r7, 80860de <__gethex+0x2f8>
 80860ce:	4639      	mov	r1, r7
 80860d0:	4628      	mov	r0, r5
 80860d2:	f000 fe00 	bl	8086cd6 <__any_on>
 80860d6:	4681      	mov	r9, r0
 80860d8:	e001      	b.n	80860de <__gethex+0x2f8>
 80860da:	f04f 0901 	mov.w	r9, #1
 80860de:	117a      	asrs	r2, r7, #5
 80860e0:	2301      	movs	r3, #1
 80860e2:	f007 071f 	and.w	r7, r7, #31
 80860e6:	fa03 f707 	lsl.w	r7, r3, r7
 80860ea:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80860ee:	4621      	mov	r1, r4
 80860f0:	421f      	tst	r7, r3
 80860f2:	4628      	mov	r0, r5
 80860f4:	bf18      	it	ne
 80860f6:	f049 0902 	orrne.w	r9, r9, #2
 80860fa:	1b36      	subs	r6, r6, r4
 80860fc:	f7ff fe28 	bl	8085d50 <rshift>
 8086100:	2702      	movs	r7, #2
 8086102:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8086106:	e000      	b.n	808610a <__gethex+0x324>
 8086108:	2701      	movs	r7, #1
 808610a:	f1b9 0f00 	cmp.w	r9, #0
 808610e:	f000 8081 	beq.w	8086214 <__gethex+0x42e>
 8086112:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8086116:	2b02      	cmp	r3, #2
 8086118:	d00e      	beq.n	8086138 <__gethex+0x352>
 808611a:	2b03      	cmp	r3, #3
 808611c:	d010      	beq.n	8086140 <__gethex+0x35a>
 808611e:	2b01      	cmp	r3, #1
 8086120:	d176      	bne.n	8086210 <__gethex+0x42a>
 8086122:	f019 0f02 	tst.w	r9, #2
 8086126:	d073      	beq.n	8086210 <__gethex+0x42a>
 8086128:	f8da 0000 	ldr.w	r0, [sl]
 808612c:	ea49 0900 	orr.w	r9, r9, r0
 8086130:	f019 0f01 	tst.w	r9, #1
 8086134:	d107      	bne.n	8086146 <__gethex+0x360>
 8086136:	e06b      	b.n	8086210 <__gethex+0x42a>
 8086138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808613a:	f1c3 0301 	rsb	r3, r3, #1
 808613e:	9315      	str	r3, [sp, #84]	; 0x54
 8086140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8086142:	2b00      	cmp	r3, #0
 8086144:	d064      	beq.n	8086210 <__gethex+0x42a>
 8086146:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808614a:	f105 0314 	add.w	r3, r5, #20
 808614e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8086152:	eb03 0109 	add.w	r1, r3, r9
 8086156:	2000      	movs	r0, #0
 8086158:	681a      	ldr	r2, [r3, #0]
 808615a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 808615e:	d002      	beq.n	8086166 <__gethex+0x380>
 8086160:	3201      	adds	r2, #1
 8086162:	601a      	str	r2, [r3, #0]
 8086164:	e020      	b.n	80861a8 <__gethex+0x3c2>
 8086166:	f843 0b04 	str.w	r0, [r3], #4
 808616a:	4299      	cmp	r1, r3
 808616c:	d8f4      	bhi.n	8086158 <__gethex+0x372>
 808616e:	68ab      	ldr	r3, [r5, #8]
 8086170:	459a      	cmp	sl, r3
 8086172:	db12      	blt.n	808619a <__gethex+0x3b4>
 8086174:	6869      	ldr	r1, [r5, #4]
 8086176:	9802      	ldr	r0, [sp, #8]
 8086178:	3101      	adds	r1, #1
 808617a:	f000 f9e5 	bl	8086548 <_Balloc>
 808617e:	4683      	mov	fp, r0
 8086180:	692a      	ldr	r2, [r5, #16]
 8086182:	f105 010c 	add.w	r1, r5, #12
 8086186:	3202      	adds	r2, #2
 8086188:	0092      	lsls	r2, r2, #2
 808618a:	300c      	adds	r0, #12
 808618c:	f7fe fbae 	bl	80848ec <memcpy>
 8086190:	4629      	mov	r1, r5
 8086192:	9802      	ldr	r0, [sp, #8]
 8086194:	f000 fa0d 	bl	80865b2 <_Bfree>
 8086198:	465d      	mov	r5, fp
 808619a:	692b      	ldr	r3, [r5, #16]
 808619c:	1c5a      	adds	r2, r3, #1
 808619e:	612a      	str	r2, [r5, #16]
 80861a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80861a4:	2201      	movs	r2, #1
 80861a6:	615a      	str	r2, [r3, #20]
 80861a8:	2f02      	cmp	r7, #2
 80861aa:	f105 0214 	add.w	r2, r5, #20
 80861ae:	d111      	bne.n	80861d4 <__gethex+0x3ee>
 80861b0:	f8d8 3000 	ldr.w	r3, [r8]
 80861b4:	3b01      	subs	r3, #1
 80861b6:	429e      	cmp	r6, r3
 80861b8:	d127      	bne.n	808620a <__gethex+0x424>
 80861ba:	1171      	asrs	r1, r6, #5
 80861bc:	2301      	movs	r3, #1
 80861be:	f006 061f 	and.w	r6, r6, #31
 80861c2:	fa03 f606 	lsl.w	r6, r3, r6
 80861c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80861ca:	421e      	tst	r6, r3
 80861cc:	bf0c      	ite	eq
 80861ce:	2702      	moveq	r7, #2
 80861d0:	2701      	movne	r7, #1
 80861d2:	e01a      	b.n	808620a <__gethex+0x424>
 80861d4:	692b      	ldr	r3, [r5, #16]
 80861d6:	459a      	cmp	sl, r3
 80861d8:	da0a      	bge.n	80861f0 <__gethex+0x40a>
 80861da:	2101      	movs	r1, #1
 80861dc:	4628      	mov	r0, r5
 80861de:	f7ff fdb7 	bl	8085d50 <rshift>
 80861e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80861e6:	3401      	adds	r4, #1
 80861e8:	429c      	cmp	r4, r3
 80861ea:	f73f af2c 	bgt.w	8086046 <__gethex+0x260>
 80861ee:	e00b      	b.n	8086208 <__gethex+0x422>
 80861f0:	f016 061f 	ands.w	r6, r6, #31
 80861f4:	d008      	beq.n	8086208 <__gethex+0x422>
 80861f6:	4491      	add	r9, r2
 80861f8:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80861fc:	f000 fa69 	bl	80866d2 <__hi0bits>
 8086200:	f1c6 0620 	rsb	r6, r6, #32
 8086204:	42b0      	cmp	r0, r6
 8086206:	dbe8      	blt.n	80861da <__gethex+0x3f4>
 8086208:	2701      	movs	r7, #1
 808620a:	f047 0720 	orr.w	r7, r7, #32
 808620e:	e001      	b.n	8086214 <__gethex+0x42e>
 8086210:	f047 0710 	orr.w	r7, r7, #16
 8086214:	4638      	mov	r0, r7
 8086216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8086218:	601d      	str	r5, [r3, #0]
 808621a:	9b06      	ldr	r3, [sp, #24]
 808621c:	601c      	str	r4, [r3, #0]
 808621e:	b00b      	add	sp, #44	; 0x2c
 8086220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086224 <L_shift>:
 8086224:	f1c2 0208 	rsb	r2, r2, #8
 8086228:	0092      	lsls	r2, r2, #2
 808622a:	b570      	push	{r4, r5, r6, lr}
 808622c:	f1c2 0620 	rsb	r6, r2, #32
 8086230:	6843      	ldr	r3, [r0, #4]
 8086232:	6805      	ldr	r5, [r0, #0]
 8086234:	fa03 f406 	lsl.w	r4, r3, r6
 8086238:	432c      	orrs	r4, r5
 808623a:	40d3      	lsrs	r3, r2
 808623c:	6004      	str	r4, [r0, #0]
 808623e:	f840 3f04 	str.w	r3, [r0, #4]!
 8086242:	4288      	cmp	r0, r1
 8086244:	d3f4      	bcc.n	8086230 <L_shift+0xc>
 8086246:	bd70      	pop	{r4, r5, r6, pc}

08086248 <__match>:
 8086248:	b530      	push	{r4, r5, lr}
 808624a:	6803      	ldr	r3, [r0, #0]
 808624c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086250:	3301      	adds	r3, #1
 8086252:	b14c      	cbz	r4, 8086268 <__match+0x20>
 8086254:	781a      	ldrb	r2, [r3, #0]
 8086256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808625a:	2d19      	cmp	r5, #25
 808625c:	bf98      	it	ls
 808625e:	3220      	addls	r2, #32
 8086260:	42a2      	cmp	r2, r4
 8086262:	d0f3      	beq.n	808624c <__match+0x4>
 8086264:	2000      	movs	r0, #0
 8086266:	bd30      	pop	{r4, r5, pc}
 8086268:	6003      	str	r3, [r0, #0]
 808626a:	2001      	movs	r0, #1
 808626c:	bd30      	pop	{r4, r5, pc}

0808626e <__hexnan>:
 808626e:	680b      	ldr	r3, [r1, #0]
 8086270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086274:	115e      	asrs	r6, r3, #5
 8086276:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808627a:	f013 031f 	ands.w	r3, r3, #31
 808627e:	bf18      	it	ne
 8086280:	3604      	addne	r6, #4
 8086282:	1f35      	subs	r5, r6, #4
 8086284:	4617      	mov	r7, r2
 8086286:	2200      	movs	r2, #0
 8086288:	4682      	mov	sl, r0
 808628a:	46a8      	mov	r8, r5
 808628c:	462c      	mov	r4, r5
 808628e:	4691      	mov	r9, r2
 8086290:	b085      	sub	sp, #20
 8086292:	f8d0 b000 	ldr.w	fp, [r0]
 8086296:	9301      	str	r3, [sp, #4]
 8086298:	f846 2c04 	str.w	r2, [r6, #-4]
 808629c:	9200      	str	r2, [sp, #0]
 808629e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80862a2:	2900      	cmp	r1, #0
 80862a4:	d03c      	beq.n	8086320 <__hexnan+0xb2>
 80862a6:	4608      	mov	r0, r1
 80862a8:	9203      	str	r2, [sp, #12]
 80862aa:	9102      	str	r1, [sp, #8]
 80862ac:	f7ff fd86 	bl	8085dbc <__hexdig_fun>
 80862b0:	9a03      	ldr	r2, [sp, #12]
 80862b2:	bb00      	cbnz	r0, 80862f6 <__hexnan+0x88>
 80862b4:	9902      	ldr	r1, [sp, #8]
 80862b6:	2920      	cmp	r1, #32
 80862b8:	d816      	bhi.n	80862e8 <__hexnan+0x7a>
 80862ba:	9b00      	ldr	r3, [sp, #0]
 80862bc:	4599      	cmp	r9, r3
 80862be:	ddee      	ble.n	808629e <__hexnan+0x30>
 80862c0:	4544      	cmp	r4, r8
 80862c2:	d205      	bcs.n	80862d0 <__hexnan+0x62>
 80862c4:	2a07      	cmp	r2, #7
 80862c6:	dc03      	bgt.n	80862d0 <__hexnan+0x62>
 80862c8:	4641      	mov	r1, r8
 80862ca:	4620      	mov	r0, r4
 80862cc:	f7ff ffaa 	bl	8086224 <L_shift>
 80862d0:	42bc      	cmp	r4, r7
 80862d2:	d923      	bls.n	808631c <__hexnan+0xae>
 80862d4:	2300      	movs	r3, #0
 80862d6:	f1a4 0804 	sub.w	r8, r4, #4
 80862da:	f844 3c04 	str.w	r3, [r4, #-4]
 80862de:	f8cd 9000 	str.w	r9, [sp]
 80862e2:	4644      	mov	r4, r8
 80862e4:	461a      	mov	r2, r3
 80862e6:	e7da      	b.n	808629e <__hexnan+0x30>
 80862e8:	2929      	cmp	r1, #41	; 0x29
 80862ea:	d148      	bne.n	808637e <__hexnan+0x110>
 80862ec:	f10b 0301 	add.w	r3, fp, #1
 80862f0:	f8ca 3000 	str.w	r3, [sl]
 80862f4:	e014      	b.n	8086320 <__hexnan+0xb2>
 80862f6:	3201      	adds	r2, #1
 80862f8:	2a08      	cmp	r2, #8
 80862fa:	f109 0901 	add.w	r9, r9, #1
 80862fe:	dd06      	ble.n	808630e <__hexnan+0xa0>
 8086300:	42bc      	cmp	r4, r7
 8086302:	d9cc      	bls.n	808629e <__hexnan+0x30>
 8086304:	2300      	movs	r3, #0
 8086306:	f844 3c04 	str.w	r3, [r4, #-4]
 808630a:	2201      	movs	r2, #1
 808630c:	3c04      	subs	r4, #4
 808630e:	6821      	ldr	r1, [r4, #0]
 8086310:	f000 000f 	and.w	r0, r0, #15
 8086314:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8086318:	6020      	str	r0, [r4, #0]
 808631a:	e7c0      	b.n	808629e <__hexnan+0x30>
 808631c:	2208      	movs	r2, #8
 808631e:	e7be      	b.n	808629e <__hexnan+0x30>
 8086320:	f1b9 0f00 	cmp.w	r9, #0
 8086324:	d02b      	beq.n	808637e <__hexnan+0x110>
 8086326:	4544      	cmp	r4, r8
 8086328:	d205      	bcs.n	8086336 <__hexnan+0xc8>
 808632a:	2a07      	cmp	r2, #7
 808632c:	dc03      	bgt.n	8086336 <__hexnan+0xc8>
 808632e:	4641      	mov	r1, r8
 8086330:	4620      	mov	r0, r4
 8086332:	f7ff ff77 	bl	8086224 <L_shift>
 8086336:	42bc      	cmp	r4, r7
 8086338:	d90c      	bls.n	8086354 <__hexnan+0xe6>
 808633a:	463b      	mov	r3, r7
 808633c:	f854 2b04 	ldr.w	r2, [r4], #4
 8086340:	42a5      	cmp	r5, r4
 8086342:	f843 2b04 	str.w	r2, [r3], #4
 8086346:	d2f9      	bcs.n	808633c <__hexnan+0xce>
 8086348:	2200      	movs	r2, #0
 808634a:	f843 2b04 	str.w	r2, [r3], #4
 808634e:	429d      	cmp	r5, r3
 8086350:	d2fb      	bcs.n	808634a <__hexnan+0xdc>
 8086352:	e00b      	b.n	808636c <__hexnan+0xfe>
 8086354:	9b01      	ldr	r3, [sp, #4]
 8086356:	b14b      	cbz	r3, 808636c <__hexnan+0xfe>
 8086358:	f1c3 0220 	rsb	r2, r3, #32
 808635c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8086360:	40d3      	lsrs	r3, r2
 8086362:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8086366:	4013      	ands	r3, r2
 8086368:	f846 3c04 	str.w	r3, [r6, #-4]
 808636c:	682b      	ldr	r3, [r5, #0]
 808636e:	b943      	cbnz	r3, 8086382 <__hexnan+0x114>
 8086370:	42bd      	cmp	r5, r7
 8086372:	d102      	bne.n	808637a <__hexnan+0x10c>
 8086374:	2301      	movs	r3, #1
 8086376:	602b      	str	r3, [r5, #0]
 8086378:	e003      	b.n	8086382 <__hexnan+0x114>
 808637a:	3d04      	subs	r5, #4
 808637c:	e7f6      	b.n	808636c <__hexnan+0xfe>
 808637e:	2004      	movs	r0, #4
 8086380:	e000      	b.n	8086384 <__hexnan+0x116>
 8086382:	2005      	movs	r0, #5
 8086384:	b005      	add	sp, #20
 8086386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808638c <_findenv_r>:
 808638c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086390:	4607      	mov	r7, r0
 8086392:	468b      	mov	fp, r1
 8086394:	4690      	mov	r8, r2
 8086396:	f000 fcce 	bl	8086d36 <__env_lock>
 808639a:	4b19      	ldr	r3, [pc, #100]	; (8086400 <_findenv_r+0x74>)
 808639c:	681d      	ldr	r5, [r3, #0]
 808639e:	469a      	mov	sl, r3
 80863a0:	b13d      	cbz	r5, 80863b2 <_findenv_r+0x26>
 80863a2:	465c      	mov	r4, fp
 80863a4:	4623      	mov	r3, r4
 80863a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80863aa:	b142      	cbz	r2, 80863be <_findenv_r+0x32>
 80863ac:	2a3d      	cmp	r2, #61	; 0x3d
 80863ae:	461c      	mov	r4, r3
 80863b0:	d1f8      	bne.n	80863a4 <_findenv_r+0x18>
 80863b2:	4638      	mov	r0, r7
 80863b4:	f000 fcc0 	bl	8086d38 <__env_unlock>
 80863b8:	2000      	movs	r0, #0
 80863ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80863be:	ebcb 0404 	rsb	r4, fp, r4
 80863c2:	46a9      	mov	r9, r5
 80863c4:	f859 0b04 	ldr.w	r0, [r9], #4
 80863c8:	2800      	cmp	r0, #0
 80863ca:	d0f2      	beq.n	80863b2 <_findenv_r+0x26>
 80863cc:	4622      	mov	r2, r4
 80863ce:	4659      	mov	r1, fp
 80863d0:	f7fe fb0b 	bl	80849ea <strncmp>
 80863d4:	b988      	cbnz	r0, 80863fa <_findenv_r+0x6e>
 80863d6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80863da:	191e      	adds	r6, r3, r4
 80863dc:	5d1b      	ldrb	r3, [r3, r4]
 80863de:	2b3d      	cmp	r3, #61	; 0x3d
 80863e0:	d10b      	bne.n	80863fa <_findenv_r+0x6e>
 80863e2:	f8da 3000 	ldr.w	r3, [sl]
 80863e6:	4638      	mov	r0, r7
 80863e8:	1aed      	subs	r5, r5, r3
 80863ea:	10ad      	asrs	r5, r5, #2
 80863ec:	f8c8 5000 	str.w	r5, [r8]
 80863f0:	f000 fca2 	bl	8086d38 <__env_unlock>
 80863f4:	1c70      	adds	r0, r6, #1
 80863f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80863fa:	464d      	mov	r5, r9
 80863fc:	e7e1      	b.n	80863c2 <_findenv_r+0x36>
 80863fe:	bf00      	nop
 8086400:	20000234 	.word	0x20000234

08086404 <_getenv_r>:
 8086404:	b507      	push	{r0, r1, r2, lr}
 8086406:	aa01      	add	r2, sp, #4
 8086408:	f7ff ffc0 	bl	808638c <_findenv_r>
 808640c:	b003      	add	sp, #12
 808640e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086414 <__gettzinfo>:
 8086414:	4800      	ldr	r0, [pc, #0]	; (8086418 <__gettzinfo+0x4>)
 8086416:	4770      	bx	lr
 8086418:	200001f4 	.word	0x200001f4

0808641c <gmtime_r>:
 808641c:	6802      	ldr	r2, [r0, #0]
 808641e:	4b46      	ldr	r3, [pc, #280]	; (8086538 <gmtime_r+0x11c>)
 8086420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086422:	fb92 f4f3 	sdiv	r4, r2, r3
 8086426:	fb03 2214 	mls	r2, r3, r4, r2
 808642a:	2a00      	cmp	r2, #0
 808642c:	bfbc      	itt	lt
 808642e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8086432:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8086436:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808643a:	fb92 f3f0 	sdiv	r3, r2, r0
 808643e:	fb00 2213 	mls	r2, r0, r3, r2
 8086442:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8086446:	608b      	str	r3, [r1, #8]
 8086448:	fb92 f3f0 	sdiv	r3, r2, r0
 808644c:	fb00 2213 	mls	r2, r0, r3, r2
 8086450:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8086454:	bfac      	ite	ge
 8086456:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808645a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808645e:	604b      	str	r3, [r1, #4]
 8086460:	600a      	str	r2, [r1, #0]
 8086462:	2307      	movs	r3, #7
 8086464:	1ce2      	adds	r2, r4, #3
 8086466:	fb92 f3f3 	sdiv	r3, r2, r3
 808646a:	4d34      	ldr	r5, [pc, #208]	; (808653c <gmtime_r+0x120>)
 808646c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8086470:	fb94 f5f5 	sdiv	r5, r4, r5
 8086474:	1ad3      	subs	r3, r2, r3
 8086476:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808647a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808647e:	618b      	str	r3, [r1, #24]
 8086480:	4b2f      	ldr	r3, [pc, #188]	; (8086540 <gmtime_r+0x124>)
 8086482:	4830      	ldr	r0, [pc, #192]	; (8086544 <gmtime_r+0x128>)
 8086484:	fb03 4405 	mla	r4, r3, r5, r4
 8086488:	fbb4 f2f2 	udiv	r2, r4, r2
 808648c:	fbb4 f3f7 	udiv	r3, r4, r7
 8086490:	fbb4 f0f0 	udiv	r0, r4, r0
 8086494:	4422      	add	r2, r4
 8086496:	1ad2      	subs	r2, r2, r3
 8086498:	f648 6694 	movw	r6, #36500	; 0x8e94
 808649c:	1a13      	subs	r3, r2, r0
 808649e:	f240 126d 	movw	r2, #365	; 0x16d
 80864a2:	fbb3 f6f6 	udiv	r6, r3, r6
 80864a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80864aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80864ae:	4434      	add	r4, r6
 80864b0:	1ae3      	subs	r3, r4, r3
 80864b2:	fb02 3310 	mls	r3, r2, r0, r3
 80864b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80864ba:	2499      	movs	r4, #153	; 0x99
 80864bc:	3202      	adds	r2, #2
 80864be:	fbb2 f2f4 	udiv	r2, r2, r4
 80864c2:	4354      	muls	r4, r2
 80864c4:	1ca6      	adds	r6, r4, #2
 80864c6:	2405      	movs	r4, #5
 80864c8:	fbb6 f4f4 	udiv	r4, r6, r4
 80864cc:	2a0a      	cmp	r2, #10
 80864ce:	bf34      	ite	cc
 80864d0:	2602      	movcc	r6, #2
 80864d2:	f06f 0609 	mvncs.w	r6, #9
 80864d6:	4416      	add	r6, r2
 80864d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80864dc:	fb02 0505 	mla	r5, r2, r5, r0
 80864e0:	1c5f      	adds	r7, r3, #1
 80864e2:	2e01      	cmp	r6, #1
 80864e4:	bf98      	it	ls
 80864e6:	3501      	addls	r5, #1
 80864e8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80864ec:	eba7 0704 	sub.w	r7, r7, r4
 80864f0:	d302      	bcc.n	80864f8 <gmtime_r+0xdc>
 80864f2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80864f6:	e014      	b.n	8086522 <gmtime_r+0x106>
 80864f8:	0782      	lsls	r2, r0, #30
 80864fa:	d105      	bne.n	8086508 <gmtime_r+0xec>
 80864fc:	2464      	movs	r4, #100	; 0x64
 80864fe:	fbb0 f2f4 	udiv	r2, r0, r4
 8086502:	fb04 0212 	mls	r2, r4, r2, r0
 8086506:	b94a      	cbnz	r2, 808651c <gmtime_r+0x100>
 8086508:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808650c:	fbb0 f4f2 	udiv	r4, r0, r2
 8086510:	fb02 0014 	mls	r0, r2, r4, r0
 8086514:	fab0 f280 	clz	r2, r0
 8086518:	0952      	lsrs	r2, r2, #5
 808651a:	e000      	b.n	808651e <gmtime_r+0x102>
 808651c:	2201      	movs	r2, #1
 808651e:	333b      	adds	r3, #59	; 0x3b
 8086520:	441a      	add	r2, r3
 8086522:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8086526:	2300      	movs	r3, #0
 8086528:	61ca      	str	r2, [r1, #28]
 808652a:	614d      	str	r5, [r1, #20]
 808652c:	610e      	str	r6, [r1, #16]
 808652e:	60cf      	str	r7, [r1, #12]
 8086530:	620b      	str	r3, [r1, #32]
 8086532:	4608      	mov	r0, r1
 8086534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086536:	bf00      	nop
 8086538:	00015180 	.word	0x00015180
 808653c:	00023ab1 	.word	0x00023ab1
 8086540:	fffdc54f 	.word	0xfffdc54f
 8086544:	00023ab0 	.word	0x00023ab0

08086548 <_Balloc>:
 8086548:	b570      	push	{r4, r5, r6, lr}
 808654a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808654c:	4604      	mov	r4, r0
 808654e:	460e      	mov	r6, r1
 8086550:	b93d      	cbnz	r5, 8086562 <_Balloc+0x1a>
 8086552:	2010      	movs	r0, #16
 8086554:	f7fb fa64 	bl	8081a20 <malloc>
 8086558:	6260      	str	r0, [r4, #36]	; 0x24
 808655a:	6045      	str	r5, [r0, #4]
 808655c:	6085      	str	r5, [r0, #8]
 808655e:	6005      	str	r5, [r0, #0]
 8086560:	60c5      	str	r5, [r0, #12]
 8086562:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8086564:	68eb      	ldr	r3, [r5, #12]
 8086566:	b143      	cbz	r3, 808657a <_Balloc+0x32>
 8086568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808656a:	68db      	ldr	r3, [r3, #12]
 808656c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8086570:	b178      	cbz	r0, 8086592 <_Balloc+0x4a>
 8086572:	6802      	ldr	r2, [r0, #0]
 8086574:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8086578:	e017      	b.n	80865aa <_Balloc+0x62>
 808657a:	2221      	movs	r2, #33	; 0x21
 808657c:	2104      	movs	r1, #4
 808657e:	4620      	mov	r0, r4
 8086580:	f000 fbcb 	bl	8086d1a <_calloc_r>
 8086584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086586:	60e8      	str	r0, [r5, #12]
 8086588:	68db      	ldr	r3, [r3, #12]
 808658a:	2b00      	cmp	r3, #0
 808658c:	d1ec      	bne.n	8086568 <_Balloc+0x20>
 808658e:	2000      	movs	r0, #0
 8086590:	bd70      	pop	{r4, r5, r6, pc}
 8086592:	2101      	movs	r1, #1
 8086594:	fa01 f506 	lsl.w	r5, r1, r6
 8086598:	1d6a      	adds	r2, r5, #5
 808659a:	0092      	lsls	r2, r2, #2
 808659c:	4620      	mov	r0, r4
 808659e:	f000 fbbc 	bl	8086d1a <_calloc_r>
 80865a2:	2800      	cmp	r0, #0
 80865a4:	d0f3      	beq.n	808658e <_Balloc+0x46>
 80865a6:	6046      	str	r6, [r0, #4]
 80865a8:	6085      	str	r5, [r0, #8]
 80865aa:	2300      	movs	r3, #0
 80865ac:	6103      	str	r3, [r0, #16]
 80865ae:	60c3      	str	r3, [r0, #12]
 80865b0:	bd70      	pop	{r4, r5, r6, pc}

080865b2 <_Bfree>:
 80865b2:	b570      	push	{r4, r5, r6, lr}
 80865b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80865b6:	4606      	mov	r6, r0
 80865b8:	460d      	mov	r5, r1
 80865ba:	b93c      	cbnz	r4, 80865cc <_Bfree+0x1a>
 80865bc:	2010      	movs	r0, #16
 80865be:	f7fb fa2f 	bl	8081a20 <malloc>
 80865c2:	6270      	str	r0, [r6, #36]	; 0x24
 80865c4:	6044      	str	r4, [r0, #4]
 80865c6:	6084      	str	r4, [r0, #8]
 80865c8:	6004      	str	r4, [r0, #0]
 80865ca:	60c4      	str	r4, [r0, #12]
 80865cc:	b13d      	cbz	r5, 80865de <_Bfree+0x2c>
 80865ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80865d0:	686a      	ldr	r2, [r5, #4]
 80865d2:	68db      	ldr	r3, [r3, #12]
 80865d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80865d8:	6029      	str	r1, [r5, #0]
 80865da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80865de:	bd70      	pop	{r4, r5, r6, pc}

080865e0 <__multadd>:
 80865e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80865e4:	4606      	mov	r6, r0
 80865e6:	460c      	mov	r4, r1
 80865e8:	690d      	ldr	r5, [r1, #16]
 80865ea:	461f      	mov	r7, r3
 80865ec:	f101 0e14 	add.w	lr, r1, #20
 80865f0:	2300      	movs	r3, #0
 80865f2:	f8de 0000 	ldr.w	r0, [lr]
 80865f6:	3301      	adds	r3, #1
 80865f8:	b281      	uxth	r1, r0
 80865fa:	fb02 7101 	mla	r1, r2, r1, r7
 80865fe:	0c00      	lsrs	r0, r0, #16
 8086600:	0c0f      	lsrs	r7, r1, #16
 8086602:	fb02 7000 	mla	r0, r2, r0, r7
 8086606:	b289      	uxth	r1, r1
 8086608:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808660c:	429d      	cmp	r5, r3
 808660e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8086612:	f84e 1b04 	str.w	r1, [lr], #4
 8086616:	dcec      	bgt.n	80865f2 <__multadd+0x12>
 8086618:	b1d7      	cbz	r7, 8086650 <__multadd+0x70>
 808661a:	68a3      	ldr	r3, [r4, #8]
 808661c:	429d      	cmp	r5, r3
 808661e:	db12      	blt.n	8086646 <__multadd+0x66>
 8086620:	6861      	ldr	r1, [r4, #4]
 8086622:	4630      	mov	r0, r6
 8086624:	3101      	adds	r1, #1
 8086626:	f7ff ff8f 	bl	8086548 <_Balloc>
 808662a:	4680      	mov	r8, r0
 808662c:	6922      	ldr	r2, [r4, #16]
 808662e:	f104 010c 	add.w	r1, r4, #12
 8086632:	3202      	adds	r2, #2
 8086634:	0092      	lsls	r2, r2, #2
 8086636:	300c      	adds	r0, #12
 8086638:	f7fe f958 	bl	80848ec <memcpy>
 808663c:	4621      	mov	r1, r4
 808663e:	4630      	mov	r0, r6
 8086640:	f7ff ffb7 	bl	80865b2 <_Bfree>
 8086644:	4644      	mov	r4, r8
 8086646:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808664a:	3501      	adds	r5, #1
 808664c:	615f      	str	r7, [r3, #20]
 808664e:	6125      	str	r5, [r4, #16]
 8086650:	4620      	mov	r0, r4
 8086652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086656 <__s2b>:
 8086656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808665a:	4606      	mov	r6, r0
 808665c:	4615      	mov	r5, r2
 808665e:	461f      	mov	r7, r3
 8086660:	2209      	movs	r2, #9
 8086662:	3308      	adds	r3, #8
 8086664:	460c      	mov	r4, r1
 8086666:	fb93 f3f2 	sdiv	r3, r3, r2
 808666a:	2100      	movs	r1, #0
 808666c:	2201      	movs	r2, #1
 808666e:	429a      	cmp	r2, r3
 8086670:	da02      	bge.n	8086678 <__s2b+0x22>
 8086672:	0052      	lsls	r2, r2, #1
 8086674:	3101      	adds	r1, #1
 8086676:	e7fa      	b.n	808666e <__s2b+0x18>
 8086678:	4630      	mov	r0, r6
 808667a:	f7ff ff65 	bl	8086548 <_Balloc>
 808667e:	9b08      	ldr	r3, [sp, #32]
 8086680:	2d09      	cmp	r5, #9
 8086682:	6143      	str	r3, [r0, #20]
 8086684:	f04f 0301 	mov.w	r3, #1
 8086688:	6103      	str	r3, [r0, #16]
 808668a:	dd11      	ble.n	80866b0 <__s2b+0x5a>
 808668c:	f104 0809 	add.w	r8, r4, #9
 8086690:	46c1      	mov	r9, r8
 8086692:	442c      	add	r4, r5
 8086694:	f819 3b01 	ldrb.w	r3, [r9], #1
 8086698:	4601      	mov	r1, r0
 808669a:	3b30      	subs	r3, #48	; 0x30
 808669c:	220a      	movs	r2, #10
 808669e:	4630      	mov	r0, r6
 80866a0:	f7ff ff9e 	bl	80865e0 <__multadd>
 80866a4:	45a1      	cmp	r9, r4
 80866a6:	d1f5      	bne.n	8086694 <__s2b+0x3e>
 80866a8:	eb08 0405 	add.w	r4, r8, r5
 80866ac:	3c08      	subs	r4, #8
 80866ae:	e001      	b.n	80866b4 <__s2b+0x5e>
 80866b0:	340a      	adds	r4, #10
 80866b2:	2509      	movs	r5, #9
 80866b4:	1b2d      	subs	r5, r5, r4
 80866b6:	1963      	adds	r3, r4, r5
 80866b8:	429f      	cmp	r7, r3
 80866ba:	dd08      	ble.n	80866ce <__s2b+0x78>
 80866bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80866c0:	4601      	mov	r1, r0
 80866c2:	3b30      	subs	r3, #48	; 0x30
 80866c4:	220a      	movs	r2, #10
 80866c6:	4630      	mov	r0, r6
 80866c8:	f7ff ff8a 	bl	80865e0 <__multadd>
 80866cc:	e7f3      	b.n	80866b6 <__s2b+0x60>
 80866ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080866d2 <__hi0bits>:
 80866d2:	0c03      	lsrs	r3, r0, #16
 80866d4:	041b      	lsls	r3, r3, #16
 80866d6:	b913      	cbnz	r3, 80866de <__hi0bits+0xc>
 80866d8:	0400      	lsls	r0, r0, #16
 80866da:	2310      	movs	r3, #16
 80866dc:	e000      	b.n	80866e0 <__hi0bits+0xe>
 80866de:	2300      	movs	r3, #0
 80866e0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80866e4:	bf04      	itt	eq
 80866e6:	0200      	lsleq	r0, r0, #8
 80866e8:	3308      	addeq	r3, #8
 80866ea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80866ee:	bf04      	itt	eq
 80866f0:	0100      	lsleq	r0, r0, #4
 80866f2:	3304      	addeq	r3, #4
 80866f4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80866f8:	bf04      	itt	eq
 80866fa:	0080      	lsleq	r0, r0, #2
 80866fc:	3302      	addeq	r3, #2
 80866fe:	2800      	cmp	r0, #0
 8086700:	db03      	blt.n	808670a <__hi0bits+0x38>
 8086702:	0042      	lsls	r2, r0, #1
 8086704:	d503      	bpl.n	808670e <__hi0bits+0x3c>
 8086706:	1c58      	adds	r0, r3, #1
 8086708:	4770      	bx	lr
 808670a:	4618      	mov	r0, r3
 808670c:	4770      	bx	lr
 808670e:	2020      	movs	r0, #32
 8086710:	4770      	bx	lr

08086712 <__lo0bits>:
 8086712:	6803      	ldr	r3, [r0, #0]
 8086714:	f013 0207 	ands.w	r2, r3, #7
 8086718:	d00b      	beq.n	8086732 <__lo0bits+0x20>
 808671a:	07d9      	lsls	r1, r3, #31
 808671c:	d422      	bmi.n	8086764 <__lo0bits+0x52>
 808671e:	079a      	lsls	r2, r3, #30
 8086720:	bf4b      	itete	mi
 8086722:	085b      	lsrmi	r3, r3, #1
 8086724:	089b      	lsrpl	r3, r3, #2
 8086726:	6003      	strmi	r3, [r0, #0]
 8086728:	6003      	strpl	r3, [r0, #0]
 808672a:	bf4c      	ite	mi
 808672c:	2001      	movmi	r0, #1
 808672e:	2002      	movpl	r0, #2
 8086730:	4770      	bx	lr
 8086732:	b299      	uxth	r1, r3
 8086734:	b909      	cbnz	r1, 808673a <__lo0bits+0x28>
 8086736:	0c1b      	lsrs	r3, r3, #16
 8086738:	2210      	movs	r2, #16
 808673a:	f013 0fff 	tst.w	r3, #255	; 0xff
 808673e:	bf04      	itt	eq
 8086740:	0a1b      	lsreq	r3, r3, #8
 8086742:	3208      	addeq	r2, #8
 8086744:	0719      	lsls	r1, r3, #28
 8086746:	bf04      	itt	eq
 8086748:	091b      	lsreq	r3, r3, #4
 808674a:	3204      	addeq	r2, #4
 808674c:	0799      	lsls	r1, r3, #30
 808674e:	bf04      	itt	eq
 8086750:	089b      	lsreq	r3, r3, #2
 8086752:	3202      	addeq	r2, #2
 8086754:	07d9      	lsls	r1, r3, #31
 8086756:	d402      	bmi.n	808675e <__lo0bits+0x4c>
 8086758:	085b      	lsrs	r3, r3, #1
 808675a:	d005      	beq.n	8086768 <__lo0bits+0x56>
 808675c:	3201      	adds	r2, #1
 808675e:	6003      	str	r3, [r0, #0]
 8086760:	4610      	mov	r0, r2
 8086762:	4770      	bx	lr
 8086764:	2000      	movs	r0, #0
 8086766:	4770      	bx	lr
 8086768:	2020      	movs	r0, #32
 808676a:	4770      	bx	lr

0808676c <__i2b>:
 808676c:	b510      	push	{r4, lr}
 808676e:	460c      	mov	r4, r1
 8086770:	2101      	movs	r1, #1
 8086772:	f7ff fee9 	bl	8086548 <_Balloc>
 8086776:	2201      	movs	r2, #1
 8086778:	6144      	str	r4, [r0, #20]
 808677a:	6102      	str	r2, [r0, #16]
 808677c:	bd10      	pop	{r4, pc}

0808677e <__multiply>:
 808677e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086782:	4614      	mov	r4, r2
 8086784:	690a      	ldr	r2, [r1, #16]
 8086786:	6923      	ldr	r3, [r4, #16]
 8086788:	4688      	mov	r8, r1
 808678a:	429a      	cmp	r2, r3
 808678c:	bfbe      	ittt	lt
 808678e:	460b      	movlt	r3, r1
 8086790:	46a0      	movlt	r8, r4
 8086792:	461c      	movlt	r4, r3
 8086794:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8086798:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808679c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80867a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80867a4:	eb07 0609 	add.w	r6, r7, r9
 80867a8:	429e      	cmp	r6, r3
 80867aa:	bfc8      	it	gt
 80867ac:	3101      	addgt	r1, #1
 80867ae:	f7ff fecb 	bl	8086548 <_Balloc>
 80867b2:	f100 0514 	add.w	r5, r0, #20
 80867b6:	462b      	mov	r3, r5
 80867b8:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80867bc:	2200      	movs	r2, #0
 80867be:	4563      	cmp	r3, ip
 80867c0:	d202      	bcs.n	80867c8 <__multiply+0x4a>
 80867c2:	f843 2b04 	str.w	r2, [r3], #4
 80867c6:	e7fa      	b.n	80867be <__multiply+0x40>
 80867c8:	f104 0214 	add.w	r2, r4, #20
 80867cc:	f108 0114 	add.w	r1, r8, #20
 80867d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80867d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80867d8:	9300      	str	r3, [sp, #0]
 80867da:	9b00      	ldr	r3, [sp, #0]
 80867dc:	9201      	str	r2, [sp, #4]
 80867de:	4293      	cmp	r3, r2
 80867e0:	d957      	bls.n	8086892 <__multiply+0x114>
 80867e2:	f8b2 b000 	ldrh.w	fp, [r2]
 80867e6:	f1bb 0f00 	cmp.w	fp, #0
 80867ea:	d023      	beq.n	8086834 <__multiply+0xb6>
 80867ec:	4689      	mov	r9, r1
 80867ee:	46ae      	mov	lr, r5
 80867f0:	f04f 0800 	mov.w	r8, #0
 80867f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80867f8:	f8be a000 	ldrh.w	sl, [lr]
 80867fc:	b2a3      	uxth	r3, r4
 80867fe:	fb0b a303 	mla	r3, fp, r3, sl
 8086802:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8086806:	f8de 4000 	ldr.w	r4, [lr]
 808680a:	4443      	add	r3, r8
 808680c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086810:	fb0b 840a 	mla	r4, fp, sl, r8
 8086814:	46f2      	mov	sl, lr
 8086816:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808681a:	b29b      	uxth	r3, r3
 808681c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8086820:	454f      	cmp	r7, r9
 8086822:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086826:	f84a 3b04 	str.w	r3, [sl], #4
 808682a:	d901      	bls.n	8086830 <__multiply+0xb2>
 808682c:	46d6      	mov	lr, sl
 808682e:	e7e1      	b.n	80867f4 <__multiply+0x76>
 8086830:	f8ce 8004 	str.w	r8, [lr, #4]
 8086834:	9b01      	ldr	r3, [sp, #4]
 8086836:	3204      	adds	r2, #4
 8086838:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808683c:	f1ba 0f00 	cmp.w	sl, #0
 8086840:	d021      	beq.n	8086886 <__multiply+0x108>
 8086842:	462c      	mov	r4, r5
 8086844:	4689      	mov	r9, r1
 8086846:	682b      	ldr	r3, [r5, #0]
 8086848:	f04f 0800 	mov.w	r8, #0
 808684c:	f8b9 e000 	ldrh.w	lr, [r9]
 8086850:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8086854:	b29b      	uxth	r3, r3
 8086856:	fb0a be0e 	mla	lr, sl, lr, fp
 808685a:	46a3      	mov	fp, r4
 808685c:	44f0      	add	r8, lr
 808685e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8086862:	f84b 3b04 	str.w	r3, [fp], #4
 8086866:	f859 3b04 	ldr.w	r3, [r9], #4
 808686a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808686e:	0c1b      	lsrs	r3, r3, #16
 8086870:	fb0a e303 	mla	r3, sl, r3, lr
 8086874:	454f      	cmp	r7, r9
 8086876:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808687a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808687e:	d901      	bls.n	8086884 <__multiply+0x106>
 8086880:	465c      	mov	r4, fp
 8086882:	e7e3      	b.n	808684c <__multiply+0xce>
 8086884:	6063      	str	r3, [r4, #4]
 8086886:	3504      	adds	r5, #4
 8086888:	e7a7      	b.n	80867da <__multiply+0x5c>
 808688a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808688e:	b913      	cbnz	r3, 8086896 <__multiply+0x118>
 8086890:	3e01      	subs	r6, #1
 8086892:	2e00      	cmp	r6, #0
 8086894:	dcf9      	bgt.n	808688a <__multiply+0x10c>
 8086896:	6106      	str	r6, [r0, #16]
 8086898:	b003      	add	sp, #12
 808689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080868a0 <__pow5mult>:
 80868a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80868a4:	4615      	mov	r5, r2
 80868a6:	f012 0203 	ands.w	r2, r2, #3
 80868aa:	4606      	mov	r6, r0
 80868ac:	460f      	mov	r7, r1
 80868ae:	d007      	beq.n	80868c0 <__pow5mult+0x20>
 80868b0:	4c21      	ldr	r4, [pc, #132]	; (8086938 <__pow5mult+0x98>)
 80868b2:	3a01      	subs	r2, #1
 80868b4:	2300      	movs	r3, #0
 80868b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80868ba:	f7ff fe91 	bl	80865e0 <__multadd>
 80868be:	4607      	mov	r7, r0
 80868c0:	10ad      	asrs	r5, r5, #2
 80868c2:	d036      	beq.n	8086932 <__pow5mult+0x92>
 80868c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80868c6:	b93c      	cbnz	r4, 80868d8 <__pow5mult+0x38>
 80868c8:	2010      	movs	r0, #16
 80868ca:	f7fb f8a9 	bl	8081a20 <malloc>
 80868ce:	6270      	str	r0, [r6, #36]	; 0x24
 80868d0:	6044      	str	r4, [r0, #4]
 80868d2:	6084      	str	r4, [r0, #8]
 80868d4:	6004      	str	r4, [r0, #0]
 80868d6:	60c4      	str	r4, [r0, #12]
 80868d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80868dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80868e0:	b94c      	cbnz	r4, 80868f6 <__pow5mult+0x56>
 80868e2:	f240 2171 	movw	r1, #625	; 0x271
 80868e6:	4630      	mov	r0, r6
 80868e8:	f7ff ff40 	bl	808676c <__i2b>
 80868ec:	4604      	mov	r4, r0
 80868ee:	2300      	movs	r3, #0
 80868f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80868f4:	6003      	str	r3, [r0, #0]
 80868f6:	f04f 0800 	mov.w	r8, #0
 80868fa:	07eb      	lsls	r3, r5, #31
 80868fc:	d50a      	bpl.n	8086914 <__pow5mult+0x74>
 80868fe:	4639      	mov	r1, r7
 8086900:	4622      	mov	r2, r4
 8086902:	4630      	mov	r0, r6
 8086904:	f7ff ff3b 	bl	808677e <__multiply>
 8086908:	4681      	mov	r9, r0
 808690a:	4639      	mov	r1, r7
 808690c:	4630      	mov	r0, r6
 808690e:	f7ff fe50 	bl	80865b2 <_Bfree>
 8086912:	464f      	mov	r7, r9
 8086914:	106d      	asrs	r5, r5, #1
 8086916:	d00c      	beq.n	8086932 <__pow5mult+0x92>
 8086918:	6820      	ldr	r0, [r4, #0]
 808691a:	b108      	cbz	r0, 8086920 <__pow5mult+0x80>
 808691c:	4604      	mov	r4, r0
 808691e:	e7ec      	b.n	80868fa <__pow5mult+0x5a>
 8086920:	4622      	mov	r2, r4
 8086922:	4621      	mov	r1, r4
 8086924:	4630      	mov	r0, r6
 8086926:	f7ff ff2a 	bl	808677e <__multiply>
 808692a:	6020      	str	r0, [r4, #0]
 808692c:	f8c0 8000 	str.w	r8, [r0]
 8086930:	e7f4      	b.n	808691c <__pow5mult+0x7c>
 8086932:	4638      	mov	r0, r7
 8086934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8086938:	08087628 	.word	0x08087628

0808693c <__lshift>:
 808693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086940:	460c      	mov	r4, r1
 8086942:	4607      	mov	r7, r0
 8086944:	4691      	mov	r9, r2
 8086946:	6926      	ldr	r6, [r4, #16]
 8086948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808694c:	4456      	add	r6, sl
 808694e:	6849      	ldr	r1, [r1, #4]
 8086950:	68a3      	ldr	r3, [r4, #8]
 8086952:	1c75      	adds	r5, r6, #1
 8086954:	42ab      	cmp	r3, r5
 8086956:	da02      	bge.n	808695e <__lshift+0x22>
 8086958:	3101      	adds	r1, #1
 808695a:	005b      	lsls	r3, r3, #1
 808695c:	e7fa      	b.n	8086954 <__lshift+0x18>
 808695e:	4638      	mov	r0, r7
 8086960:	f7ff fdf2 	bl	8086548 <_Balloc>
 8086964:	2300      	movs	r3, #0
 8086966:	4680      	mov	r8, r0
 8086968:	461a      	mov	r2, r3
 808696a:	f100 0114 	add.w	r1, r0, #20
 808696e:	4553      	cmp	r3, sl
 8086970:	da03      	bge.n	808697a <__lshift+0x3e>
 8086972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8086976:	3301      	adds	r3, #1
 8086978:	e7f9      	b.n	808696e <__lshift+0x32>
 808697a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808697e:	6920      	ldr	r0, [r4, #16]
 8086980:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8086984:	f019 091f 	ands.w	r9, r9, #31
 8086988:	f104 0114 	add.w	r1, r4, #20
 808698c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8086990:	d014      	beq.n	80869bc <__lshift+0x80>
 8086992:	f1c9 0c20 	rsb	ip, r9, #32
 8086996:	2200      	movs	r2, #0
 8086998:	6808      	ldr	r0, [r1, #0]
 808699a:	469a      	mov	sl, r3
 808699c:	fa00 f009 	lsl.w	r0, r0, r9
 80869a0:	4302      	orrs	r2, r0
 80869a2:	f843 2b04 	str.w	r2, [r3], #4
 80869a6:	f851 2b04 	ldr.w	r2, [r1], #4
 80869aa:	458e      	cmp	lr, r1
 80869ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80869b0:	d8f2      	bhi.n	8086998 <__lshift+0x5c>
 80869b2:	f8ca 2004 	str.w	r2, [sl, #4]
 80869b6:	b142      	cbz	r2, 80869ca <__lshift+0x8e>
 80869b8:	1cb5      	adds	r5, r6, #2
 80869ba:	e006      	b.n	80869ca <__lshift+0x8e>
 80869bc:	3b04      	subs	r3, #4
 80869be:	f851 2b04 	ldr.w	r2, [r1], #4
 80869c2:	458e      	cmp	lr, r1
 80869c4:	f843 2f04 	str.w	r2, [r3, #4]!
 80869c8:	d8f9      	bhi.n	80869be <__lshift+0x82>
 80869ca:	3d01      	subs	r5, #1
 80869cc:	4638      	mov	r0, r7
 80869ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80869d2:	4621      	mov	r1, r4
 80869d4:	f7ff fded 	bl	80865b2 <_Bfree>
 80869d8:	4640      	mov	r0, r8
 80869da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080869de <__mcmp>:
 80869de:	6903      	ldr	r3, [r0, #16]
 80869e0:	690a      	ldr	r2, [r1, #16]
 80869e2:	b510      	push	{r4, lr}
 80869e4:	1a9b      	subs	r3, r3, r2
 80869e6:	d111      	bne.n	8086a0c <__mcmp+0x2e>
 80869e8:	0092      	lsls	r2, r2, #2
 80869ea:	3014      	adds	r0, #20
 80869ec:	3114      	adds	r1, #20
 80869ee:	1883      	adds	r3, r0, r2
 80869f0:	440a      	add	r2, r1
 80869f2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80869f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80869fa:	428c      	cmp	r4, r1
 80869fc:	d002      	beq.n	8086a04 <__mcmp+0x26>
 80869fe:	d307      	bcc.n	8086a10 <__mcmp+0x32>
 8086a00:	2001      	movs	r0, #1
 8086a02:	bd10      	pop	{r4, pc}
 8086a04:	4298      	cmp	r0, r3
 8086a06:	d3f4      	bcc.n	80869f2 <__mcmp+0x14>
 8086a08:	2000      	movs	r0, #0
 8086a0a:	bd10      	pop	{r4, pc}
 8086a0c:	4618      	mov	r0, r3
 8086a0e:	bd10      	pop	{r4, pc}
 8086a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8086a14:	bd10      	pop	{r4, pc}

08086a16 <__mdiff>:
 8086a16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086a1a:	460c      	mov	r4, r1
 8086a1c:	4607      	mov	r7, r0
 8086a1e:	4611      	mov	r1, r2
 8086a20:	4620      	mov	r0, r4
 8086a22:	4615      	mov	r5, r2
 8086a24:	f7ff ffdb 	bl	80869de <__mcmp>
 8086a28:	1e06      	subs	r6, r0, #0
 8086a2a:	d108      	bne.n	8086a3e <__mdiff+0x28>
 8086a2c:	4631      	mov	r1, r6
 8086a2e:	4638      	mov	r0, r7
 8086a30:	f7ff fd8a 	bl	8086548 <_Balloc>
 8086a34:	2301      	movs	r3, #1
 8086a36:	6103      	str	r3, [r0, #16]
 8086a38:	6146      	str	r6, [r0, #20]
 8086a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8086a3e:	bfbc      	itt	lt
 8086a40:	4623      	movlt	r3, r4
 8086a42:	462c      	movlt	r4, r5
 8086a44:	4638      	mov	r0, r7
 8086a46:	6861      	ldr	r1, [r4, #4]
 8086a48:	bfba      	itte	lt
 8086a4a:	461d      	movlt	r5, r3
 8086a4c:	2601      	movlt	r6, #1
 8086a4e:	2600      	movge	r6, #0
 8086a50:	f7ff fd7a 	bl	8086548 <_Balloc>
 8086a54:	692b      	ldr	r3, [r5, #16]
 8086a56:	60c6      	str	r6, [r0, #12]
 8086a58:	6926      	ldr	r6, [r4, #16]
 8086a5a:	f105 0914 	add.w	r9, r5, #20
 8086a5e:	f104 0114 	add.w	r1, r4, #20
 8086a62:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8086a66:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8086a6a:	f100 0514 	add.w	r5, r0, #20
 8086a6e:	f04f 0c00 	mov.w	ip, #0
 8086a72:	f851 2b04 	ldr.w	r2, [r1], #4
 8086a76:	f859 4b04 	ldr.w	r4, [r9], #4
 8086a7a:	b293      	uxth	r3, r2
 8086a7c:	449c      	add	ip, r3
 8086a7e:	b2a3      	uxth	r3, r4
 8086a80:	0c24      	lsrs	r4, r4, #16
 8086a82:	ebc3 030c 	rsb	r3, r3, ip
 8086a86:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8086a8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8086a8e:	b29b      	uxth	r3, r3
 8086a90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8086a94:	45c8      	cmp	r8, r9
 8086a96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8086a9a:	468e      	mov	lr, r1
 8086a9c:	f845 2b04 	str.w	r2, [r5], #4
 8086aa0:	d8e7      	bhi.n	8086a72 <__mdiff+0x5c>
 8086aa2:	45be      	cmp	lr, r7
 8086aa4:	d20e      	bcs.n	8086ac4 <__mdiff+0xae>
 8086aa6:	f85e 1b04 	ldr.w	r1, [lr], #4
 8086aaa:	b28a      	uxth	r2, r1
 8086aac:	4462      	add	r2, ip
 8086aae:	1413      	asrs	r3, r2, #16
 8086ab0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8086ab4:	b292      	uxth	r2, r2
 8086ab6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8086aba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8086abe:	f845 2b04 	str.w	r2, [r5], #4
 8086ac2:	e7ee      	b.n	8086aa2 <__mdiff+0x8c>
 8086ac4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8086ac8:	b90b      	cbnz	r3, 8086ace <__mdiff+0xb8>
 8086aca:	3e01      	subs	r6, #1
 8086acc:	e7fa      	b.n	8086ac4 <__mdiff+0xae>
 8086ace:	6106      	str	r6, [r0, #16]
 8086ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08086ad4 <__ulp>:
 8086ad4:	4b10      	ldr	r3, [pc, #64]	; (8086b18 <__ulp+0x44>)
 8086ad6:	400b      	ands	r3, r1
 8086ad8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8086adc:	2b00      	cmp	r3, #0
 8086ade:	dd02      	ble.n	8086ae6 <__ulp+0x12>
 8086ae0:	2000      	movs	r0, #0
 8086ae2:	4619      	mov	r1, r3
 8086ae4:	4770      	bx	lr
 8086ae6:	425b      	negs	r3, r3
 8086ae8:	151b      	asrs	r3, r3, #20
 8086aea:	2b13      	cmp	r3, #19
 8086aec:	f04f 0000 	mov.w	r0, #0
 8086af0:	f04f 0100 	mov.w	r1, #0
 8086af4:	dc04      	bgt.n	8086b00 <__ulp+0x2c>
 8086af6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8086afa:	fa42 f103 	asr.w	r1, r2, r3
 8086afe:	4770      	bx	lr
 8086b00:	3b14      	subs	r3, #20
 8086b02:	2b1e      	cmp	r3, #30
 8086b04:	f04f 0201 	mov.w	r2, #1
 8086b08:	bfce      	itee	gt
 8086b0a:	4613      	movgt	r3, r2
 8086b0c:	f1c3 031f 	rsble	r3, r3, #31
 8086b10:	fa02 f303 	lslle.w	r3, r2, r3
 8086b14:	4618      	mov	r0, r3
 8086b16:	4770      	bx	lr
 8086b18:	7ff00000 	.word	0x7ff00000

08086b1c <__b2d>:
 8086b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086b1e:	6905      	ldr	r5, [r0, #16]
 8086b20:	f100 0614 	add.w	r6, r0, #20
 8086b24:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8086b28:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8086b2c:	1f2f      	subs	r7, r5, #4
 8086b2e:	4620      	mov	r0, r4
 8086b30:	f7ff fdcf 	bl	80866d2 <__hi0bits>
 8086b34:	f1c0 0320 	rsb	r3, r0, #32
 8086b38:	280a      	cmp	r0, #10
 8086b3a:	600b      	str	r3, [r1, #0]
 8086b3c:	dc14      	bgt.n	8086b68 <__b2d+0x4c>
 8086b3e:	f1c0 0e0b 	rsb	lr, r0, #11
 8086b42:	fa24 f10e 	lsr.w	r1, r4, lr
 8086b46:	42be      	cmp	r6, r7
 8086b48:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8086b4c:	bf34      	ite	cc
 8086b4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8086b52:	2100      	movcs	r1, #0
 8086b54:	3015      	adds	r0, #21
 8086b56:	fa04 f000 	lsl.w	r0, r4, r0
 8086b5a:	fa21 f10e 	lsr.w	r1, r1, lr
 8086b5e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8086b62:	ea40 0201 	orr.w	r2, r0, r1
 8086b66:	e023      	b.n	8086bb0 <__b2d+0x94>
 8086b68:	42be      	cmp	r6, r7
 8086b6a:	bf3a      	itte	cc
 8086b6c:	f1a5 0708 	subcc.w	r7, r5, #8
 8086b70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8086b74:	2100      	movcs	r1, #0
 8086b76:	380b      	subs	r0, #11
 8086b78:	d015      	beq.n	8086ba6 <__b2d+0x8a>
 8086b7a:	4084      	lsls	r4, r0
 8086b7c:	f1c0 0520 	rsb	r5, r0, #32
 8086b80:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8086b84:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8086b88:	42b7      	cmp	r7, r6
 8086b8a:	fa21 fe05 	lsr.w	lr, r1, r5
 8086b8e:	ea44 030e 	orr.w	r3, r4, lr
 8086b92:	bf8c      	ite	hi
 8086b94:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8086b98:	2400      	movls	r4, #0
 8086b9a:	fa01 f000 	lsl.w	r0, r1, r0
 8086b9e:	40ec      	lsrs	r4, r5
 8086ba0:	ea40 0204 	orr.w	r2, r0, r4
 8086ba4:	e004      	b.n	8086bb0 <__b2d+0x94>
 8086ba6:	460a      	mov	r2, r1
 8086ba8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8086bac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8086bb0:	4610      	mov	r0, r2
 8086bb2:	4619      	mov	r1, r3
 8086bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086bb6 <__d2b>:
 8086bb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086bba:	461c      	mov	r4, r3
 8086bbc:	2101      	movs	r1, #1
 8086bbe:	4690      	mov	r8, r2
 8086bc0:	9e08      	ldr	r6, [sp, #32]
 8086bc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8086bc4:	f7ff fcc0 	bl	8086548 <_Balloc>
 8086bc8:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8086bcc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8086bd0:	4607      	mov	r7, r0
 8086bd2:	b10c      	cbz	r4, 8086bd8 <__d2b+0x22>
 8086bd4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8086bd8:	9201      	str	r2, [sp, #4]
 8086bda:	f1b8 0f00 	cmp.w	r8, #0
 8086bde:	d019      	beq.n	8086c14 <__d2b+0x5e>
 8086be0:	a802      	add	r0, sp, #8
 8086be2:	f840 8d08 	str.w	r8, [r0, #-8]!
 8086be6:	f7ff fd94 	bl	8086712 <__lo0bits>
 8086bea:	9b00      	ldr	r3, [sp, #0]
 8086bec:	b148      	cbz	r0, 8086c02 <__d2b+0x4c>
 8086bee:	9a01      	ldr	r2, [sp, #4]
 8086bf0:	f1c0 0120 	rsb	r1, r0, #32
 8086bf4:	fa02 f101 	lsl.w	r1, r2, r1
 8086bf8:	430b      	orrs	r3, r1
 8086bfa:	40c2      	lsrs	r2, r0
 8086bfc:	617b      	str	r3, [r7, #20]
 8086bfe:	9201      	str	r2, [sp, #4]
 8086c00:	e000      	b.n	8086c04 <__d2b+0x4e>
 8086c02:	617b      	str	r3, [r7, #20]
 8086c04:	9b01      	ldr	r3, [sp, #4]
 8086c06:	2b00      	cmp	r3, #0
 8086c08:	bf14      	ite	ne
 8086c0a:	2102      	movne	r1, #2
 8086c0c:	2101      	moveq	r1, #1
 8086c0e:	61bb      	str	r3, [r7, #24]
 8086c10:	6139      	str	r1, [r7, #16]
 8086c12:	e007      	b.n	8086c24 <__d2b+0x6e>
 8086c14:	a801      	add	r0, sp, #4
 8086c16:	f7ff fd7c 	bl	8086712 <__lo0bits>
 8086c1a:	9b01      	ldr	r3, [sp, #4]
 8086c1c:	2101      	movs	r1, #1
 8086c1e:	617b      	str	r3, [r7, #20]
 8086c20:	6139      	str	r1, [r7, #16]
 8086c22:	3020      	adds	r0, #32
 8086c24:	b134      	cbz	r4, 8086c34 <__d2b+0x7e>
 8086c26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8086c2a:	4404      	add	r4, r0
 8086c2c:	6034      	str	r4, [r6, #0]
 8086c2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8086c32:	e009      	b.n	8086c48 <__d2b+0x92>
 8086c34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8086c38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8086c3c:	6030      	str	r0, [r6, #0]
 8086c3e:	6918      	ldr	r0, [r3, #16]
 8086c40:	f7ff fd47 	bl	80866d2 <__hi0bits>
 8086c44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8086c48:	6028      	str	r0, [r5, #0]
 8086c4a:	4638      	mov	r0, r7
 8086c4c:	b002      	add	sp, #8
 8086c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086c52 <__ratio>:
 8086c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086c56:	4688      	mov	r8, r1
 8086c58:	4669      	mov	r1, sp
 8086c5a:	4681      	mov	r9, r0
 8086c5c:	f7ff ff5e 	bl	8086b1c <__b2d>
 8086c60:	460d      	mov	r5, r1
 8086c62:	4604      	mov	r4, r0
 8086c64:	a901      	add	r1, sp, #4
 8086c66:	4640      	mov	r0, r8
 8086c68:	f7ff ff58 	bl	8086b1c <__b2d>
 8086c6c:	460f      	mov	r7, r1
 8086c6e:	4606      	mov	r6, r0
 8086c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8086c74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8086c78:	4620      	mov	r0, r4
 8086c7a:	1a9a      	subs	r2, r3, r2
 8086c7c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8086c80:	1ac9      	subs	r1, r1, r3
 8086c82:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8086c86:	2b00      	cmp	r3, #0
 8086c88:	bfcc      	ite	gt
 8086c8a:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8086c8e:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8086c92:	4632      	mov	r2, r6
 8086c94:	463b      	mov	r3, r7
 8086c96:	4629      	mov	r1, r5
 8086c98:	f7fc ffda 	bl	8083c50 <__aeabi_ddiv>
 8086c9c:	b003      	add	sp, #12
 8086c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08086ca2 <__copybits>:
 8086ca2:	3901      	subs	r1, #1
 8086ca4:	b510      	push	{r4, lr}
 8086ca6:	1149      	asrs	r1, r1, #5
 8086ca8:	6914      	ldr	r4, [r2, #16]
 8086caa:	3101      	adds	r1, #1
 8086cac:	f102 0314 	add.w	r3, r2, #20
 8086cb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8086cb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8086cb8:	42a3      	cmp	r3, r4
 8086cba:	4602      	mov	r2, r0
 8086cbc:	d204      	bcs.n	8086cc8 <__copybits+0x26>
 8086cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8086cc2:	f840 2b04 	str.w	r2, [r0], #4
 8086cc6:	e7f7      	b.n	8086cb8 <__copybits+0x16>
 8086cc8:	2300      	movs	r3, #0
 8086cca:	428a      	cmp	r2, r1
 8086ccc:	d202      	bcs.n	8086cd4 <__copybits+0x32>
 8086cce:	f842 3b04 	str.w	r3, [r2], #4
 8086cd2:	e7fa      	b.n	8086cca <__copybits+0x28>
 8086cd4:	bd10      	pop	{r4, pc}

08086cd6 <__any_on>:
 8086cd6:	f100 0214 	add.w	r2, r0, #20
 8086cda:	6900      	ldr	r0, [r0, #16]
 8086cdc:	114b      	asrs	r3, r1, #5
 8086cde:	4298      	cmp	r0, r3
 8086ce0:	b510      	push	{r4, lr}
 8086ce2:	db0c      	blt.n	8086cfe <__any_on+0x28>
 8086ce4:	dd0c      	ble.n	8086d00 <__any_on+0x2a>
 8086ce6:	f011 011f 	ands.w	r1, r1, #31
 8086cea:	d009      	beq.n	8086d00 <__any_on+0x2a>
 8086cec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8086cf0:	fa24 f001 	lsr.w	r0, r4, r1
 8086cf4:	fa00 f101 	lsl.w	r1, r0, r1
 8086cf8:	428c      	cmp	r4, r1
 8086cfa:	d10c      	bne.n	8086d16 <__any_on+0x40>
 8086cfc:	e000      	b.n	8086d00 <__any_on+0x2a>
 8086cfe:	4603      	mov	r3, r0
 8086d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8086d04:	4293      	cmp	r3, r2
 8086d06:	d904      	bls.n	8086d12 <__any_on+0x3c>
 8086d08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8086d0c:	2900      	cmp	r1, #0
 8086d0e:	d0f9      	beq.n	8086d04 <__any_on+0x2e>
 8086d10:	e001      	b.n	8086d16 <__any_on+0x40>
 8086d12:	2000      	movs	r0, #0
 8086d14:	bd10      	pop	{r4, pc}
 8086d16:	2001      	movs	r0, #1
 8086d18:	bd10      	pop	{r4, pc}

08086d1a <_calloc_r>:
 8086d1a:	b538      	push	{r3, r4, r5, lr}
 8086d1c:	fb02 f401 	mul.w	r4, r2, r1
 8086d20:	4621      	mov	r1, r4
 8086d22:	f7fa fead 	bl	8081a80 <_malloc_r>
 8086d26:	4605      	mov	r5, r0
 8086d28:	b118      	cbz	r0, 8086d32 <_calloc_r+0x18>
 8086d2a:	4622      	mov	r2, r4
 8086d2c:	2100      	movs	r1, #0
 8086d2e:	f7fd fde8 	bl	8084902 <memset>
 8086d32:	4628      	mov	r0, r5
 8086d34:	bd38      	pop	{r3, r4, r5, pc}

08086d36 <__env_lock>:
 8086d36:	4770      	bx	lr

08086d38 <__env_unlock>:
 8086d38:	4770      	bx	lr

08086d3a <link_code_end>:
	...

08086d3c <dynalib_user>:
 8086d3c:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8086d4c:	0000 0000                                   ....

08086d50 <_ZL13releaseNumber>:
 8086d50:	2e31 3030 0000 6556 6272 736f 2065 6f4d     1.00..Verbose Mo
 8086d60:	6564 5320 6174 7472 6465 002e 6f4d 6564     de Started..Mode
 8086d70:	5600 7265 6f62 6573 4d20 646f 2065 6c41     .Verbose Mode Al
 8086d80:	6572 6461 2079 4e4f 002e 0030 6556 6272     ready ON..0.Verb
 8086d90:	736f 2065 6f4d 6564 5320 6f74 7070 6465     ose Mode Stopped
 8086da0:	002e 6556 6272 736f 2065 6f4d 6564 6120     ..Verbose Mode a
 8086db0:	726c 6165 7964 4f20 4646 002e 7254 6e61     lready OFF..Tran
 8086dc0:	6973 6974 6e6f 203a 7325 7420 206f 7325     sition: %s to %s
 8086dd0:	5300 6174 6574 4500 746e 7265 6465 5320     .State.Entered S
 8086de0:	6e65 2064 6255 4469 746f 2073 7566 636e     end UbiDots func
 8086df0:	6974 6e6f 4100 7269 512d 6175 696c 7974     tion.Air-Quality
 8086e00:	482d 6f6f 006b 227b 6f70 6973 6974 6e6f     -Hook.{"position
 8086e10:	3a22 7b20 7622 6c61 6575 3a22 2c31 2220     ": {"value":1, "
 8086e20:	6f63 746e 7865 2274 7b3a 6c22 7461 3a22     context":{"lat":
 8086e30:	2220 6625 2c22 2220 6e6c 2267 203a 2522      "%f", "lng": "%
 8086e40:	2266 7d7d 007d 7361 6573 7473 742d 6172     f"}}}.assest-tra
 8086e50:	6b63 7265 772d 6265 6f68 6b6f 5700 6961     cker-webhook.Wai
 8086e60:	6974 676e 7420 206f 6f63 656d 6f20 6c6e     ting to come onl
 8086e70:	6e69 0065 7453 7461 7375 6100 6363 6c65     ine.Status.accel
 8086e80:	7265 6d6f 7465 7265 6e20 746f 6620 756f     erometer not fou
 8086e90:	646e 4100 656c 7472 7300 6e79 6963 676e     nd.Alert.syncing
 8086ea0:	6320 6f6c 6b63 7200 7065 726f 6974 676e      clock.reporting
 8086eb0:	7320 6174 6574 4700 7465 6974 676e 4720      state.Getting G
 8086ec0:	5350 4620 5849 4700 5350 5320 4154 5554     PS FIX.GPS STATU
 8086ed0:	0053 5047 2053 4f4e 2054 4946 4558 0044     S.GPS NOT FIXED.
 8086ee0:	6144 6174 5320 6e65 2074 202f 6552 7073     Data Sent / Resp
 8086ef0:	6e6f 6573 5220 6365 6965 6576 0064 6552     onse Received.Re
 8086f00:	6573 7474 6e69 2067 6e69 3320 2030 6573     setting in 30 se
 8086f10:	6f63 646e 0073 7245 6f72 0072 6f57 656b     conds.Error.Woke
 8086f20:	5055 4e00 206f 6144 6174 5500 6962 6f64     UP.No Data.Ubido
 8086f30:	7374 4820 6f6f 006b 7053 6565 0064 6554     ts Hook.Speed.Te
 8086f40:	706d 7265 7461 7275 0065 6552 656c 7361     mperature.Releas
 8086f50:	0065 6953 6e67 6c61 4200 7461 6574 7972     e.Signal.Battery
 8086f60:	4300 756f 646c 276e 2074 6966 646e 5320     .Couldn't find S
 8086f70:	5448 3133 2400 5047 4747 0041 4724 474e     HT31.$GPGGA.$GNG
 8086f80:	4147 2400 5047 4d52 0043 4724 524e 434d     GA.$GPRMC.$GNRMC
 8086f90:	2400 4d50 4b54 3831 2c35 2a30 3232 2400     .$PMTK185,0*22.$
 8086fa0:	4d50 4b54 3030 2c31 3831 2c35 2a33 4333     PMTK001,185,3*3C
 8086fb0:	2400 4d50 4b54 3831 2c35 2a31 3332 2400     .$PMTK185,1*23.$
 8086fc0:	4d50 4b54 3831 2a33 3833 2400 4d50 4b54     PMTK183*38.$PMTK
 8086fd0:	4f4c 0047 5024 544d 314b 3136 302c 322a     LOG.$PMTK161,0*2
 8086fe0:	0038 5024 544d 304b 3031 302c 3230 322a     8.$PMTK010,002*2
 8086ff0:	0044 494c 3353 4844 0000 0000               D.LIS3DH....

08086ffc <_ZTV15Adafruit_LIS3DH>:
	...
 8087004:	0deb 0808 0e25 0808 0de9 0808 1323 0808     ....%.......#...
 8087014:	0ded 0808 6625 252c 0066 5024 544d 334b     ....%f,%f.$PMTK3
 8087024:	3431 302c 312c 302c 312c 302c 302c 302c     14,0,1,0,1,0,0,0
 8087034:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
 8087044:	302c 302c 302c 302c 322a 0038 5024 544d     ,0,0,0,0*28.$PMT
 8087054:	324b 3032 312c 3030 2a30 4631 2400 4750     K220,1000*1F.$PG
 8087064:	4d43 2c44 3333 302c 362a 0044               CMD,33,0*6D.

08087070 <_ZTVN5spark13CellularClassE>:
	...
 8087078:	1b71 0808 1b67 0808 1b5d 0808 1acf 0808     q...g...].......
 8087088:	1b51 0808 1b45 0808 1b39 0808 1b31 0808     Q...E...9...1...
 8087098:	1b27 0808 1b1d 0808 1ad9 0808               '...........

080870a4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80870ac:	1bad 0808 1bb3 0808 1c09 0808 1bc1 0808     ................
 80870bc:	1baf 0808                                   ....

080870c0 <_ZTV7TwoWire>:
	...
 80870c8:	21bb 0808 2205 0808 21dd 0808 21bd 0808     .!..."...!...!..
 80870d8:	21e5 0808 21ed 0808 21f5 0808 21fd 0808     .!...!...!...!..

080870e8 <_ZTV9IPAddress>:
	...
 80870f0:	22ff 0808 22ef 0808 22f1 0808 6162 6475     ."..."..."..baud
 8087100:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8087110:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8087120:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8087130:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8087140:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8087150:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8087160:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8087170:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8087180:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 8087190:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80871a0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80871b0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80871c0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80871d0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080871e0 <_ZTVN5spark12NetworkClassE>:
	...
 80871e8:	23a5 0808 23af 0808 23b9 0808 23c3 0808     .#...#...#...#..
 80871f8:	23cd 0808 23d9 0808 23e5 0808 23f1 0808     .#...#...#...#..
 8087208:	23f9 0808 2403 0808 240d 0808               .#...$...$..

08087214 <_ZTV8SPIClass>:
	...
 808721c:	2551 0808 2569 0808                         Q%..i%..

08087224 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8087224:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
 8087234:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8087244:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08087254 <_ZTV11USARTSerial>:
	...
 808725c:	2a01 0808 2a51 0808 2a5f 0808 246d 0808     .*..Q*.._*..m$..
 808726c:	2a15 0808 2a37 0808 2a23 0808 2a4b 0808     .*..7*..#*..K*..
 808727c:	2a03 0808 2a07 0808                         .*...*..

08087284 <_ZTV9USBSerial>:
	...
 808728c:	2b15 0808 2b65 0808 2b73 0808 246d 0808     .+..e+..s+..m$..
 808729c:	2b51 0808 2b17 0808 2b2d 0808 2b5f 0808     Q+...+..-+.._+..
 80872ac:	2b43 0808 2b11 0808                         C+...+..

080872b4 <_ZSt7nothrow>:
 80872b4:	0000 0000 6d66 646f 0000 0000               ....fmod....

080872c0 <Zero>:
	...
 80872cc:	0000 8000                                   ....

080872d0 <_ctype_>:
 80872d0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80872e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80872f0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8087300:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8087310:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8087320:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8087330:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8087340:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8087350:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080873d4 <__sf_fake_stdin>:
	...

080873f4 <__sf_fake_stdout>:
	...

08087414 <__sf_fake_stderr>:
	...
 8087434:	4f50 4953 0058 0000                         POSIX...

0808743c <__month_lengths>:
 808743c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808744c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808745c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808746c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808747c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808748c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

0808749c <fpi.5342>:
 808749c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80874ac:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080874bc <fpinan.5378>:
 80874bc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80874cc:	0000 0000                                   ....

080874d0 <tinytens>:
 80874d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80874e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80874f0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 8087500:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 8087510:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 8087520:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 8087530:	2575 006e 0000 0000                         u%n.....

08087538 <__mprec_tens>:
 8087538:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8087548:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8087558:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8087568:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8087578:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8087588:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8087598:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80875a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80875b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80875c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80875d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80875e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80875f8:	9db4 79d9 7843 44ea                         ...yCx.D

08087600 <__mprec_bigtens>:
 8087600:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8087610:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8087620:	bf3c 7f73 4fdd 7515                         <.s..O.u

08087628 <p05.5385>:
 8087628:	0005 0000 0019 0000 007d 0000               ........}...

08087634 <link_const_variable_data_end>:
 8087634:	080805e1 	.word	0x080805e1
 8087638:	08080de5 	.word	0x08080de5
 808763c:	08081357 	.word	0x08081357
 8087640:	08081495 	.word	0x08081495
 8087644:	08081531 	.word	0x08081531
 8087648:	08081b7d 	.word	0x08081b7d
 808764c:	08082395 	.word	0x08082395
 8087650:	08082459 	.word	0x08082459
 8087654:	08082535 	.word	0x08082535
 8087658:	080828d5 	.word	0x080828d5
 808765c:	080829ed 	.word	0x080829ed
 8087660:	08083041 	.word	0x08083041
 8087664:	080830f9 	.word	0x080830f9
 8087668:	080831bd 	.word	0x080831bd
 808766c:	08083241 	.word	0x08083241
 8087670:	080832c5 	.word	0x080832c5

08087674 <link_constructors_end>:
	...
