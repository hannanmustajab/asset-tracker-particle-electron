
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/AssestTracker/Asset-Tracker/target/1.5.0/electron/Asset-Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000076c0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080876e0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000023c  20000000  080876e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000080c  2000023c  2000023c  0004023c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08087920  08087920  00037920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08087948  08087948  00037948  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cca01  00000000  00000000  0003794c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013349  00000000  00000000  0010434d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016497  00000000  00000000  00117696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e0  00000000  00000000  0012db2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038b8  00000000  00000000  0012ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029ec6  00000000  00000000  001337c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f35a  00000000  00000000  0015d68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000acb7e  00000000  00000000  0018c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cf50  00000000  00000000  00239564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fca3 	bl	808497c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fca8 	bl	8084992 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080876e4 	.word	0x080876e4
 8080050:	2000023c 	.word	0x2000023c
 8080054:	2000023c 	.word	0x2000023c
 8080058:	20000a48 	.word	0x20000a48
 808005c:	20000a48 	.word	0x20000a48

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f002 ff37 	bl	8082ed4 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808769c 	.word	0x0808769c
 8080088:	080876dc 	.word	0x080876dc

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 ba16 	b.w	80804bc <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f8cb 	bl	808022c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 bedd 	b.w	8082e58 <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bd07 	b.w	8081ab0 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bd0d 	b.w	8081ac0 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800b8:	4605      	mov	r5, r0
 80800ba:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800be:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800c0:	f88d 3000 	strb.w	r3, [sp]
 80800c4:	233c      	movs	r3, #60	; 0x3c
 80800c6:	f001 ff1b 	bl	8081f00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80800ca:	4628      	mov	r0, r5
 80800cc:	b003      	add	sp, #12
 80800ce:	bd30      	pop	{r4, r5, pc}

080800d0 <_Z20PublishDelayFunctionv>:
  }

}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
 80800d0:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80800d2:	f001 faaf 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
 80800d6:	4c06      	ldr	r4, [pc, #24]	; (80800f0 <_Z20PublishDelayFunctionv+0x20>)
 80800d8:	6823      	ldr	r3, [r4, #0]
 80800da:	1ac0      	subs	r0, r0, r3
 80800dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80800e0:	d904      	bls.n	80800ec <_Z20PublishDelayFunctionv+0x1c>
 80800e2:	f001 faa7 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
 80800e6:	6020      	str	r0, [r4, #0]
 80800e8:	2001      	movs	r0, #1
 80800ea:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
 80800ec:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
 80800ee:	bd10      	pop	{r4, pc}
 80800f0:	20000260 	.word	0x20000260

080800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80800f4:	b508      	push	{r3, lr}
      
    }
    inTransit = false;    
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
 80800f6:	f7ff ffeb 	bl	80800d0 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80800fa:	b118      	cbz	r0, 8080104 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80800fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080100:	f7ff bfe6 	b.w	80800d0 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8080104:	f001 fc54 	bl	80819b0 <spark_process>
 8080108:	e7f5      	b.n	80800f6 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50+0x2>

0808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808010a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808010c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808010e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080110:	b17c      	cbz	r4, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080112:	6863      	ldr	r3, [r4, #4]
 8080114:	3b01      	subs	r3, #1
 8080116:	6063      	str	r3, [r4, #4]
 8080118:	b95b      	cbnz	r3, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808011a:	6823      	ldr	r3, [r4, #0]
 808011c:	4620      	mov	r0, r4
 808011e:	689b      	ldr	r3, [r3, #8]
 8080120:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080122:	68a3      	ldr	r3, [r4, #8]
 8080124:	3b01      	subs	r3, #1
 8080126:	60a3      	str	r3, [r4, #8]
 8080128:	b91b      	cbnz	r3, 8080132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808012a:	6823      	ldr	r3, [r4, #0]
 808012c:	4620      	mov	r0, r4
 808012e:	68db      	ldr	r3, [r3, #12]
 8080130:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080132:	4628      	mov	r0, r5
 8080134:	bd38      	pop	{r3, r4, r5, pc}
	...

08080138 <_Z15transitionStatev>:
    return 0;
  }
  else return 0;
}

void transitionState(void) {                                                      // This function publishes change of state.
 8080138:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
 808013a:	4d12      	ldr	r5, [pc, #72]	; (8080184 <_Z15transitionStatev+0x4c>)
    return 0;
  }
  else return 0;
}

void transitionState(void) {                                                      // This function publishes change of state.
 808013c:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
 808013e:	f7ff ffd9 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
 8080142:	4911      	ldr	r1, [pc, #68]	; (8080188 <_Z15transitionStatev+0x50>)
 8080144:	782a      	ldrb	r2, [r5, #0]
 8080146:	232c      	movs	r3, #44	; 0x2c
 8080148:	fb03 1202 	mla	r2, r3, r2, r1
 808014c:	4c0f      	ldr	r4, [pc, #60]	; (808018c <_Z15transitionStatev+0x54>)
 808014e:	9200      	str	r2, [sp, #0]
 8080150:	7820      	ldrb	r0, [r4, #0]
 8080152:	4a0f      	ldr	r2, [pc, #60]	; (8080190 <_Z15transitionStatev+0x58>)
 8080154:	fb03 1300 	mla	r3, r3, r0, r1
 8080158:	2140      	movs	r1, #64	; 0x40
 808015a:	a804      	add	r0, sp, #16
 808015c:	f001 fcc8 	bl	8081af0 <snprintf>
  oldState = state;
 8080160:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("State", stateTransitionString, PRIVATE);
 8080162:	2200      	movs	r2, #0

void transitionState(void) {                                                      // This function publishes change of state.
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
  oldState = state;
 8080164:	7023      	strb	r3, [r4, #0]
 8080166:	4b0b      	ldr	r3, [pc, #44]	; (8080194 <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
 8080168:	490b      	ldr	r1, [pc, #44]	; (8080198 <_Z15transitionStatev+0x60>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808016a:	781b      	ldrb	r3, [r3, #0]
 808016c:	a802      	add	r0, sp, #8
 808016e:	f88d 2000 	strb.w	r2, [sp]
 8080172:	aa04      	add	r2, sp, #16
 8080174:	f7ff ff9f 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080178:	a803      	add	r0, sp, #12
 808017a:	f7ff ffc6 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808017e:	b015      	add	sp, #84	; 0x54
 8080180:	bd30      	pop	{r4, r5, pc}
 8080182:	bf00      	nop
 8080184:	20000274 	.word	0x20000274
 8080188:	20000008 	.word	0x20000008
 808018c:	20000240 	.word	0x20000240
 8080190:	08086e4c 	.word	0x08086e4c
 8080194:	2000027c 	.word	0x2000027c
 8080198:	08086e61 	.word	0x08086e61

0808019c <_Z11sendUBIDotsv>:


void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
 808019c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808019e:	4d1c      	ldr	r5, [pc, #112]	; (8080210 <_Z11sendUBIDotsv+0x74>)
 80801a0:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80801a4:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80801a6:	782b      	ldrb	r3, [r5, #0]
  
  char data[512];
  Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);
 80801a8:	4a1a      	ldr	r2, [pc, #104]	; (8080214 <_Z11sendUBIDotsv+0x78>)
 80801aa:	491b      	ldr	r1, [pc, #108]	; (8080218 <_Z11sendUBIDotsv+0x7c>)
 80801ac:	a806      	add	r0, sp, #24
  snprintf(data, sizeof(data), "{\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", t.readLat(), t.readLon());
 80801ae:	4e1b      	ldr	r6, [pc, #108]	; (808021c <_Z11sendUBIDotsv+0x80>)

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
  
  char data[512];
  Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);
 80801b0:	f88d 4000 	strb.w	r4, [sp]
 80801b4:	f7ff ff7f 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 80801b8:	a807      	add	r0, sp, #28
 80801ba:	f7ff ffa6 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  snprintf(data, sizeof(data), "{\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", t.readLat(), t.readLon());
 80801be:	4630      	mov	r0, r6
 80801c0:	f001 f892 	bl	80812e8 <_ZN12AssetTracker7readLatEv>
 80801c4:	4607      	mov	r7, r0
 80801c6:	4630      	mov	r0, r6
 80801c8:	f001 f894 	bl	80812f4 <_ZN12AssetTracker7readLonEv>
 80801cc:	f003 fc0a 	bl	80839e4 <__aeabi_f2d>
 80801d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80801d4:	4638      	mov	r0, r7
 80801d6:	f003 fc05 	bl	80839e4 <__aeabi_f2d>
 80801da:	4a11      	ldr	r2, [pc, #68]	; (8080220 <_Z11sendUBIDotsv+0x84>)
 80801dc:	e9cd 0100 	strd	r0, r1, [sp]
 80801e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80801e4:	a806      	add	r0, sp, #24
 80801e6:	f001 fc83 	bl	8081af0 <snprintf>
 80801ea:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("assest-tracker-webhook", data, PRIVATE);
 80801ec:	aa06      	add	r2, sp, #24
 80801ee:	490d      	ldr	r1, [pc, #52]	; (8080224 <_Z11sendUBIDotsv+0x88>)
 80801f0:	a804      	add	r0, sp, #16
 80801f2:	f88d 4000 	strb.w	r4, [sp]
 80801f6:	f7ff ff5e 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 80801fa:	a805      	add	r0, sp, #20
 80801fc:	f7ff ff85 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(PublishDelayFunction);                                  // Space out the sends
 8080200:	f7ff ff78 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
  inTransit = true;
 8080204:	4b08      	ldr	r3, [pc, #32]	; (8080228 <_Z11sendUBIDotsv+0x8c>)
 8080206:	2201      	movs	r2, #1
 8080208:	701a      	strb	r2, [r3, #0]
}
 808020a:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 808020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080210:	2000027c 	.word	0x2000027c
 8080214:	08086e67 	.word	0x08086e67
 8080218:	08086e85 	.word	0x08086e85
 808021c:	200002a0 	.word	0x200002a0
 8080220:	08086e96 	.word	0x08086e96
 8080224:	08086ed6 	.word	0x08086ed6
 8080228:	2000025c 	.word	0x2000025c

0808022c <loop>:
  }
  t.gpsOn();
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
}

void loop() {
 808022c:	b530      	push	{r4, r5, lr}

  switch (state)  {                                                                // In the main loop, all code execution must take place in a defined state
 808022e:	4c89      	ldr	r4, [pc, #548]	; (8080454 <loop+0x228>)
  }
  t.gpsOn();
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
}

void loop() {
 8080230:	b08d      	sub	sp, #52	; 0x34

  switch (state)  {                                                                // In the main loop, all code execution must take place in a defined state
 8080232:	7823      	ldrb	r3, [r4, #0]
 8080234:	3b01      	subs	r3, #1
 8080236:	2b05      	cmp	r3, #5
 8080238:	f200 810a 	bhi.w	8080450 <loop+0x224>
 808023c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080240:	00300006 	.word	0x00300006
 8080244:	00810066 	.word	0x00810066
 8080248:	00cb00a3 	.word	0x00cb00a3
    
    case ONLINE_WAIT_STATE:
      
      if (verboseMode && oldState != state) transitionState();
 808024c:	4b82      	ldr	r3, [pc, #520]	; (8080458 <loop+0x22c>)
 808024e:	781a      	ldrb	r2, [r3, #0]
 8080250:	461d      	mov	r5, r3
 8080252:	b12a      	cbz	r2, 8080260 <loop+0x34>
 8080254:	4b81      	ldr	r3, [pc, #516]	; (808045c <loop+0x230>)
 8080256:	781b      	ldrb	r3, [r3, #0]
 8080258:	2b01      	cmp	r3, #1
 808025a:	d001      	beq.n	8080260 <loop+0x34>
 808025c:	f7ff ff6c 	bl	8080138 <_Z15transitionStatev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080260:	f001 fbae 	bl	80819c0 <spark_cloud_flag_connected>

      if (Particle.connected()) 
 8080264:	b108      	cbz	r0, 808026a <loop+0x3e>
      {
			state = TEMPERATURE_SENSING;
 8080266:	2302      	movs	r3, #2
 8080268:	7023      	strb	r3, [r4, #0]
 808026a:	f001 f9e3 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
		  }
		  if (millis() - stateTime > 5000) {
 808026e:	4c7c      	ldr	r4, [pc, #496]	; (8080460 <loop+0x234>)
 8080270:	6823      	ldr	r3, [r4, #0]
 8080272:	1ac0      	subs	r0, r0, r3
 8080274:	f241 3388 	movw	r3, #5000	; 0x1388
 8080278:	4298      	cmp	r0, r3
 808027a:	f240 80e9 	bls.w	8080450 <loop+0x224>
 808027e:	f001 f9d9 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
			  stateTime = millis();
 8080282:	6020      	str	r0, [r4, #0]
        waitUntil(PublishDelayFunction);
 8080284:	f7ff ff36 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
        if (verboseMode) Particle.publish("Status","Waiting to come online",PRIVATE);
 8080288:	782b      	ldrb	r3, [r5, #0]
 808028a:	2b00      	cmp	r3, #0
 808028c:	f000 80e0 	beq.w	8080450 <loop+0x224>
 8080290:	4b74      	ldr	r3, [pc, #464]	; (8080464 <loop+0x238>)
 8080292:	2200      	movs	r2, #0
 8080294:	781b      	ldrb	r3, [r3, #0]
 8080296:	4974      	ldr	r1, [pc, #464]	; (8080468 <loop+0x23c>)
 8080298:	f88d 2000 	strb.w	r2, [sp]
 808029c:	4a73      	ldr	r2, [pc, #460]	; (808046c <loop+0x240>)
 808029e:	e06b      	b.n	8080378 <loop+0x14c>

    break;

    case TEMPERATURE_SENSING:
      
      if (verboseMode && oldState != state) transitionState(); 
 80802a0:	4b6d      	ldr	r3, [pc, #436]	; (8080458 <loop+0x22c>)
 80802a2:	781b      	ldrb	r3, [r3, #0]
 80802a4:	b12b      	cbz	r3, 80802b2 <loop+0x86>
 80802a6:	4b6d      	ldr	r3, [pc, #436]	; (808045c <loop+0x230>)
 80802a8:	781b      	ldrb	r3, [r3, #0]
 80802aa:	2b02      	cmp	r3, #2
 80802ac:	d001      	beq.n	80802b2 <loop+0x86>
 80802ae:	f7ff ff43 	bl	8080138 <_Z15transitionStatev>
      t.updateGPS();
 80802b2:	486f      	ldr	r0, [pc, #444]	; (8080470 <loop+0x244>)
 80802b4:	f001 f87c 	bl	80813b0 <_ZN12AssetTracker9updateGPSEv>
      TemperatureInC = sht31.readTemperature();
 80802b8:	486e      	ldr	r0, [pc, #440]	; (8080474 <loop+0x248>)
 80802ba:	f001 f975 	bl	80815a8 <_ZN14Adafruit_SHT3115readTemperatureEv>
 80802be:	4b6e      	ldr	r3, [pc, #440]	; (8080478 <loop+0x24c>)
 80802c0:	6018      	str	r0, [r3, #0]
      if (temperatureInC > temperatureThresholdValue){
 80802c2:	4b6e      	ldr	r3, [pc, #440]	; (808047c <loop+0x250>)
 80802c4:	6819      	ldr	r1, [r3, #0]
 80802c6:	4b6e      	ldr	r3, [pc, #440]	; (8080480 <loop+0x254>)
 80802c8:	6818      	ldr	r0, [r3, #0]
 80802ca:	f004 f9f1 	bl	80846b0 <__aeabi_fcmpgt>
 80802ce:	b178      	cbz	r0, 80802f0 <loop+0xc4>
        waitUntil(PublishDelayFunction);
 80802d0:	f7ff ff10 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 80802d4:	4b63      	ldr	r3, [pc, #396]	; (8080464 <loop+0x238>)
        Particle.publish("Alert","Temperature Above Threshold",PRIVATE);
 80802d6:	2200      	movs	r2, #0
 80802d8:	781b      	ldrb	r3, [r3, #0]
 80802da:	a808      	add	r0, sp, #32
 80802dc:	f88d 2000 	strb.w	r2, [sp]
 80802e0:	4968      	ldr	r1, [pc, #416]	; (8080484 <loop+0x258>)
 80802e2:	4a69      	ldr	r2, [pc, #420]	; (8080488 <loop+0x25c>)
 80802e4:	f7ff fee7 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 80802e8:	a809      	add	r0, sp, #36	; 0x24
 80802ea:	f7ff ff0e 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80802ee:	e0ad      	b.n	808044c <loop+0x220>
        state = REPORTING_STATE;
        break;
      }

      if (!t.setupLowPowerWakeMode(movementThreshold)) {
 80802f0:	2110      	movs	r1, #16
 80802f2:	485f      	ldr	r0, [pc, #380]	; (8080470 <loop+0x244>)
 80802f4:	f001 f876 	bl	80813e4 <_ZN12AssetTracker21setupLowPowerWakeModeEh>
 80802f8:	2800      	cmp	r0, #0
 80802fa:	f040 80a9 	bne.w	8080450 <loop+0x224>
			Serial.println("accelerometer not found");
 80802fe:	f002 fcbb 	bl	8082c78 <_Z16_fetch_usbserialv>
 8080302:	4962      	ldr	r1, [pc, #392]	; (808048c <loop+0x260>)
 8080304:	f002 f92f 	bl	8082566 <_ZN5Print7printlnEPKc>
			state = NAPPING_STATE;
 8080308:	2306      	movs	r3, #6
 808030a:	e0a0      	b.n	808044e <loop+0x222>

    break;


    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();  
 808030c:	4b52      	ldr	r3, [pc, #328]	; (8080458 <loop+0x22c>)
 808030e:	781b      	ldrb	r3, [r3, #0]
 8080310:	b12b      	cbz	r3, 808031e <loop+0xf2>
 8080312:	4b52      	ldr	r3, [pc, #328]	; (808045c <loop+0x230>)
 8080314:	781b      	ldrb	r3, [r3, #0]
 8080316:	2b03      	cmp	r3, #3
 8080318:	d001      	beq.n	808031e <loop+0xf2>
 808031a:	f7ff ff0d 	bl	8080138 <_Z15transitionStatev>
      
      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON.  
 808031e:	f002 fba3 	bl	8082a68 <_ZN9TimeClass4hourEv>
 8080322:	280c      	cmp	r0, #12
 8080324:	d105      	bne.n	8080332 <loop+0x106>
 8080326:	f001 fb4b 	bl	80819c0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 808032a:	b110      	cbz	r0, 8080332 <loop+0x106>
            return false;
        }
        return spark_sync_time(NULL);
 808032c:	2000      	movs	r0, #0
 808032e:	f001 fb57 	bl	80819e0 <spark_sync_time>
      if (t.gpsFix()) sendUBIDots();
 8080332:	484f      	ldr	r0, [pc, #316]	; (8080470 <loop+0x244>)
 8080334:	f001 f826 	bl	8081384 <_ZN12AssetTracker6gpsFixEv>
 8080338:	b108      	cbz	r0, 808033e <loop+0x112>
 808033a:	f7ff ff2f 	bl	808019c <_Z11sendUBIDotsv>
      
      state = RESPONSE_WAIT;
 808033e:	2304      	movs	r3, #4
 8080340:	e085      	b.n	808044e <loop+0x222>
    break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();   
 8080342:	4b45      	ldr	r3, [pc, #276]	; (8080458 <loop+0x22c>)
 8080344:	781a      	ldrb	r2, [r3, #0]
 8080346:	461d      	mov	r5, r3
 8080348:	b12a      	cbz	r2, 8080356 <loop+0x12a>
 808034a:	4b44      	ldr	r3, [pc, #272]	; (808045c <loop+0x230>)
 808034c:	781b      	ldrb	r3, [r3, #0]
 808034e:	2b04      	cmp	r3, #4
 8080350:	d001      	beq.n	8080356 <loop+0x12a>
 8080352:	f7ff fef1 	bl	8080138 <_Z15transitionStatev>
      if (!inTransit) {
 8080356:	4b4e      	ldr	r3, [pc, #312]	; (8080490 <loop+0x264>)
 8080358:	781b      	ldrb	r3, [r3, #0]
 808035a:	2b00      	cmp	r3, #0
 808035c:	d178      	bne.n	8080450 <loop+0x224>
        state = NAPPING_STATE;                                                       // This checks for the response from UBIDOTS. 
 808035e:	2306      	movs	r3, #6
 8080360:	7023      	strb	r3, [r4, #0]
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
 8080362:	782c      	ldrb	r4, [r5, #0]
 8080364:	2c00      	cmp	r4, #0
 8080366:	d173      	bne.n	8080450 <loop+0x224>
          waitUntil(PublishDelayFunction);
 8080368:	f7ff fec4 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 808036c:	4b3d      	ldr	r3, [pc, #244]	; (8080464 <loop+0x238>)
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
 808036e:	4a49      	ldr	r2, [pc, #292]	; (8080494 <loop+0x268>)
 8080370:	4949      	ldr	r1, [pc, #292]	; (8080498 <loop+0x26c>)
 8080372:	781b      	ldrb	r3, [r3, #0]
 8080374:	f88d 4000 	strb.w	r4, [sp]
 8080378:	a808      	add	r0, sp, #32
 808037a:	f7ff fe9c 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 808037e:	a809      	add	r0, sp, #36	; 0x24
 8080380:	f7ff fec3 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080384:	e064      	b.n	8080450 <loop+0x224>
        }
      }   
    break;

    case ERROR_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
 8080386:	4b34      	ldr	r3, [pc, #208]	; (8080458 <loop+0x22c>)
 8080388:	781b      	ldrb	r3, [r3, #0]
 808038a:	b12b      	cbz	r3, 8080398 <loop+0x16c>
 808038c:	4b33      	ldr	r3, [pc, #204]	; (808045c <loop+0x230>)
 808038e:	781b      	ldrb	r3, [r3, #0]
 8080390:	2b05      	cmp	r3, #5
 8080392:	d001      	beq.n	8080398 <loop+0x16c>
 8080394:	f7ff fed0 	bl	8080138 <_Z15transitionStatev>
 8080398:	f001 f94c 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
 808039c:	4b3f      	ldr	r3, [pc, #252]	; (808049c <loop+0x270>)
 808039e:	681b      	ldr	r3, [r3, #0]
 80803a0:	1ac0      	subs	r0, r0, r3
 80803a2:	f247 532f 	movw	r3, #29999	; 0x752f
 80803a6:	4298      	cmp	r0, r3
 80803a8:	d952      	bls.n	8080450 <loop+0x224>
        waitUntil(PublishDelayFunction);
 80803aa:	f7ff fea3 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
 80803ae:	4b2d      	ldr	r3, [pc, #180]	; (8080464 <loop+0x238>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
 80803b0:	2200      	movs	r2, #0
 80803b2:	781b      	ldrb	r3, [r3, #0]
 80803b4:	493a      	ldr	r1, [pc, #232]	; (80804a0 <loop+0x274>)
 80803b6:	f88d 2000 	strb.w	r2, [sp]
 80803ba:	a808      	add	r0, sp, #32
 80803bc:	4a39      	ldr	r2, [pc, #228]	; (80804a4 <loop+0x278>)
 80803be:	f7ff fe7a 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 80803c2:	a809      	add	r0, sp, #36	; 0x24
 80803c4:	f7ff fea1 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
 80803c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80803cc:	f001 fbb0 	bl	8081b30 <delay>
        System.reset();
 80803d0:	f002 fa75 	bl	80828be <_ZN11SystemClass5resetEv>
 80803d4:	e03c      	b.n	8080450 <loop+0x224>
      
    break;

    case NAPPING_STATE:
      
      if (verboseMode && oldState != state) transitionState();     
 80803d6:	4b20      	ldr	r3, [pc, #128]	; (8080458 <loop+0x22c>)
 80803d8:	781b      	ldrb	r3, [r3, #0]
 80803da:	b12b      	cbz	r3, 80803e8 <loop+0x1bc>
 80803dc:	4b1f      	ldr	r3, [pc, #124]	; (808045c <loop+0x230>)
 80803de:	781b      	ldrb	r3, [r3, #0]
 80803e0:	2b06      	cmp	r3, #6
 80803e2:	d001      	beq.n	80803e8 <loop+0x1bc>
 80803e4:	f7ff fea8 	bl	8080138 <_Z15transitionStatev>
 80803e8:	4b2f      	ldr	r3, [pc, #188]	; (80804a8 <loop+0x27c>)
 80803ea:	2211      	movs	r2, #17
 80803ec:	681b      	ldr	r3, [r3, #0]
 80803ee:	f8ad 2016 	strh.w	r2, [sp, #22]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 80803f2:	9302      	str	r3, [sp, #8]
 80803f4:	2201      	movs	r2, #1
 80803f6:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 80803fa:	e88d 000c 	stmia.w	sp, {r2, r3}
 80803fe:	f10d 0116 	add.w	r1, sp, #22
 8080402:	f10d 0315 	add.w	r3, sp, #21
 8080406:	a808      	add	r0, sp, #32
 8080408:	f88d 2015 	strb.w	r2, [sp, #21]
 808040c:	f002 fa72 	bl	80828f4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
      System.sleep(WKP, RISING, TIME_PUBLISH_BATTERY_SEC, SLEEP_NETWORK_STANDBY);
		  awake = ((t.clearAccelInterrupt() & LIS3DH_INT1_SRC_IA) != 0);
 8080410:	4817      	ldr	r0, [pc, #92]	; (8080470 <loop+0x244>)
 8080412:	f000 ffed 	bl	80813f0 <_ZN12AssetTracker19clearAccelInterruptEv>
 8080416:	4d25      	ldr	r5, [pc, #148]	; (80804ac <loop+0x280>)
 8080418:	f3c0 1080 	ubfx	r0, r0, #6, #1
 808041c:	6028      	str	r0, [r5, #0]
      waitUntil(PublishDelayFunction);
 808041e:	f7ff fe69 	bl	80800f4 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.50>
		  Particle.publish("WokeUP",String(awake),PRIVATE);
 8080422:	220a      	movs	r2, #10
 8080424:	6829      	ldr	r1, [r5, #0]
 8080426:	a808      	add	r0, sp, #32
 8080428:	f002 f9ec 	bl	8082804 <_ZN6StringC1Eih>
 808042c:	4b0d      	ldr	r3, [pc, #52]	; (8080464 <loop+0x238>)
 808042e:	2200      	movs	r2, #0
 8080430:	781b      	ldrb	r3, [r3, #0]
 8080432:	491f      	ldr	r1, [pc, #124]	; (80804b0 <loop+0x284>)
 8080434:	f88d 2000 	strb.w	r2, [sp]
 8080438:	a806      	add	r0, sp, #24
 808043a:	9a08      	ldr	r2, [sp, #32]
 808043c:	f7ff fe3b 	bl	80800b6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.62.constprop.64>
 8080440:	a807      	add	r0, sp, #28
 8080442:	f7ff fe62 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080446:	a808      	add	r0, sp, #32
 8080448:	f002 f984 	bl	8082754 <_ZN6StringD1Ev>
      state = REPORTING_STATE;
 808044c:	2303      	movs	r3, #3
 808044e:	7023      	strb	r3, [r4, #0]

    break;

  }

}
 8080450:	b00d      	add	sp, #52	; 0x34
 8080452:	bd30      	pop	{r4, r5, pc}
 8080454:	20000274 	.word	0x20000274
 8080458:	20000000 	.word	0x20000000
 808045c:	20000240 	.word	0x20000240
 8080460:	200002b0 	.word	0x200002b0
 8080464:	2000027c 	.word	0x2000027c
 8080468:	08086f04 	.word	0x08086f04
 808046c:	08086eed 	.word	0x08086eed
 8080470:	200002a0 	.word	0x200002a0
 8080474:	200002a4 	.word	0x200002a4
 8080478:	20000254 	.word	0x20000254
 808047c:	20000004 	.word	0x20000004
 8080480:	20000278 	.word	0x20000278
 8080484:	08086f27 	.word	0x08086f27
 8080488:	08086f0b 	.word	0x08086f0b
 808048c:	08086f2d 	.word	0x08086f2d
 8080490:	2000025c 	.word	0x2000025c
 8080494:	08086f45 	.word	0x08086f45
 8080498:	08086e61 	.word	0x08086e61
 808049c:	20000258 	.word	0x20000258
 80804a0:	08086f7b 	.word	0x08086f7b
 80804a4:	08086f63 	.word	0x08086f63
 80804a8:	20000284 	.word	0x20000284
 80804ac:	20000280 	.word	0x20000280
 80804b0:	08086f81 	.word	0x08086f81

080804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80804b4:	2300      	movs	r3, #0
 80804b6:	2204      	movs	r2, #4
 80804b8:	f001 ba72 	b.w	80819a0 <spark_variable>

080804bc <setup>:
const uint8_t movementThreshold = 16;
unsigned long stateTime = 0;



void setup() {
 80804bc:	b508      	push	{r3, lr}
  
  // Particle Variables
  Particle.variable("Speed",speedString);                                         // Check the humidity from particle console. 
 80804be:	4914      	ldr	r1, [pc, #80]	; (8080510 <setup+0x54>)
 80804c0:	4814      	ldr	r0, [pc, #80]	; (8080514 <setup+0x58>)
 80804c2:	f7ff fff7 	bl	80804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
 80804c6:	4914      	ldr	r1, [pc, #80]	; (8080518 <setup+0x5c>)
 80804c8:	4814      	ldr	r0, [pc, #80]	; (808051c <setup+0x60>)
 80804ca:	f7ff fff3 	bl	80804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
 80804ce:	4914      	ldr	r1, [pc, #80]	; (8080520 <setup+0x64>)
 80804d0:	4814      	ldr	r0, [pc, #80]	; (8080524 <setup+0x68>)
 80804d2:	f7ff ffef 	bl	80804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
 80804d6:	4914      	ldr	r1, [pc, #80]	; (8080528 <setup+0x6c>)
 80804d8:	4814      	ldr	r0, [pc, #80]	; (808052c <setup+0x70>)
 80804da:	f7ff ffeb 	bl	80804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
 80804de:	4914      	ldr	r1, [pc, #80]	; (8080530 <setup+0x74>)
 80804e0:	4814      	ldr	r0, [pc, #80]	; (8080534 <setup+0x78>)
 80804e2:	f7ff ffe7 	bl	80804b4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>

  t.begin();                                                                      // Start the tracker 
 80804e6:	4814      	ldr	r0, [pc, #80]	; (8080538 <setup+0x7c>)
 80804e8:	f000 feec 	bl	80812c4 <_ZN12AssetTracker5beginEv>
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
 80804ec:	2144      	movs	r1, #68	; 0x44
 80804ee:	4813      	ldr	r0, [pc, #76]	; (808053c <setup+0x80>)
 80804f0:	f000 ffc5 	bl	808147e <_ZN14Adafruit_SHT315beginEh>
 80804f4:	b920      	cbnz	r0, 8080500 <setup+0x44>
    Serial.println("Couldn't find SHT31");
 80804f6:	f002 fbbf 	bl	8082c78 <_Z16_fetch_usbserialv>
 80804fa:	4911      	ldr	r1, [pc, #68]	; (8080540 <setup+0x84>)
 80804fc:	f002 f833 	bl	8082566 <_ZN5Print7printlnEPKc>
  }
  t.gpsOn();
 8080500:	480d      	ldr	r0, [pc, #52]	; (8080538 <setup+0x7c>)
 8080502:	f000 fefd 	bl	8081300 <_ZN12AssetTracker5gpsOnEv>
  state = ONLINE_WAIT_STATE;                                                    // Set the state to IDLE state 
 8080506:	4b0f      	ldr	r3, [pc, #60]	; (8080544 <setup+0x88>)
 8080508:	2201      	movs	r2, #1
 808050a:	701a      	strb	r2, [r3, #0]
 808050c:	bd08      	pop	{r3, pc}
 808050e:	bf00      	nop
 8080510:	20000288 	.word	0x20000288
 8080514:	08086f9d 	.word	0x08086f9d
 8080518:	20000241 	.word	0x20000241
 808051c:	08086fa3 	.word	0x08086fa3
 8080520:	08086de0 	.word	0x08086de0
 8080524:	08086faf 	.word	0x08086faf
 8080528:	20000264 	.word	0x20000264
 808052c:	08086fb7 	.word	0x08086fb7
 8080530:	200002b4 	.word	0x200002b4
 8080534:	08086fbe 	.word	0x08086fbe
 8080538:	200002a0 	.word	0x200002a0
 808053c:	200002a4 	.word	0x200002a4
 8080540:	08086fc6 	.word	0x08086fc6
 8080544:	20000274 	.word	0x20000274

08080548 <_GLOBAL__sub_I_sht31>:
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
 8080548:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808054a:	4b0e      	ldr	r3, [pc, #56]	; (8080584 <_GLOBAL__sub_I_sht31+0x3c>)
 808054c:	2401      	movs	r4, #1
 808054e:	601c      	str	r4, [r3, #0]
 8080550:	4b0d      	ldr	r3, [pc, #52]	; (8080588 <_GLOBAL__sub_I_sht31+0x40>)
// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();                                           // Initialize sensor object


// Global objects
FuelGauge batteryMonitor;
 8080552:	4d0e      	ldr	r5, [pc, #56]	; (808058c <_GLOBAL__sub_I_sht31+0x44>)
 8080554:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080556:	f001 f885 	bl	8081664 <HAL_Pin_Map>
#include "adafruit-sht31.h"                                                       //Include SHT-31 Library
#include <Adafruit_GPS.h>


// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();                                           // Initialize sensor object
 808055a:	480d      	ldr	r0, [pc, #52]	; (8080590 <_GLOBAL__sub_I_sht31+0x48>)
 808055c:	f000 ff6c 	bl	8081438 <_ZN14Adafruit_SHT31C1Ev>


// Global objects
FuelGauge batteryMonitor;
 8080560:	2100      	movs	r1, #0
 8080562:	4628      	mov	r0, r5
 8080564:	f001 fe5a 	bl	808221c <_ZN9FuelGaugeC1Eb>
 8080568:	490a      	ldr	r1, [pc, #40]	; (8080594 <_GLOBAL__sub_I_sht31+0x4c>)
 808056a:	4a0b      	ldr	r2, [pc, #44]	; (8080598 <_GLOBAL__sub_I_sht31+0x50>)
 808056c:	4628      	mov	r0, r5
 808056e:	f002 fde7 	bl	8083140 <__aeabi_atexit>
AssetTracker t;
 8080572:	480a      	ldr	r0, [pc, #40]	; (808059c <_GLOBAL__sub_I_sht31+0x54>)
 8080574:	f000 fea5 	bl	80812c2 <_ZN12AssetTrackerC1Ev>

SYSTEM_THREAD(ENABLED);
 8080578:	4620      	mov	r0, r4
  }
  else if (verboseMode) {
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
 808057a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// Global objects
FuelGauge batteryMonitor;
AssetTracker t;

SYSTEM_THREAD(ENABLED);
 808057e:	2100      	movs	r1, #0
 8080580:	f001 b9d0 	b.w	8081924 <system_thread_set_state>
 8080584:	20000284 	.word	0x20000284
 8080588:	2000027c 	.word	0x2000027c
 808058c:	20000298 	.word	0x20000298
 8080590:	200002a4 	.word	0x200002a4
 8080594:	0808223b 	.word	0x0808223b
 8080598:	2000023c 	.word	0x2000023c
 808059c:	200002a0 	.word	0x200002a0

080805a0 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
 80805a0:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
 80805a2:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
 80805a6:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
 80805a8:	b10d      	cbz	r5, 80805ae <_ZN12Adafruit_GPS4readEv+0xe>
 80805aa:	2000      	movs	r0, #0
 80805ac:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
 80805ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80805b0:	6803      	ldr	r3, [r0, #0]
 80805b2:	691b      	ldr	r3, [r3, #16]
 80805b4:	4798      	blx	r3
 80805b6:	2800      	cmp	r0, #0
 80805b8:	d0f7      	beq.n	80805aa <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
 80805ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80805bc:	6803      	ldr	r3, [r0, #0]
 80805be:	695b      	ldr	r3, [r3, #20]
 80805c0:	4798      	blx	r3
 80805c2:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
 80805c4:	280a      	cmp	r0, #10
 80805c6:	4b14      	ldr	r3, [pc, #80]	; (8080618 <_ZN12Adafruit_GPS4readEv+0x78>)
 80805c8:	4a14      	ldr	r2, [pc, #80]	; (808061c <_ZN12Adafruit_GPS4readEv+0x7c>)
 80805ca:	d116      	bne.n	80805fa <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
 80805cc:	7819      	ldrb	r1, [r3, #0]
 80805ce:	6814      	ldr	r4, [r2, #0]
 80805d0:	b2c9      	uxtb	r1, r1
 80805d2:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
 80805d4:	6816      	ldr	r6, [r2, #0]
 80805d6:	4d12      	ldr	r5, [pc, #72]	; (8080620 <_ZN12Adafruit_GPS4readEv+0x80>)
 80805d8:	4c12      	ldr	r4, [pc, #72]	; (8080624 <_ZN12Adafruit_GPS4readEv+0x84>)
 80805da:	4913      	ldr	r1, [pc, #76]	; (8080628 <_ZN12Adafruit_GPS4readEv+0x88>)
 80805dc:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
 80805de:	bf14      	ite	ne
 80805e0:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
 80805e2:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
 80805e4:	f04f 0100 	mov.w	r1, #0
 80805e8:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
 80805ea:	4910      	ldr	r1, [pc, #64]	; (808062c <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
 80805ec:	bf08      	it	eq
 80805ee:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80805f0:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
 80805f4:	bf18      	it	ne
 80805f6:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80805f8:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
 80805fa:	6814      	ldr	r4, [r2, #0]
 80805fc:	781a      	ldrb	r2, [r3, #0]
 80805fe:	b2d2      	uxtb	r2, r2
 8080600:	1c51      	adds	r1, r2, #1
 8080602:	b2c9      	uxtb	r1, r1
 8080604:	7019      	strb	r1, [r3, #0]
 8080606:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
 8080608:	781b      	ldrb	r3, [r3, #0]
 808060a:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
 808060c:	bf82      	ittt	hi
 808060e:	4b02      	ldrhi	r3, [pc, #8]	; (8080618 <_ZN12Adafruit_GPS4readEv+0x78>)
 8080610:	2277      	movhi	r2, #119	; 0x77
 8080612:	701a      	strbhi	r2, [r3, #0]

  return c;
}
 8080614:	bd70      	pop	{r4, r5, r6, pc}
 8080616:	bf00      	nop
 8080618:	200002c8 	.word	0x200002c8
 808061c:	200002c4 	.word	0x200002c4
 8080620:	200002c9 	.word	0x200002c9
 8080624:	20000341 	.word	0x20000341
 8080628:	200003bc 	.word	0x200003bc
 808062c:	200003b9 	.word	0x200003b9

08080630 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 8080630:	4a15      	ldr	r2, [pc, #84]	; (8080688 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8080632:	2300      	movs	r3, #0
  recvdflag   = false;
 8080634:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 8080636:	4a15      	ldr	r2, [pc, #84]	; (808068c <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 8080638:	4915      	ldr	r1, [pc, #84]	; (8080690 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 808063a:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 808063c:	4a15      	ldr	r2, [pc, #84]	; (8080694 <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 808063e:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 8080640:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 8080642:	4915      	ldr	r1, [pc, #84]	; (8080698 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 8080644:	4a15      	ldr	r2, [pc, #84]	; (808069c <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 8080646:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 808064a:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 808064c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8080650:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8080654:	7143      	strb	r3, [r0, #5]
 8080656:	7103      	strb	r3, [r0, #4]
 8080658:	70c3      	strb	r3, [r0, #3]
 808065a:	7083      	strb	r3, [r0, #2]
 808065c:	7043      	strb	r3, [r0, #1]
 808065e:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 8080660:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8080664:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8080668:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 808066c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 8080670:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 8080672:	2300      	movs	r3, #0
 8080674:	6343      	str	r3, [r0, #52]	; 0x34
 8080676:	6303      	str	r3, [r0, #48]	; 0x30
 8080678:	62c3      	str	r3, [r0, #44]	; 0x2c
 808067a:	6283      	str	r3, [r0, #40]	; 0x28
 808067c:	6243      	str	r3, [r0, #36]	; 0x24
 808067e:	6203      	str	r3, [r0, #32]
 8080680:	60c3      	str	r3, [r0, #12]
 8080682:	6083      	str	r3, [r0, #8]
 8080684:	4770      	bx	lr
 8080686:	bf00      	nop
 8080688:	200003b9 	.word	0x200003b9
 808068c:	200002c8 	.word	0x200002c8
 8080690:	200002c9 	.word	0x200002c9
 8080694:	200002c4 	.word	0x200002c4
 8080698:	20000341 	.word	0x20000341
 808069c:	200003bc 	.word	0x200003bc

080806a0 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 80806a0:	b538      	push	{r3, r4, r5, lr}
 80806a2:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 80806a4:	f7ff ffc4 	bl	8080630 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 80806a8:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 80806aa:	bd38      	pop	{r3, r4, r5, pc}

080806ac <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
 80806ac:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
 80806ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80806b0:	f002 fa4a 	bl	8082b48 <_ZN11USARTSerial5beginEm>

  delay(10);
}
 80806b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
 80806b8:	200a      	movs	r0, #10
 80806ba:	f001 ba39 	b.w	8081b30 <delay>

080806be <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
 80806be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80806c0:	f001 bf51 	b.w	8082566 <_ZN5Print7printlnEPKc>

080806c4 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
 80806c4:	4b01      	ldr	r3, [pc, #4]	; (80806cc <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
 80806c6:	7818      	ldrb	r0, [r3, #0]
}
 80806c8:	4770      	bx	lr
 80806ca:	bf00      	nop
 80806cc:	200003b9 	.word	0x200003b9

080806d0 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
 80806d0:	4b02      	ldr	r3, [pc, #8]	; (80806dc <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
 80806d2:	2200      	movs	r2, #0
 80806d4:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
 80806d6:	4b02      	ldr	r3, [pc, #8]	; (80806e0 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
 80806d8:	6818      	ldr	r0, [r3, #0]
 80806da:	4770      	bx	lr
 80806dc:	200003b9 	.word	0x200003b9
 80806e0:	200003bc 	.word	0x200003bc

080806e4 <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
 80806e4:	292f      	cmp	r1, #47	; 0x2f
 80806e6:	d90a      	bls.n	80806fe <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
 80806e8:	2939      	cmp	r1, #57	; 0x39
 80806ea:	d801      	bhi.n	80806f0 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
 80806ec:	3930      	subs	r1, #48	; 0x30
 80806ee:	e004      	b.n	80806fa <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
 80806f0:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80806f4:	2b05      	cmp	r3, #5
 80806f6:	d802      	bhi.n	80806fe <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
 80806f8:	3937      	subs	r1, #55	; 0x37
 80806fa:	b2c8      	uxtb	r0, r1
 80806fc:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
 80806fe:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
 8080700:	4770      	bx	lr
	...

08080704 <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 8080704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8080708:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 808070a:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 808070c:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 808070e:	f004 f9ac 	bl	8084a6a <strlen>
 8080712:	1f07      	subs	r7, r0, #4
 8080714:	5deb      	ldrb	r3, [r5, r7]
 8080716:	2b2a      	cmp	r3, #42	; 0x2a
 8080718:	d119      	bne.n	808074e <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 808071a:	182e      	adds	r6, r5, r0
 808071c:	f816 1c03 	ldrb.w	r1, [r6, #-3]
 8080720:	4620      	mov	r0, r4
 8080722:	f7ff ffdf 	bl	80806e4 <_ZN12Adafruit_GPS8parseHexEc>
 8080726:	0100      	lsls	r0, r0, #4
 8080728:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
 808072a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 808072e:	4620      	mov	r0, r4
 8080730:	f7ff ffd8 	bl	80806e4 <_ZN12Adafruit_GPS8parseHexEc>
 8080734:	4410      	add	r0, r2
 8080736:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 8080738:	2302      	movs	r3, #2
 808073a:	429f      	cmp	r7, r3
 808073c:	d904      	bls.n	8080748 <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
 808073e:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 8080740:	3301      	adds	r3, #1
      sum ^= nmea[i];
 8080742:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 8080744:	b2db      	uxtb	r3, r3
 8080746:	e7f8      	b.n	808073a <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
 8080748:	b108      	cbz	r0, 808074e <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
 808074a:	2000      	movs	r0, #0
 808074c:	e2e8      	b.n	8080d20 <_ZN12Adafruit_GPS5parseEPc+0x61c>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
 808074e:	49b6      	ldr	r1, [pc, #728]	; (8080a28 <_ZN12Adafruit_GPS5parseEPc+0x324>)
 8080750:	4628      	mov	r0, r5
 8080752:	f004 f9ba 	bl	8084aca <strstr>
 8080756:	b930      	cbnz	r0, 8080766 <_ZN12Adafruit_GPS5parseEPc+0x62>
 8080758:	49b4      	ldr	r1, [pc, #720]	; (8080a2c <_ZN12Adafruit_GPS5parseEPc+0x328>)
 808075a:	4628      	mov	r0, r5
 808075c:	f004 f9b5 	bl	8084aca <strstr>
 8080760:	2800      	cmp	r0, #0
 8080762:	f000 8173 	beq.w	8080a4c <_ZN12Adafruit_GPS5parseEPc+0x348>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
 8080766:	212c      	movs	r1, #44	; 0x2c
 8080768:	4628      	mov	r0, r5
 808076a:	f004 f943 	bl	80849f4 <strchr>
 808076e:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8080770:	4628      	mov	r0, r5
 8080772:	f003 ffed 	bl	8084750 <atof>
 8080776:	f003 fc81 	bl	808407c <__aeabi_d2f>
 808077a:	4606      	mov	r6, r0
    uint32_t time = timef;
 808077c:	f003 ffc8 	bl	8084710 <__aeabi_f2uiz>
    hour = time / 10000;
 8080780:	f242 7210 	movw	r2, #10000	; 0x2710
 8080784:	fbb0 f3f2 	udiv	r3, r0, r2
 8080788:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 808078a:	fb02 0313 	mls	r3, r2, r3, r0
 808078e:	2764      	movs	r7, #100	; 0x64
 8080790:	fbb3 f3f7 	udiv	r3, r3, r7
 8080794:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 8080796:	fbb0 f3f7 	udiv	r3, r0, r7
 808079a:	fb07 0013 	mls	r0, r7, r3, r0
 808079e:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 80807a0:	4630      	mov	r0, r6
 80807a2:	f003 f91f 	bl	80839e4 <__aeabi_f2d>
 80807a6:	2200      	movs	r2, #0
 80807a8:	4ba1      	ldr	r3, [pc, #644]	; (8080a30 <_ZN12Adafruit_GPS5parseEPc+0x32c>)
 80807aa:	f002 fe35 	bl	8083418 <fmod>
 80807ae:	4ba1      	ldr	r3, [pc, #644]	; (8080a34 <_ZN12Adafruit_GPS5parseEPc+0x330>)
 80807b0:	2200      	movs	r2, #0
 80807b2:	f003 f96b 	bl	8083a8c <__aeabi_dmul>
 80807b6:	f003 fc41 	bl	808403c <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
 80807ba:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 80807bc:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
 80807be:	4628      	mov	r0, r5
 80807c0:	f004 f918 	bl	80849f4 <strchr>
    if (',' != *p)
 80807c4:	7843      	ldrb	r3, [r0, #1]
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 80807c6:	4605      	mov	r5, r0
    if (',' != *p)
 80807c8:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 80807ca:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80807ce:	d053      	beq.n	8080878 <_ZN12Adafruit_GPS5parseEPc+0x174>
    {
      strncpy(degreebuff, p, 2);
 80807d0:	4631      	mov	r1, r6
 80807d2:	2202      	movs	r2, #2
 80807d4:	a801      	add	r0, sp, #4
 80807d6:	f004 f965 	bl	8084aa4 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 80807da:	f04f 0a00 	mov.w	sl, #0
 80807de:	f10d 0910 	add.w	r9, sp, #16
      degree = atol(degreebuff) * 10000000;
 80807e2:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 80807e4:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
 80807e8:	f003 ffb9 	bl	808475e <atol>
 80807ec:	4b92      	ldr	r3, [pc, #584]	; (8080a38 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 80807ee:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
 80807f0:	fb03 f800 	mul.w	r8, r3, r0
      strncpy(degreebuff, p, 2); // minutes
 80807f4:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80807f6:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80807f8:	a801      	add	r0, sp, #4
 80807fa:	f004 f953 	bl	8084aa4 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80807fe:	2204      	movs	r2, #4
 8080800:	4631      	mov	r1, r6
 8080802:	4648      	mov	r0, r9
 8080804:	f004 f94e 	bl	8084aa4 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 8080808:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 808080a:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 808080e:	f003 ffa6 	bl	808475e <atol>
 8080812:	2532      	movs	r5, #50	; 0x32
 8080814:	4345      	muls	r5, r0
 8080816:	2003      	movs	r0, #3
 8080818:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 808081c:	4887      	ldr	r0, [pc, #540]	; (8080a3c <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 808081e:	eb08 0305 	add.w	r3, r8, r5
 8080822:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 8080824:	fb98 f0f0 	sdiv	r0, r8, r0
 8080828:	f003 fd32 	bl	8084290 <__aeabi_i2f>
 808082c:	4680      	mov	r8, r0
 808082e:	4628      	mov	r0, r5
 8080830:	f003 fd2e 	bl	8084290 <__aeabi_i2f>
 8080834:	4982      	ldr	r1, [pc, #520]	; (8080a40 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 8080836:	f003 fd7f 	bl	8084338 <__aeabi_fmul>
 808083a:	4601      	mov	r1, r0
 808083c:	4640      	mov	r0, r8
 808083e:	f003 fc73 	bl	8084128 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080842:	4980      	ldr	r1, [pc, #512]	; (8080a44 <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8080844:	60a0      	str	r0, [r4, #8]
 8080846:	4680      	mov	r8, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080848:	f003 fe2a 	bl	80844a0 <__aeabi_fdiv>
 808084c:	f003 ff3a 	bl	80846c4 <__aeabi_f2iz>
 8080850:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 8080852:	4378      	muls	r0, r7
 8080854:	f003 fd1c 	bl	8084290 <__aeabi_i2f>
 8080858:	4601      	mov	r1, r0
 808085a:	4640      	mov	r0, r8
 808085c:	f003 fc62 	bl	8084124 <__aeabi_fsub>
 8080860:	4979      	ldr	r1, [pc, #484]	; (8080a48 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 8080862:	f003 fe1d 	bl	80844a0 <__aeabi_fdiv>
 8080866:	4607      	mov	r7, r0
 8080868:	4628      	mov	r0, r5
 808086a:	f003 fd11 	bl	8084290 <__aeabi_i2f>
 808086e:	4601      	mov	r1, r0
 8080870:	4638      	mov	r0, r7
 8080872:	f003 fc59 	bl	8084128 <__addsf3>
 8080876:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8080878:	212c      	movs	r1, #44	; 0x2c
 808087a:	4630      	mov	r0, r6
 808087c:	f004 f8ba 	bl	80849f4 <strchr>
 8080880:	4603      	mov	r3, r0
    if (',' != *p)
 8080882:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 8080884:	3001      	adds	r0, #1
    if (',' != *p)
 8080886:	2a2c      	cmp	r2, #44	; 0x2c
 8080888:	d010      	beq.n	80808ac <_ZN12Adafruit_GPS5parseEPc+0x1a8>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 808088a:	2a53      	cmp	r2, #83	; 0x53
 808088c:	bf02      	ittt	eq
 808088e:	69a2      	ldreq	r2, [r4, #24]
 8080890:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080894:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 8080896:	785b      	ldrb	r3, [r3, #1]
 8080898:	2b4e      	cmp	r3, #78	; 0x4e
 808089a:	d005      	beq.n	80808a8 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == 'S') lat = 'S';
 808089c:	2b53      	cmp	r3, #83	; 0x53
 808089e:	d003      	beq.n	80808a8 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == ',') lat = 0;
 80808a0:	2b2c      	cmp	r3, #44	; 0x2c
 80808a2:	f47f af52 	bne.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
 80808a6:	2300      	movs	r3, #0
 80808a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80808ac:	212c      	movs	r1, #44	; 0x2c
 80808ae:	f004 f8a1 	bl	80849f4 <strchr>
    if (',' != *p)
 80808b2:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80808b4:	4605      	mov	r5, r0
    if (',' != *p)
 80808b6:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80808b8:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80808bc:	d051      	beq.n	8080962 <_ZN12Adafruit_GPS5parseEPc+0x25e>
    {
      strncpy(degreebuff, p, 3);
 80808be:	4631      	mov	r1, r6
 80808c0:	2203      	movs	r2, #3
 80808c2:	a801      	add	r0, sp, #4
 80808c4:	f004 f8ee 	bl	8084aa4 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 80808c8:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 80808cc:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 80808ce:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 80808d2:	f003 ff44 	bl	808475e <atol>
 80808d6:	4f58      	ldr	r7, [pc, #352]	; (8080a38 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 80808d8:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 80808da:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 80808dc:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80808de:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80808e0:	a801      	add	r0, sp, #4
 80808e2:	f004 f8df 	bl	8084aa4 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80808e6:	2204      	movs	r2, #4
 80808e8:	4631      	mov	r1, r6
 80808ea:	f10d 0006 	add.w	r0, sp, #6
 80808ee:	f004 f8d9 	bl	8084aa4 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80808f2:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80808f4:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80808f8:	f003 ff31 	bl	808475e <atol>
 80808fc:	2532      	movs	r5, #50	; 0x32
 80808fe:	4345      	muls	r5, r0
 8080900:	2003      	movs	r0, #3
 8080902:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8080906:	484d      	ldr	r0, [pc, #308]	; (8080a3c <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 8080908:	197b      	adds	r3, r7, r5
 808090a:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 808090c:	fb97 f0f0 	sdiv	r0, r7, r0
 8080910:	f003 fcbe 	bl	8084290 <__aeabi_i2f>
 8080914:	4607      	mov	r7, r0
 8080916:	4628      	mov	r0, r5
 8080918:	f003 fcba 	bl	8084290 <__aeabi_i2f>
 808091c:	4948      	ldr	r1, [pc, #288]	; (8080a40 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 808091e:	f003 fd0b 	bl	8084338 <__aeabi_fmul>
 8080922:	4601      	mov	r1, r0
 8080924:	4638      	mov	r0, r7
 8080926:	f003 fbff 	bl	8084128 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 808092a:	4946      	ldr	r1, [pc, #280]	; (8080a44 <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 808092c:	60e0      	str	r0, [r4, #12]
 808092e:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8080930:	f003 fdb6 	bl	80844a0 <__aeabi_fdiv>
 8080934:	f003 fec6 	bl	80846c4 <__aeabi_f2iz>
 8080938:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 808093a:	2064      	movs	r0, #100	; 0x64
 808093c:	4368      	muls	r0, r5
 808093e:	f003 fca7 	bl	8084290 <__aeabi_i2f>
 8080942:	4601      	mov	r1, r0
 8080944:	4638      	mov	r0, r7
 8080946:	f003 fbed 	bl	8084124 <__aeabi_fsub>
 808094a:	493f      	ldr	r1, [pc, #252]	; (8080a48 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 808094c:	f003 fda8 	bl	80844a0 <__aeabi_fdiv>
 8080950:	4607      	mov	r7, r0
 8080952:	4628      	mov	r0, r5
 8080954:	f003 fc9c 	bl	8084290 <__aeabi_i2f>
 8080958:	4601      	mov	r1, r0
 808095a:	4638      	mov	r0, r7
 808095c:	f003 fbe4 	bl	8084128 <__addsf3>
 8080960:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 8080962:	212c      	movs	r1, #44	; 0x2c
 8080964:	4630      	mov	r0, r6
 8080966:	f004 f845 	bl	80849f4 <strchr>
 808096a:	4603      	mov	r3, r0
    if (',' != *p)
 808096c:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 808096e:	3001      	adds	r0, #1
    if (',' != *p)
 8080970:	2a2c      	cmp	r2, #44	; 0x2c
 8080972:	d010      	beq.n	8080996 <_ZN12Adafruit_GPS5parseEPc+0x292>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 8080974:	2a57      	cmp	r2, #87	; 0x57
 8080976:	bf02      	ittt	eq
 8080978:	69e2      	ldreq	r2, [r4, #28]
 808097a:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 808097e:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8080980:	785b      	ldrb	r3, [r3, #1]
 8080982:	2b57      	cmp	r3, #87	; 0x57
 8080984:	d005      	beq.n	8080992 <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == 'E') lon = 'E';
 8080986:	2b45      	cmp	r3, #69	; 0x45
 8080988:	d003      	beq.n	8080992 <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == ',') lon = 0;
 808098a:	2b2c      	cmp	r3, #44	; 0x2c
 808098c:	f47f aedd 	bne.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080990:	2300      	movs	r3, #0
 8080992:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
 8080996:	212c      	movs	r1, #44	; 0x2c
 8080998:	f004 f82c 	bl	80849f4 <strchr>
    if (',' != *p)
 808099c:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
 808099e:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80809a0:	2b2c      	cmp	r3, #44	; 0x2c
 80809a2:	d004      	beq.n	80809ae <_ZN12Adafruit_GPS5parseEPc+0x2aa>
    {
      fixquality = atoi(p);
 80809a4:	4628      	mov	r0, r5
 80809a6:	f003 fed6 	bl	8084756 <atoi>
 80809aa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
 80809ae:	4628      	mov	r0, r5
 80809b0:	212c      	movs	r1, #44	; 0x2c
 80809b2:	f004 f81f 	bl	80849f4 <strchr>
    if (',' != *p)
 80809b6:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
 80809b8:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80809ba:	2b2c      	cmp	r3, #44	; 0x2c
 80809bc:	d004      	beq.n	80809c8 <_ZN12Adafruit_GPS5parseEPc+0x2c4>
    {
      satellites = atoi(p);
 80809be:	4628      	mov	r0, r5
 80809c0:	f003 fec9 	bl	8084756 <atoi>
 80809c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
 80809c8:	4628      	mov	r0, r5
 80809ca:	212c      	movs	r1, #44	; 0x2c
 80809cc:	f004 f812 	bl	80849f4 <strchr>
    if (',' != *p)
 80809d0:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
 80809d2:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80809d4:	2b2c      	cmp	r3, #44	; 0x2c
 80809d6:	d005      	beq.n	80809e4 <_ZN12Adafruit_GPS5parseEPc+0x2e0>
    {
      HDOP = atof(p);
 80809d8:	4628      	mov	r0, r5
 80809da:	f003 feb9 	bl	8084750 <atof>
 80809de:	f003 fb4d 	bl	808407c <__aeabi_d2f>
 80809e2:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
 80809e4:	4628      	mov	r0, r5
 80809e6:	212c      	movs	r1, #44	; 0x2c
 80809e8:	f004 f804 	bl	80849f4 <strchr>
    if (',' != *p)
 80809ec:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
 80809ee:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80809f0:	2b2c      	cmp	r3, #44	; 0x2c
 80809f2:	d005      	beq.n	8080a00 <_ZN12Adafruit_GPS5parseEPc+0x2fc>
    {
      altitude = atof(p);
 80809f4:	4628      	mov	r0, r5
 80809f6:	f003 feab 	bl	8084750 <atof>
 80809fa:	f003 fb3f 	bl	808407c <__aeabi_d2f>
 80809fe:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
 8080a00:	212c      	movs	r1, #44	; 0x2c
 8080a02:	4628      	mov	r0, r5
 8080a04:	f003 fff6 	bl	80849f4 <strchr>
    p = strchr(p, ',')+1;
 8080a08:	212c      	movs	r1, #44	; 0x2c
 8080a0a:	3001      	adds	r0, #1
 8080a0c:	f003 fff2 	bl	80849f4 <strchr>
    if (',' != *p)
 8080a10:	7843      	ldrb	r3, [r0, #1]
 8080a12:	2b2c      	cmp	r3, #44	; 0x2c
 8080a14:	f000 8183 	beq.w	8080d1e <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      geoidheight = atof(p);
 8080a18:	3001      	adds	r0, #1
 8080a1a:	f003 fe99 	bl	8084750 <atof>
 8080a1e:	f003 fb2d 	bl	808407c <__aeabi_d2f>
 8080a22:	6220      	str	r0, [r4, #32]
 8080a24:	e17b      	b.n	8080d1e <_ZN12Adafruit_GPS5parseEPc+0x61a>
 8080a26:	bf00      	nop
 8080a28:	08086fda 	.word	0x08086fda
 8080a2c:	08086fe1 	.word	0x08086fe1
 8080a30:	3ff00000 	.word	0x3ff00000
 8080a34:	408f4000 	.word	0x408f4000
 8080a38:	00989680 	.word	0x00989680
 8080a3c:	000186a0 	.word	0x000186a0
 8080a40:	36c9539c 	.word	0x36c9539c
 8080a44:	42c80000 	.word	0x42c80000
 8080a48:	42700000 	.word	0x42700000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
 8080a4c:	49b6      	ldr	r1, [pc, #728]	; (8080d28 <_ZN12Adafruit_GPS5parseEPc+0x624>)
 8080a4e:	4628      	mov	r0, r5
 8080a50:	f004 f83b 	bl	8084aca <strstr>
 8080a54:	b930      	cbnz	r0, 8080a64 <_ZN12Adafruit_GPS5parseEPc+0x360>
 8080a56:	49b5      	ldr	r1, [pc, #724]	; (8080d2c <_ZN12Adafruit_GPS5parseEPc+0x628>)
 8080a58:	4628      	mov	r0, r5
 8080a5a:	f004 f836 	bl	8084aca <strstr>
 8080a5e:	2800      	cmp	r0, #0
 8080a60:	f43f ae73 	beq.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
 8080a64:	212c      	movs	r1, #44	; 0x2c
 8080a66:	4628      	mov	r0, r5
 8080a68:	f003 ffc4 	bl	80849f4 <strchr>
 8080a6c:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8080a6e:	4628      	mov	r0, r5
 8080a70:	f003 fe6e 	bl	8084750 <atof>
 8080a74:	f003 fb02 	bl	808407c <__aeabi_d2f>
 8080a78:	4606      	mov	r6, r0
    uint32_t time = timef;
 8080a7a:	f003 fe49 	bl	8084710 <__aeabi_f2uiz>
    hour = time / 10000;
 8080a7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8080a82:	fbb0 f3f2 	udiv	r3, r0, r2
 8080a86:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 8080a88:	fb02 0313 	mls	r3, r2, r3, r0
 8080a8c:	2264      	movs	r2, #100	; 0x64
 8080a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8080a92:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 8080a94:	fbb0 f3f2 	udiv	r3, r0, r2
 8080a98:	fb02 0013 	mls	r0, r2, r3, r0
 8080a9c:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 8080a9e:	4630      	mov	r0, r6
 8080aa0:	f002 ffa0 	bl	80839e4 <__aeabi_f2d>
 8080aa4:	2200      	movs	r2, #0
 8080aa6:	4ba2      	ldr	r3, [pc, #648]	; (8080d30 <_ZN12Adafruit_GPS5parseEPc+0x62c>)
 8080aa8:	f002 fcb6 	bl	8083418 <fmod>
 8080aac:	4ba1      	ldr	r3, [pc, #644]	; (8080d34 <_ZN12Adafruit_GPS5parseEPc+0x630>)
 8080aae:	2200      	movs	r2, #0
 8080ab0:	f002 ffec 	bl	8083a8c <__aeabi_dmul>
 8080ab4:	f003 fac2 	bl	808403c <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
 8080ab8:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 8080aba:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
 8080abc:	4628      	mov	r0, r5
 8080abe:	f003 ff99 	bl	80849f4 <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
 8080ac2:	7843      	ldrb	r3, [r0, #1]
 8080ac4:	2b41      	cmp	r3, #65	; 0x41
 8080ac6:	d101      	bne.n	8080acc <_ZN12Adafruit_GPS5parseEPc+0x3c8>
      fix = true;
 8080ac8:	2301      	movs	r3, #1
 8080aca:	e003      	b.n	8080ad4 <_ZN12Adafruit_GPS5parseEPc+0x3d0>
    else if (p[0] == 'V')
 8080acc:	2b56      	cmp	r3, #86	; 0x56
 8080ace:	f47f ae3c 	bne.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
 8080ad2:	2300      	movs	r3, #0
 8080ad4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080ad8:	212c      	movs	r1, #44	; 0x2c
 8080ada:	3001      	adds	r0, #1
 8080adc:	f003 ff8a 	bl	80849f4 <strchr>
    if (',' != *p)
 8080ae0:	7843      	ldrb	r3, [r0, #1]
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080ae2:	4605      	mov	r5, r0
    if (',' != *p)
 8080ae4:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8080ae6:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080aea:	d052      	beq.n	8080b92 <_ZN12Adafruit_GPS5parseEPc+0x48e>
    {
      strncpy(degreebuff, p, 2);
 8080aec:	4631      	mov	r1, r6
 8080aee:	2202      	movs	r2, #2
 8080af0:	a801      	add	r0, sp, #4
 8080af2:	f003 ffd7 	bl	8084aa4 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 8080af6:	f04f 0900 	mov.w	r9, #0
 8080afa:	f10d 0810 	add.w	r8, sp, #16
      long degree = atol(degreebuff) * 10000000;
 8080afe:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 8080b00:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
 8080b04:	f003 fe2b 	bl	808475e <atol>
 8080b08:	4f8b      	ldr	r7, [pc, #556]	; (8080d38 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 8080b0a:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
 8080b0c:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8080b0e:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8080b10:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080b12:	a801      	add	r0, sp, #4
 8080b14:	f003 ffc6 	bl	8084aa4 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8080b18:	2204      	movs	r2, #4
 8080b1a:	4631      	mov	r1, r6
 8080b1c:	4640      	mov	r0, r8
 8080b1e:	f003 ffc1 	bl	8084aa4 <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
 8080b22:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 8080b24:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
 8080b28:	f003 fe19 	bl	808475e <atol>
 8080b2c:	2532      	movs	r5, #50	; 0x32
 8080b2e:	4345      	muls	r5, r0
 8080b30:	2003      	movs	r0, #3
 8080b32:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8080b36:	4881      	ldr	r0, [pc, #516]	; (8080d3c <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 8080b38:	197b      	adds	r3, r7, r5
 8080b3a:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 8080b3c:	fb97 f0f0 	sdiv	r0, r7, r0
 8080b40:	f003 fba6 	bl	8084290 <__aeabi_i2f>
 8080b44:	4607      	mov	r7, r0
 8080b46:	4628      	mov	r0, r5
 8080b48:	f003 fba2 	bl	8084290 <__aeabi_i2f>
 8080b4c:	497c      	ldr	r1, [pc, #496]	; (8080d40 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8080b4e:	f003 fbf3 	bl	8084338 <__aeabi_fmul>
 8080b52:	4601      	mov	r1, r0
 8080b54:	4638      	mov	r0, r7
 8080b56:	f003 fae7 	bl	8084128 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080b5a:	497a      	ldr	r1, [pc, #488]	; (8080d44 <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8080b5c:	60a0      	str	r0, [r4, #8]
 8080b5e:	4607      	mov	r7, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8080b60:	f003 fc9e 	bl	80844a0 <__aeabi_fdiv>
 8080b64:	f003 fdae 	bl	80846c4 <__aeabi_f2iz>
 8080b68:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 8080b6a:	2064      	movs	r0, #100	; 0x64
 8080b6c:	4368      	muls	r0, r5
 8080b6e:	f003 fb8f 	bl	8084290 <__aeabi_i2f>
 8080b72:	4601      	mov	r1, r0
 8080b74:	4638      	mov	r0, r7
 8080b76:	f003 fad5 	bl	8084124 <__aeabi_fsub>
 8080b7a:	4973      	ldr	r1, [pc, #460]	; (8080d48 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8080b7c:	f003 fc90 	bl	80844a0 <__aeabi_fdiv>
 8080b80:	4607      	mov	r7, r0
 8080b82:	4628      	mov	r0, r5
 8080b84:	f003 fb84 	bl	8084290 <__aeabi_i2f>
 8080b88:	4601      	mov	r1, r0
 8080b8a:	4638      	mov	r0, r7
 8080b8c:	f003 facc 	bl	8084128 <__addsf3>
 8080b90:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8080b92:	212c      	movs	r1, #44	; 0x2c
 8080b94:	4630      	mov	r0, r6
 8080b96:	f003 ff2d 	bl	80849f4 <strchr>
 8080b9a:	4603      	mov	r3, r0
    if (',' != *p)
 8080b9c:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 8080b9e:	3001      	adds	r0, #1
    if (',' != *p)
 8080ba0:	2a2c      	cmp	r2, #44	; 0x2c
 8080ba2:	d010      	beq.n	8080bc6 <_ZN12Adafruit_GPS5parseEPc+0x4c2>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 8080ba4:	2a53      	cmp	r2, #83	; 0x53
 8080ba6:	bf02      	ittt	eq
 8080ba8:	69a2      	ldreq	r2, [r4, #24]
 8080baa:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080bae:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 8080bb0:	785b      	ldrb	r3, [r3, #1]
 8080bb2:	2b4e      	cmp	r3, #78	; 0x4e
 8080bb4:	d005      	beq.n	8080bc2 <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == 'S') lat = 'S';
 8080bb6:	2b53      	cmp	r3, #83	; 0x53
 8080bb8:	d003      	beq.n	8080bc2 <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == ',') lat = 0;
 8080bba:	2b2c      	cmp	r3, #44	; 0x2c
 8080bbc:	f47f adc5 	bne.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080bc0:	2300      	movs	r3, #0
 8080bc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080bc6:	212c      	movs	r1, #44	; 0x2c
 8080bc8:	f003 ff14 	bl	80849f4 <strchr>
    if (',' != *p)
 8080bcc:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080bce:	4605      	mov	r5, r0
    if (',' != *p)
 8080bd0:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8080bd2:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8080bd6:	d051      	beq.n	8080c7c <_ZN12Adafruit_GPS5parseEPc+0x578>
    {
      strncpy(degreebuff, p, 3);
 8080bd8:	4631      	mov	r1, r6
 8080bda:	2203      	movs	r2, #3
 8080bdc:	a801      	add	r0, sp, #4
 8080bde:	f003 ff61 	bl	8084aa4 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 8080be2:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 8080be6:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 8080be8:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 8080bec:	f003 fdb7 	bl	808475e <atol>
 8080bf0:	4f51      	ldr	r7, [pc, #324]	; (8080d38 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 8080bf2:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 8080bf4:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8080bf6:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8080bf8:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8080bfa:	a801      	add	r0, sp, #4
 8080bfc:	f003 ff52 	bl	8084aa4 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8080c00:	2204      	movs	r2, #4
 8080c02:	4631      	mov	r1, r6
 8080c04:	f10d 0006 	add.w	r0, sp, #6
 8080c08:	f003 ff4c 	bl	8084aa4 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 8080c0c:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 8080c0e:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 8080c12:	f003 fda4 	bl	808475e <atol>
 8080c16:	2532      	movs	r5, #50	; 0x32
 8080c18:	4345      	muls	r5, r0
 8080c1a:	2003      	movs	r0, #3
 8080c1c:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8080c20:	4846      	ldr	r0, [pc, #280]	; (8080d3c <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 8080c22:	197b      	adds	r3, r7, r5
 8080c24:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 8080c26:	fb97 f0f0 	sdiv	r0, r7, r0
 8080c2a:	f003 fb31 	bl	8084290 <__aeabi_i2f>
 8080c2e:	4607      	mov	r7, r0
 8080c30:	4628      	mov	r0, r5
 8080c32:	f003 fb2d 	bl	8084290 <__aeabi_i2f>
 8080c36:	4942      	ldr	r1, [pc, #264]	; (8080d40 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8080c38:	f003 fb7e 	bl	8084338 <__aeabi_fmul>
 8080c3c:	4601      	mov	r1, r0
 8080c3e:	4638      	mov	r0, r7
 8080c40:	f003 fa72 	bl	8084128 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8080c44:	493f      	ldr	r1, [pc, #252]	; (8080d44 <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8080c46:	60e0      	str	r0, [r4, #12]
 8080c48:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8080c4a:	f003 fc29 	bl	80844a0 <__aeabi_fdiv>
 8080c4e:	f003 fd39 	bl	80846c4 <__aeabi_f2iz>
 8080c52:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 8080c54:	2064      	movs	r0, #100	; 0x64
 8080c56:	4368      	muls	r0, r5
 8080c58:	f003 fb1a 	bl	8084290 <__aeabi_i2f>
 8080c5c:	4601      	mov	r1, r0
 8080c5e:	4638      	mov	r0, r7
 8080c60:	f003 fa60 	bl	8084124 <__aeabi_fsub>
 8080c64:	4938      	ldr	r1, [pc, #224]	; (8080d48 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8080c66:	f003 fc1b 	bl	80844a0 <__aeabi_fdiv>
 8080c6a:	4607      	mov	r7, r0
 8080c6c:	4628      	mov	r0, r5
 8080c6e:	f003 fb0f 	bl	8084290 <__aeabi_i2f>
 8080c72:	4601      	mov	r1, r0
 8080c74:	4638      	mov	r0, r7
 8080c76:	f003 fa57 	bl	8084128 <__addsf3>
 8080c7a:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 8080c7c:	212c      	movs	r1, #44	; 0x2c
 8080c7e:	4630      	mov	r0, r6
 8080c80:	f003 feb8 	bl	80849f4 <strchr>
 8080c84:	4603      	mov	r3, r0
    if (',' != *p)
 8080c86:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 8080c88:	3001      	adds	r0, #1
    if (',' != *p)
 8080c8a:	2a2c      	cmp	r2, #44	; 0x2c
 8080c8c:	d010      	beq.n	8080cb0 <_ZN12Adafruit_GPS5parseEPc+0x5ac>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 8080c8e:	2a57      	cmp	r2, #87	; 0x57
 8080c90:	bf02      	ittt	eq
 8080c92:	69e2      	ldreq	r2, [r4, #28]
 8080c94:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8080c98:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8080c9a:	785b      	ldrb	r3, [r3, #1]
 8080c9c:	2b57      	cmp	r3, #87	; 0x57
 8080c9e:	d005      	beq.n	8080cac <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == 'E') lon = 'E';
 8080ca0:	2b45      	cmp	r3, #69	; 0x45
 8080ca2:	d003      	beq.n	8080cac <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == ',') lon = 0;
 8080ca4:	2b2c      	cmp	r3, #44	; 0x2c
 8080ca6:	f47f ad50 	bne.w	808074a <_ZN12Adafruit_GPS5parseEPc+0x46>
 8080caa:	2300      	movs	r3, #0
 8080cac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8080cb0:	212c      	movs	r1, #44	; 0x2c
 8080cb2:	f003 fe9f 	bl	80849f4 <strchr>
    if (',' != *p)
 8080cb6:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8080cb8:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080cba:	2b2c      	cmp	r3, #44	; 0x2c
 8080cbc:	d005      	beq.n	8080cca <_ZN12Adafruit_GPS5parseEPc+0x5c6>
    {
      speed = atof(p);
 8080cbe:	4628      	mov	r0, r5
 8080cc0:	f003 fd46 	bl	8084750 <atof>
 8080cc4:	f003 f9da 	bl	808407c <__aeabi_d2f>
 8080cc8:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
 8080cca:	4628      	mov	r0, r5
 8080ccc:	212c      	movs	r1, #44	; 0x2c
 8080cce:	f003 fe91 	bl	80849f4 <strchr>
    if (',' != *p)
 8080cd2:	7843      	ldrb	r3, [r0, #1]
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
 8080cd4:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8080cd6:	2b2c      	cmp	r3, #44	; 0x2c
 8080cd8:	d005      	beq.n	8080ce6 <_ZN12Adafruit_GPS5parseEPc+0x5e2>
    {
      angle = atof(p);
 8080cda:	4628      	mov	r0, r5
 8080cdc:	f003 fd38 	bl	8084750 <atof>
 8080ce0:	f003 f9cc 	bl	808407c <__aeabi_d2f>
 8080ce4:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
 8080ce6:	212c      	movs	r1, #44	; 0x2c
 8080ce8:	4628      	mov	r0, r5
 8080cea:	f003 fe83 	bl	80849f4 <strchr>
    if (',' != *p)
 8080cee:	7843      	ldrb	r3, [r0, #1]
 8080cf0:	2b2c      	cmp	r3, #44	; 0x2c
 8080cf2:	d014      	beq.n	8080d1e <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      uint32_t fulldate = atof(p);
 8080cf4:	3001      	adds	r0, #1
 8080cf6:	f003 fd2b 	bl	8084750 <atof>
 8080cfa:	f003 f99f 	bl	808403c <__aeabi_d2uiz>
      day = fulldate / 10000;
 8080cfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8080d02:	fbb0 f3f2 	udiv	r3, r0, r2
 8080d06:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
 8080d08:	fb02 0313 	mls	r3, r2, r3, r0
 8080d0c:	2264      	movs	r2, #100	; 0x64
 8080d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8080d12:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
 8080d14:	fbb0 f3f2 	udiv	r3, r0, r2
 8080d18:	fb02 0013 	mls	r0, r2, r3, r0
 8080d1c:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
 8080d1e:	2001      	movs	r0, #1
  }

  return false;
}
 8080d20:	b004      	add	sp, #16
 8080d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080d26:	bf00      	nop
 8080d28:	08086fe8 	.word	0x08086fe8
 8080d2c:	08086fef 	.word	0x08086fef
 8080d30:	3ff00000 	.word	0x3ff00000
 8080d34:	408f4000 	.word	0x408f4000
 8080d38:	00989680 	.word	0x00989680
 8080d3c:	000186a0 	.word	0x000186a0
 8080d40:	36c9539c 	.word	0x36c9539c
 8080d44:	42c80000 	.word	0x42c80000
 8080d48:	42700000 	.word	0x42700000

08080d4c <_GLOBAL__sub_I_line1>:
 8080d4c:	f000 bc8a 	b.w	8081664 <HAL_Pin_Map>

08080d50 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8080d50:	4770      	bx	lr

08080d52 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 8080d52:	4770      	bx	lr

08080d54 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8080d54:	b538      	push	{r3, r4, r5, lr}
 8080d56:	460c      	mov	r4, r1
 8080d58:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8080d5a:	2228      	movs	r2, #40	; 0x28
 8080d5c:	2100      	movs	r1, #0
 8080d5e:	4620      	mov	r0, r4
 8080d60:	f003 fe17 	bl	8084992 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8080d64:	220b      	movs	r2, #11
 8080d66:	4908      	ldr	r1, [pc, #32]	; (8080d88 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 8080d68:	4620      	mov	r0, r4
 8080d6a:	f003 fe9b 	bl	8084aa4 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8080d6e:	2300      	movs	r3, #0
  sensor->version     = 1;
 8080d70:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8080d72:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 8080d74:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 8080d76:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 8080d78:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 8080d7a:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 8080d7c:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 8080d7e:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 8080d80:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 8080d82:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 8080d84:	6223      	str	r3, [r4, #32]
 8080d86:	bd38      	pop	{r3, r4, r5, pc}
 8080d88:	08087057 	.word	0x08087057

08080d8c <_ZN15Adafruit_LIS3DHD0Ev>:
 8080d8c:	b510      	push	{r4, lr}
 8080d8e:	4604      	mov	r4, r0
 8080d90:	212c      	movs	r1, #44	; 0x2c
 8080d92:	f002 f9da 	bl	808314a <_ZdlPvj>
 8080d96:	4620      	mov	r0, r4
 8080d98:	bd10      	pop	{r4, pc}

08080d9a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8080d9a:	6803      	ldr	r3, [r0, #0]
 8080d9c:	b2c9      	uxtb	r1, r1
 8080d9e:	689b      	ldr	r3, [r3, #8]
 8080da0:	4718      	bx	r3
	...

08080da4 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
 8080da4:	4a06      	ldr	r2, [pc, #24]	; (8080dc0 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 8080da6:	7741      	strb	r1, [r0, #29]
 8080da8:	6002      	str	r2, [r0, #0]
 8080daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080dae:	6182      	str	r2, [r0, #24]
 8080db0:	7782      	strb	r2, [r0, #30]
 8080db2:	21ff      	movs	r1, #255	; 0xff
 8080db4:	f880 2020 	strb.w	r2, [r0, #32]
 8080db8:	2211      	movs	r2, #17
 8080dba:	77c1      	strb	r1, [r0, #31]
 8080dbc:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8080dbe:	4770      	bx	lr
 8080dc0:	08087068 	.word	0x08087068

08080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080dc8:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080dcc:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080dce:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8080dd0:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8080dd2:	d106      	bne.n	8080de2 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    return SPI.transfer(x);
 8080dd4:	f002 f994 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
 8080dd8:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8080dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
    return SPI.transfer(x);
 8080dde:	f001 bca4 	b.w	808272a <_ZN8SPIClass8transferEh>
 8080de2:	2607      	movs	r6, #7
 8080de4:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 8080de6:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 8080dea:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8080dee:	2100      	movs	r1, #0
 8080df0:	b280      	uxth	r0, r0
 8080df2:	f002 f8ce 	bl	8082f92 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 8080df6:	f995 001e 	ldrsb.w	r0, [r5, #30]
 8080dfa:	fa08 f106 	lsl.w	r1, r8, r6
 8080dfe:	4039      	ands	r1, r7
 8080e00:	b280      	uxth	r0, r0
 8080e02:	f002 f8c6 	bl	8082f92 <digitalWrite>
    digitalWrite(_sck, HIGH);
 8080e06:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8080e0a:	2101      	movs	r1, #1
 8080e0c:	b280      	uxth	r0, r0
 8080e0e:	f002 f8c0 	bl	8082f92 <digitalWrite>
    if (digitalRead(_miso))
 8080e12:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8080e16:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8080e18:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8080e1a:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8080e1c:	f002 f8d2 	bl	8082fc4 <digitalRead>
 8080e20:	b108      	cbz	r0, 8080e26 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 8080e22:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8080e26:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8080e2a:	d2de      	bcs.n	8080dea <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8080e2c:	4620      	mov	r0, r4
 8080e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08080e34 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 8080e34:	b508      	push	{r3, lr}
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
 8080e36:	f002 f963 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
 8080e3a:	2101      	movs	r1, #1
 8080e3c:	f001 fc0e 	bl	808265c <_ZN8SPIClass11setBitOrderEh>
    SPI.setClockSpeed(500000);
 8080e40:	f002 f95e 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
 8080e44:	4905      	ldr	r1, [pc, #20]	; (8080e5c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 8080e46:	2201      	movs	r2, #1
 8080e48:	f001 fc3e 	bl	80826c8 <_ZN8SPIClass13setClockSpeedEjj>
    SPI.setDataMode(SPI_MODE0);
 8080e4c:	f002 f958 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8080e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void Adafruit_LIS3DH::beginTransaction() {
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
 8080e54:	2100      	movs	r1, #0
 8080e56:	f001 bc11 	b.w	808267c <_ZN8SPIClass11setDataModeEh>
 8080e5a:	bf00      	nop
 8080e5c:	0007a120 	.word	0x0007a120

08080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080e60:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 8080e62:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080e66:	4604      	mov	r4, r0
  if (_cs == -1) {
 8080e68:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8080e6a:	460e      	mov	r6, r1
 8080e6c:	4615      	mov	r5, r2
  if (_cs == -1) {
 8080e6e:	d116      	bne.n	8080e9e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8080e70:	f002 f8e2 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080e74:	7f21      	ldrb	r1, [r4, #28]
 8080e76:	f001 fa5e 	bl	8082336 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8080e7a:	f002 f8dd 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080e7e:	6803      	ldr	r3, [r0, #0]
 8080e80:	4631      	mov	r1, r6
 8080e82:	689b      	ldr	r3, [r3, #8]
 8080e84:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8080e86:	f002 f8d7 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080e8a:	6803      	ldr	r3, [r0, #0]
 8080e8c:	4629      	mov	r1, r5
 8080e8e:	689b      	ldr	r3, [r3, #8]
 8080e90:	4798      	blx	r3
    Wire.endTransmission();
 8080e92:	f002 f8d1 	bl	8083038 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8080e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 8080e9a:	f001 ba57 	b.w	808234c <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 8080e9e:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8080ea2:	3301      	adds	r3, #1
 8080ea4:	d101      	bne.n	8080eaa <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 8080ea6:	f7ff ffc5 	bl	8080e34 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 8080eaa:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080eae:	2100      	movs	r1, #0
 8080eb0:	b280      	uxth	r0, r0
 8080eb2:	f002 f86e 	bl	8082f92 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 8080eb6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 8080eba:	4620      	mov	r0, r4
 8080ebc:	f7ff ff82 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8080ec0:	4629      	mov	r1, r5
 8080ec2:	4620      	mov	r0, r4
 8080ec4:	f7ff ff7e 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 8080ec8:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080ecc:	2101      	movs	r1, #1
 8080ece:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8080ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
 8080ed4:	f002 b85d 	b.w	8082f92 <digitalWrite>

08080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080ed8:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 8080eda:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080ede:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 8080ee0:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8080ee2:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 8080ee4:	d11c      	bne.n	8080f20 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
 8080ee6:	f002 f8a7 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080eea:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8080eee:	f001 fa26 	bl	808233e <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8080ef2:	f002 f8a1 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080ef6:	6803      	ldr	r3, [r0, #0]
 8080ef8:	4629      	mov	r1, r5
 8080efa:	689b      	ldr	r3, [r3, #8]
 8080efc:	4798      	blx	r3
    Wire.endTransmission();
 8080efe:	f002 f89b 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080f02:	f001 fa23 	bl	808234c <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 8080f06:	f002 f897 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080f0a:	2201      	movs	r2, #1
 8080f0c:	7f21      	ldrb	r1, [r4, #28]
 8080f0e:	f001 fa0f 	bl	8082330 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8080f12:	f002 f891 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080f16:	6803      	ldr	r3, [r0, #0]
 8080f18:	695b      	ldr	r3, [r3, #20]
 8080f1a:	4798      	blx	r3
 8080f1c:	b2c5      	uxtb	r5, r0
 8080f1e:	e01b      	b.n	8080f58 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 8080f20:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8080f24:	3301      	adds	r3, #1
 8080f26:	d101      	bne.n	8080f2c <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
 8080f28:	f7ff ff84 	bl	8080e34 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 8080f2c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080f30:	2100      	movs	r1, #0
 8080f32:	b280      	uxth	r0, r0
 8080f34:	f002 f82d 	bl	8082f92 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 8080f38:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8080f3c:	4620      	mov	r0, r4
 8080f3e:	f7ff ff41 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 8080f42:	2100      	movs	r1, #0
 8080f44:	4620      	mov	r0, r4
 8080f46:	f7ff ff3d 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 8080f4a:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 8080f4c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080f50:	2101      	movs	r1, #1
 8080f52:	b280      	uxth	r0, r0
 8080f54:	f002 f81d 	bl	8082f92 <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 8080f58:	4628      	mov	r0, r5
 8080f5a:	bd38      	pop	{r3, r4, r5, pc}

08080f5c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 8080f5c:	b538      	push	{r3, r4, r5, lr}
 8080f5e:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8080f60:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 8080f62:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8080f64:	f7ff ffb8 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
 8080f68:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8080f6c:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8080f70:	b2d2      	uxtb	r2, r2
 8080f72:	4620      	mov	r0, r4
}
 8080f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8080f78:	2123      	movs	r1, #35	; 0x23
 8080f7a:	f7ff bf71 	b.w	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08080f7e <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 8080f7e:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8080f80:	2123      	movs	r1, #35	; 0x23
 8080f82:	f7ff ffa9 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 8080f86:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8080f8a:	bd08      	pop	{r3, pc}

08080f8c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 8080f8c:	b538      	push	{r3, r4, r5, lr}
 8080f8e:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8080f90:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 8080f92:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8080f94:	f7ff ffa0 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
 8080f98:	f000 000f 	and.w	r0, r0, #15
 8080f9c:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8080fa0:	b2d2      	uxtb	r2, r2
 8080fa2:	4620      	mov	r0, r4
}
 8080fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8080fa8:	2120      	movs	r1, #32
 8080faa:	f7ff bf59 	b.w	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08080fae <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 8080fae:	b510      	push	{r4, lr}
 8080fb0:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 8080fb2:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
 8080fb4:	f990 001d 	ldrsb.w	r0, [r0, #29]
 8080fb8:	1c42      	adds	r2, r0, #1
 8080fba:	d104      	bne.n	8080fc6 <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
 8080fbc:	f002 f83c 	bl	8083038 <_Z19__fetch_global_Wirev>
 8080fc0:	f001 f982 	bl	80822c8 <_ZN7TwoWire5beginEv>
 8080fc4:	e022      	b.n	808100c <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
  } else {
    digitalWrite(_cs, HIGH);
 8080fc6:	2101      	movs	r1, #1
 8080fc8:	b280      	uxth	r0, r0
 8080fca:	f001 ffe2 	bl	8082f92 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8080fce:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8080fd2:	2101      	movs	r1, #1
 8080fd4:	b280      	uxth	r0, r0
 8080fd6:	f001 ffcb 	bl	8082f70 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
 8080fda:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8080fde:	1c43      	adds	r3, r0, #1
 8080fe0:	d104      	bne.n	8080fec <_ZN15Adafruit_LIS3DH5beginEh+0x3e>
      // hardware SPI
      SPI.begin();
 8080fe2:	f002 f88d 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
 8080fe6:	f001 fb29 	bl	808263c <_ZN8SPIClass5beginEv>
 8080fea:	e00f      	b.n	808100c <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
 8080fec:	2101      	movs	r1, #1
 8080fee:	b280      	uxth	r0, r0
 8080ff0:	f001 ffbe 	bl	8082f70 <pinMode>
      pinMode(_mosi, OUTPUT);
 8080ff4:	f994 001e 	ldrsb.w	r0, [r4, #30]
 8080ff8:	2101      	movs	r1, #1
 8080ffa:	b280      	uxth	r0, r0
 8080ffc:	f001 ffb8 	bl	8082f70 <pinMode>
      pinMode(_miso, INPUT);
 8081000:	f994 001f 	ldrsb.w	r0, [r4, #31]
 8081004:	2100      	movs	r1, #0
 8081006:	b280      	uxth	r0, r0
 8081008:	f001 ffb2 	bl	8082f70 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 808100c:	210f      	movs	r1, #15
 808100e:	4620      	mov	r0, r4
 8081010:	f7ff ff62 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 8081014:	2833      	cmp	r0, #51	; 0x33
 8081016:	d119      	bne.n	808104c <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 8081018:	2207      	movs	r2, #7
 808101a:	4620      	mov	r0, r4
 808101c:	2120      	movs	r1, #32
 808101e:	f7ff ff1f 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
 8081022:	4620      	mov	r0, r4
 8081024:	2107      	movs	r1, #7
 8081026:	f7ff ffb1 	bl	8080f8c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 808102a:	4620      	mov	r0, r4
 808102c:	2288      	movs	r2, #136	; 0x88
 808102e:	2123      	movs	r1, #35	; 0x23
 8081030:	f7ff ff16 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 8081034:	4620      	mov	r0, r4
 8081036:	2210      	movs	r2, #16
 8081038:	2122      	movs	r1, #34	; 0x22
 808103a:	f7ff ff11 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 808103e:	4620      	mov	r0, r4
 8081040:	2280      	movs	r2, #128	; 0x80
 8081042:	211f      	movs	r1, #31
 8081044:	f7ff ff0c 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
 8081048:	2001      	movs	r0, #1
 808104a:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 808104c:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
 808104e:	bd10      	pop	{r4, pc}

08081050 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>:

    The movementThreshold value default is 16. Lower values are more sensitive.
*/
/**************************************************************************/

bool Adafruit_LIS3DH::setupLowPowerWakeMode(uint8_t movementThreshold) {
 8081050:	b538      	push	{r3, r4, r5, lr}
 8081052:	4604      	mov	r4, r0
 8081054:	460d      	mov	r5, r1

	// Enable 10 Hz, low power, with XYZ detection enabled
	writeRegister8(LIS3DH_REG_CTRL1, LIS3DH_CTRL_REG1_ODR1 | LIS3DH_CTRL_REG1_LPEN | LIS3DH_CTRL_REG1_ZEN | LIS3DH_CTRL_REG1_YEN | LIS3DH_CTRL_REG1_XEN);
 8081056:	222f      	movs	r2, #47	; 0x2f
 8081058:	2120      	movs	r1, #32
 808105a:	f7ff ff01 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// High pass filters disabled
	// Enable reference mode LIS3DH_CTRL_REG2_HPM0 | LIS3DH_CTRL_REG2_HPIS1
	// Tried enabling CTRL_REG2_HPM0 | CTRL_REG2_HPM1 for auto-reset, did not seem to help
	writeRegister8(LIS3DH_REG_CTRL2, 0);
 808105e:	2200      	movs	r2, #0
 8081060:	2121      	movs	r1, #33	; 0x21
 8081062:	4620      	mov	r0, r4
 8081064:	f7ff fefc 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Enable INT1
	writeRegister8(LIS3DH_REG_CTRL3, LIS3DH_CTRL_REG3_I1_INT1);
 8081068:	2240      	movs	r2, #64	; 0x40
 808106a:	2122      	movs	r1, #34	; 0x22
 808106c:	4620      	mov	r0, r4
 808106e:	f7ff fef7 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Disable high resolution mode
	writeRegister8(LIS3DH_REG_CTRL4, 0);
 8081072:	2200      	movs	r2, #0
 8081074:	2123      	movs	r1, #35	; 0x23
 8081076:	4620      	mov	r0, r4
 8081078:	f7ff fef2 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// Page 12 of the app note says to do this last, but page 25 says to do them in order.
	// Disable FIFO, enable latch interrupt on INT1_SRC
	writeRegister8(LIS3DH_REG_CTRL5, LIS3DH_CTRL_REG5_LIR_INT1);
 808107c:	2208      	movs	r2, #8
 808107e:	2124      	movs	r1, #36	; 0x24
 8081080:	4620      	mov	r0, r4
 8081082:	f7ff feed 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// CTRL_REG6_H_LACTIVE means active low, not needed here
	writeRegister8(LIS3DH_REG_CTRL6, 0);
 8081086:	2200      	movs	r2, #0
 8081088:	2125      	movs	r1, #37	; 0x25
 808108a:	4620      	mov	r0, r4
 808108c:	f7ff fee8 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	// In normal mode, reading the reference register sets it for the current normal force
	// (the normal force of gravity acting on the device)
	readRegister8(LIS3DH_REG_REFERENCE);
 8081090:	2126      	movs	r1, #38	; 0x26
 8081092:	4620      	mov	r0, r4
 8081094:	f7ff ff20 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>

	// 250 mg threshold = 16
	writeRegister8(LIS3DH_REG_INT1THS, movementThreshold);
 8081098:	462a      	mov	r2, r5
 808109a:	2132      	movs	r1, #50	; 0x32
 808109c:	4620      	mov	r0, r4
 808109e:	f7ff fedf 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

	//
	writeRegister8(LIS3DH_REG_INT1DUR, 0);
 80810a2:	2200      	movs	r2, #0
 80810a4:	2133      	movs	r1, #51	; 0x33
 80810a6:	4620      	mov	r0, r4
 80810a8:	f7ff feda 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>


	if (intPin >= 0) {
 80810ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80810ae:	2b00      	cmp	r3, #0
 80810b0:	db0b      	blt.n	80810ca <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x7a>
		// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
		// interrupt for me.

		// Remember the INT1_CFG setting because we're apparently supposed to set it again after
		// clearing an interrupt.
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
 80810b2:	220a      	movs	r2, #10
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 80810b4:	4620      	mov	r0, r4
		// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
		// interrupt for me.

		// Remember the INT1_CFG setting because we're apparently supposed to set it again after
		// clearing an interrupt.
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
 80810b6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 80810ba:	2130      	movs	r1, #48	; 0x30
 80810bc:	f7ff fed0 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

		// Clear the interrupt just in case
		readRegister8(LIS3DH_REG_INT1SRC);
 80810c0:	2131      	movs	r1, #49	; 0x31
 80810c2:	4620      	mov	r0, r4
 80810c4:	f7ff ff08 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
 80810c8:	e006      	b.n	80810d8 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x88>
	}
	else {
		int1_cfg = 0;
 80810ca:	2200      	movs	r2, #0
 80810cc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, 0);
 80810d0:	2130      	movs	r1, #48	; 0x30
 80810d2:	4620      	mov	r0, r4
 80810d4:	f7ff fec4 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	}

	return true;
}
 80810d8:	2001      	movs	r0, #1
 80810da:	bd38      	pop	{r3, r4, r5, pc}

080810dc <_ZN15Adafruit_LIS3DH14clearInterruptEv>:
    the interrupt on the WKP pin. Manual reset mode is used so you can tell the
    difference between timeout and movement wakeup when using stop mode sleep.
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::clearInterrupt() {
 80810dc:	b538      	push	{r3, r4, r5, lr}
 80810de:	4604      	mov	r4, r0
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);
 80810e0:	2131      	movs	r1, #49	; 0x31
 80810e2:	f7ff fef9 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>

	if (intPin >= 0) {
 80810e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    difference between timeout and movement wakeup when using stop mode sleep.
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::clearInterrupt() {
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);
 80810e8:	4605      	mov	r5, r0

	if (intPin >= 0) {
 80810ea:	2b00      	cmp	r3, #0
 80810ec:	db12      	blt.n	8081114 <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x38>
		while(digitalRead(intPin) == HIGH) {
 80810ee:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80810f0:	f001 ff68 	bl	8082fc4 <digitalRead>
 80810f4:	2801      	cmp	r0, #1
 80810f6:	d10d      	bne.n	8081114 <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x38>
			delay(10);
 80810f8:	200a      	movs	r0, #10
 80810fa:	f000 fd19 	bl	8081b30 <delay>
			readRegister8(LIS3DH_REG_INT1SRC);
 80810fe:	2131      	movs	r1, #49	; 0x31
 8081100:	4620      	mov	r0, r4
 8081102:	f7ff fee9 	bl	8080ed8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
			writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
 8081106:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 808110a:	2130      	movs	r1, #48	; 0x30
 808110c:	4620      	mov	r0, r4
 808110e:	f7ff fea7 	bl	8080e60 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

uint8_t Adafruit_LIS3DH::clearInterrupt() {
	uint8_t int1_src = readRegister8(LIS3DH_REG_INT1SRC);

	if (intPin >= 0) {
		while(digitalRead(intPin) == HIGH) {
 8081112:	e7ec      	b.n	80810ee <_ZN15Adafruit_LIS3DH14clearInterruptEv+0x12>
			writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
		}
	}

	return int1_src;
}
 8081114:	4628      	mov	r0, r5
 8081116:	bd38      	pop	{r3, r4, r5, pc}

08081118 <_ZN15Adafruit_LIS3DH4readEv>:

  return true;
}


void Adafruit_LIS3DH::read(void) {
 8081118:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 808111a:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 808111e:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 8081120:	3301      	adds	r3, #1
 8081122:	d142      	bne.n	80811aa <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
 8081124:	f001 ff88 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081128:	f994 101c 	ldrsb.w	r1, [r4, #28]
 808112c:	f001 f907 	bl	808233e <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 8081130:	f001 ff82 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081134:	21a8      	movs	r1, #168	; 0xa8
 8081136:	f7ff fe30 	bl	8080d9a <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 808113a:	f001 ff7d 	bl	8083038 <_Z19__fetch_global_Wirev>
 808113e:	f001 f905 	bl	808234c <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 8081142:	f001 ff79 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081146:	2206      	movs	r2, #6
 8081148:	7f21      	ldrb	r1, [r4, #28]
 808114a:	f001 f8f1 	bl	8082330 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 808114e:	f001 ff73 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081152:	6803      	ldr	r3, [r0, #0]
 8081154:	695b      	ldr	r3, [r3, #20]
 8081156:	4798      	blx	r3
 8081158:	80e0      	strh	r0, [r4, #6]
 808115a:	f001 ff6d 	bl	8083038 <_Z19__fetch_global_Wirev>
 808115e:	6803      	ldr	r3, [r0, #0]
 8081160:	695b      	ldr	r3, [r3, #20]
 8081162:	4798      	blx	r3
 8081164:	88e3      	ldrh	r3, [r4, #6]
 8081166:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808116a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 808116c:	f001 ff64 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081170:	6803      	ldr	r3, [r0, #0]
 8081172:	695b      	ldr	r3, [r3, #20]
 8081174:	4798      	blx	r3
 8081176:	8120      	strh	r0, [r4, #8]
 8081178:	f001 ff5e 	bl	8083038 <_Z19__fetch_global_Wirev>
 808117c:	6803      	ldr	r3, [r0, #0]
 808117e:	695b      	ldr	r3, [r3, #20]
 8081180:	4798      	blx	r3
 8081182:	8923      	ldrh	r3, [r4, #8]
 8081184:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8081188:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 808118a:	f001 ff55 	bl	8083038 <_Z19__fetch_global_Wirev>
 808118e:	6803      	ldr	r3, [r0, #0]
 8081190:	695b      	ldr	r3, [r3, #20]
 8081192:	4798      	blx	r3
 8081194:	8160      	strh	r0, [r4, #10]
 8081196:	f001 ff4f 	bl	8083038 <_Z19__fetch_global_Wirev>
 808119a:	6803      	ldr	r3, [r0, #0]
 808119c:	695b      	ldr	r3, [r3, #20]
 808119e:	4798      	blx	r3
 80811a0:	8963      	ldrh	r3, [r4, #10]
 80811a2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80811a6:	8160      	strh	r0, [r4, #10]
 80811a8:	e03c      	b.n	8081224 <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 80811aa:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80811ae:	3301      	adds	r3, #1
 80811b0:	d101      	bne.n	80811b6 <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
 80811b2:	f7ff fe3f 	bl	8080e34 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80811b6:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80811ba:	2100      	movs	r1, #0
 80811bc:	b280      	uxth	r0, r0
 80811be:	f001 fee8 	bl	8082f92 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80811c2:	21e8      	movs	r1, #232	; 0xe8
 80811c4:	4620      	mov	r0, r4
 80811c6:	f7ff fdfd 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80811ca:	21ff      	movs	r1, #255	; 0xff
 80811cc:	4620      	mov	r0, r4
 80811ce:	f7ff fdf9 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80811d2:	21ff      	movs	r1, #255	; 0xff
 80811d4:	80e0      	strh	r0, [r4, #6]
 80811d6:	4620      	mov	r0, r4
 80811d8:	f7ff fdf4 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80811dc:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80811de:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80811e0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80811e4:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80811e6:	4620      	mov	r0, r4
 80811e8:	f7ff fdec 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80811ec:	21ff      	movs	r1, #255	; 0xff
 80811ee:	8120      	strh	r0, [r4, #8]
 80811f0:	4620      	mov	r0, r4
 80811f2:	f7ff fde7 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80811f6:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80811f8:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80811fa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80811fe:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8081200:	4620      	mov	r0, r4
 8081202:	f7ff fddf 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 8081206:	21ff      	movs	r1, #255	; 0xff
 8081208:	8160      	strh	r0, [r4, #10]
 808120a:	4620      	mov	r0, r4
 808120c:	f7ff fdda 	bl	8080dc4 <_ZN15Adafruit_LIS3DH7spixferEh>
 8081210:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 8081212:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8081214:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8081218:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 808121a:	f994 001d 	ldrsb.w	r0, [r4, #29]
 808121e:	b280      	uxth	r0, r0
 8081220:	f001 feb7 	bl	8082f92 <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 8081224:	4620      	mov	r0, r4
 8081226:	f7ff feaa 	bl	8080f7e <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 808122a:	2803      	cmp	r0, #3
 808122c:	d009      	beq.n	8081242 <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 808122e:	2802      	cmp	r0, #2
 8081230:	d00a      	beq.n	8081248 <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 8081232:	2801      	cmp	r0, #1
 8081234:	d00b      	beq.n	808124e <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 8081236:	2800      	cmp	r0, #0
 8081238:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 808123c:	bf18      	it	ne
 808123e:	2001      	movne	r0, #1
 8081240:	e007      	b.n	8081252 <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 8081242:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8081246:	e004      	b.n	8081252 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8081248:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 808124c:	e001      	b.n	8081252 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 808124e:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 8081252:	f003 f81d 	bl	8084290 <__aeabi_i2f>
 8081256:	4605      	mov	r5, r0
 8081258:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 808125c:	f003 f818 	bl	8084290 <__aeabi_i2f>
 8081260:	4629      	mov	r1, r5
 8081262:	f003 f91d 	bl	80844a0 <__aeabi_fdiv>
 8081266:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 8081268:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 808126c:	f003 f810 	bl	8084290 <__aeabi_i2f>
 8081270:	4629      	mov	r1, r5
 8081272:	f003 f915 	bl	80844a0 <__aeabi_fdiv>
 8081276:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 8081278:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 808127c:	f003 f808 	bl	8084290 <__aeabi_i2f>
 8081280:	4629      	mov	r1, r5
 8081282:	f003 f90d 	bl	80844a0 <__aeabi_fdiv>
 8081286:	6160      	str	r0, [r4, #20]
 8081288:	bd38      	pop	{r3, r4, r5, pc}

0808128a <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 808128a:	b570      	push	{r4, r5, r6, lr}
 808128c:	460c      	mov	r4, r1
 808128e:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8081290:	2624      	movs	r6, #36	; 0x24
 8081292:	4632      	mov	r2, r6
 8081294:	2100      	movs	r1, #0
 8081296:	4620      	mov	r0, r4
 8081298:	f003 fb7b 	bl	8084992 <memset>

  event->version   = sizeof(sensors_event_t);
 808129c:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 808129e:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();
 80812a0:	4628      	mov	r0, r5
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 80812a2:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80812a4:	2301      	movs	r3, #1
 80812a6:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
 80812a8:	2300      	movs	r3, #0
 80812aa:	6123      	str	r3, [r4, #16]

  read();
 80812ac:	f7ff ff34 	bl	8081118 <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 80812b0:	68eb      	ldr	r3, [r5, #12]
 80812b2:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80812b4:	692b      	ldr	r3, [r5, #16]
 80812b6:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80812b8:	696b      	ldr	r3, [r5, #20]
 80812ba:	61e3      	str	r3, [r4, #28]
}
 80812bc:	bd70      	pop	{r4, r5, r6, pc}

080812be <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 80812be:	f000 b9d1 	b.w	8081664 <HAL_Pin_Map>

080812c2 <_ZN12AssetTrackerC1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker::AssetTracker() {

}
 80812c2:	4770      	bx	lr

080812c4 <_ZN12AssetTracker5beginEv>:

void AssetTracker::begin() {
 80812c4:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 80812c6:	4c07      	ldr	r4, [pc, #28]	; (80812e4 <_ZN12AssetTracker5beginEv+0x20>)
 80812c8:	2118      	movs	r1, #24
 80812ca:	4620      	mov	r0, r4
 80812cc:	f7ff fe6f 	bl	8080fae <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 80812d0:	4620      	mov	r0, r4
 80812d2:	2109      	movs	r1, #9
 80812d4:	f7ff fe5a 	bl	8080f8c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80812d8:	4620      	mov	r0, r4

    // Turn on the GPS module
    // gpsOn();
}
 80812da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80812de:	2101      	movs	r1, #1
 80812e0:	f7ff be3c 	b.w	8080f5c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 80812e4:	200003c0 	.word	0x200003c0

080812e8 <_ZN12AssetTracker7readLatEv>:
    // gpsOn();
}

float AssetTracker::readLat() {
    return gps.latitude;
}
 80812e8:	4b01      	ldr	r3, [pc, #4]	; (80812f0 <_ZN12AssetTracker7readLatEv+0x8>)
 80812ea:	6898      	ldr	r0, [r3, #8]
 80812ec:	4770      	bx	lr
 80812ee:	bf00      	nop
 80812f0:	200003ec 	.word	0x200003ec

080812f4 <_ZN12AssetTracker7readLonEv>:

float AssetTracker::readLon() {
    return gps.longitude;
}
 80812f4:	4b01      	ldr	r3, [pc, #4]	; (80812fc <_ZN12AssetTracker7readLonEv+0x8>)
 80812f6:	68d8      	ldr	r0, [r3, #12]
 80812f8:	4770      	bx	lr
 80812fa:	bf00      	nop
 80812fc:	200003ec 	.word	0x200003ec

08081300 <_ZN12AssetTracker5gpsOnEv>:
String AssetTracker::readLatLon() {
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
    return latLon;
}

void AssetTracker::gpsOn() {
 8081300:	b538      	push	{r3, r4, r5, lr}
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8081302:	2101      	movs	r1, #1
 8081304:	2006      	movs	r0, #6
 8081306:	f001 fe33 	bl	8082f70 <pinMode>
    digitalWrite(D6,LOW);
 808130a:	2100      	movs	r1, #0
 808130c:	2006      	movs	r0, #6
 808130e:	f001 fe40 	bl	8082f92 <digitalWrite>
    gps.begin(9600);
 8081312:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081316:	4816      	ldr	r0, [pc, #88]	; (8081370 <_ZN12AssetTracker5gpsOnEv+0x70>)
 8081318:	f7ff f9c8 	bl	80806ac <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 808131c:	4915      	ldr	r1, [pc, #84]	; (8081374 <_ZN12AssetTracker5gpsOnEv+0x74>)
 808131e:	4814      	ldr	r0, [pc, #80]	; (8081370 <_ZN12AssetTracker5gpsOnEv+0x70>)
 8081320:	f7ff f9cd 	bl	80806be <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 8081324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081328:	f000 fc02 	bl	8081b30 <delay>
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 808132c:	4912      	ldr	r1, [pc, #72]	; (8081378 <_ZN12AssetTracker5gpsOnEv+0x78>)
 808132e:	4810      	ldr	r0, [pc, #64]	; (8081370 <_ZN12AssetTracker5gpsOnEv+0x70>)
 8081330:	f7ff f9c5 	bl	80806be <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 8081334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081338:	f000 fbfa 	bl	8081b30 <delay>
    gps.sendCommand(PGCMD_NOANTENNA);
 808133c:	490f      	ldr	r1, [pc, #60]	; (808137c <_ZN12AssetTracker5gpsOnEv+0x7c>)
 808133e:	480c      	ldr	r0, [pc, #48]	; (8081370 <_ZN12AssetTracker5gpsOnEv+0x70>)
 8081340:	f7ff f9bd 	bl	80806be <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 8081344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081348:	f000 fbf2 	bl	8081b30 <delay>
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 808134c:	4d0c      	ldr	r5, [pc, #48]	; (8081380 <_ZN12AssetTracker5gpsOnEv+0x80>)
    delay(500);
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
 808134e:	2400      	movs	r4, #0
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 8081350:	f001 fc00 	bl	8082b54 <_Z22__fetch_global_Serial1v>
 8081354:	6803      	ldr	r3, [r0, #0]
 8081356:	5d29      	ldrb	r1, [r5, r4]
 8081358:	689b      	ldr	r3, [r3, #8]
 808135a:	3401      	adds	r4, #1
 808135c:	4798      	blx	r3
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
 808135e:	2c0c      	cmp	r4, #12
 8081360:	d1f6      	bne.n	8081350 <_ZN12AssetTracker5gpsOnEv+0x50>
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 8081362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8081366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 808136a:	f000 bbe1 	b.w	8081b30 <delay>
 808136e:	bf00      	nop
 8081370:	200003ec 	.word	0x200003ec
 8081374:	08087082 	.word	0x08087082
 8081378:	080870b4 	.word	0x080870b4
 808137c:	080870c5 	.word	0x080870c5
 8081380:	2000013c 	.word	0x2000013c

08081384 <_ZN12AssetTracker6gpsFixEv>:

char* AssetTracker::preNMEA() {
    return gps.lastNMEA();
}

bool AssetTracker::gpsFix() {
 8081384:	b570      	push	{r4, r5, r6, lr}
    if ((gps.latitude == 0.0) || (gps.longitude == 0.0)){
 8081386:	4e09      	ldr	r6, [pc, #36]	; (80813ac <_ZN12AssetTracker6gpsFixEv+0x28>)
 8081388:	2100      	movs	r1, #0
 808138a:	68b0      	ldr	r0, [r6, #8]
 808138c:	f003 f968 	bl	8084660 <__aeabi_fcmpeq>
 8081390:	4605      	mov	r5, r0
 8081392:	b948      	cbnz	r0, 80813a8 <_ZN12AssetTracker6gpsFixEv+0x24>
 8081394:	2100      	movs	r1, #0
 8081396:	68f0      	ldr	r0, [r6, #12]
 8081398:	f04f 0401 	mov.w	r4, #1
 808139c:	f003 f960 	bl	8084660 <__aeabi_fcmpeq>
 80813a0:	b100      	cbz	r0, 80813a4 <_ZN12AssetTracker6gpsFixEv+0x20>
 80813a2:	462c      	mov	r4, r5
 80813a4:	b2e0      	uxtb	r0, r4
 80813a6:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 80813a8:	2000      	movs	r0, #0
    } else {
        return true;
    }
    //return gps.fix;
}
 80813aa:	bd70      	pop	{r4, r5, r6, pc}
 80813ac:	200003ec 	.word	0x200003ec

080813b0 <_ZN12AssetTracker9updateGPSEv>:
// char AssetTracker::checkGPS(){
//     char c = gps.read();
//     return c;
// }

void AssetTracker::updateGPS() {
 80813b0:	b508      	push	{r3, lr}
  //     // this also sets the newNMEAreceived() flag to false
  //     return;  // we can fail to parse a sentence in which case we should just wait for another
  //   }
  // }
  //read the complete sentence
  while (Serial1.available()) {
 80813b2:	f001 fbcf 	bl	8082b54 <_Z22__fetch_global_Serial1v>
 80813b6:	6803      	ldr	r3, [r0, #0]
 80813b8:	691b      	ldr	r3, [r3, #16]
 80813ba:	4798      	blx	r3
 80813bc:	b178      	cbz	r0, 80813de <_ZN12AssetTracker9updateGPSEv+0x2e>
        char c = gps.read();
 80813be:	4808      	ldr	r0, [pc, #32]	; (80813e0 <_ZN12AssetTracker9updateGPSEv+0x30>)
 80813c0:	f7ff f8ee 	bl	80805a0 <_ZN12Adafruit_GPS4readEv>
        if (gps.newNMEAreceived()) {
 80813c4:	4806      	ldr	r0, [pc, #24]	; (80813e0 <_ZN12AssetTracker9updateGPSEv+0x30>)
 80813c6:	f7ff f97d 	bl	80806c4 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 80813ca:	2800      	cmp	r0, #0
 80813cc:	d0f1      	beq.n	80813b2 <_ZN12AssetTracker9updateGPSEv+0x2>
            gps.parse(gps.lastNMEA());
 80813ce:	4804      	ldr	r0, [pc, #16]	; (80813e0 <_ZN12AssetTracker9updateGPSEv+0x30>)
 80813d0:	f7ff f97e 	bl	80806d0 <_ZN12Adafruit_GPS8lastNMEAEv>
 80813d4:	4601      	mov	r1, r0
 80813d6:	4802      	ldr	r0, [pc, #8]	; (80813e0 <_ZN12AssetTracker9updateGPSEv+0x30>)
 80813d8:	f7ff f994 	bl	8080704 <_ZN12Adafruit_GPS5parseEPc>
 80813dc:	e7e9      	b.n	80813b2 <_ZN12AssetTracker9updateGPSEv+0x2>
 80813de:	bd08      	pop	{r3, pc}
 80813e0:	200003ec 	.word	0x200003ec

080813e4 <_ZN12AssetTracker21setupLowPowerWakeModeEh>:
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
    return magnitude;
}

bool AssetTracker::setupLowPowerWakeMode(uint8_t movementThreshold) {
	return accel.setupLowPowerWakeMode(movementThreshold);
 80813e4:	4801      	ldr	r0, [pc, #4]	; (80813ec <_ZN12AssetTracker21setupLowPowerWakeModeEh+0x8>)
 80813e6:	f7ff be33 	b.w	8081050 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>
 80813ea:	bf00      	nop
 80813ec:	200003c0 	.word	0x200003c0

080813f0 <_ZN12AssetTracker19clearAccelInterruptEv>:
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
 80813f0:	4801      	ldr	r0, [pc, #4]	; (80813f8 <_ZN12AssetTracker19clearAccelInterruptEv+0x8>)
 80813f2:	f7ff be73 	b.w	80810dc <_ZN15Adafruit_LIS3DH14clearInterruptEv>
 80813f6:	bf00      	nop
 80813f8:	200003c0 	.word	0x200003c0

080813fc <_GLOBAL__sub_I_gps>:
}
 80813fc:	b510      	push	{r4, lr}
 80813fe:	f000 f931 	bl	8081664 <HAL_Pin_Map>
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 8081402:	f001 fba7 	bl	8082b54 <_Z22__fetch_global_Serial1v>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8081406:	4c08      	ldr	r4, [pc, #32]	; (8081428 <_GLOBAL__sub_I_gps+0x2c>)
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 8081408:	4601      	mov	r1, r0
 808140a:	4808      	ldr	r0, [pc, #32]	; (808142c <_GLOBAL__sub_I_gps+0x30>)
 808140c:	f7ff f948 	bl	80806a0 <_ZN12Adafruit_GPSC1EP11USARTSerial>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8081410:	210c      	movs	r1, #12
 8081412:	4620      	mov	r0, r4
 8081414:	f7ff fcc6 	bl	8080da4 <_ZN15Adafruit_LIS3DHC1Ea>
 8081418:	4620      	mov	r0, r4
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 808141a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 808141e:	4a04      	ldr	r2, [pc, #16]	; (8081430 <_GLOBAL__sub_I_gps+0x34>)
 8081420:	4904      	ldr	r1, [pc, #16]	; (8081434 <_GLOBAL__sub_I_gps+0x38>)
 8081422:	f001 be8d 	b.w	8083140 <__aeabi_atexit>
 8081426:	bf00      	nop
 8081428:	200003c0 	.word	0x200003c0
 808142c:	200003ec 	.word	0x200003ec
 8081430:	2000023c 	.word	0x2000023c
 8081434:	08080d53 	.word	0x08080d53

08081438 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
 8081438:	4770      	bx	lr

0808143a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
 808143a:	b538      	push	{r3, r4, r5, lr}
 808143c:	4605      	mov	r5, r0
 808143e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
 8081440:	f001 fdfa 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081444:	7829      	ldrb	r1, [r5, #0]
 8081446:	f000 ff76 	bl	8082336 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
 808144a:	f001 fdf5 	bl	8083038 <_Z19__fetch_global_Wirev>
 808144e:	0a21      	lsrs	r1, r4, #8
 8081450:	f7ff fca3 	bl	8080d9a <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
 8081454:	f001 fdf0 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081458:	b2e1      	uxtb	r1, r4
 808145a:	f7ff fc9e 	bl	8080d9a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
 808145e:	f001 fdeb 	bl	8083038 <_Z19__fetch_global_Wirev>
}
 8081462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
 8081466:	f000 bf71 	b.w	808234c <_ZN7TwoWire15endTransmissionEv>

0808146a <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
 808146a:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 808146c:	f243 01a2 	movw	r1, #12450	; 0x30a2
 8081470:	f7ff ffe3 	bl	808143a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
}
 8081474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
 8081478:	200a      	movs	r0, #10
 808147a:	f000 bb59 	b.w	8081b30 <delay>

0808147e <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
 808147e:	b538      	push	{r3, r4, r5, lr}
 8081480:	460d      	mov	r5, r1
 8081482:	4604      	mov	r4, r0
  Wire.begin();
 8081484:	f001 fdd8 	bl	8083038 <_Z19__fetch_global_Wirev>
 8081488:	f000 ff1e 	bl	80822c8 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
 808148c:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
 808148e:	7025      	strb	r5, [r4, #0]
  reset();
 8081490:	f7ff ffeb 	bl	808146a <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
 8081494:	2001      	movs	r0, #1
 8081496:	bd38      	pop	{r3, r4, r5, pc}

08081498 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
 8081498:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
 808149a:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
 808149c:	4291      	cmp	r1, r2
 808149e:	d00e      	beq.n	80814be <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
 80814a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80814a4:	4058      	eors	r0, r3
 80814a6:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80814a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80814ac:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80814b0:	bf18      	it	ne
 80814b2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80814b6:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80814b8:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80814ba:	d1f5      	bne.n	80814a8 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
 80814bc:	e7ee      	b.n	808149c <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
 80814be:	4770      	bx	lr

080814c0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
 80814c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80814c2:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
 80814c4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80814c8:	f7ff ffb7 	bl	808143a <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
 80814cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80814d0:	f000 fb2e 	bl	8081b30 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
 80814d4:	f001 fdb0 	bl	8083038 <_Z19__fetch_global_Wirev>
 80814d8:	2206      	movs	r2, #6
 80814da:	7821      	ldrb	r1, [r4, #0]
 80814dc:	f000 ff28 	bl	8082330 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
 80814e0:	f001 fdaa 	bl	8083038 <_Z19__fetch_global_Wirev>
 80814e4:	6803      	ldr	r3, [r0, #0]
 80814e6:	691b      	ldr	r3, [r3, #16]
 80814e8:	4798      	blx	r3
 80814ea:	2806      	cmp	r0, #6
 80814ec:	d14a      	bne.n	8081584 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
 80814ee:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
 80814f0:	f001 fda2 	bl	8083038 <_Z19__fetch_global_Wirev>
 80814f4:	6803      	ldr	r3, [r0, #0]
 80814f6:	695b      	ldr	r3, [r3, #20]
 80814f8:	4798      	blx	r3
 80814fa:	f80d 0005 	strb.w	r0, [sp, r5]
 80814fe:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
 8081500:	2d06      	cmp	r5, #6
 8081502:	d1f5      	bne.n	80814f0 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
 8081504:	2202      	movs	r2, #2
 8081506:	4669      	mov	r1, sp
 8081508:	4620      	mov	r0, r4
 808150a:	f7ff ffc5 	bl	8081498 <_ZN14Adafruit_SHT314crc8EPKhi>
 808150e:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8081512:	4285      	cmp	r5, r0
 8081514:	d136      	bne.n	8081584 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
 8081516:	2202      	movs	r2, #2
 8081518:	f10d 0103 	add.w	r1, sp, #3
 808151c:	4620      	mov	r0, r4
 808151e:	f7ff ffbb 	bl	8081498 <_ZN14Adafruit_SHT314crc8EPKhi>
 8081522:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8081526:	4285      	cmp	r5, r0
 8081528:	d12c      	bne.n	8081584 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 808152a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
 808152e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
 8081532:	ba40      	rev16	r0, r0
 8081534:	b280      	uxth	r0, r0
 8081536:	f002 fa33 	bl	80839a0 <__aeabi_ui2d>
  stemp *= 175;
 808153a:	a315      	add	r3, pc, #84	; (adr r3, 8081590 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
 808153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081540:	f002 faa4 	bl	8083a8c <__aeabi_dmul>
  stemp /= 0xffff;
 8081544:	a314      	add	r3, pc, #80	; (adr r3, 8081598 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 8081546:	e9d3 2300 	ldrd	r2, r3, [r3]
 808154a:	f002 fbc9 	bl	8083ce0 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
 808154e:	2200      	movs	r2, #0
 8081550:	4b13      	ldr	r3, [pc, #76]	; (80815a0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
 8081552:	f002 f8e7 	bl	8083724 <__aeabi_dsub>
 8081556:	f002 fd91 	bl	808407c <__aeabi_d2f>

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];
 808155a:	f89d 5004 	ldrb.w	r5, [sp, #4]
 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
  stemp *= 175;
  stemp /= 0xffff;
  stemp = -45 + stemp;
  temp = stemp;
 808155e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
 8081560:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 8081564:	f002 fa1c 	bl	80839a0 <__aeabi_ui2d>
  shum *= 100;
 8081568:	2200      	movs	r2, #0
 808156a:	4b0e      	ldr	r3, [pc, #56]	; (80815a4 <_ZN14Adafruit_SHT3111readTempHumEv+0xe4>)
 808156c:	f002 fa8e 	bl	8083a8c <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
 8081570:	a309      	add	r3, pc, #36	; (adr r3, 8081598 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
 8081572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081576:	f002 fbb3 	bl	8083ce0 <__aeabi_ddiv>
 808157a:	f002 fd7f 	bl	808407c <__aeabi_d2f>
 808157e:	6060      	str	r0, [r4, #4]
  
  return true;
 8081580:	2001      	movs	r0, #1
 8081582:	e000      	b.n	8081586 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
 8081584:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
 8081586:	b002      	add	sp, #8
 8081588:	bd70      	pop	{r4, r5, r6, pc}
 808158a:	bf00      	nop
 808158c:	f3af 8000 	nop.w
 8081590:	00000000 	.word	0x00000000
 8081594:	4065e000 	.word	0x4065e000
 8081598:	00000000 	.word	0x00000000
 808159c:	40efffe0 	.word	0x40efffe0
 80815a0:	40468000 	.word	0x40468000
 80815a4:	40590000 	.word	0x40590000

080815a8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
 80815a8:	b510      	push	{r4, lr}
 80815aa:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
 80815ac:	f7ff ff88 	bl	80814c0 <_ZN14Adafruit_SHT3111readTempHumEv>
 80815b0:	b108      	cbz	r0, 80815b6 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>

  return temp;
 80815b2:	68a0      	ldr	r0, [r4, #8]
 80815b4:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
 80815b6:	4801      	ldr	r0, [pc, #4]	; (80815bc <_ZN14Adafruit_SHT3115readTemperatureEv+0x14>)

  return temp;
}
 80815b8:	bd10      	pop	{r4, pc}
 80815ba:	bf00      	nop
 80815bc:	7fc00000 	.word	0x7fc00000

080815c0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
 80815c0:	f000 b850 	b.w	8081664 <HAL_Pin_Map>

080815c4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <inet_gethostbyname+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	08060020 	.word	0x08060020

080815d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <os_mutex_recursive_create+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	080401d0 	.word	0x080401d0

080815e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <os_mutex_recursive_destroy+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401d0 	.word	0x080401d0

080815f4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <os_mutex_recursive_lock+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401d0 	.word	0x080401d0

08081604 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <os_mutex_recursive_unlock+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401d0 	.word	0x080401d0

08081614 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <HAL_Core_System_Reset_Ex+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401b8 	.word	0x080401b8

08081624 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <HAL_RNG_GetRandomNumber+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	685b      	ldr	r3, [r3, #4]
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	0804019c 	.word	0x0804019c

08081634 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	695b      	ldr	r3, [r3, #20]
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	0804019c 	.word	0x0804019c

08081644 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <HAL_RTC_Get_UnixTime+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	69db      	ldr	r3, [r3, #28]
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	0804019c 	.word	0x0804019c

08081654 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <HAL_RTC_Time_Is_Valid+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	0804019c 	.word	0x0804019c

08081664 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b02      	ldr	r3, [pc, #8]	; (8081670 <HAL_Pin_Map+0xc>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	681b      	ldr	r3, [r3, #0]
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	bd08      	pop	{r3, pc}
 8081670:	080401b0 	.word	0x080401b0

08081674 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081674:	b508      	push	{r3, lr}
 8081676:	4b02      	ldr	r3, [pc, #8]	; (8081680 <HAL_Pin_Mode+0xc>)
 8081678:	681b      	ldr	r3, [r3, #0]
 808167a:	689b      	ldr	r3, [r3, #8]
 808167c:	9301      	str	r3, [sp, #4]
 808167e:	bd08      	pop	{r3, pc}
 8081680:	080401b0 	.word	0x080401b0

08081684 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081684:	b508      	push	{r3, lr}
 8081686:	4b02      	ldr	r3, [pc, #8]	; (8081690 <HAL_Get_Pin_Mode+0xc>)
 8081688:	681b      	ldr	r3, [r3, #0]
 808168a:	68db      	ldr	r3, [r3, #12]
 808168c:	9301      	str	r3, [sp, #4]
 808168e:	bd08      	pop	{r3, pc}
 8081690:	080401b0 	.word	0x080401b0

08081694 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081694:	b508      	push	{r3, lr}
 8081696:	4b02      	ldr	r3, [pc, #8]	; (80816a0 <HAL_GPIO_Write+0xc>)
 8081698:	681b      	ldr	r3, [r3, #0]
 808169a:	691b      	ldr	r3, [r3, #16]
 808169c:	9301      	str	r3, [sp, #4]
 808169e:	bd08      	pop	{r3, pc}
 80816a0:	080401b0 	.word	0x080401b0

080816a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80816a4:	b508      	push	{r3, lr}
 80816a6:	4b02      	ldr	r3, [pc, #8]	; (80816b0 <HAL_GPIO_Read+0xc>)
 80816a8:	681b      	ldr	r3, [r3, #0]
 80816aa:	695b      	ldr	r3, [r3, #20]
 80816ac:	9301      	str	r3, [sp, #4]
 80816ae:	bd08      	pop	{r3, pc}
 80816b0:	080401b0 	.word	0x080401b0

080816b4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80816b4:	b508      	push	{r3, lr}
 80816b6:	4b02      	ldr	r3, [pc, #8]	; (80816c0 <HAL_I2C_Begin+0xc>)
 80816b8:	681b      	ldr	r3, [r3, #0]
 80816ba:	68db      	ldr	r3, [r3, #12]
 80816bc:	9301      	str	r3, [sp, #4]
 80816be:	bd08      	pop	{r3, pc}
 80816c0:	080401ac 	.word	0x080401ac

080816c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80816c4:	b508      	push	{r3, lr}
 80816c6:	4b02      	ldr	r3, [pc, #8]	; (80816d0 <HAL_I2C_Begin_Transmission+0xc>)
 80816c8:	681b      	ldr	r3, [r3, #0]
 80816ca:	699b      	ldr	r3, [r3, #24]
 80816cc:	9301      	str	r3, [sp, #4]
 80816ce:	bd08      	pop	{r3, pc}
 80816d0:	080401ac 	.word	0x080401ac

080816d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80816d4:	b508      	push	{r3, lr}
 80816d6:	4b02      	ldr	r3, [pc, #8]	; (80816e0 <HAL_I2C_End_Transmission+0xc>)
 80816d8:	681b      	ldr	r3, [r3, #0]
 80816da:	69db      	ldr	r3, [r3, #28]
 80816dc:	9301      	str	r3, [sp, #4]
 80816de:	bd08      	pop	{r3, pc}
 80816e0:	080401ac 	.word	0x080401ac

080816e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80816e4:	b508      	push	{r3, lr}
 80816e6:	4b02      	ldr	r3, [pc, #8]	; (80816f0 <HAL_I2C_Write_Data+0xc>)
 80816e8:	681b      	ldr	r3, [r3, #0]
 80816ea:	6a1b      	ldr	r3, [r3, #32]
 80816ec:	9301      	str	r3, [sp, #4]
 80816ee:	bd08      	pop	{r3, pc}
 80816f0:	080401ac 	.word	0x080401ac

080816f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <HAL_I2C_Available_Data+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	080401ac 	.word	0x080401ac

08081704 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <HAL_I2C_Read_Data+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	080401ac 	.word	0x080401ac

08081714 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <HAL_I2C_Peek_Data+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	080401ac 	.word	0x080401ac

08081724 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <HAL_I2C_Flush_Data+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	080401ac 	.word	0x080401ac

08081734 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <HAL_I2C_Is_Enabled+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	080401ac 	.word	0x080401ac

08081744 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <HAL_I2C_Init+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	080401ac 	.word	0x080401ac

08081754 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <HAL_I2C_Acquire+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	080401ac 	.word	0x080401ac

08081764 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <HAL_I2C_Release+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	080401ac 	.word	0x080401ac

08081774 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <HAL_I2C_Request_Data_Ex+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	080401ac 	.word	0x080401ac

08081784 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <HAL_SPI_Begin+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	681b      	ldr	r3, [r3, #0]
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	080401b4 	.word	0x080401b4

08081794 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <HAL_SPI_Set_Bit_Order+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	689b      	ldr	r3, [r3, #8]
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	080401b4 	.word	0x080401b4

080817a4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <HAL_SPI_Set_Data_Mode+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	68db      	ldr	r3, [r3, #12]
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	080401b4 	.word	0x080401b4

080817b4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b02      	ldr	r3, [pc, #8]	; (80817c0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	691b      	ldr	r3, [r3, #16]
 80817bc:	9301      	str	r3, [sp, #4]
 80817be:	bd08      	pop	{r3, pc}
 80817c0:	080401b4 	.word	0x080401b4

080817c4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80817c4:	b508      	push	{r3, lr}
 80817c6:	4b02      	ldr	r3, [pc, #8]	; (80817d0 <HAL_SPI_Send_Receive_Data+0xc>)
 80817c8:	681b      	ldr	r3, [r3, #0]
 80817ca:	695b      	ldr	r3, [r3, #20]
 80817cc:	9301      	str	r3, [sp, #4]
 80817ce:	bd08      	pop	{r3, pc}
 80817d0:	080401b4 	.word	0x080401b4

080817d4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80817d4:	b508      	push	{r3, lr}
 80817d6:	4b02      	ldr	r3, [pc, #8]	; (80817e0 <HAL_SPI_Init+0xc>)
 80817d8:	681b      	ldr	r3, [r3, #0]
 80817da:	69db      	ldr	r3, [r3, #28]
 80817dc:	9301      	str	r3, [sp, #4]
 80817de:	bd08      	pop	{r3, pc}
 80817e0:	080401b4 	.word	0x080401b4

080817e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <HAL_SPI_Is_Enabled+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	6a1b      	ldr	r3, [r3, #32]
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	080401b4 	.word	0x080401b4

080817f4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <HAL_SPI_Info+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	080401b4 	.word	0x080401b4

08081804 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b02      	ldr	r3, [pc, #8]	; (8081810 <HAL_USART_Init+0xc>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	699b      	ldr	r3, [r3, #24]
 808180c:	9301      	str	r3, [sp, #4]
 808180e:	bd08      	pop	{r3, pc}
 8081810:	080401c4 	.word	0x080401c4

08081814 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081814:	b508      	push	{r3, lr}
 8081816:	4b02      	ldr	r3, [pc, #8]	; (8081820 <HAL_USART_Write_Data+0xc>)
 8081818:	681b      	ldr	r3, [r3, #0]
 808181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808181c:	9301      	str	r3, [sp, #4]
 808181e:	bd08      	pop	{r3, pc}
 8081820:	080401c4 	.word	0x080401c4

08081824 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081824:	b508      	push	{r3, lr}
 8081826:	4b02      	ldr	r3, [pc, #8]	; (8081830 <HAL_USART_Available_Data+0xc>)
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808182c:	9301      	str	r3, [sp, #4]
 808182e:	bd08      	pop	{r3, pc}
 8081830:	080401c4 	.word	0x080401c4

08081834 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081834:	b508      	push	{r3, lr}
 8081836:	4b02      	ldr	r3, [pc, #8]	; (8081840 <HAL_USART_Read_Data+0xc>)
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808183c:	9301      	str	r3, [sp, #4]
 808183e:	bd08      	pop	{r3, pc}
 8081840:	080401c4 	.word	0x080401c4

08081844 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081844:	b508      	push	{r3, lr}
 8081846:	4b02      	ldr	r3, [pc, #8]	; (8081850 <HAL_USART_Peek_Data+0xc>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808184c:	9301      	str	r3, [sp, #4]
 808184e:	bd08      	pop	{r3, pc}
 8081850:	080401c4 	.word	0x080401c4

08081854 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081854:	b508      	push	{r3, lr}
 8081856:	4b02      	ldr	r3, [pc, #8]	; (8081860 <HAL_USART_Flush_Data+0xc>)
 8081858:	681b      	ldr	r3, [r3, #0]
 808185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808185c:	9301      	str	r3, [sp, #4]
 808185e:	bd08      	pop	{r3, pc}
 8081860:	080401c4 	.word	0x080401c4

08081864 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081864:	b508      	push	{r3, lr}
 8081866:	4b02      	ldr	r3, [pc, #8]	; (8081870 <HAL_USART_Is_Enabled+0xc>)
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808186c:	9301      	str	r3, [sp, #4]
 808186e:	bd08      	pop	{r3, pc}
 8081870:	080401c4 	.word	0x080401c4

08081874 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081874:	b508      	push	{r3, lr}
 8081876:	4b02      	ldr	r3, [pc, #8]	; (8081880 <HAL_USART_Available_Data_For_Write+0xc>)
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808187c:	9301      	str	r3, [sp, #4]
 808187e:	bd08      	pop	{r3, pc}
 8081880:	080401c4 	.word	0x080401c4

08081884 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8081884:	b508      	push	{r3, lr}
 8081886:	4b02      	ldr	r3, [pc, #8]	; (8081890 <HAL_USART_BeginConfig+0xc>)
 8081888:	681b      	ldr	r3, [r3, #0]
 808188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808188c:	9301      	str	r3, [sp, #4]
 808188e:	bd08      	pop	{r3, pc}
 8081890:	080401c4 	.word	0x080401c4

08081894 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081894:	b508      	push	{r3, lr}
 8081896:	4b02      	ldr	r3, [pc, #8]	; (80818a0 <HAL_USB_USART_Init+0xc>)
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	681b      	ldr	r3, [r3, #0]
 808189c:	9301      	str	r3, [sp, #4]
 808189e:	bd08      	pop	{r3, pc}
 80818a0:	0806001c 	.word	0x0806001c

080818a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80818a4:	b508      	push	{r3, lr}
 80818a6:	4b02      	ldr	r3, [pc, #8]	; (80818b0 <HAL_USB_USART_Available_Data+0xc>)
 80818a8:	681b      	ldr	r3, [r3, #0]
 80818aa:	691b      	ldr	r3, [r3, #16]
 80818ac:	9301      	str	r3, [sp, #4]
 80818ae:	bd08      	pop	{r3, pc}
 80818b0:	0806001c 	.word	0x0806001c

080818b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80818b4:	b508      	push	{r3, lr}
 80818b6:	4b02      	ldr	r3, [pc, #8]	; (80818c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80818b8:	681b      	ldr	r3, [r3, #0]
 80818ba:	695b      	ldr	r3, [r3, #20]
 80818bc:	9301      	str	r3, [sp, #4]
 80818be:	bd08      	pop	{r3, pc}
 80818c0:	0806001c 	.word	0x0806001c

080818c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80818c4:	b508      	push	{r3, lr}
 80818c6:	4b02      	ldr	r3, [pc, #8]	; (80818d0 <HAL_USB_USART_Receive_Data+0xc>)
 80818c8:	681b      	ldr	r3, [r3, #0]
 80818ca:	699b      	ldr	r3, [r3, #24]
 80818cc:	9301      	str	r3, [sp, #4]
 80818ce:	bd08      	pop	{r3, pc}
 80818d0:	0806001c 	.word	0x0806001c

080818d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80818d4:	b508      	push	{r3, lr}
 80818d6:	4b02      	ldr	r3, [pc, #8]	; (80818e0 <HAL_USB_USART_Send_Data+0xc>)
 80818d8:	681b      	ldr	r3, [r3, #0]
 80818da:	69db      	ldr	r3, [r3, #28]
 80818dc:	9301      	str	r3, [sp, #4]
 80818de:	bd08      	pop	{r3, pc}
 80818e0:	0806001c 	.word	0x0806001c

080818e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80818e4:	b508      	push	{r3, lr}
 80818e6:	4b02      	ldr	r3, [pc, #8]	; (80818f0 <HAL_USB_USART_Flush_Data+0xc>)
 80818e8:	681b      	ldr	r3, [r3, #0]
 80818ea:	6a1b      	ldr	r3, [r3, #32]
 80818ec:	9301      	str	r3, [sp, #4]
 80818ee:	bd08      	pop	{r3, pc}
 80818f0:	0806001c 	.word	0x0806001c

080818f4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80818f4:	b508      	push	{r3, lr}
 80818f6:	4b02      	ldr	r3, [pc, #8]	; (8081900 <system_mode+0xc>)
 80818f8:	681b      	ldr	r3, [r3, #0]
 80818fa:	681b      	ldr	r3, [r3, #0]
 80818fc:	9301      	str	r3, [sp, #4]
 80818fe:	bd08      	pop	{r3, pc}
 8081900:	080401a4 	.word	0x080401a4

08081904 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081904:	b508      	push	{r3, lr}
 8081906:	4b02      	ldr	r3, [pc, #8]	; (8081910 <set_system_mode+0xc>)
 8081908:	681b      	ldr	r3, [r3, #0]
 808190a:	685b      	ldr	r3, [r3, #4]
 808190c:	9301      	str	r3, [sp, #4]
 808190e:	bd08      	pop	{r3, pc}
 8081910:	080401a4 	.word	0x080401a4

08081914 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081914:	b508      	push	{r3, lr}
 8081916:	4b02      	ldr	r3, [pc, #8]	; (8081920 <system_delay_ms+0xc>)
 8081918:	681b      	ldr	r3, [r3, #0]
 808191a:	695b      	ldr	r3, [r3, #20]
 808191c:	9301      	str	r3, [sp, #4]
 808191e:	bd08      	pop	{r3, pc}
 8081920:	080401a4 	.word	0x080401a4

08081924 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081924:	b508      	push	{r3, lr}
 8081926:	4b02      	ldr	r3, [pc, #8]	; (8081930 <system_thread_set_state+0xc>)
 8081928:	681b      	ldr	r3, [r3, #0]
 808192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808192c:	9301      	str	r3, [sp, #4]
 808192e:	bd08      	pop	{r3, pc}
 8081930:	080401a4 	.word	0x080401a4

08081934 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081934:	b508      	push	{r3, lr}
 8081936:	4b02      	ldr	r3, [pc, #8]	; (8081940 <application_thread_current+0xc>)
 8081938:	681b      	ldr	r3, [r3, #0]
 808193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808193c:	9301      	str	r3, [sp, #4]
 808193e:	bd08      	pop	{r3, pc}
 8081940:	080401a4 	.word	0x080401a4

08081944 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081944:	b508      	push	{r3, lr}
 8081946:	4b02      	ldr	r3, [pc, #8]	; (8081950 <application_thread_invoke+0xc>)
 8081948:	681b      	ldr	r3, [r3, #0]
 808194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808194c:	9301      	str	r3, [sp, #4]
 808194e:	bd08      	pop	{r3, pc}
 8081950:	080401a4 	.word	0x080401a4

08081954 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081954:	b508      	push	{r3, lr}
 8081956:	4b02      	ldr	r3, [pc, #8]	; (8081960 <system_thread_get_state+0xc>)
 8081958:	681b      	ldr	r3, [r3, #0]
 808195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808195c:	9301      	str	r3, [sp, #4]
 808195e:	bd08      	pop	{r3, pc}
 8081960:	080401a4 	.word	0x080401a4

08081964 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081964:	b508      	push	{r3, lr}
 8081966:	4b03      	ldr	r3, [pc, #12]	; (8081974 <system_ctrl_set_app_request_handler+0x10>)
 8081968:	681b      	ldr	r3, [r3, #0]
 808196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808196e:	9301      	str	r3, [sp, #4]
 8081970:	bd08      	pop	{r3, pc}
 8081972:	0000      	.short	0x0000
 8081974:	080401a4 	.word	0x080401a4

08081978 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081978:	b508      	push	{r3, lr}
 808197a:	4b03      	ldr	r3, [pc, #12]	; (8081988 <system_ctrl_set_result+0x10>)
 808197c:	681b      	ldr	r3, [r3, #0]
 808197e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081982:	9301      	str	r3, [sp, #4]
 8081984:	bd08      	pop	{r3, pc}
 8081986:	0000      	.short	0x0000
 8081988:	080401a4 	.word	0x080401a4

0808198c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808198c:	b508      	push	{r3, lr}
 808198e:	4b03      	ldr	r3, [pc, #12]	; (808199c <system_sleep_pins+0x10>)
 8081990:	681b      	ldr	r3, [r3, #0]
 8081992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8081996:	9301      	str	r3, [sp, #4]
 8081998:	bd08      	pop	{r3, pc}
 808199a:	0000      	.short	0x0000
 808199c:	080401a4 	.word	0x080401a4

080819a0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80819a0:	b508      	push	{r3, lr}
 80819a2:	4b02      	ldr	r3, [pc, #8]	; (80819ac <spark_variable+0xc>)
 80819a4:	681b      	ldr	r3, [r3, #0]
 80819a6:	681b      	ldr	r3, [r3, #0]
 80819a8:	9301      	str	r3, [sp, #4]
 80819aa:	bd08      	pop	{r3, pc}
 80819ac:	080401cc 	.word	0x080401cc

080819b0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80819b0:	b508      	push	{r3, lr}
 80819b2:	4b02      	ldr	r3, [pc, #8]	; (80819bc <spark_process+0xc>)
 80819b4:	681b      	ldr	r3, [r3, #0]
 80819b6:	689b      	ldr	r3, [r3, #8]
 80819b8:	9301      	str	r3, [sp, #4]
 80819ba:	bd08      	pop	{r3, pc}
 80819bc:	080401cc 	.word	0x080401cc

080819c0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80819c0:	b508      	push	{r3, lr}
 80819c2:	4b02      	ldr	r3, [pc, #8]	; (80819cc <spark_cloud_flag_connected+0xc>)
 80819c4:	681b      	ldr	r3, [r3, #0]
 80819c6:	695b      	ldr	r3, [r3, #20]
 80819c8:	9301      	str	r3, [sp, #4]
 80819ca:	bd08      	pop	{r3, pc}
 80819cc:	080401cc 	.word	0x080401cc

080819d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80819d0:	b508      	push	{r3, lr}
 80819d2:	4b02      	ldr	r3, [pc, #8]	; (80819dc <spark_send_event+0xc>)
 80819d4:	681b      	ldr	r3, [r3, #0]
 80819d6:	6a1b      	ldr	r3, [r3, #32]
 80819d8:	9301      	str	r3, [sp, #4]
 80819da:	bd08      	pop	{r3, pc}
 80819dc:	080401cc 	.word	0x080401cc

080819e0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80819e0:	b508      	push	{r3, lr}
 80819e2:	4b02      	ldr	r3, [pc, #8]	; (80819ec <spark_sync_time+0xc>)
 80819e4:	681b      	ldr	r3, [r3, #0]
 80819e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80819e8:	9301      	str	r3, [sp, #4]
 80819ea:	bd08      	pop	{r3, pc}
 80819ec:	080401cc 	.word	0x080401cc

080819f0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80819f0:	b508      	push	{r3, lr}
 80819f2:	4b02      	ldr	r3, [pc, #8]	; (80819fc <spark_sync_time_pending+0xc>)
 80819f4:	681b      	ldr	r3, [r3, #0]
 80819f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80819f8:	9301      	str	r3, [sp, #4]
 80819fa:	bd08      	pop	{r3, pc}
 80819fc:	080401cc 	.word	0x080401cc

08081a00 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081a00:	b508      	push	{r3, lr}
 8081a02:	4b02      	ldr	r3, [pc, #8]	; (8081a0c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081a04:	681b      	ldr	r3, [r3, #0]
 8081a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081a08:	9301      	str	r3, [sp, #4]
 8081a0a:	bd08      	pop	{r3, pc}
 8081a0c:	080401cc 	.word	0x080401cc

08081a10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081a10:	b508      	push	{r3, lr}
 8081a12:	4b02      	ldr	r3, [pc, #8]	; (8081a1c <network_connect+0xc>)
 8081a14:	681b      	ldr	r3, [r3, #0]
 8081a16:	685b      	ldr	r3, [r3, #4]
 8081a18:	9301      	str	r3, [sp, #4]
 8081a1a:	bd08      	pop	{r3, pc}
 8081a1c:	080401c8 	.word	0x080401c8

08081a20 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081a20:	b508      	push	{r3, lr}
 8081a22:	4b02      	ldr	r3, [pc, #8]	; (8081a2c <network_connecting+0xc>)
 8081a24:	681b      	ldr	r3, [r3, #0]
 8081a26:	689b      	ldr	r3, [r3, #8]
 8081a28:	9301      	str	r3, [sp, #4]
 8081a2a:	bd08      	pop	{r3, pc}
 8081a2c:	080401c8 	.word	0x080401c8

08081a30 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081a30:	b508      	push	{r3, lr}
 8081a32:	4b02      	ldr	r3, [pc, #8]	; (8081a3c <network_disconnect+0xc>)
 8081a34:	681b      	ldr	r3, [r3, #0]
 8081a36:	68db      	ldr	r3, [r3, #12]
 8081a38:	9301      	str	r3, [sp, #4]
 8081a3a:	bd08      	pop	{r3, pc}
 8081a3c:	080401c8 	.word	0x080401c8

08081a40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081a40:	b508      	push	{r3, lr}
 8081a42:	4b02      	ldr	r3, [pc, #8]	; (8081a4c <network_ready+0xc>)
 8081a44:	681b      	ldr	r3, [r3, #0]
 8081a46:	691b      	ldr	r3, [r3, #16]
 8081a48:	9301      	str	r3, [sp, #4]
 8081a4a:	bd08      	pop	{r3, pc}
 8081a4c:	080401c8 	.word	0x080401c8

08081a50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081a50:	b508      	push	{r3, lr}
 8081a52:	4b02      	ldr	r3, [pc, #8]	; (8081a5c <network_on+0xc>)
 8081a54:	681b      	ldr	r3, [r3, #0]
 8081a56:	695b      	ldr	r3, [r3, #20]
 8081a58:	9301      	str	r3, [sp, #4]
 8081a5a:	bd08      	pop	{r3, pc}
 8081a5c:	080401c8 	.word	0x080401c8

08081a60 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081a60:	b508      	push	{r3, lr}
 8081a62:	4b02      	ldr	r3, [pc, #8]	; (8081a6c <network_off+0xc>)
 8081a64:	681b      	ldr	r3, [r3, #0]
 8081a66:	699b      	ldr	r3, [r3, #24]
 8081a68:	9301      	str	r3, [sp, #4]
 8081a6a:	bd08      	pop	{r3, pc}
 8081a6c:	080401c8 	.word	0x080401c8

08081a70 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081a70:	b508      	push	{r3, lr}
 8081a72:	4b02      	ldr	r3, [pc, #8]	; (8081a7c <network_listen+0xc>)
 8081a74:	681b      	ldr	r3, [r3, #0]
 8081a76:	69db      	ldr	r3, [r3, #28]
 8081a78:	9301      	str	r3, [sp, #4]
 8081a7a:	bd08      	pop	{r3, pc}
 8081a7c:	080401c8 	.word	0x080401c8

08081a80 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081a80:	b508      	push	{r3, lr}
 8081a82:	4b02      	ldr	r3, [pc, #8]	; (8081a8c <network_listening+0xc>)
 8081a84:	681b      	ldr	r3, [r3, #0]
 8081a86:	6a1b      	ldr	r3, [r3, #32]
 8081a88:	9301      	str	r3, [sp, #4]
 8081a8a:	bd08      	pop	{r3, pc}
 8081a8c:	080401c8 	.word	0x080401c8

08081a90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081a90:	b508      	push	{r3, lr}
 8081a92:	4b02      	ldr	r3, [pc, #8]	; (8081a9c <network_set_listen_timeout+0xc>)
 8081a94:	681b      	ldr	r3, [r3, #0]
 8081a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a98:	9301      	str	r3, [sp, #4]
 8081a9a:	bd08      	pop	{r3, pc}
 8081a9c:	080401c8 	.word	0x080401c8

08081aa0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081aa0:	b508      	push	{r3, lr}
 8081aa2:	4b02      	ldr	r3, [pc, #8]	; (8081aac <network_get_listen_timeout+0xc>)
 8081aa4:	681b      	ldr	r3, [r3, #0]
 8081aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081aa8:	9301      	str	r3, [sp, #4]
 8081aaa:	bd08      	pop	{r3, pc}
 8081aac:	080401c8 	.word	0x080401c8

08081ab0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081ab0:	b508      	push	{r3, lr}
 8081ab2:	4b02      	ldr	r3, [pc, #8]	; (8081abc <malloc+0xc>)
 8081ab4:	681b      	ldr	r3, [r3, #0]
 8081ab6:	681b      	ldr	r3, [r3, #0]
 8081ab8:	9301      	str	r3, [sp, #4]
 8081aba:	bd08      	pop	{r3, pc}
 8081abc:	080401a0 	.word	0x080401a0

08081ac0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081ac0:	b508      	push	{r3, lr}
 8081ac2:	4b02      	ldr	r3, [pc, #8]	; (8081acc <free+0xc>)
 8081ac4:	681b      	ldr	r3, [r3, #0]
 8081ac6:	685b      	ldr	r3, [r3, #4]
 8081ac8:	9301      	str	r3, [sp, #4]
 8081aca:	bd08      	pop	{r3, pc}
 8081acc:	080401a0 	.word	0x080401a0

08081ad0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081ad0:	b508      	push	{r3, lr}
 8081ad2:	4b02      	ldr	r3, [pc, #8]	; (8081adc <realloc+0xc>)
 8081ad4:	681b      	ldr	r3, [r3, #0]
 8081ad6:	689b      	ldr	r3, [r3, #8]
 8081ad8:	9301      	str	r3, [sp, #4]
 8081ada:	bd08      	pop	{r3, pc}
 8081adc:	080401a0 	.word	0x080401a0

08081ae0 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081ae0:	b508      	push	{r3, lr}
 8081ae2:	4b02      	ldr	r3, [pc, #8]	; (8081aec <siscanf+0xc>)
 8081ae4:	681b      	ldr	r3, [r3, #0]
 8081ae6:	699b      	ldr	r3, [r3, #24]
 8081ae8:	9301      	str	r3, [sp, #4]
 8081aea:	bd08      	pop	{r3, pc}
 8081aec:	080401a0 	.word	0x080401a0

08081af0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081af0:	b508      	push	{r3, lr}
 8081af2:	4b02      	ldr	r3, [pc, #8]	; (8081afc <snprintf+0xc>)
 8081af4:	681b      	ldr	r3, [r3, #0]
 8081af6:	69db      	ldr	r3, [r3, #28]
 8081af8:	9301      	str	r3, [sp, #4]
 8081afa:	bd08      	pop	{r3, pc}
 8081afc:	080401a0 	.word	0x080401a0

08081b00 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081b00:	b508      	push	{r3, lr}
 8081b02:	4b02      	ldr	r3, [pc, #8]	; (8081b0c <abort+0xc>)
 8081b04:	681b      	ldr	r3, [r3, #0]
 8081b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081b08:	9301      	str	r3, [sp, #4]
 8081b0a:	bd08      	pop	{r3, pc}
 8081b0c:	080401a0 	.word	0x080401a0

08081b10 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081b10:	b508      	push	{r3, lr}
 8081b12:	4b02      	ldr	r3, [pc, #8]	; (8081b1c <_malloc_r+0xc>)
 8081b14:	681b      	ldr	r3, [r3, #0]
 8081b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b18:	9301      	str	r3, [sp, #4]
 8081b1a:	bd08      	pop	{r3, pc}
 8081b1c:	080401a0 	.word	0x080401a0

08081b20 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8081b20:	b508      	push	{r3, lr}
 8081b22:	4b02      	ldr	r3, [pc, #8]	; (8081b2c <__errno+0xc>)
 8081b24:	681b      	ldr	r3, [r3, #0]
 8081b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081b28:	9301      	str	r3, [sp, #4]
 8081b2a:	bd08      	pop	{r3, pc}
 8081b2c:	080401a0 	.word	0x080401a0

08081b30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081b30:	2100      	movs	r1, #0
 8081b32:	f7ff beef 	b.w	8081914 <system_delay_ms>

08081b36 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081b36:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081b38:	6883      	ldr	r3, [r0, #8]
 8081b3a:	4604      	mov	r4, r0
 8081b3c:	b90b      	cbnz	r3, 8081b42 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081b3e:	f001 fb20 	bl	8083182 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081b42:	68c3      	ldr	r3, [r0, #12]
 8081b44:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081b46:	68a3      	ldr	r3, [r4, #8]
 8081b48:	b11b      	cbz	r3, 8081b52 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081b4a:	2203      	movs	r2, #3
 8081b4c:	4621      	mov	r1, r4
 8081b4e:	4620      	mov	r0, r4
 8081b50:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081b52:	4620      	mov	r0, r4
}
 8081b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081b58:	2110      	movs	r1, #16
 8081b5a:	f001 baf6 	b.w	808314a <_ZdlPvj>

08081b5e <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081b5e:	2200      	movs	r2, #0
 8081b60:	4611      	mov	r1, r2
 8081b62:	6840      	ldr	r0, [r0, #4]
 8081b64:	f7ff bf6c 	b.w	8081a40 <network_ready>

08081b68 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081b68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081b6c:	2600      	movs	r6, #0
 8081b6e:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081b70:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081b72:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081b74:	4688      	mov	r8, r1
 8081b76:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081b78:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081b7c:	f002 ff75 	bl	8084a6a <strlen>
 8081b80:	9600      	str	r6, [sp, #0]
 8081b82:	b281      	uxth	r1, r0
 8081b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081b88:	4622      	mov	r2, r4
 8081b8a:	4638      	mov	r0, r7
 8081b8c:	f7ff fd1a 	bl	80815c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081b90:	b120      	cbz	r0, 8081b9c <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081b92:	4631      	mov	r1, r6
 8081b94:	4628      	mov	r0, r5
 8081b96:	f000 fc23 	bl	80823e0 <_ZN9IPAddressC1Em>
 8081b9a:	e003      	b.n	8081ba4 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081b9c:	4621      	mov	r1, r4
 8081b9e:	4628      	mov	r0, r5
 8081ba0:	f000 fc16 	bl	80823d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081ba4:	4628      	mov	r0, r5
 8081ba6:	b004      	add	sp, #16
 8081ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081bac <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081bac:	2200      	movs	r2, #0
 8081bae:	4611      	mov	r1, r2
 8081bb0:	6840      	ldr	r0, [r0, #4]
 8081bb2:	f7ff bf65 	b.w	8081a80 <network_listening>

08081bb6 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081bb6:	2200      	movs	r2, #0
 8081bb8:	4611      	mov	r1, r2
 8081bba:	6840      	ldr	r0, [r0, #4]
 8081bbc:	f7ff bf70 	b.w	8081aa0 <network_get_listen_timeout>

08081bc0 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081bc0:	2200      	movs	r2, #0
 8081bc2:	6840      	ldr	r0, [r0, #4]
 8081bc4:	f7ff bf64 	b.w	8081a90 <network_set_listen_timeout>

08081bc8 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081bc8:	2200      	movs	r2, #0
 8081bca:	f081 0101 	eor.w	r1, r1, #1
 8081bce:	6840      	ldr	r0, [r0, #4]
 8081bd0:	f7ff bf4e 	b.w	8081a70 <network_listen>

08081bd4 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081bd4:	2300      	movs	r3, #0
 8081bd6:	461a      	mov	r2, r3
 8081bd8:	4619      	mov	r1, r3
 8081bda:	6840      	ldr	r0, [r0, #4]
 8081bdc:	f7ff bf40 	b.w	8081a60 <network_off>

08081be0 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081be0:	2300      	movs	r3, #0
 8081be2:	461a      	mov	r2, r3
 8081be4:	4619      	mov	r1, r3
 8081be6:	6840      	ldr	r0, [r0, #4]
 8081be8:	f7ff bf32 	b.w	8081a50 <network_on>

08081bec <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081bec:	2200      	movs	r2, #0
 8081bee:	4611      	mov	r1, r2
 8081bf0:	6840      	ldr	r0, [r0, #4]
 8081bf2:	f7ff bf15 	b.w	8081a20 <network_connecting>

08081bf6 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081bf6:	2200      	movs	r2, #0
 8081bf8:	2102      	movs	r1, #2
 8081bfa:	6840      	ldr	r0, [r0, #4]
 8081bfc:	f7ff bf18 	b.w	8081a30 <network_disconnect>

08081c00 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081c00:	2300      	movs	r3, #0
 8081c02:	461a      	mov	r2, r3
 8081c04:	6840      	ldr	r0, [r0, #4]
 8081c06:	f7ff bf03 	b.w	8081a10 <network_connect>
	...

08081c0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081c0c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081c0e:	4c08      	ldr	r4, [pc, #32]	; (8081c30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081c10:	2528      	movs	r5, #40	; 0x28
 8081c12:	462a      	mov	r2, r5
 8081c14:	2100      	movs	r1, #0
 8081c16:	4620      	mov	r0, r4
 8081c18:	f002 febb 	bl	8084992 <memset>
        cid = -1;
 8081c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081c20:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081c22:	4b04      	ldr	r3, [pc, #16]	; (8081c34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081c24:	2204      	movs	r2, #4
 8081c26:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081c28:	4a03      	ldr	r2, [pc, #12]	; (8081c38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8081c2a:	8025      	strh	r5, [r4, #0]
 8081c2c:	601a      	str	r2, [r3, #0]
 8081c2e:	bd38      	pop	{r3, r4, r5, pc}
 8081c30:	20000444 	.word	0x20000444
 8081c34:	2000043c 	.word	0x2000043c
 8081c38:	080870dc 	.word	0x080870dc

08081c3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081c3c:	4770      	bx	lr

08081c3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081c3e:	2000      	movs	r0, #0
 8081c40:	4770      	bx	lr

08081c42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081c42:	b510      	push	{r4, lr}
 8081c44:	4604      	mov	r4, r0
 8081c46:	2110      	movs	r1, #16
 8081c48:	f001 fa7f 	bl	808314a <_ZdlPvj>
 8081c4c:	4620      	mov	r0, r4
 8081c4e:	bd10      	pop	{r4, pc}

08081c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081c50:	b508      	push	{r3, lr}
      { delete this; }
 8081c52:	b108      	cbz	r0, 8081c58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081c54:	f7ff fff5 	bl	8081c42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081c58:	bd08      	pop	{r3, pc}

08081c5a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081c5a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081c5c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081c5e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081c60:	b113      	cbz	r3, 8081c68 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081c62:	2203      	movs	r2, #3
 8081c64:	4601      	mov	r1, r0
 8081c66:	4798      	blx	r3
    }
 8081c68:	4620      	mov	r0, r4
 8081c6a:	bd10      	pop	{r4, pc}

08081c6c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081c6c:	2200      	movs	r2, #0
 8081c6e:	6002      	str	r2, [r0, #0]
 8081c70:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8081c74:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081c76:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081c78:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081c7c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081c7e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081c80:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081c82:	680c      	ldr	r4, [r1, #0]
 8081c84:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081c86:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081c88:	bd10      	pop	{r4, pc}

08081c8a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081c8a:	b510      	push	{r4, lr}
 8081c8c:	4604      	mov	r4, r0
    free((void*)msg_);
 8081c8e:	6800      	ldr	r0, [r0, #0]
 8081c90:	f7ff ff16 	bl	8081ac0 <free>
}
 8081c94:	4620      	mov	r0, r4
 8081c96:	bd10      	pop	{r4, pc}

08081c98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081c98:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081c9a:	68c4      	ldr	r4, [r0, #12]
 8081c9c:	b1f4      	cbz	r4, 8081cdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081c9e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081ca0:	2b02      	cmp	r3, #2
 8081ca2:	d103      	bne.n	8081cac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081ca4:	f104 000c 	add.w	r0, r4, #12
 8081ca8:	f7ff ffef 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081cac:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081cae:	b135      	cbz	r5, 8081cbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081cb0:	4628      	mov	r0, r5
 8081cb2:	f7ff ffd2 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
 8081cb6:	2110      	movs	r1, #16
 8081cb8:	4628      	mov	r0, r5
 8081cba:	f001 fa46 	bl	808314a <_ZdlPvj>
 8081cbe:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081cc0:	b135      	cbz	r5, 8081cd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081cc2:	4628      	mov	r0, r5
 8081cc4:	f7ff ffc9 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
 8081cc8:	2110      	movs	r1, #16
 8081cca:	4628      	mov	r0, r5
 8081ccc:	f001 fa3d 	bl	808314a <_ZdlPvj>
 8081cd0:	4620      	mov	r0, r4
 8081cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081cd6:	2114      	movs	r1, #20
 8081cd8:	f001 ba37 	b.w	808314a <_ZdlPvj>
 8081cdc:	bd38      	pop	{r3, r4, r5, pc}

08081cde <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081cde:	b513      	push	{r0, r1, r4, lr}
 8081ce0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081ce2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081ce6:	2300      	movs	r3, #0
 8081ce8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081cea:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081cec:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081cee:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081cf0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081cf2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081cf4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081cf6:	f7fe fa08 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081cfa:	4620      	mov	r0, r4
 8081cfc:	b002      	add	sp, #8
 8081cfe:	bd10      	pop	{r4, pc}

08081d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081d00:	680b      	ldr	r3, [r1, #0]
 8081d02:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081d04:	b113      	cbz	r3, 8081d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081d06:	685a      	ldr	r2, [r3, #4]
 8081d08:	3201      	adds	r2, #1
 8081d0a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081d0c:	4770      	bx	lr

08081d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081d10:	460c      	mov	r4, r1
 8081d12:	4606      	mov	r6, r0
 8081d14:	460f      	mov	r7, r1
 8081d16:	f854 3b04 	ldr.w	r3, [r4], #4
 8081d1a:	ad02      	add	r5, sp, #8
 8081d1c:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081d20:	4621      	mov	r1, r4
 8081d22:	a801      	add	r0, sp, #4
 8081d24:	f7ff ffec 	bl	8081d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081d28:	4629      	mov	r1, r5
 8081d2a:	4630      	mov	r0, r6
 8081d2c:	f7ff ffd7 	bl	8081cde <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081d30:	a801      	add	r0, sp, #4
 8081d32:	f7fe f9ea 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081d36:	4620      	mov	r0, r4
 8081d38:	f7fe f9e7 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081d3c:	4638      	mov	r0, r7
 8081d3e:	2108      	movs	r1, #8
 8081d40:	f001 fa03 	bl	808314a <_ZdlPvj>
        return p;
    }
 8081d44:	4630      	mov	r0, r6
 8081d46:	b003      	add	sp, #12
 8081d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081d4a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081d4a:	b513      	push	{r0, r1, r4, lr}
 8081d4c:	460b      	mov	r3, r1
 8081d4e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081d50:	c803      	ldmia	r0, {r0, r1}
 8081d52:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081d56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081d5a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081d5e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081d62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081d66:	b002      	add	sp, #8
 8081d68:	bd10      	pop	{r4, pc}
	...

08081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081d6c:	b538      	push	{r3, r4, r5, lr}
 8081d6e:	2300      	movs	r3, #0
 8081d70:	4604      	mov	r4, r0
 8081d72:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d74:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081d76:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d78:	f7fe f991 	bl	808009e <_Znwj>
 8081d7c:	b128      	cbz	r0, 8081d8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081d7e:	2301      	movs	r3, #1
 8081d80:	6043      	str	r3, [r0, #4]
 8081d82:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081d84:	4b02      	ldr	r3, [pc, #8]	; (8081d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081d86:	60c5      	str	r5, [r0, #12]
 8081d88:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d8a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8081d8c:	4620      	mov	r0, r4
 8081d8e:	bd38      	pop	{r3, r4, r5, pc}
 8081d90:	08087110 	.word	0x08087110

08081d94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081d96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d98:	b90a      	cbnz	r2, 8081d9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081d9a:	f001 f9f2 	bl	8083182 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d9e:	68c3      	ldr	r3, [r0, #12]
    }
 8081da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081da4:	4718      	bx	r3

08081da6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081da6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081da8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081daa:	f100 0110 	add.w	r1, r0, #16
 8081dae:	f7ff fff1 	bl	8081d94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081db2:	bd08      	pop	{r3, pc}

08081db4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081db4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081db6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081db8:	b90a      	cbnz	r2, 8081dbe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081dba:	f001 f9e2 	bl	8083182 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081dbe:	68c3      	ldr	r3, [r0, #12]
    }
 8081dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081dc4:	4718      	bx	r3

08081dc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081dc6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081dc8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081dca:	f100 0110 	add.w	r1, r0, #16
 8081dce:	f7ff fff1 	bl	8081db4 <_ZNKSt8functionIFvRKbEEclES1_>
 8081dd2:	bd08      	pop	{r3, pc}

08081dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081dd4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081dd6:	2300      	movs	r3, #0
 8081dd8:	6083      	str	r3, [r0, #8]
 8081dda:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081ddc:	4604      	mov	r4, r0
 8081dde:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081de0:	b12b      	cbz	r3, 8081dee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081de2:	2202      	movs	r2, #2
 8081de4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081de6:	68eb      	ldr	r3, [r5, #12]
 8081de8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081dea:	68ab      	ldr	r3, [r5, #8]
 8081dec:	60a3      	str	r3, [r4, #8]
	}
    }
 8081dee:	4620      	mov	r0, r4
 8081df0:	bd38      	pop	{r3, r4, r5, pc}
	...

08081df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081df6:	b089      	sub	sp, #36	; 0x24
 8081df8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081dfa:	4668      	mov	r0, sp
 8081dfc:	f7ff ff36 	bl	8081c6c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081e00:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081e04:	2300      	movs	r3, #0
 8081e06:	f88d 3008 	strb.w	r3, [sp, #8]
 8081e0a:	e8d4 3f4f 	ldrexb	r3, [r4]
 8081e0e:	2b00      	cmp	r3, #0
 8081e10:	d103      	bne.n	8081e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8081e12:	e8c4 2f41 	strexb	r1, r2, [r4]
 8081e16:	2900      	cmp	r1, #0
 8081e18:	d1f7      	bne.n	8081e0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8081e1a:	d002      	beq.n	8081e22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8081e1c:	f88d 3008 	strb.w	r3, [sp, #8]
 8081e20:	e063      	b.n	8081eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081e22:	f114 050c 	adds.w	r5, r4, #12
 8081e26:	d003      	beq.n	8081e30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081e28:	4669      	mov	r1, sp
 8081e2a:	4628      	mov	r0, r5
 8081e2c:	f7ff ff1e 	bl	8081c6c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081e30:	f3bf 8f5f 	dmb	sy
 8081e34:	2301      	movs	r3, #1
 8081e36:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081e38:	f3bf 8f5f 	dmb	sy
 8081e3c:	f104 0308 	add.w	r3, r4, #8
 8081e40:	2000      	movs	r0, #0
 8081e42:	e853 6f00 	ldrex	r6, [r3]
 8081e46:	e843 0200 	strex	r2, r0, [r3]
 8081e4a:	2a00      	cmp	r2, #0
 8081e4c:	d1f9      	bne.n	8081e42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8081e4e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081e52:	2e00      	cmp	r6, #0
 8081e54:	d049      	beq.n	8081eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081e56:	f7ff fd6d 	bl	8081934 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081e5a:	b120      	cbz	r0, 8081e66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081e5c:	4629      	mov	r1, r5
 8081e5e:	4630      	mov	r0, r6
 8081e60:	f7ff ff98 	bl	8081d94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081e64:	e03a      	b.n	8081edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081e66:	4631      	mov	r1, r6
 8081e68:	a802      	add	r0, sp, #8
 8081e6a:	f7ff ffb3 	bl	8081dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081e6e:	68e0      	ldr	r0, [r4, #12]
 8081e70:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081e74:	b108      	cbz	r0, 8081e7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8081e76:	f002 fddd 	bl	8084a34 <strdup>
 8081e7a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081e7c:	2010      	movs	r0, #16
 8081e7e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081e82:	f7fe f90c 	bl	808009e <_Znwj>
 8081e86:	4605      	mov	r5, r0
 8081e88:	b1e8      	cbz	r0, 8081ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e8a:	2700      	movs	r7, #0
 8081e8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e8e:	2018      	movs	r0, #24
 8081e90:	f7fe f905 	bl	808009e <_Znwj>
 8081e94:	4604      	mov	r4, r0
 8081e96:	b188      	cbz	r0, 8081ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081e98:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e9a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081e9c:	a802      	add	r0, sp, #8
 8081e9e:	f7ff ff54 	bl	8081d4a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081ea2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081ea4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081ea6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081ea8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081eaa:	9204      	str	r2, [sp, #16]
 8081eac:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081eae:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081eb0:	60e3      	str	r3, [r4, #12]
 8081eb2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081eb6:	9205      	str	r2, [sp, #20]
 8081eb8:	f7ff fed8 	bl	8081c6c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081ebc:	4b0d      	ldr	r3, [pc, #52]	; (8081ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081ebe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081ec0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081ec2:	4b0d      	ldr	r3, [pc, #52]	; (8081ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081ec4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081ec6:	a806      	add	r0, sp, #24
 8081ec8:	f7ff fedf 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ecc:	a802      	add	r0, sp, #8
 8081ece:	f7ff fec4 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081ed2:	2200      	movs	r2, #0
 8081ed4:	4629      	mov	r1, r5
 8081ed6:	4809      	ldr	r0, [pc, #36]	; (8081efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081ed8:	f7ff fd34 	bl	8081944 <application_thread_invoke>
 8081edc:	4630      	mov	r0, r6
 8081ede:	f7ff febc 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081ee2:	2110      	movs	r1, #16
 8081ee4:	4630      	mov	r0, r6
 8081ee6:	f001 f930 	bl	808314a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081eea:	4668      	mov	r0, sp
 8081eec:	f7ff fecd 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
    }
 8081ef0:	b009      	add	sp, #36	; 0x24
 8081ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081ef4:	08081da7 	.word	0x08081da7
 8081ef8:	0808201d 	.word	0x0808201d
 8081efc:	08081b37 	.word	0x08081b37

08081f00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081f04:	b08b      	sub	sp, #44	; 0x2c
 8081f06:	4606      	mov	r6, r0
 8081f08:	460f      	mov	r7, r1
 8081f0a:	4690      	mov	r8, r2
 8081f0c:	4699      	mov	r9, r3
 8081f0e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081f12:	f7ff fd55 	bl	80819c0 <spark_cloud_flag_connected>
 8081f16:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8081f18:	4683      	mov	fp, r0
 8081f1a:	bb30      	cbnz	r0, 8081f6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081f1c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081f20:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081f22:	a905      	add	r1, sp, #20
 8081f24:	4628      	mov	r0, r5
 8081f26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081f2a:	f7ff fe9f 	bl	8081c6c <_ZN8particle5ErrorC1EOS0_>
 8081f2e:	2014      	movs	r0, #20
 8081f30:	f7fe f8b5 	bl	808009e <_Znwj>
 8081f34:	4604      	mov	r4, r0
 8081f36:	b158      	cbz	r0, 8081f50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081f38:	2302      	movs	r3, #2
 8081f3a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081f3c:	2301      	movs	r3, #1
 8081f3e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081f40:	f8c0 b004 	str.w	fp, [r0, #4]
 8081f44:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081f48:	4629      	mov	r1, r5
 8081f4a:	300c      	adds	r0, #12
 8081f4c:	f7ff fe8e 	bl	8081c6c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081f50:	4630      	mov	r0, r6
 8081f52:	4621      	mov	r1, r4
 8081f54:	f840 4b04 	str.w	r4, [r0], #4
 8081f58:	f7ff ff08 	bl	8081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081f5c:	4628      	mov	r0, r5
 8081f5e:	f7ff fe94 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081f62:	a805      	add	r0, sp, #20
 8081f64:	f7ff fe91 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
 8081f68:	e052      	b.n	8082010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081f6a:	2400      	movs	r4, #0
 8081f6c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081f6e:	2014      	movs	r0, #20
 8081f70:	606c      	str	r4, [r5, #4]
 8081f72:	60ac      	str	r4, [r5, #8]
 8081f74:	9307      	str	r3, [sp, #28]
 8081f76:	f7fe f892 	bl	808009e <_Znwj>
 8081f7a:	4601      	mov	r1, r0
 8081f7c:	b118      	cbz	r0, 8081f86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8081f7e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081f80:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081f82:	6044      	str	r4, [r0, #4]
 8081f84:	6084      	str	r4, [r0, #8]
 8081f86:	a804      	add	r0, sp, #16
 8081f88:	9103      	str	r1, [sp, #12]
 8081f8a:	f7ff feef 	bl	8081d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081f8e:	4b22      	ldr	r3, [pc, #136]	; (8082018 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081f90:	2008      	movs	r0, #8
 8081f92:	9308      	str	r3, [sp, #32]
 8081f94:	f7fe f883 	bl	808009e <_Znwj>
 8081f98:	4604      	mov	r4, r0
 8081f9a:	b128      	cbz	r0, 8081fa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f9c:	9b03      	ldr	r3, [sp, #12]
 8081f9e:	a904      	add	r1, sp, #16
 8081fa0:	f840 3b04 	str.w	r3, [r0], #4
 8081fa4:	f7ff feac 	bl	8081d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081fa8:	9500      	str	r5, [sp, #0]
 8081faa:	fa5f f38a 	uxtb.w	r3, sl
 8081fae:	464a      	mov	r2, r9
 8081fb0:	4641      	mov	r1, r8
 8081fb2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081fb4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081fb6:	f7ff fd0b 	bl	80819d0 <spark_send_event>
 8081fba:	b920      	cbnz	r0, 8081fc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081fbc:	9b03      	ldr	r3, [sp, #12]
 8081fbe:	785b      	ldrb	r3, [r3, #1]
 8081fc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081fc4:	b183      	cbz	r3, 8081fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8081fc6:	9b03      	ldr	r3, [sp, #12]
 8081fc8:	a904      	add	r1, sp, #16
 8081fca:	a806      	add	r0, sp, #24
 8081fcc:	9305      	str	r3, [sp, #20]
 8081fce:	f7ff fe97 	bl	8081d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081fd2:	a905      	add	r1, sp, #20
 8081fd4:	4630      	mov	r0, r6
 8081fd6:	f7ff fe82 	bl	8081cde <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081fda:	a806      	add	r0, sp, #24
 8081fdc:	f7fe f895 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081fe0:	a804      	add	r0, sp, #16
 8081fe2:	f7fe f892 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081fe6:	e013      	b.n	8082010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081fe8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081fec:	a905      	add	r1, sp, #20
 8081fee:	a803      	add	r0, sp, #12
 8081ff0:	9205      	str	r2, [sp, #20]
 8081ff2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081ff6:	f7ff fefd 	bl	8081df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081ffa:	a805      	add	r0, sp, #20
 8081ffc:	f7ff fe45 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082000:	a805      	add	r0, sp, #20
 8082002:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082004:	f7ff fe83 	bl	8081d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8082008:	a806      	add	r0, sp, #24
 808200a:	f7fe f87e 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808200e:	e7da      	b.n	8081fc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8082010:	4630      	mov	r0, r6
 8082012:	b00b      	add	sp, #44	; 0x2c
 8082014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082018:	0808218d 	.word	0x0808218d

0808201c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808201c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808201e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082020:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082022:	d006      	beq.n	8082032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082024:	2a03      	cmp	r2, #3
 8082026:	d017      	beq.n	8082058 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082028:	2a01      	cmp	r2, #1
 808202a:	d122      	bne.n	8082072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808202c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808202e:	6003      	str	r3, [r0, #0]
	      break;
 8082030:	e01f      	b.n	8082072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082032:	2018      	movs	r0, #24
 8082034:	680e      	ldr	r6, [r1, #0]
 8082036:	f7fe f832 	bl	808009e <_Znwj>
 808203a:	4605      	mov	r5, r0
 808203c:	b150      	cbz	r0, 8082054 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808203e:	4631      	mov	r1, r6
 8082040:	f7ff fec8 	bl	8081dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082044:	6930      	ldr	r0, [r6, #16]
 8082046:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808204a:	b108      	cbz	r0, 8082050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808204c:	f002 fcf2 	bl	8084a34 <strdup>
 8082050:	6128      	str	r0, [r5, #16]
 8082052:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082054:	6025      	str	r5, [r4, #0]
 8082056:	e00c      	b.n	8082072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082058:	6804      	ldr	r4, [r0, #0]
 808205a:	b154      	cbz	r4, 8082072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808205c:	f104 0010 	add.w	r0, r4, #16
 8082060:	f7ff fe13 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082064:	4620      	mov	r0, r4
 8082066:	f7ff fdf8 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808206a:	2118      	movs	r1, #24
 808206c:	4620      	mov	r0, r4
 808206e:	f001 f86c 	bl	808314a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082072:	2000      	movs	r0, #0
 8082074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082076 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082076:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082078:	2300      	movs	r3, #0
 808207a:	6083      	str	r3, [r0, #8]
 808207c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808207e:	4604      	mov	r4, r0
 8082080:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082082:	b12b      	cbz	r3, 8082090 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082084:	2202      	movs	r2, #2
 8082086:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082088:	68eb      	ldr	r3, [r5, #12]
 808208a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808208c:	68ab      	ldr	r3, [r5, #8]
 808208e:	60a3      	str	r3, [r4, #8]
	}
    }
 8082090:	4620      	mov	r0, r4
 8082092:	bd38      	pop	{r3, r4, r5, pc}

08082094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082094:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082096:	b570      	push	{r4, r5, r6, lr}
 8082098:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808209a:	d006      	beq.n	80820aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808209c:	2a03      	cmp	r2, #3
 808209e:	d011      	beq.n	80820c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80820a0:	2a01      	cmp	r2, #1
 80820a2:	d118      	bne.n	80820d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80820a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80820a6:	6003      	str	r3, [r0, #0]
	      break;
 80820a8:	e015      	b.n	80820d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80820aa:	2014      	movs	r0, #20
 80820ac:	680e      	ldr	r6, [r1, #0]
 80820ae:	f7fd fff6 	bl	808009e <_Znwj>
 80820b2:	4605      	mov	r5, r0
 80820b4:	b120      	cbz	r0, 80820c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80820b6:	4631      	mov	r1, r6
 80820b8:	f7ff ffdd 	bl	8082076 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80820bc:	7c33      	ldrb	r3, [r6, #16]
 80820be:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80820c0:	6025      	str	r5, [r4, #0]
 80820c2:	e008      	b.n	80820d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80820c4:	6804      	ldr	r4, [r0, #0]
 80820c6:	b134      	cbz	r4, 80820d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80820c8:	4620      	mov	r0, r4
 80820ca:	f7ff fdc6 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80820ce:	2114      	movs	r1, #20
 80820d0:	4620      	mov	r0, r4
 80820d2:	f001 f83a 	bl	808314a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80820d6:	2000      	movs	r0, #0
 80820d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080820dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80820dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820de:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80820e0:	f3bf 8f5f 	dmb	sy
 80820e4:	b087      	sub	sp, #28
 80820e6:	2300      	movs	r3, #0
 80820e8:	e850 6f00 	ldrex	r6, [r0]
 80820ec:	e840 3200 	strex	r2, r3, [r0]
 80820f0:	2a00      	cmp	r2, #0
 80820f2:	d1f9      	bne.n	80820e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80820f4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80820f8:	2e00      	cmp	r6, #0
 80820fa:	d03f      	beq.n	808217c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80820fc:	4618      	mov	r0, r3
 80820fe:	f7ff fc19 	bl	8081934 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082102:	4607      	mov	r7, r0
 8082104:	b120      	cbz	r0, 8082110 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082106:	4621      	mov	r1, r4
 8082108:	4630      	mov	r0, r6
 808210a:	f7ff fe53 	bl	8081db4 <_ZNKSt8functionIFvRKbEEclES1_>
 808210e:	e02e      	b.n	808216e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082110:	4631      	mov	r1, r6
 8082112:	a801      	add	r0, sp, #4
 8082114:	f7ff ffaf 	bl	8082076 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082118:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808211a:	2010      	movs	r0, #16
 808211c:	f88d 3014 	strb.w	r3, [sp, #20]
 8082120:	f7fd ffbd 	bl	808009e <_Znwj>
 8082124:	4605      	mov	r5, r0
 8082126:	b1d0      	cbz	r0, 808215e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082128:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808212a:	2014      	movs	r0, #20
 808212c:	f7fd ffb7 	bl	808009e <_Znwj>
 8082130:	4604      	mov	r4, r0
 8082132:	b178      	cbz	r0, 8082154 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082134:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082136:	4601      	mov	r1, r0
 8082138:	a801      	add	r0, sp, #4
 808213a:	f7ff fe06 	bl	8081d4a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808213e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082140:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082142:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082144:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082146:	9203      	str	r2, [sp, #12]
 8082148:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808214a:	60e3      	str	r3, [r4, #12]
 808214c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082150:	9204      	str	r2, [sp, #16]
 8082152:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082154:	4b0a      	ldr	r3, [pc, #40]	; (8082180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082156:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082158:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808215a:	4b0a      	ldr	r3, [pc, #40]	; (8082184 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808215c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808215e:	a801      	add	r0, sp, #4
 8082160:	f7ff fd7b 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082164:	2200      	movs	r2, #0
 8082166:	4629      	mov	r1, r5
 8082168:	4807      	ldr	r0, [pc, #28]	; (8082188 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808216a:	f7ff fbeb 	bl	8081944 <application_thread_invoke>
 808216e:	4630      	mov	r0, r6
 8082170:	f7ff fd73 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082174:	2110      	movs	r1, #16
 8082176:	4630      	mov	r0, r6
 8082178:	f000 ffe7 	bl	808314a <_ZdlPvj>
        }
    }
 808217c:	b007      	add	sp, #28
 808217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082180:	08081dc7 	.word	0x08081dc7
 8082184:	08082095 	.word	0x08082095
 8082188:	08081b37 	.word	0x08081b37

0808218c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808218c:	b530      	push	{r4, r5, lr}
 808218e:	4604      	mov	r4, r0
 8082190:	b085      	sub	sp, #20
 8082192:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082194:	4668      	mov	r0, sp
 8082196:	4611      	mov	r1, r2
 8082198:	f7ff fdb9 	bl	8081d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808219c:	b17c      	cbz	r4, 80821be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808219e:	b224      	sxth	r4, r4
 80821a0:	4628      	mov	r0, r5
 80821a2:	b10d      	cbz	r5, 80821a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80821a4:	f002 fc46 	bl	8084a34 <strdup>
 80821a8:	9002      	str	r0, [sp, #8]
 80821aa:	a902      	add	r1, sp, #8
 80821ac:	4668      	mov	r0, sp
 80821ae:	f8ad 400c 	strh.w	r4, [sp, #12]
 80821b2:	f7ff fe1f 	bl	8081df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80821b6:	a802      	add	r0, sp, #8
 80821b8:	f7ff fd67 	bl	8081c8a <_ZN8particle5ErrorD1Ev>
 80821bc:	e01d      	b.n	80821fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80821be:	f04f 0201 	mov.w	r2, #1
 80821c2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80821c4:	f88d 4008 	strb.w	r4, [sp, #8]
 80821c8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80821cc:	42a3      	cmp	r3, r4
 80821ce:	d103      	bne.n	80821d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80821d0:	e8c0 2f41 	strexb	r1, r2, [r0]
 80821d4:	2900      	cmp	r1, #0
 80821d6:	d1f7      	bne.n	80821c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80821d8:	d002      	beq.n	80821e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80821da:	f88d 3008 	strb.w	r3, [sp, #8]
 80821de:	e00c      	b.n	80821fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80821e0:	f110 010c 	adds.w	r1, r0, #12
 80821e4:	f04f 0301 	mov.w	r3, #1
 80821e8:	bf18      	it	ne
 80821ea:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80821ec:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80821f0:	3004      	adds	r0, #4
 80821f2:	f800 3c03 	strb.w	r3, [r0, #-3]
 80821f6:	f7ff ff71 	bl	80820dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80821fa:	a801      	add	r0, sp, #4
 80821fc:	f7fd ff85 	bl	808010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082200:	b005      	add	sp, #20
 8082202:	bd30      	pop	{r4, r5, pc}

08082204 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082204:	6800      	ldr	r0, [r0, #0]
 8082206:	f000 b8a8 	b.w	808235a <_ZN7TwoWire4lockEv>

0808220a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808220a:	b510      	push	{r4, lr}
 808220c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808220e:	6001      	str	r1, [r0, #0]
 8082210:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8082212:	b10a      	cbz	r2, 8082218 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082214:	f7ff fff6 	bl	8082204 <_ZN9FuelGauge4lockEv>
    }
}
 8082218:	4620      	mov	r0, r4
 808221a:	bd10      	pop	{r4, pc}

0808221c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808221c:	b538      	push	{r3, r4, r5, lr}
 808221e:	4604      	mov	r4, r0
 8082220:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082222:	f000 ff2f 	bl	8083084 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8082226:	462a      	mov	r2, r5
 8082228:	4601      	mov	r1, r0
 808222a:	4620      	mov	r0, r4
 808222c:	f7ff ffed 	bl	808220a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8082230:	4620      	mov	r0, r4
 8082232:	bd38      	pop	{r3, r4, r5, pc}

08082234 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8082234:	6800      	ldr	r0, [r0, #0]
 8082236:	f000 b899 	b.w	808236c <_ZN7TwoWire6unlockEv>

0808223a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808223a:	b510      	push	{r4, lr}
{
    if (lock_) {
 808223c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808223e:	4604      	mov	r4, r0
{
    if (lock_) {
 8082240:	b10b      	cbz	r3, 8082246 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8082242:	f7ff fff7 	bl	8082234 <_ZN9FuelGauge6unlockEv>
    }
}
 8082246:	4620      	mov	r0, r4
 8082248:	bd10      	pop	{r4, pc}

0808224a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 808224a:	4770      	bx	lr

0808224c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808224e:	4606      	mov	r6, r0
 8082250:	4615      	mov	r5, r2
 8082252:	460c      	mov	r4, r1
 8082254:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082256:	42bc      	cmp	r4, r7
 8082258:	d006      	beq.n	8082268 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808225a:	6833      	ldr	r3, [r6, #0]
 808225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082260:	689b      	ldr	r3, [r3, #8]
 8082262:	4630      	mov	r0, r6
 8082264:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082266:	e7f6      	b.n	8082256 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8082268:	4628      	mov	r0, r5
 808226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808226c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808226c:	2200      	movs	r2, #0
 808226e:	7c00      	ldrb	r0, [r0, #16]
 8082270:	f7ff ba38 	b.w	80816e4 <HAL_I2C_Write_Data>

08082274 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082274:	2100      	movs	r1, #0
 8082276:	7c00      	ldrb	r0, [r0, #16]
 8082278:	f7ff ba3c 	b.w	80816f4 <HAL_I2C_Available_Data>

0808227c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808227c:	2100      	movs	r1, #0
 808227e:	7c00      	ldrb	r0, [r0, #16]
 8082280:	f7ff ba40 	b.w	8081704 <HAL_I2C_Read_Data>

08082284 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082284:	2100      	movs	r1, #0
 8082286:	7c00      	ldrb	r0, [r0, #16]
 8082288:	f7ff ba44 	b.w	8081714 <HAL_I2C_Peek_Data>

0808228c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808228c:	2100      	movs	r1, #0
 808228e:	7c00      	ldrb	r0, [r0, #16]
 8082290:	f7ff ba48 	b.w	8081724 <HAL_I2C_Flush_Data>

08082294 <_ZN7TwoWireD0Ev>:
 8082294:	b510      	push	{r4, lr}
 8082296:	4604      	mov	r4, r0
 8082298:	2114      	movs	r1, #20
 808229a:	f000 ff56 	bl	808314a <_ZdlPvj>
 808229e:	4620      	mov	r0, r4
 80822a0:	bd10      	pop	{r4, pc}
	...

080822a4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80822a4:	b510      	push	{r4, lr}
 80822a6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80822a8:	2300      	movs	r3, #0
 80822aa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80822ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80822b0:	60a3      	str	r3, [r4, #8]
 80822b2:	4b04      	ldr	r3, [pc, #16]	; (80822c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80822b4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80822b6:	4608      	mov	r0, r1
 80822b8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80822ba:	4611      	mov	r1, r2
 80822bc:	f7ff fa42 	bl	8081744 <HAL_I2C_Init>
}
 80822c0:	4620      	mov	r0, r4
 80822c2:	bd10      	pop	{r4, pc}
 80822c4:	0808712c 	.word	0x0808712c

080822c8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80822c8:	2300      	movs	r3, #0
 80822ca:	461a      	mov	r2, r3
 80822cc:	4619      	mov	r1, r3
 80822ce:	7c00      	ldrb	r0, [r0, #16]
 80822d0:	f7ff b9f0 	b.w	80816b4 <HAL_I2C_Begin>

080822d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80822d4:	b570      	push	{r4, r5, r6, lr}
 80822d6:	460c      	mov	r4, r1
 80822d8:	4606      	mov	r6, r0
 80822da:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80822dc:	2514      	movs	r5, #20
 80822de:	462a      	mov	r2, r5
 80822e0:	2100      	movs	r1, #0
 80822e2:	a801      	add	r0, sp, #4
 80822e4:	f002 fb55 	bl	8084992 <memset>
 80822e8:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80822ea:	2200      	movs	r2, #0
 80822ec:	f88d 3008 	strb.w	r3, [sp, #8]
 80822f0:	6863      	ldr	r3, [r4, #4]
 80822f2:	a901      	add	r1, sp, #4
 80822f4:	9303      	str	r3, [sp, #12]
 80822f6:	68e3      	ldr	r3, [r4, #12]
 80822f8:	7c30      	ldrb	r0, [r6, #16]
 80822fa:	9304      	str	r3, [sp, #16]
 80822fc:	7a23      	ldrb	r3, [r4, #8]
 80822fe:	f8ad 5004 	strh.w	r5, [sp, #4]
 8082302:	9305      	str	r3, [sp, #20]
 8082304:	f7ff fa36 	bl	8081774 <HAL_I2C_Request_Data_Ex>
}
 8082308:	b006      	add	sp, #24
 808230a:	bd70      	pop	{r4, r5, r6, pc}

0808230c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 808230c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808230e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082310:	f88d 1000 	strb.w	r1, [sp]
 8082314:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082318:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808231a:	bf18      	it	ne
 808231c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808231e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8082320:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082322:	f88d 3008 	strb.w	r3, [sp, #8]
 8082326:	f7ff ffd5 	bl	80822d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808232a:	b005      	add	sp, #20
 808232c:	f85d fb04 	ldr.w	pc, [sp], #4

08082330 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 8082330:	2301      	movs	r3, #1
 8082332:	f7ff bfeb 	b.w	808230c <_ZN7TwoWire11requestFromEhjh>

08082336 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082336:	2200      	movs	r2, #0
 8082338:	7c00      	ldrb	r0, [r0, #16]
 808233a:	f7ff b9c3 	b.w	80816c4 <HAL_I2C_Begin_Transmission>

0808233e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808233e:	b2c9      	uxtb	r1, r1
 8082340:	f7ff bff9 	b.w	8082336 <_ZN7TwoWire17beginTransmissionEh>

08082344 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082344:	2200      	movs	r2, #0
 8082346:	7c00      	ldrb	r0, [r0, #16]
 8082348:	f7ff b9c4 	b.w	80816d4 <HAL_I2C_End_Transmission>

0808234c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808234c:	2101      	movs	r1, #1
 808234e:	f7ff bff9 	b.w	8082344 <_ZN7TwoWire15endTransmissionEh>

08082352 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082352:	2100      	movs	r1, #0
 8082354:	7c00      	ldrb	r0, [r0, #16]
 8082356:	f7ff b9ed 	b.w	8081734 <HAL_I2C_Is_Enabled>

0808235a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808235a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808235c:	2100      	movs	r1, #0
 808235e:	7c00      	ldrb	r0, [r0, #16]
 8082360:	f7ff f9f8 	bl	8081754 <HAL_I2C_Acquire>
}
 8082364:	fab0 f080 	clz	r0, r0
 8082368:	0940      	lsrs	r0, r0, #5
 808236a:	bd08      	pop	{r3, pc}

0808236c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808236c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808236e:	2100      	movs	r1, #0
 8082370:	7c00      	ldrb	r0, [r0, #16]
 8082372:	f7ff f9f7 	bl	8081764 <HAL_I2C_Release>
}
 8082376:	fab0 f080 	clz	r0, r0
 808237a:	0940      	lsrs	r0, r0, #5
 808237c:	bd08      	pop	{r3, pc}

0808237e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808237e:	4770      	bx	lr

08082380 <_ZN9IPAddressD0Ev>:
 8082380:	b510      	push	{r4, lr}
 8082382:	4604      	mov	r4, r0
 8082384:	2108      	movs	r1, #8
 8082386:	f000 fee0 	bl	808314a <_ZdlPvj>
 808238a:	4620      	mov	r0, r4
 808238c:	bd10      	pop	{r4, pc}

0808238e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808238e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082390:	460f      	mov	r7, r1
 8082392:	f100 0608 	add.w	r6, r0, #8
 8082396:	1d05      	adds	r5, r0, #4
 8082398:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808239a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808239e:	220a      	movs	r2, #10
 80823a0:	4638      	mov	r0, r7
 80823a2:	f000 f8ea 	bl	808257a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80823a6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80823a8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80823aa:	d007      	beq.n	80823bc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80823ac:	2c00      	cmp	r4, #0
 80823ae:	d0f4      	beq.n	808239a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80823b0:	212e      	movs	r1, #46	; 0x2e
 80823b2:	4638      	mov	r0, r7
 80823b4:	f000 f8c8 	bl	8082548 <_ZN5Print5printEc>
 80823b8:	4404      	add	r4, r0
 80823ba:	e7ee      	b.n	808239a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80823bc:	4620      	mov	r0, r4
 80823be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823c0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80823c0:	4a02      	ldr	r2, [pc, #8]	; (80823cc <_ZN9IPAddressC1Ev+0xc>)
 80823c2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80823c4:	2200      	movs	r2, #0
 80823c6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80823c8:	4770      	bx	lr
 80823ca:	bf00      	nop
 80823cc:	08087154 	.word	0x08087154

080823d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80823d0:	4a02      	ldr	r2, [pc, #8]	; (80823dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80823d2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80823d4:	680a      	ldr	r2, [r1, #0]
 80823d6:	6042      	str	r2, [r0, #4]
}
 80823d8:	4770      	bx	lr
 80823da:	bf00      	nop
 80823dc:	08087154 	.word	0x08087154

080823e0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80823e0:	4a01      	ldr	r2, [pc, #4]	; (80823e8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80823e2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80823e4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80823e6:	4770      	bx	lr
 80823e8:	08087154 	.word	0x08087154

080823ec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80823ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80823ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80823f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80823f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80823fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80823fe:	6041      	str	r1, [r0, #4]
 8082400:	bd10      	pop	{r4, pc}
	...

08082404 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082406:	4d04      	ldr	r5, [pc, #16]	; (8082418 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082408:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808240a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808240e:	9500      	str	r5, [sp, #0]
 8082410:	f7ff ffec 	bl	80823ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082414:	b003      	add	sp, #12
 8082416:	bd30      	pop	{r4, r5, pc}
 8082418:	08087154 	.word	0x08087154

0808241c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 808241c:	6800      	ldr	r0, [r0, #0]
 808241e:	f7ff b8e9 	b.w	80815f4 <os_mutex_recursive_lock>
	...

08082424 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082424:	4a01      	ldr	r2, [pc, #4]	; (808242c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082426:	4b02      	ldr	r3, [pc, #8]	; (8082430 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082428:	601a      	str	r2, [r3, #0]
 808242a:	4770      	bx	lr
 808242c:	080871d6 	.word	0x080871d6
 8082430:	2000046c 	.word	0x2000046c

08082434 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082434:	2300      	movs	r3, #0
 8082436:	461a      	mov	r2, r3
 8082438:	6840      	ldr	r0, [r0, #4]
 808243a:	f7ff bae9 	b.w	8081a10 <network_connect>

0808243e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808243e:	2200      	movs	r2, #0
 8082440:	2102      	movs	r1, #2
 8082442:	6840      	ldr	r0, [r0, #4]
 8082444:	f7ff baf4 	b.w	8081a30 <network_disconnect>

08082448 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082448:	2200      	movs	r2, #0
 808244a:	4611      	mov	r1, r2
 808244c:	6840      	ldr	r0, [r0, #4]
 808244e:	f7ff bae7 	b.w	8081a20 <network_connecting>

08082452 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082452:	2200      	movs	r2, #0
 8082454:	4611      	mov	r1, r2
 8082456:	6840      	ldr	r0, [r0, #4]
 8082458:	f7ff baf2 	b.w	8081a40 <network_ready>

0808245c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808245c:	2300      	movs	r3, #0
 808245e:	461a      	mov	r2, r3
 8082460:	4619      	mov	r1, r3
 8082462:	6840      	ldr	r0, [r0, #4]
 8082464:	f7ff baf4 	b.w	8081a50 <network_on>

08082468 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082468:	2300      	movs	r3, #0
 808246a:	461a      	mov	r2, r3
 808246c:	4619      	mov	r1, r3
 808246e:	6840      	ldr	r0, [r0, #4]
 8082470:	f7ff baf6 	b.w	8081a60 <network_off>

08082474 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082474:	2200      	movs	r2, #0
 8082476:	f081 0101 	eor.w	r1, r1, #1
 808247a:	6840      	ldr	r0, [r0, #4]
 808247c:	f7ff baf8 	b.w	8081a70 <network_listen>

08082480 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082480:	2200      	movs	r2, #0
 8082482:	6840      	ldr	r0, [r0, #4]
 8082484:	f7ff bb04 	b.w	8081a90 <network_set_listen_timeout>

08082488 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082488:	2200      	movs	r2, #0
 808248a:	4611      	mov	r1, r2
 808248c:	6840      	ldr	r0, [r0, #4]
 808248e:	f7ff bb07 	b.w	8081aa0 <network_get_listen_timeout>

08082492 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082492:	2200      	movs	r2, #0
 8082494:	4611      	mov	r1, r2
 8082496:	6840      	ldr	r0, [r0, #4]
 8082498:	f7ff baf2 	b.w	8081a80 <network_listening>

0808249c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808249e:	4617      	mov	r7, r2
 80824a0:	b087      	sub	sp, #28
 80824a2:	4605      	mov	r5, r0
    IPAddress addr;
 80824a4:	a804      	add	r0, sp, #16
 80824a6:	f7ff ff8b 	bl	80823c0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80824aa:	2600      	movs	r6, #0
 80824ac:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80824ae:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80824b0:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80824b4:	f002 fad9 	bl	8084a6a <strlen>
 80824b8:	4b0a      	ldr	r3, [pc, #40]	; (80824e4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80824ba:	9600      	str	r6, [sp, #0]
 80824bc:	b281      	uxth	r1, r0
 80824be:	685b      	ldr	r3, [r3, #4]
 80824c0:	4622      	mov	r2, r4
 80824c2:	4638      	mov	r0, r7
 80824c4:	f7ff f87e 	bl	80815c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80824c8:	b120      	cbz	r0, 80824d4 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80824ca:	4631      	mov	r1, r6
 80824cc:	4628      	mov	r0, r5
 80824ce:	f7ff ff87 	bl	80823e0 <_ZN9IPAddressC1Em>
 80824d2:	e003      	b.n	80824dc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80824d4:	4621      	mov	r1, r4
 80824d6:	4628      	mov	r0, r5
 80824d8:	f7ff ff7a 	bl	80823d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80824dc:	4628      	mov	r0, r5
 80824de:	b007      	add	sp, #28
 80824e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80824e2:	bf00      	nop
 80824e4:	2000043c 	.word	0x2000043c

080824e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80824e8:	4b02      	ldr	r3, [pc, #8]	; (80824f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80824ea:	4a03      	ldr	r2, [pc, #12]	; (80824f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80824ec:	601a      	str	r2, [r3, #0]
 80824ee:	2200      	movs	r2, #0
 80824f0:	605a      	str	r2, [r3, #4]
 80824f2:	4770      	bx	lr
 80824f4:	20000470 	.word	0x20000470
 80824f8:	0808724c 	.word	0x0808724c

080824fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80824fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80824fe:	4606      	mov	r6, r0
 8082500:	460d      	mov	r5, r1
 8082502:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082504:	2400      	movs	r4, #0
  while (size--) {
 8082506:	42bd      	cmp	r5, r7
 8082508:	d00c      	beq.n	8082524 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808250a:	6833      	ldr	r3, [r6, #0]
 808250c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082510:	689b      	ldr	r3, [r3, #8]
 8082512:	4630      	mov	r0, r6
 8082514:	4798      	blx	r3
     if (chunk>=0)
 8082516:	2800      	cmp	r0, #0
 8082518:	db01      	blt.n	808251e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808251a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808251c:	e7f3      	b.n	8082506 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808251e:	2c00      	cmp	r4, #0
 8082520:	bf08      	it	eq
 8082522:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082524:	4620      	mov	r0, r4
 8082526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082528 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082528:	b570      	push	{r4, r5, r6, lr}
 808252a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808252c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808252e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082530:	b149      	cbz	r1, 8082546 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082532:	f002 fa9a 	bl	8084a6a <strlen>
 8082536:	682b      	ldr	r3, [r5, #0]
 8082538:	4602      	mov	r2, r0
 808253a:	4621      	mov	r1, r4
 808253c:	4628      	mov	r0, r5
    }
 808253e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082542:	68db      	ldr	r3, [r3, #12]
 8082544:	4718      	bx	r3
    }
 8082546:	bd70      	pop	{r4, r5, r6, pc}

08082548 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082548:	6803      	ldr	r3, [r0, #0]
 808254a:	689b      	ldr	r3, [r3, #8]
 808254c:	4718      	bx	r3

0808254e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808254e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082550:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082552:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082554:	f7ff fff8 	bl	8082548 <_ZN5Print5printEc>
  n += print('\n');
 8082558:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808255a:	4604      	mov	r4, r0
  n += print('\n');
 808255c:	4628      	mov	r0, r5
 808255e:	f7ff fff3 	bl	8082548 <_ZN5Print5printEc>
  return n;
}
 8082562:	4420      	add	r0, r4
 8082564:	bd38      	pop	{r3, r4, r5, pc}

08082566 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082566:	b538      	push	{r3, r4, r5, lr}
 8082568:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808256a:	f7ff ffdd 	bl	8082528 <_ZN5Print5writeEPKc>
 808256e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082570:	4628      	mov	r0, r5
 8082572:	f7ff ffec 	bl	808254e <_ZN5Print7printlnEv>
  return n;
}
 8082576:	4420      	add	r0, r4
 8082578:	bd38      	pop	{r3, r4, r5, pc}

0808257a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808257a:	2a01      	cmp	r2, #1
 808257c:	bf98      	it	ls
 808257e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082580:	b530      	push	{r4, r5, lr}
 8082582:	460b      	mov	r3, r1
 8082584:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082586:	2100      	movs	r1, #0
 8082588:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808258c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8082590:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8082594:	fb05 3312 	mls	r3, r5, r2, r3
 8082598:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808259a:	2b09      	cmp	r3, #9
 808259c:	bf94      	ite	ls
 808259e:	3330      	addls	r3, #48	; 0x30
 80825a0:	3337      	addhi	r3, #55	; 0x37
 80825a2:	b2db      	uxtb	r3, r3
 80825a4:	4621      	mov	r1, r4
 80825a6:	f804 3901 	strb.w	r3, [r4], #-1
 80825aa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80825ac:	2d00      	cmp	r5, #0
 80825ae:	d1ef      	bne.n	8082590 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80825b0:	f7ff ffba 	bl	8082528 <_ZN5Print5writeEPKc>
}
 80825b4:	b00b      	add	sp, #44	; 0x2c
 80825b6:	bd30      	pop	{r4, r5, pc}

080825b8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80825b8:	b510      	push	{r4, lr}
 80825ba:	4604      	mov	r4, r0
 80825bc:	f7ff fb4d 	bl	8081c5a <_ZNSt14_Function_baseD1Ev>
 80825c0:	4620      	mov	r0, r4
 80825c2:	bd10      	pop	{r4, pc}

080825c4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80825c4:	4803      	ldr	r0, [pc, #12]	; (80825d4 <_GLOBAL__sub_I_RGB+0x10>)
 80825c6:	2300      	movs	r3, #0
 80825c8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80825ca:	4a03      	ldr	r2, [pc, #12]	; (80825d8 <_GLOBAL__sub_I_RGB+0x14>)
 80825cc:	4903      	ldr	r1, [pc, #12]	; (80825dc <_GLOBAL__sub_I_RGB+0x18>)
 80825ce:	f000 bdb7 	b.w	8083140 <__aeabi_atexit>
 80825d2:	bf00      	nop
 80825d4:	20000478 	.word	0x20000478
 80825d8:	2000023c 	.word	0x2000023c
 80825dc:	080825b9 	.word	0x080825b9

080825e0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80825e0:	b510      	push	{r4, lr}
 80825e2:	4b04      	ldr	r3, [pc, #16]	; (80825f4 <_ZN8SPIClassD1Ev+0x14>)
 80825e4:	4604      	mov	r4, r0
 80825e6:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80825e8:	68c0      	ldr	r0, [r0, #12]
 80825ea:	b108      	cbz	r0, 80825f0 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80825ec:	f7fe fffa 	bl	80815e4 <os_mutex_recursive_destroy>
 80825f0:	4620      	mov	r0, r4
 80825f2:	bd10      	pop	{r4, pc}
 80825f4:	08087280 	.word	0x08087280

080825f8 <_ZN8SPIClassD0Ev>:
 80825f8:	b510      	push	{r4, lr}
 80825fa:	4604      	mov	r4, r0
 80825fc:	f7ff fff0 	bl	80825e0 <_ZN8SPIClassD1Ev>
 8082600:	4620      	mov	r0, r4
 8082602:	2110      	movs	r1, #16
 8082604:	f000 fda1 	bl	808314a <_ZdlPvj>
 8082608:	4620      	mov	r0, r4
 808260a:	bd10      	pop	{r4, pc}

0808260c <_ZN14RecursiveMutex6unlockEv>:
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808260c:	6800      	ldr	r0, [r0, #0]
 808260e:	f7fe bff9 	b.w	8081604 <os_mutex_recursive_unlock>
	...

08082614 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082614:	b570      	push	{r4, r5, r6, lr}
 8082616:	4604      	mov	r4, r0
 8082618:	460e      	mov	r6, r1
 808261a:	4b07      	ldr	r3, [pc, #28]	; (8082638 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808261c:	2500      	movs	r5, #0
 808261e:	6003      	str	r3, [r0, #0]
 8082620:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 8082624:	f7fe ffd6 	bl	80815d4 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8082628:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 808262a:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 808262c:	f7ff f8d2 	bl	80817d4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082630:	60a5      	str	r5, [r4, #8]
}
 8082632:	4620      	mov	r0, r4
 8082634:	bd70      	pop	{r4, r5, r6, pc}
 8082636:	bf00      	nop
 8082638:	08087280 	.word	0x08087280

0808263c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808263c:	b538      	push	{r3, r4, r5, lr}
 808263e:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8082640:	f100 040c 	add.w	r4, r0, #12
 8082644:	4620      	mov	r0, r4
 8082646:	f7ff fee9 	bl	808241c <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 808264a:	7928      	ldrb	r0, [r5, #4]
 808264c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8082650:	f7ff f898 	bl	8081784 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082654:	4620      	mov	r0, r4
 8082656:	f7ff ffd9 	bl	808260c <_ZN14RecursiveMutex6unlockEv>
 808265a:	bd38      	pop	{r3, r4, r5, pc}

0808265c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 808265c:	b570      	push	{r4, r5, r6, lr}
 808265e:	4605      	mov	r5, r0
 8082660:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8082662:	f100 040c 	add.w	r4, r0, #12
 8082666:	4620      	mov	r0, r4
 8082668:	f7ff fed8 	bl	808241c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808266c:	7928      	ldrb	r0, [r5, #4]
 808266e:	4631      	mov	r1, r6
 8082670:	f7ff f890 	bl	8081794 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082674:	4620      	mov	r0, r4
 8082676:	f7ff ffc9 	bl	808260c <_ZN14RecursiveMutex6unlockEv>
 808267a:	bd70      	pop	{r4, r5, r6, pc}

0808267c <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 808267c:	b570      	push	{r4, r5, r6, lr}
 808267e:	4605      	mov	r5, r0
 8082680:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8082682:	f100 040c 	add.w	r4, r0, #12
 8082686:	4620      	mov	r0, r4
 8082688:	f7ff fec8 	bl	808241c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 808268c:	7928      	ldrb	r0, [r5, #4]
 808268e:	4631      	mov	r1, r6
 8082690:	f7ff f888 	bl	80817a4 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082694:	4620      	mov	r0, r4
 8082696:	f7ff ffb9 	bl	808260c <_ZN14RecursiveMutex6unlockEv>
 808269a:	bd70      	pop	{r4, r5, r6, pc}

0808269c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808269c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808269e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80826a0:	6018      	str	r0, [r3, #0]
 80826a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80826a4:	6818      	ldr	r0, [r3, #0]
 80826a6:	b2e5      	uxtb	r5, r4
 80826a8:	4288      	cmp	r0, r1
 80826aa:	d906      	bls.n	80826ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80826ac:	3401      	adds	r4, #1
 80826ae:	2c08      	cmp	r4, #8
 80826b0:	d002      	beq.n	80826b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80826b2:	0840      	lsrs	r0, r0, #1
 80826b4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80826b6:	e7f5      	b.n	80826a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80826b8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80826ba:	4b02      	ldr	r3, [pc, #8]	; (80826c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80826bc:	5d5b      	ldrb	r3, [r3, r5]
 80826be:	7013      	strb	r3, [r2, #0]
 80826c0:	bd30      	pop	{r4, r5, pc}
 80826c2:	bf00      	nop
 80826c4:	08087288 	.word	0x08087288

080826c8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80826c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80826cc:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80826ce:	f100 060c 	add.w	r6, r0, #12
 80826d2:	b088      	sub	sp, #32
    unsigned clock = 0;
 80826d4:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80826d6:	fb02 f701 	mul.w	r7, r2, r1
 80826da:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80826dc:	9402      	str	r4, [sp, #8]
 80826de:	f7ff fe9d 	bl	808241c <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80826e2:	f895 8004 	ldrb.w	r8, [r5, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80826e6:	4621      	mov	r1, r4
 80826e8:	2214      	movs	r2, #20
 80826ea:	a803      	add	r0, sp, #12
 80826ec:	f002 f951 	bl	8084992 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80826f0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80826f2:	4622      	mov	r2, r4
 80826f4:	a903      	add	r1, sp, #12
 80826f6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80826f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80826fc:	f7ff f87a 	bl	80817f4 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8082700:	ab02      	add	r3, sp, #8
 8082702:	f10d 0207 	add.w	r2, sp, #7
 8082706:	4639      	mov	r1, r7
 8082708:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 808270a:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808270e:	f7ff ffc5 	bl	808269c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 8082712:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8082716:	7928      	ldrb	r0, [r5, #4]
 8082718:	f7ff f84c 	bl	80817b4 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 808271c:	4630      	mov	r0, r6
 808271e:	f7ff ff75 	bl	808260c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 8082722:	9802      	ldr	r0, [sp, #8]
 8082724:	b008      	add	sp, #32
 8082726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808272a <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 808272a:	b570      	push	{r4, r5, r6, lr}
 808272c:	4605      	mov	r5, r0
 808272e:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8082730:	f100 040c 	add.w	r4, r0, #12
 8082734:	4620      	mov	r0, r4
 8082736:	f7ff fe71 	bl	808241c <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 808273a:	4631      	mov	r1, r6
 808273c:	7928      	ldrb	r0, [r5, #4]
 808273e:	f7ff f841 	bl	80817c4 <HAL_SPI_Send_Receive_Data>
 8082742:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082744:	4620      	mov	r0, r4
 8082746:	f7ff ff61 	bl	808260c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 808274a:	b2e8      	uxtb	r0, r5
 808274c:	bd70      	pop	{r4, r5, r6, pc}

0808274e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 808274e:	7900      	ldrb	r0, [r0, #4]
 8082750:	f7ff b848 	b.w	80817e4 <HAL_SPI_Is_Enabled>

08082754 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082754:	b510      	push	{r4, lr}
 8082756:	4604      	mov	r4, r0
{
	free(buffer);
 8082758:	6800      	ldr	r0, [r0, #0]
 808275a:	f7ff f9b1 	bl	8081ac0 <free>
}
 808275e:	4620      	mov	r0, r4
 8082760:	bd10      	pop	{r4, pc}

08082762 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082762:	b510      	push	{r4, lr}
 8082764:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082766:	6800      	ldr	r0, [r0, #0]
 8082768:	b108      	cbz	r0, 808276e <_ZN6String10invalidateEv+0xc>
 808276a:	f7ff f9a9 	bl	8081ac0 <free>
	buffer = NULL;
 808276e:	2300      	movs	r3, #0
 8082770:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082772:	60a3      	str	r3, [r4, #8]
 8082774:	6063      	str	r3, [r4, #4]
 8082776:	bd10      	pop	{r4, pc}

08082778 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082778:	b538      	push	{r3, r4, r5, lr}
 808277a:	4604      	mov	r4, r0
 808277c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808277e:	6800      	ldr	r0, [r0, #0]
 8082780:	3101      	adds	r1, #1
 8082782:	f7ff f9a5 	bl	8081ad0 <realloc>
	if (newbuffer) {
 8082786:	b110      	cbz	r0, 808278e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082788:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808278c:	2001      	movs	r0, #1
	}
	return 0;
}
 808278e:	bd38      	pop	{r3, r4, r5, pc}

08082790 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082790:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082792:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082794:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082796:	b113      	cbz	r3, 808279e <_ZN6String7reserveEj+0xe>
 8082798:	6843      	ldr	r3, [r0, #4]
 808279a:	428b      	cmp	r3, r1
 808279c:	d207      	bcs.n	80827ae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808279e:	4620      	mov	r0, r4
 80827a0:	f7ff ffea 	bl	8082778 <_ZN6String12changeBufferEj>
 80827a4:	b120      	cbz	r0, 80827b0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80827a6:	68a3      	ldr	r3, [r4, #8]
 80827a8:	b90b      	cbnz	r3, 80827ae <_ZN6String7reserveEj+0x1e>
 80827aa:	6822      	ldr	r2, [r4, #0]
 80827ac:	7013      	strb	r3, [r2, #0]
 80827ae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80827b0:	bd10      	pop	{r4, pc}

080827b2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80827b2:	b570      	push	{r4, r5, r6, lr}
 80827b4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80827b6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80827b8:	4604      	mov	r4, r0
 80827ba:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80827bc:	f7ff ffe8 	bl	8082790 <_ZN6String7reserveEj>
 80827c0:	b918      	cbnz	r0, 80827ca <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80827c2:	4620      	mov	r0, r4
 80827c4:	f7ff ffcd 	bl	8082762 <_ZN6String10invalidateEv>
		return *this;
 80827c8:	e009      	b.n	80827de <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80827ca:	462a      	mov	r2, r5
 80827cc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80827ce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80827d0:	6820      	ldr	r0, [r4, #0]
 80827d2:	f002 f8d3 	bl	808497c <memcpy>
	buffer[len] = 0;
 80827d6:	6822      	ldr	r2, [r4, #0]
 80827d8:	68a3      	ldr	r3, [r4, #8]
 80827da:	2100      	movs	r1, #0
 80827dc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80827de:	4620      	mov	r0, r4
 80827e0:	bd70      	pop	{r4, r5, r6, pc}

080827e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80827e2:	b538      	push	{r3, r4, r5, lr}
 80827e4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80827e6:	460c      	mov	r4, r1
 80827e8:	b141      	cbz	r1, 80827fc <_ZN6StringaSEPKc+0x1a>
 80827ea:	4608      	mov	r0, r1
 80827ec:	f002 f93d 	bl	8084a6a <strlen>
 80827f0:	4621      	mov	r1, r4
 80827f2:	4602      	mov	r2, r0
 80827f4:	4628      	mov	r0, r5
 80827f6:	f7ff ffdc 	bl	80827b2 <_ZN6String4copyEPKcj>
 80827fa:	e001      	b.n	8082800 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80827fc:	f7ff ffb1 	bl	8082762 <_ZN6String10invalidateEv>

	return *this;
}
 8082800:	4628      	mov	r0, r5
 8082802:	bd38      	pop	{r3, r4, r5, pc}

08082804 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082804:	b510      	push	{r4, lr}
 8082806:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082808:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808280a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808280c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808280e:	6063      	str	r3, [r4, #4]
	len = 0;
 8082810:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8082812:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082814:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8082816:	a901      	add	r1, sp, #4
 8082818:	f000 fac9 	bl	8082dae <itoa>
	*this = buf;
 808281c:	a901      	add	r1, sp, #4
 808281e:	4620      	mov	r0, r4
 8082820:	f7ff ffdf 	bl	80827e2 <_ZN6StringaSEPKc>
}
 8082824:	4620      	mov	r0, r4
 8082826:	b00a      	add	sp, #40	; 0x28
 8082828:	bd10      	pop	{r4, pc}

0808282a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808282a:	b510      	push	{r4, lr}
 808282c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808282e:	6800      	ldr	r0, [r0, #0]
 8082830:	b118      	cbz	r0, 808283a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8082832:	f7ff f945 	bl	8081ac0 <free>
            wakeupSource_ = nullptr;
 8082836:	2300      	movs	r3, #0
 8082838:	6023      	str	r3, [r4, #0]
 808283a:	bd10      	pop	{r4, pc}

0808283c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808283c:	b510      	push	{r4, lr}
 808283e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8082840:	f7ff fff3 	bl	808282a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8082844:	4620      	mov	r0, r4
 8082846:	bd10      	pop	{r4, pc}

08082848 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082848:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 808284a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808284e:	460d      	mov	r5, r1
        error_ = result.error_;
 8082850:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8082852:	460b      	mov	r3, r1
 8082854:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082858:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 808285a:	f8c0 2006 	str.w	r2, [r0, #6]
 808285e:	889b      	ldrh	r3, [r3, #4]
 8082860:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8082862:	f7ff ffe2 	bl	808282a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8082866:	682b      	ldr	r3, [r5, #0]
 8082868:	b113      	cbz	r3, 8082870 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 808286a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808286c:	2300      	movs	r3, #0
 808286e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8082870:	4620      	mov	r0, r4
 8082872:	bd38      	pop	{r3, r4, r5, pc}

08082874 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8082874:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8082878:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 808287a:	b90b      	cbnz	r3, 8082880 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 808287c:	680a      	ldr	r2, [r1, #0]
 808287e:	b19a      	cbz	r2, 80828a8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8082880:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8082882:	b15c      	cbz	r4, 808289c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8082884:	88a2      	ldrh	r2, [r4, #4]
 8082886:	2a01      	cmp	r2, #1
 8082888:	d003      	beq.n	8082892 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 808288a:	2a04      	cmp	r2, #4
 808288c:	d106      	bne.n	808289c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808288e:	2202      	movs	r2, #2
 8082890:	e005      	b.n	808289e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082892:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082894:	718a      	strb	r2, [r1, #6]
 8082896:	810b      	strh	r3, [r1, #8]
 8082898:	814c      	strh	r4, [r1, #10]
                    break;
 808289a:	e005      	b.n	80828a8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808289c:	2204      	movs	r2, #4
 808289e:	810b      	strh	r3, [r1, #8]
 80828a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80828a4:	718a      	strb	r2, [r1, #6]
 80828a6:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 80828a8:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80828ac:	6003      	str	r3, [r0, #0]
 80828ae:	888b      	ldrh	r3, [r1, #4]
 80828b0:	8083      	strh	r3, [r0, #4]
    }
 80828b2:	bd10      	pop	{r4, pc}

080828b4 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80828b4:	4601      	mov	r1, r0
 80828b6:	2200      	movs	r2, #0
 80828b8:	208c      	movs	r0, #140	; 0x8c
 80828ba:	f7fe beab 	b.w	8081614 <HAL_Core_System_Reset_Ex>

080828be <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80828be:	2000      	movs	r0, #0
 80828c0:	f7ff bff8 	b.w	80828b4 <_ZN11SystemClass5resetEm>

080828c4 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80828c4:	b510      	push	{r4, lr}
 80828c6:	2400      	movs	r4, #0
 80828c8:	7004      	strb	r4, [r0, #0]
 80828ca:	8044      	strh	r4, [r0, #2]
 80828cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80828d0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80828d2:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80828d4:	dd07      	ble.n	80828e6 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 80828d6:	3901      	subs	r1, #1
 80828d8:	4299      	cmp	r1, r3
 80828da:	d209      	bcs.n	80828f0 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 80828dc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80828e0:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80828e2:	2301      	movs	r3, #1
 80828e4:	e001      	b.n	80828ea <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 80828e6:	d102      	bne.n	80828ee <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80828e8:	2302      	movs	r3, #2
 80828ea:	7003      	strb	r3, [r0, #0]
 80828ec:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 80828ee:	8041      	strh	r1, [r0, #2]
    }
}
 80828f0:	bd10      	pop	{r4, pc}
	...

080828f4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80828f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80828f6:	460e      	mov	r6, r1
 80828f8:	4617      	mov	r7, r2
 80828fa:	b08b      	sub	sp, #44	; 0x2c
 80828fc:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80828fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8082900:	2400      	movs	r4, #0
 8082902:	9301      	str	r3, [sp, #4]
 8082904:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8082906:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8082908:	9402      	str	r4, [sp, #8]
 808290a:	9300      	str	r3, [sp, #0]
 808290c:	4639      	mov	r1, r7
 808290e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8082910:	4630      	mov	r0, r6
 8082912:	f7ff f83b 	bl	808198c <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8082916:	463b      	mov	r3, r7
 8082918:	4632      	mov	r2, r6
 808291a:	4601      	mov	r1, r0
 808291c:	a805      	add	r0, sp, #20
 808291e:	f7ff ffd1 	bl	80828c4 <_ZN11SleepResultC1EiPKtj>
 8082922:	f89d 1014 	ldrb.w	r1, [sp, #20]
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8082926:	9407      	str	r4, [sp, #28]
 8082928:	f8ad 4020 	strh.w	r4, [sp, #32]
 808292c:	4c0c      	ldr	r4, [pc, #48]	; (8082960 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 808292e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8082932:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8082936:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 808293a:	4620      	mov	r0, r4
 808293c:	a907      	add	r1, sp, #28
 808293e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8082942:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8082946:	f7ff ff7f 	bl	8082848 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 808294a:	a807      	add	r0, sp, #28
 808294c:	f7ff ff6d 	bl	808282a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8082950:	4628      	mov	r0, r5
 8082952:	4621      	mov	r1, r4
 8082954:	f7ff ff8e 	bl	8082874 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8082958:	4628      	mov	r0, r5
 808295a:	b00b      	add	sp, #44	; 0x2c
 808295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808295e:	bf00      	nop
 8082960:	20000488 	.word	0x20000488

08082964 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8082964:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8082968:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808296a:	4c08      	ldr	r4, [pc, #32]	; (808298c <_GLOBAL__sub_I_System+0x28>)
 808296c:	2000      	movs	r0, #0
 808296e:	6020      	str	r0, [r4, #0]
 8082970:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8082972:	71a0      	strb	r0, [r4, #6]
 8082974:	8120      	strh	r0, [r4, #8]
 8082976:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082978:	f7fe ffc4 	bl	8081904 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 808297c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8082982:	4a03      	ldr	r2, [pc, #12]	; (8082990 <_GLOBAL__sub_I_System+0x2c>)
 8082984:	4903      	ldr	r1, [pc, #12]	; (8082994 <_GLOBAL__sub_I_System+0x30>)
 8082986:	f000 bbdb 	b.w	8083140 <__aeabi_atexit>
 808298a:	bf00      	nop
 808298c:	20000488 	.word	0x20000488
 8082990:	2000023c 	.word	0x2000023c
 8082994:	0808283d 	.word	0x0808283d

08082998 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082998:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808299a:	4b14      	ldr	r3, [pc, #80]	; (80829ec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808299c:	4f14      	ldr	r7, [pc, #80]	; (80829f0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808299e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80829a0:	4b14      	ldr	r3, [pc, #80]	; (80829f4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80829a2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80829a4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80829a6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80829a8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80829aa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80829ac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80829ae:	d01b      	beq.n	80829e8 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80829b0:	a80a      	add	r0, sp, #40	; 0x28
 80829b2:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80829b6:	f001 fee5 	bl	8084784 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80829ba:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80829bc:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80829be:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80829c0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80829c4:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80829c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80829c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80829ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80829cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80829ce:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80829d2:	4c09      	ldr	r4, [pc, #36]	; (80829f8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80829d4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80829d8:	ad01      	add	r5, sp, #4
 80829da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80829dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80829de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80829e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80829e2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80829e4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80829e8:	b00b      	add	sp, #44	; 0x2c
 80829ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80829ec:	200004c4 	.word	0x200004c4
 80829f0:	200004c0 	.word	0x200004c0
 80829f4:	200004bc 	.word	0x200004bc
 80829f8:	20000494 	.word	0x20000494

080829fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80829fc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80829fe:	2000      	movs	r0, #0
 8082a00:	f7fe fff6 	bl	80819f0 <spark_sync_time_pending>
 8082a04:	b128      	cbz	r0, 8082a12 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082a06:	f7fe ffdb 	bl	80819c0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082a0a:	f080 0001 	eor.w	r0, r0, #1
 8082a0e:	b2c0      	uxtb	r0, r0
 8082a10:	bd08      	pop	{r3, pc}
 8082a12:	2001      	movs	r0, #1
    }
 8082a14:	bd08      	pop	{r3, pc}

08082a16 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082a16:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082a18:	2000      	movs	r0, #0
 8082a1a:	f7fe fe1b 	bl	8081654 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082a1e:	4604      	mov	r4, r0
 8082a20:	b968      	cbnz	r0, 8082a3e <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082a22:	f7fe ff67 	bl	80818f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082a26:	2801      	cmp	r0, #1
 8082a28:	d10b      	bne.n	8082a42 <_ZN9TimeClass7isValidEv+0x2c>
 8082a2a:	4620      	mov	r0, r4
 8082a2c:	f7fe ff92 	bl	8081954 <system_thread_get_state>
 8082a30:	b938      	cbnz	r0, 8082a42 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082a32:	f7ff ffe3 	bl	80829fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082a36:	b930      	cbnz	r0, 8082a46 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082a38:	f7fe ffba 	bl	80819b0 <spark_process>
 8082a3c:	e7f9      	b.n	8082a32 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082a3e:	2001      	movs	r0, #1
 8082a40:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082a42:	2000      	movs	r0, #0
 8082a44:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082a46:	f7ff ffd9 	bl	80829fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082a4a:	2000      	movs	r0, #0
 8082a4c:	f7fe fe02 	bl	8081654 <HAL_RTC_Time_Is_Valid>
 8082a50:	3000      	adds	r0, #0
 8082a52:	bf18      	it	ne
 8082a54:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082a56:	bd10      	pop	{r4, pc}

08082a58 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082a58:	b508      	push	{r3, lr}
    (void)isValid();
 8082a5a:	f7ff ffdc 	bl	8082a16 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082a62:	f7fe bdef 	b.w	8081644 <HAL_RTC_Get_UnixTime>
	...

08082a68 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082a68:	b508      	push	{r3, lr}
	return hour(now());
 8082a6a:	f7ff fff5 	bl	8082a58 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082a6e:	f7ff ff93 	bl	8082998 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082a72:	4b01      	ldr	r3, [pc, #4]	; (8082a78 <_ZN9TimeClass4hourEv+0x10>)
 8082a74:	6898      	ldr	r0, [r3, #8]
 8082a76:	bd08      	pop	{r3, pc}
 8082a78:	20000494 	.word	0x20000494

08082a7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082a7c:	4b02      	ldr	r3, [pc, #8]	; (8082a88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082a7e:	681a      	ldr	r2, [r3, #0]
 8082a80:	4b02      	ldr	r3, [pc, #8]	; (8082a8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082a82:	601a      	str	r2, [r3, #0]
 8082a84:	4770      	bx	lr
 8082a86:	bf00      	nop
 8082a88:	20000148 	.word	0x20000148
 8082a8c:	200004b8 	.word	0x200004b8

08082a90 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082a90:	4770      	bx	lr

08082a92 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082a92:	7441      	strb	r1, [r0, #17]
 8082a94:	4770      	bx	lr

08082a96 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8082a96:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082a98:	7c00      	ldrb	r0, [r0, #16]
 8082a9a:	f7fe feeb 	bl	8081874 <HAL_USART_Available_Data_For_Write>
}
 8082a9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082aa2:	bd08      	pop	{r3, pc}

08082aa4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082aa4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8082aa6:	7c00      	ldrb	r0, [r0, #16]
 8082aa8:	f7fe febc 	bl	8081824 <HAL_USART_Available_Data>
}
 8082aac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082ab0:	bd08      	pop	{r3, pc}

08082ab2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082ab2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082ab4:	7c00      	ldrb	r0, [r0, #16]
 8082ab6:	f7fe fec5 	bl	8081844 <HAL_USART_Peek_Data>
}
 8082aba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082abe:	bf28      	it	cs
 8082ac0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082ac4:	bd08      	pop	{r3, pc}

08082ac6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082ac6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082ac8:	7c00      	ldrb	r0, [r0, #16]
 8082aca:	f7fe feb3 	bl	8081834 <HAL_USART_Read_Data>
}
 8082ace:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082ad2:	bf28      	it	cs
 8082ad4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082ad8:	bd08      	pop	{r3, pc}

08082ada <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082ada:	7c00      	ldrb	r0, [r0, #16]
 8082adc:	f7fe beba 	b.w	8081854 <HAL_USART_Flush_Data>

08082ae0 <_ZN11USARTSerialD0Ev>:
 8082ae0:	b510      	push	{r4, lr}
 8082ae2:	4604      	mov	r4, r0
 8082ae4:	2114      	movs	r1, #20
 8082ae6:	f000 fb30 	bl	808314a <_ZdlPvj>
 8082aea:	4620      	mov	r0, r4
 8082aec:	bd10      	pop	{r4, pc}

08082aee <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082aee:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082af0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082af2:	4604      	mov	r4, r0
 8082af4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082af6:	b925      	cbnz	r5, 8082b02 <_ZN11USARTSerial5writeEh+0x14>
 8082af8:	7c00      	ldrb	r0, [r0, #16]
 8082afa:	f7fe febb 	bl	8081874 <HAL_USART_Available_Data_For_Write>
 8082afe:	2800      	cmp	r0, #0
 8082b00:	dd05      	ble.n	8082b0e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082b02:	4631      	mov	r1, r6
 8082b04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082b0a:	f7fe be83 	b.w	8081814 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082b0e:	4628      	mov	r0, r5
 8082b10:	bd70      	pop	{r4, r5, r6, pc}
	...

08082b14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082b14:	b510      	push	{r4, lr}
 8082b16:	4604      	mov	r4, r0
 8082b18:	4608      	mov	r0, r1
 8082b1a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082b1c:	2200      	movs	r2, #0
 8082b1e:	6062      	str	r2, [r4, #4]
 8082b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082b24:	60a2      	str	r2, [r4, #8]
 8082b26:	4a05      	ldr	r2, [pc, #20]	; (8082b3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082b28:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082b2a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082b2c:	2201      	movs	r2, #1
 8082b2e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082b30:	461a      	mov	r2, r3
 8082b32:	f7fe fe67 	bl	8081804 <HAL_USART_Init>
}
 8082b36:	4620      	mov	r0, r4
 8082b38:	bd10      	pop	{r4, pc}
 8082b3a:	bf00      	nop
 8082b3c:	080872c0 	.word	0x080872c0

08082b40 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8082b40:	2300      	movs	r3, #0
 8082b42:	7c00      	ldrb	r0, [r0, #16]
 8082b44:	f7fe be9e 	b.w	8081884 <HAL_USART_BeginConfig>

08082b48 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8082b48:	2200      	movs	r2, #0
 8082b4a:	f7ff bff9 	b.w	8082b40 <_ZN11USARTSerial5beginEmm>

08082b4e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082b4e:	7c00      	ldrb	r0, [r0, #16]
 8082b50:	f7fe be88 	b.w	8081864 <HAL_USART_Is_Enabled>

08082b54 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082b54:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082b56:	4d0c      	ldr	r5, [pc, #48]	; (8082b88 <_Z22__fetch_global_Serial1v+0x34>)
 8082b58:	6829      	ldr	r1, [r5, #0]
 8082b5a:	f011 0401 	ands.w	r4, r1, #1
 8082b5e:	d111      	bne.n	8082b84 <_Z22__fetch_global_Serial1v+0x30>
 8082b60:	4628      	mov	r0, r5
 8082b62:	f7fd faa0 	bl	80800a6 <__cxa_guard_acquire>
 8082b66:	b168      	cbz	r0, 8082b84 <_Z22__fetch_global_Serial1v+0x30>
 8082b68:	4a08      	ldr	r2, [pc, #32]	; (8082b8c <_Z22__fetch_global_Serial1v+0x38>)
 8082b6a:	4621      	mov	r1, r4
 8082b6c:	4b08      	ldr	r3, [pc, #32]	; (8082b90 <_Z22__fetch_global_Serial1v+0x3c>)
 8082b6e:	4809      	ldr	r0, [pc, #36]	; (8082b94 <_Z22__fetch_global_Serial1v+0x40>)
 8082b70:	f7ff ffd0 	bl	8082b14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082b74:	4628      	mov	r0, r5
 8082b76:	f7fd fa9b 	bl	80800b0 <__cxa_guard_release>
 8082b7a:	4a07      	ldr	r2, [pc, #28]	; (8082b98 <_Z22__fetch_global_Serial1v+0x44>)
 8082b7c:	4907      	ldr	r1, [pc, #28]	; (8082b9c <_Z22__fetch_global_Serial1v+0x48>)
 8082b7e:	4805      	ldr	r0, [pc, #20]	; (8082b94 <_Z22__fetch_global_Serial1v+0x40>)
 8082b80:	f000 fade 	bl	8083140 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082b84:	4803      	ldr	r0, [pc, #12]	; (8082b94 <_Z22__fetch_global_Serial1v+0x40>)
 8082b86:	bd38      	pop	{r3, r4, r5, pc}
 8082b88:	20000560 	.word	0x20000560
 8082b8c:	20000564 	.word	0x20000564
 8082b90:	200004dc 	.word	0x200004dc
 8082b94:	200004c8 	.word	0x200004c8
 8082b98:	2000023c 	.word	0x2000023c
 8082b9c:	08082a91 	.word	0x08082a91

08082ba0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082ba0:	7441      	strb	r1, [r0, #17]
 8082ba2:	4770      	bx	lr

08082ba4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082ba4:	4770      	bx	lr

08082ba6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082ba6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082ba8:	2100      	movs	r1, #0
 8082baa:	7c00      	ldrb	r0, [r0, #16]
 8082bac:	f7fe fe8a 	bl	80818c4 <HAL_USB_USART_Receive_Data>
}
 8082bb0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082bb4:	bf28      	it	cs
 8082bb6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082bba:	bd08      	pop	{r3, pc}

08082bbc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082bbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082bbe:	2101      	movs	r1, #1
 8082bc0:	7c00      	ldrb	r0, [r0, #16]
 8082bc2:	f7fe fe7f 	bl	80818c4 <HAL_USB_USART_Receive_Data>
}
 8082bc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082bca:	bf28      	it	cs
 8082bcc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082bd0:	bd08      	pop	{r3, pc}

08082bd2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082bd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082bd4:	7c00      	ldrb	r0, [r0, #16]
 8082bd6:	f7fe fe6d 	bl	80818b4 <HAL_USB_USART_Available_Data_For_Write>
}
 8082bda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bde:	bd08      	pop	{r3, pc}

08082be0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082be0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082be2:	7c00      	ldrb	r0, [r0, #16]
 8082be4:	f7fe fe5e 	bl	80818a4 <HAL_USB_USART_Available_Data>
}
 8082be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bec:	bd08      	pop	{r3, pc}

08082bee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082bee:	7c00      	ldrb	r0, [r0, #16]
 8082bf0:	f7fe be78 	b.w	80818e4 <HAL_USB_USART_Flush_Data>

08082bf4 <_ZN9USBSerialD0Ev>:
 8082bf4:	b510      	push	{r4, lr}
 8082bf6:	4604      	mov	r4, r0
 8082bf8:	2114      	movs	r1, #20
 8082bfa:	f000 faa6 	bl	808314a <_ZdlPvj>
 8082bfe:	4620      	mov	r0, r4
 8082c00:	bd10      	pop	{r4, pc}

08082c02 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082c02:	b538      	push	{r3, r4, r5, lr}
 8082c04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082c06:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082c08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082c0a:	f7fe fe53 	bl	80818b4 <HAL_USB_USART_Available_Data_For_Write>
 8082c0e:	2800      	cmp	r0, #0
 8082c10:	dc01      	bgt.n	8082c16 <_ZN9USBSerial5writeEh+0x14>
 8082c12:	7c60      	ldrb	r0, [r4, #17]
 8082c14:	b128      	cbz	r0, 8082c22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082c16:	4629      	mov	r1, r5
 8082c18:	7c20      	ldrb	r0, [r4, #16]
 8082c1a:	f7fe fe5b 	bl	80818d4 <HAL_USB_USART_Send_Data>
 8082c1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082c22:	bd38      	pop	{r3, r4, r5, pc}

08082c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082c24:	b510      	push	{r4, lr}
 8082c26:	4604      	mov	r4, r0
 8082c28:	2300      	movs	r3, #0
 8082c2a:	6063      	str	r3, [r4, #4]
 8082c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082c30:	60a3      	str	r3, [r4, #8]
 8082c32:	4b05      	ldr	r3, [pc, #20]	; (8082c48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082c34:	4608      	mov	r0, r1
 8082c36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082c38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082c3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082c3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082c3e:	4611      	mov	r1, r2
 8082c40:	f7fe fe28 	bl	8081894 <HAL_USB_USART_Init>
}
 8082c44:	4620      	mov	r0, r4
 8082c46:	bd10      	pop	{r4, pc}
 8082c48:	080872f0 	.word	0x080872f0

08082c4c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082c4c:	b510      	push	{r4, lr}
 8082c4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082c50:	2214      	movs	r2, #20
 8082c52:	2100      	movs	r1, #0
 8082c54:	f001 fe9d 	bl	8084992 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082c58:	4b05      	ldr	r3, [pc, #20]	; (8082c70 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082c5a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082c5c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082c5e:	4b05      	ldr	r3, [pc, #20]	; (8082c74 <_Z19acquireSerialBufferv+0x28>)
 8082c60:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082c62:	f240 1301 	movw	r3, #257	; 0x101
 8082c66:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082c68:	2381      	movs	r3, #129	; 0x81
 8082c6a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082c6c:	bd10      	pop	{r4, pc}
 8082c6e:	bf00      	nop
 8082c70:	2000066d 	.word	0x2000066d
 8082c74:	200005ec 	.word	0x200005ec

08082c78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082c78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082c7a:	4d0e      	ldr	r5, [pc, #56]	; (8082cb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082c7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082c7e:	a801      	add	r0, sp, #4
 8082c80:	f7ff ffe4 	bl	8082c4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082c84:	6829      	ldr	r1, [r5, #0]
 8082c86:	f011 0401 	ands.w	r4, r1, #1
 8082c8a:	d110      	bne.n	8082cae <_Z16_fetch_usbserialv+0x36>
 8082c8c:	4628      	mov	r0, r5
 8082c8e:	f7fd fa0a 	bl	80800a6 <__cxa_guard_acquire>
 8082c92:	b160      	cbz	r0, 8082cae <_Z16_fetch_usbserialv+0x36>
 8082c94:	aa01      	add	r2, sp, #4
 8082c96:	4621      	mov	r1, r4
 8082c98:	4807      	ldr	r0, [pc, #28]	; (8082cb8 <_Z16_fetch_usbserialv+0x40>)
 8082c9a:	f7ff ffc3 	bl	8082c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082c9e:	4628      	mov	r0, r5
 8082ca0:	f7fd fa06 	bl	80800b0 <__cxa_guard_release>
 8082ca4:	4a05      	ldr	r2, [pc, #20]	; (8082cbc <_Z16_fetch_usbserialv+0x44>)
 8082ca6:	4906      	ldr	r1, [pc, #24]	; (8082cc0 <_Z16_fetch_usbserialv+0x48>)
 8082ca8:	4803      	ldr	r0, [pc, #12]	; (8082cb8 <_Z16_fetch_usbserialv+0x40>)
 8082caa:	f000 fa49 	bl	8083140 <__aeabi_atexit>
	return _usbserial;
}
 8082cae:	4802      	ldr	r0, [pc, #8]	; (8082cb8 <_Z16_fetch_usbserialv+0x40>)
 8082cb0:	b007      	add	sp, #28
 8082cb2:	bd30      	pop	{r4, r5, pc}
 8082cb4:	200005e8 	.word	0x200005e8
 8082cb8:	20000770 	.word	0x20000770
 8082cbc:	2000023c 	.word	0x2000023c
 8082cc0:	08082ba5 	.word	0x08082ba5

08082cc4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082cc4:	b510      	push	{r4, lr}
 8082cc6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082cc8:	2214      	movs	r2, #20
 8082cca:	2100      	movs	r1, #0
 8082ccc:	f001 fe61 	bl	8084992 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082cd0:	4b05      	ldr	r3, [pc, #20]	; (8082ce8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082cd2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082cd4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082cd6:	4b05      	ldr	r3, [pc, #20]	; (8082cec <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082cd8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082cda:	f240 1301 	movw	r3, #257	; 0x101
 8082cde:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082ce0:	2381      	movs	r3, #129	; 0x81
 8082ce2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082ce4:	bd10      	pop	{r4, pc}
 8082ce6:	bf00      	nop
 8082ce8:	20000820 	.word	0x20000820
 8082cec:	20000788 	.word	0x20000788

08082cf0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082cf0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082cf2:	4c0e      	ldr	r4, [pc, #56]	; (8082d2c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082cf4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082cf6:	a801      	add	r0, sp, #4
 8082cf8:	f7ff ffe4 	bl	8082cc4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082cfc:	6823      	ldr	r3, [r4, #0]
 8082cfe:	07db      	lsls	r3, r3, #31
 8082d00:	d410      	bmi.n	8082d24 <_Z17_fetch_usbserial1v+0x34>
 8082d02:	4620      	mov	r0, r4
 8082d04:	f7fd f9cf 	bl	80800a6 <__cxa_guard_acquire>
 8082d08:	b160      	cbz	r0, 8082d24 <_Z17_fetch_usbserial1v+0x34>
 8082d0a:	aa01      	add	r2, sp, #4
 8082d0c:	2101      	movs	r1, #1
 8082d0e:	4808      	ldr	r0, [pc, #32]	; (8082d30 <_Z17_fetch_usbserial1v+0x40>)
 8082d10:	f7ff ff88 	bl	8082c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082d14:	4620      	mov	r0, r4
 8082d16:	f7fd f9cb 	bl	80800b0 <__cxa_guard_release>
 8082d1a:	4a06      	ldr	r2, [pc, #24]	; (8082d34 <_Z17_fetch_usbserial1v+0x44>)
 8082d1c:	4906      	ldr	r1, [pc, #24]	; (8082d38 <_Z17_fetch_usbserial1v+0x48>)
 8082d1e:	4804      	ldr	r0, [pc, #16]	; (8082d30 <_Z17_fetch_usbserial1v+0x40>)
 8082d20:	f000 fa0e 	bl	8083140 <__aeabi_atexit>
  return _usbserial1;
}
 8082d24:	4802      	ldr	r0, [pc, #8]	; (8082d30 <_Z17_fetch_usbserial1v+0x40>)
 8082d26:	b006      	add	sp, #24
 8082d28:	bd10      	pop	{r4, pc}
 8082d2a:	bf00      	nop
 8082d2c:	20000784 	.word	0x20000784
 8082d30:	2000080c 	.word	0x2000080c
 8082d34:	2000023c 	.word	0x2000023c
 8082d38:	08082ba5 	.word	0x08082ba5

08082d3c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8082d3c:	b510      	push	{r4, lr}
 8082d3e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8082d40:	f001 fe93 	bl	8084a6a <strlen>
 8082d44:	3801      	subs	r0, #1
 8082d46:	1823      	adds	r3, r4, r0
 8082d48:	4620      	mov	r0, r4
	while(i<j){
 8082d4a:	4298      	cmp	r0, r3
 8082d4c:	d206      	bcs.n	8082d5c <_Z11str_reversePc+0x20>
		c = *i;
 8082d4e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8082d50:	7819      	ldrb	r1, [r3, #0]
 8082d52:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8082d56:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8082d5a:	e7f6      	b.n	8082d4a <_Z11str_reversePc+0xe>
 8082d5c:	bd10      	pop	{r4, pc}

08082d5e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8082d5e:	b570      	push	{r4, r5, r6, lr}
 8082d60:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8082d62:	1e91      	subs	r1, r2, #2
 8082d64:	2922      	cmp	r1, #34	; 0x22
 8082d66:	d820      	bhi.n	8082daa <ultoa+0x4c>
 8082d68:	4625      	mov	r5, r4
 8082d6a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082d6c:	b910      	cbnz	r0, 8082d74 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d6e:	4423      	add	r3, r4
            *ptr++ = '0';
 8082d70:	2230      	movs	r2, #48	; 0x30
 8082d72:	e00e      	b.n	8082d92 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082d74:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8082d78:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082d7c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8082d7e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8082d80:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8082d84:	bf94      	ite	ls
 8082d86:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082d88:	3157      	addhi	r1, #87	; 0x57
 8082d8a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8082d8e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082d90:	e7eb      	b.n	8082d6a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d92:	4299      	cmp	r1, r3
 8082d94:	d202      	bcs.n	8082d9c <ultoa+0x3e>
            *ptr++ = '0';
 8082d96:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d9a:	e7fa      	b.n	8082d92 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8082d9c:	2300      	movs	r3, #0
	str_reverse(buffer);
 8082d9e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8082da0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8082da2:	f7ff ffcb 	bl	8082d3c <_Z11str_reversePc>
	return buffer;
 8082da6:	4620      	mov	r0, r4
 8082da8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8082daa:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8082dac:	bd70      	pop	{r4, r5, r6, pc}

08082dae <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082dae:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082db0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082db2:	460c      	mov	r4, r1
 8082db4:	4615      	mov	r5, r2
	if(a<0){
 8082db6:	da0b      	bge.n	8082dd0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082dbc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082dc0:	bf14      	ite	ne
 8082dc2:	4258      	negne	r0, r3
 8082dc4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082dc6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082dc8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8082dca:	462a      	mov	r2, r5
 8082dcc:	4419      	add	r1, r3
 8082dce:	e000      	b.n	8082dd2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8082dd0:	2301      	movs	r3, #1
 8082dd2:	f7ff ffc4 	bl	8082d5e <ultoa>
	}
	return buffer;
}
 8082dd6:	4620      	mov	r0, r4
 8082dd8:	bd38      	pop	{r3, r4, r5, pc}
	...

08082ddc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082ddc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082dde:	4b18      	ldr	r3, [pc, #96]	; (8082e40 <serialEventRun+0x64>)
 8082de0:	b133      	cbz	r3, 8082df0 <serialEventRun+0x14>
 8082de2:	f7ff ff49 	bl	8082c78 <_Z16_fetch_usbserialv>
 8082de6:	6803      	ldr	r3, [r0, #0]
 8082de8:	691b      	ldr	r3, [r3, #16]
 8082dea:	4798      	blx	r3
 8082dec:	2800      	cmp	r0, #0
 8082dee:	dc1e      	bgt.n	8082e2e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082df0:	4b14      	ldr	r3, [pc, #80]	; (8082e44 <serialEventRun+0x68>)
 8082df2:	b133      	cbz	r3, 8082e02 <serialEventRun+0x26>
 8082df4:	f7ff feae 	bl	8082b54 <_Z22__fetch_global_Serial1v>
 8082df8:	6803      	ldr	r3, [r0, #0]
 8082dfa:	691b      	ldr	r3, [r3, #16]
 8082dfc:	4798      	blx	r3
 8082dfe:	2800      	cmp	r0, #0
 8082e00:	dc18      	bgt.n	8082e34 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082e02:	4b11      	ldr	r3, [pc, #68]	; (8082e48 <serialEventRun+0x6c>)
 8082e04:	b10b      	cbz	r3, 8082e0a <serialEventRun+0x2e>
 8082e06:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082e0a:	4b10      	ldr	r3, [pc, #64]	; (8082e4c <serialEventRun+0x70>)
 8082e0c:	b10b      	cbz	r3, 8082e12 <serialEventRun+0x36>
 8082e0e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082e12:	4b0f      	ldr	r3, [pc, #60]	; (8082e50 <serialEventRun+0x74>)
 8082e14:	b10b      	cbz	r3, 8082e1a <serialEventRun+0x3e>
 8082e16:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082e1a:	4b0e      	ldr	r3, [pc, #56]	; (8082e54 <serialEventRun+0x78>)
 8082e1c:	b17b      	cbz	r3, 8082e3e <serialEventRun+0x62>
 8082e1e:	f7ff ff67 	bl	8082cf0 <_Z17_fetch_usbserial1v>
 8082e22:	6803      	ldr	r3, [r0, #0]
 8082e24:	691b      	ldr	r3, [r3, #16]
 8082e26:	4798      	blx	r3
 8082e28:	2800      	cmp	r0, #0
 8082e2a:	dc06      	bgt.n	8082e3a <serialEventRun+0x5e>
 8082e2c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082e2e:	f3af 8000 	nop.w
 8082e32:	e7dd      	b.n	8082df0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082e34:	f3af 8000 	nop.w
 8082e38:	e7e3      	b.n	8082e02 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082e3a:	f3af 8000 	nop.w
 8082e3e:	bd08      	pop	{r3, pc}
	...

08082e58 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082e58:	b508      	push	{r3, lr}
	serialEventRun();
 8082e5a:	f7ff ffbf 	bl	8082ddc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082e5e:	f7fe fbe9 	bl	8081634 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082e62:	4b01      	ldr	r3, [pc, #4]	; (8082e68 <_post_loop+0x10>)
 8082e64:	6018      	str	r0, [r3, #0]
 8082e66:	bd08      	pop	{r3, pc}
 8082e68:	2000092c 	.word	0x2000092c

08082e6c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082e6c:	4802      	ldr	r0, [pc, #8]	; (8082e78 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082e6e:	4a03      	ldr	r2, [pc, #12]	; (8082e7c <_Z33system_initialize_user_backup_ramv+0x10>)
 8082e70:	4903      	ldr	r1, [pc, #12]	; (8082e80 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082e72:	1a12      	subs	r2, r2, r0
 8082e74:	f001 bd82 	b.w	808497c <memcpy>
 8082e78:	40024000 	.word	0x40024000
 8082e7c:	40024004 	.word	0x40024004
 8082e80:	080876e0 	.word	0x080876e0

08082e84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082e84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082e86:	2300      	movs	r3, #0
 8082e88:	9300      	str	r3, [sp, #0]
 8082e8a:	461a      	mov	r2, r3
 8082e8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082e90:	f7fe fd72 	bl	8081978 <system_ctrl_set_result>
}
 8082e94:	b003      	add	sp, #12
 8082e96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082e9c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082e9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082e9e:	8843      	ldrh	r3, [r0, #2]
 8082ea0:	2b0a      	cmp	r3, #10
 8082ea2:	d008      	beq.n	8082eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082ea4:	2b50      	cmp	r3, #80	; 0x50
 8082ea6:	d109      	bne.n	8082ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082ea8:	4b09      	ldr	r3, [pc, #36]	; (8082ed0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082eaa:	681b      	ldr	r3, [r3, #0]
 8082eac:	b13b      	cbz	r3, 8082ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082eae:	b003      	add	sp, #12
 8082eb0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082eb4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082eb6:	f7ff ffe5 	bl	8082e84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082eba:	e006      	b.n	8082eca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082ebc:	2300      	movs	r3, #0
 8082ebe:	9300      	str	r3, [sp, #0]
 8082ec0:	461a      	mov	r2, r3
 8082ec2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082ec6:	f7fe fd57 	bl	8081978 <system_ctrl_set_result>
        break;
    }
}
 8082eca:	b003      	add	sp, #12
 8082ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8082ed0:	20000924 	.word	0x20000924

08082ed4 <module_user_init_hook>:

void module_user_init_hook()
{
 8082ed4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082ed6:	4c10      	ldr	r4, [pc, #64]	; (8082f18 <module_user_init_hook+0x44>)
 8082ed8:	4d10      	ldr	r5, [pc, #64]	; (8082f1c <module_user_init_hook+0x48>)
 8082eda:	6823      	ldr	r3, [r4, #0]
 8082edc:	42ab      	cmp	r3, r5
 8082ede:	4b10      	ldr	r3, [pc, #64]	; (8082f20 <module_user_init_hook+0x4c>)
 8082ee0:	bf0c      	ite	eq
 8082ee2:	2201      	moveq	r2, #1
 8082ee4:	2200      	movne	r2, #0
 8082ee6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082ee8:	d002      	beq.n	8082ef0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8082eea:	f7ff ffbf 	bl	8082e6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082eee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082ef0:	f7fe fb98 	bl	8081624 <HAL_RNG_GetRandomNumber>
 8082ef4:	4604      	mov	r4, r0
    srand(seed);
 8082ef6:	f001 fd55 	bl	80849a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082efa:	4b0a      	ldr	r3, [pc, #40]	; (8082f24 <module_user_init_hook+0x50>)
 8082efc:	b113      	cbz	r3, 8082f04 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8082efe:	4620      	mov	r0, r4
 8082f00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082f04:	2100      	movs	r1, #0
 8082f06:	4807      	ldr	r0, [pc, #28]	; (8082f24 <module_user_init_hook+0x50>)
 8082f08:	f7fe fd7a 	bl	8081a00 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082f10:	2100      	movs	r1, #0
 8082f12:	4805      	ldr	r0, [pc, #20]	; (8082f28 <module_user_init_hook+0x54>)
 8082f14:	f7fe bd26 	b.w	8081964 <system_ctrl_set_app_request_handler>
 8082f18:	40024000 	.word	0x40024000
 8082f1c:	9a271c1e 	.word	0x9a271c1e
 8082f20:	20000928 	.word	0x20000928
 8082f24:	00000000 	.word	0x00000000
 8082f28:	08082e9d 	.word	0x08082e9d

08082f2c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082f2c:	b510      	push	{r4, lr}
 8082f2e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082f30:	f000 f8e6 	bl	8083100 <_ZN8particle7globals11instanceSpiEv>
 8082f34:	f7ff fc0b 	bl	808274e <_ZN8SPIClass9isEnabledEv>
 8082f38:	b128      	cbz	r0, 8082f46 <pinAvailable+0x1a>
 8082f3a:	f1a4 030d 	sub.w	r3, r4, #13
 8082f3e:	2b02      	cmp	r3, #2
 8082f40:	d801      	bhi.n	8082f46 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 8082f42:	2000      	movs	r0, #0
 8082f44:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082f46:	f000 f877 	bl	8083038 <_Z19__fetch_global_Wirev>
 8082f4a:	f7ff fa02 	bl	8082352 <_ZN7TwoWire9isEnabledEv>
 8082f4e:	b108      	cbz	r0, 8082f54 <pinAvailable+0x28>
 8082f50:	2c01      	cmp	r4, #1
 8082f52:	d9f6      	bls.n	8082f42 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082f54:	f7ff fdfe 	bl	8082b54 <_Z22__fetch_global_Serial1v>
 8082f58:	f7ff fdf9 	bl	8082b4e <_ZN11USARTSerial9isEnabledEv>
 8082f5c:	b118      	cbz	r0, 8082f66 <pinAvailable+0x3a>
 8082f5e:	f1a4 0312 	sub.w	r3, r4, #18
 8082f62:	2b01      	cmp	r3, #1
 8082f64:	d9ed      	bls.n	8082f42 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082f66:	2c2e      	cmp	r4, #46	; 0x2e
 8082f68:	bf8c      	ite	hi
 8082f6a:	2000      	movhi	r0, #0
 8082f6c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082f6e:	bd10      	pop	{r4, pc}

08082f70 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082f70:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082f72:	b538      	push	{r3, r4, r5, lr}
 8082f74:	4604      	mov	r4, r0
 8082f76:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082f78:	d80a      	bhi.n	8082f90 <pinMode+0x20>
 8082f7a:	29ff      	cmp	r1, #255	; 0xff
 8082f7c:	d008      	beq.n	8082f90 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082f7e:	f7ff ffd5 	bl	8082f2c <pinAvailable>
 8082f82:	b128      	cbz	r0, 8082f90 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082f84:	4629      	mov	r1, r5
 8082f86:	4620      	mov	r0, r4
}
 8082f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082f8c:	f7fe bb72 	b.w	8081674 <HAL_Pin_Mode>
 8082f90:	bd38      	pop	{r3, r4, r5, pc}

08082f92 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082f92:	b538      	push	{r3, r4, r5, lr}
 8082f94:	4604      	mov	r4, r0
 8082f96:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082f98:	f7fe fb74 	bl	8081684 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082f9c:	28ff      	cmp	r0, #255	; 0xff
 8082f9e:	d010      	beq.n	8082fc2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082fa0:	2806      	cmp	r0, #6
 8082fa2:	d804      	bhi.n	8082fae <digitalWrite+0x1c>
 8082fa4:	234d      	movs	r3, #77	; 0x4d
 8082fa6:	fa23 f000 	lsr.w	r0, r3, r0
 8082faa:	07c3      	lsls	r3, r0, #31
 8082fac:	d409      	bmi.n	8082fc2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082fae:	4620      	mov	r0, r4
 8082fb0:	f7ff ffbc 	bl	8082f2c <pinAvailable>
 8082fb4:	b128      	cbz	r0, 8082fc2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082fb6:	4629      	mov	r1, r5
 8082fb8:	4620      	mov	r0, r4
}
 8082fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082fbe:	f7fe bb69 	b.w	8081694 <HAL_GPIO_Write>
 8082fc2:	bd38      	pop	{r3, r4, r5, pc}

08082fc4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082fc4:	b510      	push	{r4, lr}
 8082fc6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082fc8:	f7fe fb5c 	bl	8081684 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082fcc:	3804      	subs	r0, #4
 8082fce:	b2c0      	uxtb	r0, r0
 8082fd0:	2801      	cmp	r0, #1
 8082fd2:	d908      	bls.n	8082fe6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082fd4:	4620      	mov	r0, r4
 8082fd6:	f7ff ffa9 	bl	8082f2c <pinAvailable>
 8082fda:	b120      	cbz	r0, 8082fe6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082fdc:	4620      	mov	r0, r4
}
 8082fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082fe2:	f7fe bb5f 	b.w	80816a4 <HAL_GPIO_Read>
}
 8082fe6:	2000      	movs	r0, #0
 8082fe8:	bd10      	pop	{r4, pc}
	...

08082fec <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8082fec:	b570      	push	{r4, r5, r6, lr}
 8082fee:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082ff0:	2514      	movs	r5, #20
 8082ff2:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082ff4:	4e09      	ldr	r6, [pc, #36]	; (808301c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8082ff6:	2100      	movs	r1, #0
 8082ff8:	f001 fccb 	bl	8084992 <memset>
 8082ffc:	8025      	strh	r5, [r4, #0]
 8082ffe:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083000:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083002:	60a5      	str	r5, [r4, #8]
 8083004:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083006:	4628      	mov	r0, r5
 8083008:	f000 f8b9 	bl	808317e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808300c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808300e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083010:	4628      	mov	r0, r5
 8083012:	f000 f8b4 	bl	808317e <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083016:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083018:	4620      	mov	r0, r4
 808301a:	bd70      	pop	{r4, r5, r6, pc}
 808301c:	08087318 	.word	0x08087318

08083020 <_Z17acquireWireBufferv>:
 8083020:	b510      	push	{r4, lr}
 8083022:	4604      	mov	r4, r0
 8083024:	f7ff ffe2 	bl	8082fec <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8083028:	4620      	mov	r0, r4
 808302a:	bd10      	pop	{r4, pc}

0808302c <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 808302c:	b510      	push	{r4, lr}
 808302e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083030:	f7ff ffdc 	bl	8082fec <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083034:	4620      	mov	r0, r4
 8083036:	bd10      	pop	{r4, pc}

08083038 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8083038:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808303a:	4d0e      	ldr	r5, [pc, #56]	; (8083074 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808303c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808303e:	6829      	ldr	r1, [r5, #0]
 8083040:	f011 0401 	ands.w	r4, r1, #1
 8083044:	d113      	bne.n	808306e <_Z19__fetch_global_Wirev+0x36>
 8083046:	4628      	mov	r0, r5
 8083048:	f7fd f82d 	bl	80800a6 <__cxa_guard_acquire>
 808304c:	b178      	cbz	r0, 808306e <_Z19__fetch_global_Wirev+0x36>
 808304e:	a801      	add	r0, sp, #4
 8083050:	f7ff ffe6 	bl	8083020 <_Z17acquireWireBufferv>
 8083054:	aa01      	add	r2, sp, #4
 8083056:	4621      	mov	r1, r4
 8083058:	4807      	ldr	r0, [pc, #28]	; (8083078 <_Z19__fetch_global_Wirev+0x40>)
 808305a:	f7ff f923 	bl	80822a4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 808305e:	4628      	mov	r0, r5
 8083060:	f7fd f826 	bl	80800b0 <__cxa_guard_release>
 8083064:	4a05      	ldr	r2, [pc, #20]	; (808307c <_Z19__fetch_global_Wirev+0x44>)
 8083066:	4906      	ldr	r1, [pc, #24]	; (8083080 <_Z19__fetch_global_Wirev+0x48>)
 8083068:	4803      	ldr	r0, [pc, #12]	; (8083078 <_Z19__fetch_global_Wirev+0x40>)
 808306a:	f000 f869 	bl	8083140 <__aeabi_atexit>
	return wire;
}
 808306e:	4802      	ldr	r0, [pc, #8]	; (8083078 <_Z19__fetch_global_Wirev+0x40>)
 8083070:	b007      	add	sp, #28
 8083072:	bd30      	pop	{r4, r5, pc}
 8083074:	20000930 	.word	0x20000930
 8083078:	20000948 	.word	0x20000948
 808307c:	2000023c 	.word	0x2000023c
 8083080:	0808224b 	.word	0x0808224b

08083084 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083084:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083086:	4c0e      	ldr	r4, [pc, #56]	; (80830c0 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083088:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808308a:	6823      	ldr	r3, [r4, #0]
 808308c:	07db      	lsls	r3, r3, #31
 808308e:	d413      	bmi.n	80830b8 <_Z20__fetch_global_Wire3v+0x34>
 8083090:	4620      	mov	r0, r4
 8083092:	f7fd f808 	bl	80800a6 <__cxa_guard_acquire>
 8083096:	b178      	cbz	r0, 80830b8 <_Z20__fetch_global_Wire3v+0x34>
 8083098:	a801      	add	r0, sp, #4
 808309a:	f7ff ffc7 	bl	808302c <_Z18acquireWire3Bufferv>
 808309e:	aa01      	add	r2, sp, #4
 80830a0:	2102      	movs	r1, #2
 80830a2:	4808      	ldr	r0, [pc, #32]	; (80830c4 <_Z20__fetch_global_Wire3v+0x40>)
 80830a4:	f7ff f8fe 	bl	80822a4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80830a8:	4620      	mov	r0, r4
 80830aa:	f7fd f801 	bl	80800b0 <__cxa_guard_release>
 80830ae:	4a06      	ldr	r2, [pc, #24]	; (80830c8 <_Z20__fetch_global_Wire3v+0x44>)
 80830b0:	4906      	ldr	r1, [pc, #24]	; (80830cc <_Z20__fetch_global_Wire3v+0x48>)
 80830b2:	4804      	ldr	r0, [pc, #16]	; (80830c4 <_Z20__fetch_global_Wire3v+0x40>)
 80830b4:	f000 f844 	bl	8083140 <__aeabi_atexit>
	return wire;
}
 80830b8:	4802      	ldr	r0, [pc, #8]	; (80830c4 <_Z20__fetch_global_Wire3v+0x40>)
 80830ba:	b006      	add	sp, #24
 80830bc:	bd10      	pop	{r4, pc}
 80830be:	bf00      	nop
 80830c0:	2000095c 	.word	0x2000095c
 80830c4:	20000934 	.word	0x20000934
 80830c8:	2000023c 	.word	0x2000023c
 80830cc:	0808224b 	.word	0x0808224b

080830d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80830d0:	b513      	push	{r0, r1, r4, lr}
 80830d2:	4c08      	ldr	r4, [pc, #32]	; (80830f4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80830d4:	2300      	movs	r3, #0
 80830d6:	461a      	mov	r2, r3
 80830d8:	4619      	mov	r1, r3
 80830da:	9300      	str	r3, [sp, #0]
 80830dc:	4620      	mov	r0, r4
 80830de:	f7ff f991 	bl	8082404 <_ZN9IPAddressC1Ehhhh>
 80830e2:	4620      	mov	r0, r4
 80830e4:	4a04      	ldr	r2, [pc, #16]	; (80830f8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80830e6:	4905      	ldr	r1, [pc, #20]	; (80830fc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80830e8:	b002      	add	sp, #8
 80830ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80830ee:	f000 b827 	b.w	8083140 <__aeabi_atexit>
 80830f2:	bf00      	nop
 80830f4:	20000960 	.word	0x20000960
 80830f8:	2000023c 	.word	0x2000023c
 80830fc:	0808237f 	.word	0x0808237f

08083100 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 8083100:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 8083102:	4d0b      	ldr	r5, [pc, #44]	; (8083130 <_ZN8particle7globals11instanceSpiEv+0x30>)
 8083104:	6829      	ldr	r1, [r5, #0]
 8083106:	f011 0401 	ands.w	r4, r1, #1
 808310a:	d10f      	bne.n	808312c <_ZN8particle7globals11instanceSpiEv+0x2c>
 808310c:	4628      	mov	r0, r5
 808310e:	f7fc ffca 	bl	80800a6 <__cxa_guard_acquire>
 8083112:	b158      	cbz	r0, 808312c <_ZN8particle7globals11instanceSpiEv+0x2c>
 8083114:	4621      	mov	r1, r4
 8083116:	4807      	ldr	r0, [pc, #28]	; (8083134 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8083118:	f7ff fa7c 	bl	8082614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808311c:	4628      	mov	r0, r5
 808311e:	f7fc ffc7 	bl	80800b0 <__cxa_guard_release>
 8083122:	4a05      	ldr	r2, [pc, #20]	; (8083138 <_ZN8particle7globals11instanceSpiEv+0x38>)
 8083124:	4905      	ldr	r1, [pc, #20]	; (808313c <_ZN8particle7globals11instanceSpiEv+0x3c>)
 8083126:	4803      	ldr	r0, [pc, #12]	; (8083134 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8083128:	f000 f80a 	bl	8083140 <__aeabi_atexit>
    return instance;
}
 808312c:	4801      	ldr	r0, [pc, #4]	; (8083134 <_ZN8particle7globals11instanceSpiEv+0x34>)
 808312e:	bd38      	pop	{r3, r4, r5, pc}
 8083130:	20000978 	.word	0x20000978
 8083134:	20000968 	.word	0x20000968
 8083138:	2000023c 	.word	0x2000023c
 808313c:	080825e1 	.word	0x080825e1

08083140 <__aeabi_atexit>:
 8083140:	460b      	mov	r3, r1
 8083142:	4601      	mov	r1, r0
 8083144:	4618      	mov	r0, r3
 8083146:	f001 bb0f 	b.w	8084768 <__cxa_atexit>

0808314a <_ZdlPvj>:
 808314a:	f7fc bfaa 	b.w	80800a2 <_ZdlPv>
	...

08083150 <_ZSt15get_new_handlerv>:
 8083150:	4b02      	ldr	r3, [pc, #8]	; (808315c <_ZSt15get_new_handlerv+0xc>)
 8083152:	6818      	ldr	r0, [r3, #0]
 8083154:	f3bf 8f5f 	dmb	sy
 8083158:	4770      	bx	lr
 808315a:	bf00      	nop
 808315c:	2000097c 	.word	0x2000097c

08083160 <_ZnwjRKSt9nothrow_t>:
 8083160:	b510      	push	{r4, lr}
 8083162:	2800      	cmp	r0, #0
 8083164:	bf14      	ite	ne
 8083166:	4604      	movne	r4, r0
 8083168:	2401      	moveq	r4, #1
 808316a:	4620      	mov	r0, r4
 808316c:	f7fe fca0 	bl	8081ab0 <malloc>
 8083170:	b920      	cbnz	r0, 808317c <_ZnwjRKSt9nothrow_t+0x1c>
 8083172:	f7ff ffed 	bl	8083150 <_ZSt15get_new_handlerv>
 8083176:	b108      	cbz	r0, 808317c <_ZnwjRKSt9nothrow_t+0x1c>
 8083178:	4780      	blx	r0
 808317a:	e7f6      	b.n	808316a <_ZnwjRKSt9nothrow_t+0xa>
 808317c:	bd10      	pop	{r4, pc}

0808317e <_ZnajRKSt9nothrow_t>:
 808317e:	f7ff bfef 	b.w	8083160 <_ZnwjRKSt9nothrow_t>

08083182 <_ZSt25__throw_bad_function_callv>:
 8083182:	b508      	push	{r3, lr}
 8083184:	f7fe fcbc 	bl	8081b00 <abort>

08083188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083188:	4b24      	ldr	r3, [pc, #144]	; (808321c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808318a:	681a      	ldr	r2, [r3, #0]
 808318c:	07d0      	lsls	r0, r2, #31
 808318e:	bf5c      	itt	pl
 8083190:	2201      	movpl	r2, #1
 8083192:	601a      	strpl	r2, [r3, #0]
 8083194:	4b22      	ldr	r3, [pc, #136]	; (8083220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083196:	681a      	ldr	r2, [r3, #0]
 8083198:	07d1      	lsls	r1, r2, #31
 808319a:	bf5c      	itt	pl
 808319c:	2201      	movpl	r2, #1
 808319e:	601a      	strpl	r2, [r3, #0]
 80831a0:	4b20      	ldr	r3, [pc, #128]	; (8083224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80831a2:	681a      	ldr	r2, [r3, #0]
 80831a4:	07d2      	lsls	r2, r2, #31
 80831a6:	bf5c      	itt	pl
 80831a8:	2201      	movpl	r2, #1
 80831aa:	601a      	strpl	r2, [r3, #0]
 80831ac:	4b1e      	ldr	r3, [pc, #120]	; (8083228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80831ae:	681a      	ldr	r2, [r3, #0]
 80831b0:	07d0      	lsls	r0, r2, #31
 80831b2:	bf5c      	itt	pl
 80831b4:	2201      	movpl	r2, #1
 80831b6:	601a      	strpl	r2, [r3, #0]
 80831b8:	4b1c      	ldr	r3, [pc, #112]	; (808322c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80831ba:	681a      	ldr	r2, [r3, #0]
 80831bc:	07d1      	lsls	r1, r2, #31
 80831be:	bf5c      	itt	pl
 80831c0:	2201      	movpl	r2, #1
 80831c2:	601a      	strpl	r2, [r3, #0]
 80831c4:	4b1a      	ldr	r3, [pc, #104]	; (8083230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80831c6:	681a      	ldr	r2, [r3, #0]
 80831c8:	07d2      	lsls	r2, r2, #31
 80831ca:	bf5c      	itt	pl
 80831cc:	2201      	movpl	r2, #1
 80831ce:	601a      	strpl	r2, [r3, #0]
 80831d0:	4b18      	ldr	r3, [pc, #96]	; (8083234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80831d2:	681a      	ldr	r2, [r3, #0]
 80831d4:	07d0      	lsls	r0, r2, #31
 80831d6:	bf5c      	itt	pl
 80831d8:	2201      	movpl	r2, #1
 80831da:	601a      	strpl	r2, [r3, #0]
 80831dc:	4b16      	ldr	r3, [pc, #88]	; (8083238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80831de:	681a      	ldr	r2, [r3, #0]
 80831e0:	07d1      	lsls	r1, r2, #31
 80831e2:	bf5c      	itt	pl
 80831e4:	2201      	movpl	r2, #1
 80831e6:	601a      	strpl	r2, [r3, #0]
 80831e8:	4b14      	ldr	r3, [pc, #80]	; (808323c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80831ea:	681a      	ldr	r2, [r3, #0]
 80831ec:	07d2      	lsls	r2, r2, #31
 80831ee:	bf5c      	itt	pl
 80831f0:	2201      	movpl	r2, #1
 80831f2:	601a      	strpl	r2, [r3, #0]
 80831f4:	4b12      	ldr	r3, [pc, #72]	; (8083240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80831f6:	681a      	ldr	r2, [r3, #0]
 80831f8:	07d0      	lsls	r0, r2, #31
 80831fa:	bf5c      	itt	pl
 80831fc:	2201      	movpl	r2, #1
 80831fe:	601a      	strpl	r2, [r3, #0]
 8083200:	4b10      	ldr	r3, [pc, #64]	; (8083244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083202:	681a      	ldr	r2, [r3, #0]
 8083204:	07d1      	lsls	r1, r2, #31
 8083206:	bf5c      	itt	pl
 8083208:	2201      	movpl	r2, #1
 808320a:	601a      	strpl	r2, [r3, #0]
 808320c:	4b0e      	ldr	r3, [pc, #56]	; (8083248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808320e:	681a      	ldr	r2, [r3, #0]
 8083210:	07d2      	lsls	r2, r2, #31
 8083212:	bf5c      	itt	pl
 8083214:	2201      	movpl	r2, #1
 8083216:	601a      	strpl	r2, [r3, #0]
 8083218:	4770      	bx	lr
 808321a:	bf00      	nop
 808321c:	200009ac 	.word	0x200009ac
 8083220:	200009a8 	.word	0x200009a8
 8083224:	200009a4 	.word	0x200009a4
 8083228:	200009a0 	.word	0x200009a0
 808322c:	2000099c 	.word	0x2000099c
 8083230:	20000998 	.word	0x20000998
 8083234:	20000994 	.word	0x20000994
 8083238:	20000990 	.word	0x20000990
 808323c:	2000098c 	.word	0x2000098c
 8083240:	20000988 	.word	0x20000988
 8083244:	20000984 	.word	0x20000984
 8083248:	20000980 	.word	0x20000980

0808324c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808324c:	4b18      	ldr	r3, [pc, #96]	; (80832b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808324e:	681a      	ldr	r2, [r3, #0]
 8083250:	07d1      	lsls	r1, r2, #31
 8083252:	bf5c      	itt	pl
 8083254:	2201      	movpl	r2, #1
 8083256:	601a      	strpl	r2, [r3, #0]
 8083258:	4b16      	ldr	r3, [pc, #88]	; (80832b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808325a:	681a      	ldr	r2, [r3, #0]
 808325c:	07d2      	lsls	r2, r2, #31
 808325e:	bf5c      	itt	pl
 8083260:	2201      	movpl	r2, #1
 8083262:	601a      	strpl	r2, [r3, #0]
 8083264:	4b14      	ldr	r3, [pc, #80]	; (80832b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083266:	681a      	ldr	r2, [r3, #0]
 8083268:	07d0      	lsls	r0, r2, #31
 808326a:	bf5c      	itt	pl
 808326c:	2201      	movpl	r2, #1
 808326e:	601a      	strpl	r2, [r3, #0]
 8083270:	4b12      	ldr	r3, [pc, #72]	; (80832bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083272:	681a      	ldr	r2, [r3, #0]
 8083274:	07d1      	lsls	r1, r2, #31
 8083276:	bf5c      	itt	pl
 8083278:	2201      	movpl	r2, #1
 808327a:	601a      	strpl	r2, [r3, #0]
 808327c:	4b10      	ldr	r3, [pc, #64]	; (80832c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808327e:	681a      	ldr	r2, [r3, #0]
 8083280:	07d2      	lsls	r2, r2, #31
 8083282:	bf5c      	itt	pl
 8083284:	2201      	movpl	r2, #1
 8083286:	601a      	strpl	r2, [r3, #0]
 8083288:	4b0e      	ldr	r3, [pc, #56]	; (80832c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808328a:	681a      	ldr	r2, [r3, #0]
 808328c:	07d0      	lsls	r0, r2, #31
 808328e:	bf5c      	itt	pl
 8083290:	2201      	movpl	r2, #1
 8083292:	601a      	strpl	r2, [r3, #0]
 8083294:	4b0c      	ldr	r3, [pc, #48]	; (80832c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083296:	681a      	ldr	r2, [r3, #0]
 8083298:	07d1      	lsls	r1, r2, #31
 808329a:	bf5c      	itt	pl
 808329c:	2201      	movpl	r2, #1
 808329e:	601a      	strpl	r2, [r3, #0]
 80832a0:	4b0a      	ldr	r3, [pc, #40]	; (80832cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80832a2:	681a      	ldr	r2, [r3, #0]
 80832a4:	07d2      	lsls	r2, r2, #31
 80832a6:	bf5c      	itt	pl
 80832a8:	2201      	movpl	r2, #1
 80832aa:	601a      	strpl	r2, [r3, #0]
 80832ac:	4770      	bx	lr
 80832ae:	bf00      	nop
 80832b0:	200009cc 	.word	0x200009cc
 80832b4:	200009c8 	.word	0x200009c8
 80832b8:	200009c4 	.word	0x200009c4
 80832bc:	200009c0 	.word	0x200009c0
 80832c0:	200009bc 	.word	0x200009bc
 80832c4:	200009b8 	.word	0x200009b8
 80832c8:	200009b4 	.word	0x200009b4
 80832cc:	200009b0 	.word	0x200009b0

080832d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80832d0:	4b18      	ldr	r3, [pc, #96]	; (8083334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80832d2:	681a      	ldr	r2, [r3, #0]
 80832d4:	07d1      	lsls	r1, r2, #31
 80832d6:	bf5c      	itt	pl
 80832d8:	2201      	movpl	r2, #1
 80832da:	601a      	strpl	r2, [r3, #0]
 80832dc:	4b16      	ldr	r3, [pc, #88]	; (8083338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80832de:	681a      	ldr	r2, [r3, #0]
 80832e0:	07d2      	lsls	r2, r2, #31
 80832e2:	bf5c      	itt	pl
 80832e4:	2201      	movpl	r2, #1
 80832e6:	601a      	strpl	r2, [r3, #0]
 80832e8:	4b14      	ldr	r3, [pc, #80]	; (808333c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80832ea:	681a      	ldr	r2, [r3, #0]
 80832ec:	07d0      	lsls	r0, r2, #31
 80832ee:	bf5c      	itt	pl
 80832f0:	2201      	movpl	r2, #1
 80832f2:	601a      	strpl	r2, [r3, #0]
 80832f4:	4b12      	ldr	r3, [pc, #72]	; (8083340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80832f6:	681a      	ldr	r2, [r3, #0]
 80832f8:	07d1      	lsls	r1, r2, #31
 80832fa:	bf5c      	itt	pl
 80832fc:	2201      	movpl	r2, #1
 80832fe:	601a      	strpl	r2, [r3, #0]
 8083300:	4b10      	ldr	r3, [pc, #64]	; (8083344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083302:	681a      	ldr	r2, [r3, #0]
 8083304:	07d2      	lsls	r2, r2, #31
 8083306:	bf5c      	itt	pl
 8083308:	2201      	movpl	r2, #1
 808330a:	601a      	strpl	r2, [r3, #0]
 808330c:	4b0e      	ldr	r3, [pc, #56]	; (8083348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808330e:	681a      	ldr	r2, [r3, #0]
 8083310:	07d0      	lsls	r0, r2, #31
 8083312:	bf5c      	itt	pl
 8083314:	2201      	movpl	r2, #1
 8083316:	601a      	strpl	r2, [r3, #0]
 8083318:	4b0c      	ldr	r3, [pc, #48]	; (808334c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808331a:	681a      	ldr	r2, [r3, #0]
 808331c:	07d1      	lsls	r1, r2, #31
 808331e:	bf5c      	itt	pl
 8083320:	2201      	movpl	r2, #1
 8083322:	601a      	strpl	r2, [r3, #0]
 8083324:	4b0a      	ldr	r3, [pc, #40]	; (8083350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083326:	681a      	ldr	r2, [r3, #0]
 8083328:	07d2      	lsls	r2, r2, #31
 808332a:	bf5c      	itt	pl
 808332c:	2201      	movpl	r2, #1
 808332e:	601a      	strpl	r2, [r3, #0]
 8083330:	4770      	bx	lr
 8083332:	bf00      	nop
 8083334:	200009ec 	.word	0x200009ec
 8083338:	200009e8 	.word	0x200009e8
 808333c:	200009e4 	.word	0x200009e4
 8083340:	200009e0 	.word	0x200009e0
 8083344:	200009dc 	.word	0x200009dc
 8083348:	200009d8 	.word	0x200009d8
 808334c:	200009d4 	.word	0x200009d4
 8083350:	200009d0 	.word	0x200009d0

08083354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083354:	4b24      	ldr	r3, [pc, #144]	; (80833e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083356:	681a      	ldr	r2, [r3, #0]
 8083358:	07d0      	lsls	r0, r2, #31
 808335a:	bf5c      	itt	pl
 808335c:	2201      	movpl	r2, #1
 808335e:	601a      	strpl	r2, [r3, #0]
 8083360:	4b22      	ldr	r3, [pc, #136]	; (80833ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083362:	681a      	ldr	r2, [r3, #0]
 8083364:	07d1      	lsls	r1, r2, #31
 8083366:	bf5c      	itt	pl
 8083368:	2201      	movpl	r2, #1
 808336a:	601a      	strpl	r2, [r3, #0]
 808336c:	4b20      	ldr	r3, [pc, #128]	; (80833f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808336e:	681a      	ldr	r2, [r3, #0]
 8083370:	07d2      	lsls	r2, r2, #31
 8083372:	bf5c      	itt	pl
 8083374:	2201      	movpl	r2, #1
 8083376:	601a      	strpl	r2, [r3, #0]
 8083378:	4b1e      	ldr	r3, [pc, #120]	; (80833f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808337a:	681a      	ldr	r2, [r3, #0]
 808337c:	07d0      	lsls	r0, r2, #31
 808337e:	bf5c      	itt	pl
 8083380:	2201      	movpl	r2, #1
 8083382:	601a      	strpl	r2, [r3, #0]
 8083384:	4b1c      	ldr	r3, [pc, #112]	; (80833f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8083386:	681a      	ldr	r2, [r3, #0]
 8083388:	07d1      	lsls	r1, r2, #31
 808338a:	bf5c      	itt	pl
 808338c:	2201      	movpl	r2, #1
 808338e:	601a      	strpl	r2, [r3, #0]
 8083390:	4b1a      	ldr	r3, [pc, #104]	; (80833fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083392:	681a      	ldr	r2, [r3, #0]
 8083394:	07d2      	lsls	r2, r2, #31
 8083396:	bf5c      	itt	pl
 8083398:	2201      	movpl	r2, #1
 808339a:	601a      	strpl	r2, [r3, #0]
 808339c:	4b18      	ldr	r3, [pc, #96]	; (8083400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808339e:	681a      	ldr	r2, [r3, #0]
 80833a0:	07d0      	lsls	r0, r2, #31
 80833a2:	bf5c      	itt	pl
 80833a4:	2201      	movpl	r2, #1
 80833a6:	601a      	strpl	r2, [r3, #0]
 80833a8:	4b16      	ldr	r3, [pc, #88]	; (8083404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80833aa:	681a      	ldr	r2, [r3, #0]
 80833ac:	07d1      	lsls	r1, r2, #31
 80833ae:	bf5c      	itt	pl
 80833b0:	2201      	movpl	r2, #1
 80833b2:	601a      	strpl	r2, [r3, #0]
 80833b4:	4b14      	ldr	r3, [pc, #80]	; (8083408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80833b6:	681a      	ldr	r2, [r3, #0]
 80833b8:	07d2      	lsls	r2, r2, #31
 80833ba:	bf5c      	itt	pl
 80833bc:	2201      	movpl	r2, #1
 80833be:	601a      	strpl	r2, [r3, #0]
 80833c0:	4b12      	ldr	r3, [pc, #72]	; (808340c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80833c2:	681a      	ldr	r2, [r3, #0]
 80833c4:	07d0      	lsls	r0, r2, #31
 80833c6:	bf5c      	itt	pl
 80833c8:	2201      	movpl	r2, #1
 80833ca:	601a      	strpl	r2, [r3, #0]
 80833cc:	4b10      	ldr	r3, [pc, #64]	; (8083410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80833ce:	681a      	ldr	r2, [r3, #0]
 80833d0:	07d1      	lsls	r1, r2, #31
 80833d2:	bf5c      	itt	pl
 80833d4:	2201      	movpl	r2, #1
 80833d6:	601a      	strpl	r2, [r3, #0]
 80833d8:	4b0e      	ldr	r3, [pc, #56]	; (8083414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80833da:	681a      	ldr	r2, [r3, #0]
 80833dc:	07d2      	lsls	r2, r2, #31
 80833de:	bf5c      	itt	pl
 80833e0:	2201      	movpl	r2, #1
 80833e2:	601a      	strpl	r2, [r3, #0]
 80833e4:	4770      	bx	lr
 80833e6:	bf00      	nop
 80833e8:	20000a1c 	.word	0x20000a1c
 80833ec:	20000a18 	.word	0x20000a18
 80833f0:	20000a14 	.word	0x20000a14
 80833f4:	20000a10 	.word	0x20000a10
 80833f8:	20000a0c 	.word	0x20000a0c
 80833fc:	20000a08 	.word	0x20000a08
 8083400:	20000a04 	.word	0x20000a04
 8083404:	20000a00 	.word	0x20000a00
 8083408:	200009fc 	.word	0x200009fc
 808340c:	200009f8 	.word	0x200009f8
 8083410:	200009f4 	.word	0x200009f4
 8083414:	200009f0 	.word	0x200009f0

08083418 <fmod>:
 8083418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808341c:	b08b      	sub	sp, #44	; 0x2c
 808341e:	461d      	mov	r5, r3
 8083420:	4680      	mov	r8, r0
 8083422:	4689      	mov	r9, r1
 8083424:	4614      	mov	r4, r2
 8083426:	f000 f859 	bl	80834dc <__ieee754_fmod>
 808342a:	4b2a      	ldr	r3, [pc, #168]	; (80834d4 <fmod+0xbc>)
 808342c:	4606      	mov	r6, r0
 808342e:	f993 a000 	ldrsb.w	sl, [r3]
 8083432:	460f      	mov	r7, r1
 8083434:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8083438:	d02f      	beq.n	808349a <fmod+0x82>
 808343a:	4622      	mov	r2, r4
 808343c:	462b      	mov	r3, r5
 808343e:	4620      	mov	r0, r4
 8083440:	4629      	mov	r1, r5
 8083442:	f000 fdbd 	bl	8083fc0 <__aeabi_dcmpun>
 8083446:	bb40      	cbnz	r0, 808349a <fmod+0x82>
 8083448:	4642      	mov	r2, r8
 808344a:	464b      	mov	r3, r9
 808344c:	4640      	mov	r0, r8
 808344e:	4649      	mov	r1, r9
 8083450:	f000 fdb6 	bl	8083fc0 <__aeabi_dcmpun>
 8083454:	4683      	mov	fp, r0
 8083456:	bb00      	cbnz	r0, 808349a <fmod+0x82>
 8083458:	2200      	movs	r2, #0
 808345a:	2300      	movs	r3, #0
 808345c:	4620      	mov	r0, r4
 808345e:	4629      	mov	r1, r5
 8083460:	f000 fd7c 	bl	8083f5c <__aeabi_dcmpeq>
 8083464:	b1c8      	cbz	r0, 808349a <fmod+0x82>
 8083466:	4a1c      	ldr	r2, [pc, #112]	; (80834d8 <fmod+0xc0>)
 8083468:	2301      	movs	r3, #1
 808346a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 808346e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8083472:	f8cd b020 	str.w	fp, [sp, #32]
 8083476:	9201      	str	r2, [sp, #4]
 8083478:	9300      	str	r3, [sp, #0]
 808347a:	f1ba 0f00 	cmp.w	sl, #0
 808347e:	d111      	bne.n	80834a4 <fmod+0x8c>
 8083480:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8083484:	4668      	mov	r0, sp
 8083486:	f000 f947 	bl	8083718 <matherr>
 808348a:	b1b0      	cbz	r0, 80834ba <fmod+0xa2>
 808348c:	9b08      	ldr	r3, [sp, #32]
 808348e:	b9db      	cbnz	r3, 80834c8 <fmod+0xb0>
 8083490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8083494:	b00b      	add	sp, #44	; 0x2c
 8083496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808349a:	4630      	mov	r0, r6
 808349c:	4639      	mov	r1, r7
 808349e:	b00b      	add	sp, #44	; 0x2c
 80834a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80834a4:	2200      	movs	r2, #0
 80834a6:	2300      	movs	r3, #0
 80834a8:	4610      	mov	r0, r2
 80834aa:	4619      	mov	r1, r3
 80834ac:	f000 fc18 	bl	8083ce0 <__aeabi_ddiv>
 80834b0:	f1ba 0f02 	cmp.w	sl, #2
 80834b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80834b8:	d1e4      	bne.n	8083484 <fmod+0x6c>
 80834ba:	f7fe fb31 	bl	8081b20 <__errno>
 80834be:	2321      	movs	r3, #33	; 0x21
 80834c0:	6003      	str	r3, [r0, #0]
 80834c2:	9b08      	ldr	r3, [sp, #32]
 80834c4:	2b00      	cmp	r3, #0
 80834c6:	d0e3      	beq.n	8083490 <fmod+0x78>
 80834c8:	f7fe fb2a 	bl	8081b20 <__errno>
 80834cc:	9b08      	ldr	r3, [sp, #32]
 80834ce:	6003      	str	r3, [r0, #0]
 80834d0:	e7de      	b.n	8083490 <fmod+0x78>
 80834d2:	bf00      	nop
 80834d4:	2000014c 	.word	0x2000014c
 80834d8:	0808731c 	.word	0x0808731c

080834dc <__ieee754_fmod>:
 80834dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80834e0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80834e4:	ea52 0609 	orrs.w	r6, r2, r9
 80834e8:	d020      	beq.n	808352c <__ieee754_fmod+0x50>
 80834ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80834ee:	4f83      	ldr	r7, [pc, #524]	; (80836fc <__ieee754_fmod+0x220>)
 80834f0:	ea81 0806 	eor.w	r8, r1, r6
 80834f4:	45b8      	cmp	r8, r7
 80834f6:	dc19      	bgt.n	808352c <__ieee754_fmod+0x50>
 80834f8:	4257      	negs	r7, r2
 80834fa:	4317      	orrs	r7, r2
 80834fc:	f8df b214 	ldr.w	fp, [pc, #532]	; 8083714 <__ieee754_fmod+0x238>
 8083500:	ea49 77d7 	orr.w	r7, r9, r7, lsr #31
 8083504:	455f      	cmp	r7, fp
 8083506:	4694      	mov	ip, r2
 8083508:	d810      	bhi.n	808352c <__ieee754_fmod+0x50>
 808350a:	45c8      	cmp	r8, r9
 808350c:	461d      	mov	r5, r3
 808350e:	4682      	mov	sl, r0
 8083510:	4604      	mov	r4, r0
 8083512:	4696      	mov	lr, r2
 8083514:	dc12      	bgt.n	808353c <__ieee754_fmod+0x60>
 8083516:	db0f      	blt.n	8083538 <__ieee754_fmod+0x5c>
 8083518:	4290      	cmp	r0, r2
 808351a:	d30d      	bcc.n	8083538 <__ieee754_fmod+0x5c>
 808351c:	d10e      	bne.n	808353c <__ieee754_fmod+0x60>
 808351e:	4b78      	ldr	r3, [pc, #480]	; (8083700 <__ieee754_fmod+0x224>)
 8083520:	0ff6      	lsrs	r6, r6, #31
 8083522:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8083526:	e893 0003 	ldmia.w	r3, {r0, r1}
 808352a:	e005      	b.n	8083538 <__ieee754_fmod+0x5c>
 808352c:	f000 faae 	bl	8083a8c <__aeabi_dmul>
 8083530:	4602      	mov	r2, r0
 8083532:	460b      	mov	r3, r1
 8083534:	f000 fbd4 	bl	8083ce0 <__aeabi_ddiv>
 8083538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808353c:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 8083540:	da0e      	bge.n	8083560 <__ieee754_fmod+0x84>
 8083542:	f1b8 0f00 	cmp.w	r8, #0
 8083546:	f040 809c 	bne.w	8083682 <__ieee754_fmod+0x1a6>
 808354a:	f1ba 0f00 	cmp.w	sl, #0
 808354e:	4653      	mov	r3, sl
 8083550:	496c      	ldr	r1, [pc, #432]	; (8083704 <__ieee754_fmod+0x228>)
 8083552:	dd09      	ble.n	8083568 <__ieee754_fmod+0x8c>
 8083554:	005b      	lsls	r3, r3, #1
 8083556:	2b00      	cmp	r3, #0
 8083558:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 808355c:	dcfa      	bgt.n	8083554 <__ieee754_fmod+0x78>
 808355e:	e003      	b.n	8083568 <__ieee754_fmod+0x8c>
 8083560:	ea4f 5128 	mov.w	r1, r8, asr #20
 8083564:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8083568:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 808356c:	da0e      	bge.n	808358c <__ieee754_fmod+0xb0>
 808356e:	f1b9 0f00 	cmp.w	r9, #0
 8083572:	f040 809f 	bne.w	80836b4 <__ieee754_fmod+0x1d8>
 8083576:	f1bc 0f00 	cmp.w	ip, #0
 808357a:	4663      	mov	r3, ip
 808357c:	4f61      	ldr	r7, [pc, #388]	; (8083704 <__ieee754_fmod+0x228>)
 808357e:	dd09      	ble.n	8083594 <__ieee754_fmod+0xb8>
 8083580:	005b      	lsls	r3, r3, #1
 8083582:	2b00      	cmp	r3, #0
 8083584:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8083588:	dcfa      	bgt.n	8083580 <__ieee754_fmod+0xa4>
 808358a:	e003      	b.n	8083594 <__ieee754_fmod+0xb8>
 808358c:	ea4f 5729 	mov.w	r7, r9, asr #20
 8083590:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8083594:	4b5c      	ldr	r3, [pc, #368]	; (8083708 <__ieee754_fmod+0x22c>)
 8083596:	4299      	cmp	r1, r3
 8083598:	db56      	blt.n	8083648 <__ieee754_fmod+0x16c>
 808359a:	f3c8 0313 	ubfx	r3, r8, #0, #20
 808359e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80835a2:	4a59      	ldr	r2, [pc, #356]	; (8083708 <__ieee754_fmod+0x22c>)
 80835a4:	4297      	cmp	r7, r2
 80835a6:	db5e      	blt.n	8083666 <__ieee754_fmod+0x18a>
 80835a8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80835ac:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80835b0:	1bc9      	subs	r1, r1, r7
 80835b2:	e007      	b.n	80835c4 <__ieee754_fmod+0xe8>
 80835b4:	ea52 0300 	orrs.w	r3, r2, r0
 80835b8:	d013      	beq.n	80835e2 <__ieee754_fmod+0x106>
 80835ba:	0fc3      	lsrs	r3, r0, #31
 80835bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80835c0:	0044      	lsls	r4, r0, #1
 80835c2:	3901      	subs	r1, #1
 80835c4:	ebce 0004 	rsb	r0, lr, r4
 80835c8:	1b5a      	subs	r2, r3, r5
 80835ca:	b189      	cbz	r1, 80835f0 <__ieee754_fmod+0x114>
 80835cc:	4574      	cmp	r4, lr
 80835ce:	bf38      	it	cc
 80835d0:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 80835d4:	2a00      	cmp	r2, #0
 80835d6:	daed      	bge.n	80835b4 <__ieee754_fmod+0xd8>
 80835d8:	0fe2      	lsrs	r2, r4, #31
 80835da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80835de:	0064      	lsls	r4, r4, #1
 80835e0:	e7ef      	b.n	80835c2 <__ieee754_fmod+0xe6>
 80835e2:	4b47      	ldr	r3, [pc, #284]	; (8083700 <__ieee754_fmod+0x224>)
 80835e4:	0ff6      	lsrs	r6, r6, #31
 80835e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80835ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80835ee:	e7a3      	b.n	8083538 <__ieee754_fmod+0x5c>
 80835f0:	4615      	mov	r5, r2
 80835f2:	4574      	cmp	r4, lr
 80835f4:	bf38      	it	cc
 80835f6:	f102 35ff 	addcc.w	r5, r2, #4294967295	; 0xffffffff
 80835fa:	2d00      	cmp	r5, #0
 80835fc:	bfb4      	ite	lt
 80835fe:	461d      	movlt	r5, r3
 8083600:	ebce 0404 	rsbge	r4, lr, r4
 8083604:	ea55 0304 	orrs.w	r3, r5, r4
 8083608:	d0eb      	beq.n	80835e2 <__ieee754_fmod+0x106>
 808360a:	4a40      	ldr	r2, [pc, #256]	; (808370c <__ieee754_fmod+0x230>)
 808360c:	4295      	cmp	r5, r2
 808360e:	dc08      	bgt.n	8083622 <__ieee754_fmod+0x146>
 8083610:	0fe3      	lsrs	r3, r4, #31
 8083612:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8083616:	4295      	cmp	r5, r2
 8083618:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 808361c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8083620:	ddf6      	ble.n	8083610 <__ieee754_fmod+0x134>
 8083622:	4b39      	ldr	r3, [pc, #228]	; (8083708 <__ieee754_fmod+0x22c>)
 8083624:	429f      	cmp	r7, r3
 8083626:	da4e      	bge.n	80836c6 <__ieee754_fmod+0x1ea>
 8083628:	4a37      	ldr	r2, [pc, #220]	; (8083708 <__ieee754_fmod+0x22c>)
 808362a:	1bd2      	subs	r2, r2, r7
 808362c:	2a14      	cmp	r2, #20
 808362e:	dc54      	bgt.n	80836da <__ieee754_fmod+0x1fe>
 8083630:	f1c2 0320 	rsb	r3, r2, #32
 8083634:	40d4      	lsrs	r4, r2
 8083636:	fa05 f303 	lsl.w	r3, r5, r3
 808363a:	4323      	orrs	r3, r4
 808363c:	fa45 f202 	asr.w	r2, r5, r2
 8083640:	ea42 0106 	orr.w	r1, r2, r6
 8083644:	4618      	mov	r0, r3
 8083646:	e777      	b.n	8083538 <__ieee754_fmod+0x5c>
 8083648:	4c2f      	ldr	r4, [pc, #188]	; (8083708 <__ieee754_fmod+0x22c>)
 808364a:	1a64      	subs	r4, r4, r1
 808364c:	2c1f      	cmp	r4, #31
 808364e:	dc2b      	bgt.n	80836a8 <__ieee754_fmod+0x1cc>
 8083650:	f1c4 0320 	rsb	r3, r4, #32
 8083654:	fa08 f804 	lsl.w	r8, r8, r4
 8083658:	fa2a f303 	lsr.w	r3, sl, r3
 808365c:	ea43 0308 	orr.w	r3, r3, r8
 8083660:	fa0a f404 	lsl.w	r4, sl, r4
 8083664:	e79d      	b.n	80835a2 <__ieee754_fmod+0xc6>
 8083666:	4828      	ldr	r0, [pc, #160]	; (8083708 <__ieee754_fmod+0x22c>)
 8083668:	1bc0      	subs	r0, r0, r7
 808366a:	281f      	cmp	r0, #31
 808366c:	dc15      	bgt.n	808369a <__ieee754_fmod+0x1be>
 808366e:	f1c0 0220 	rsb	r2, r0, #32
 8083672:	fa09 f500 	lsl.w	r5, r9, r0
 8083676:	fa2c f202 	lsr.w	r2, ip, r2
 808367a:	4315      	orrs	r5, r2
 808367c:	fa0c fe00 	lsl.w	lr, ip, r0
 8083680:	e796      	b.n	80835b0 <__ieee754_fmod+0xd4>
 8083682:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8083686:	2b00      	cmp	r3, #0
 8083688:	491f      	ldr	r1, [pc, #124]	; (8083708 <__ieee754_fmod+0x22c>)
 808368a:	f77f af6d 	ble.w	8083568 <__ieee754_fmod+0x8c>
 808368e:	005b      	lsls	r3, r3, #1
 8083690:	2b00      	cmp	r3, #0
 8083692:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8083696:	dcfa      	bgt.n	808368e <__ieee754_fmod+0x1b2>
 8083698:	e766      	b.n	8083568 <__ieee754_fmod+0x8c>
 808369a:	4d1d      	ldr	r5, [pc, #116]	; (8083710 <__ieee754_fmod+0x234>)
 808369c:	f04f 0e00 	mov.w	lr, #0
 80836a0:	1bed      	subs	r5, r5, r7
 80836a2:	fa0c f505 	lsl.w	r5, ip, r5
 80836a6:	e783      	b.n	80835b0 <__ieee754_fmod+0xd4>
 80836a8:	4b19      	ldr	r3, [pc, #100]	; (8083710 <__ieee754_fmod+0x234>)
 80836aa:	2400      	movs	r4, #0
 80836ac:	1a5b      	subs	r3, r3, r1
 80836ae:	fa0a f303 	lsl.w	r3, sl, r3
 80836b2:	e776      	b.n	80835a2 <__ieee754_fmod+0xc6>
 80836b4:	4f14      	ldr	r7, [pc, #80]	; (8083708 <__ieee754_fmod+0x22c>)
 80836b6:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80836ba:	005b      	lsls	r3, r3, #1
 80836bc:	2b00      	cmp	r3, #0
 80836be:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80836c2:	dcfa      	bgt.n	80836ba <__ieee754_fmod+0x1de>
 80836c4:	e766      	b.n	8083594 <__ieee754_fmod+0xb8>
 80836c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80836ca:	432e      	orrs	r6, r5
 80836cc:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
 80836d0:	ea46 5307 	orr.w	r3, r6, r7, lsl #20
 80836d4:	4620      	mov	r0, r4
 80836d6:	4619      	mov	r1, r3
 80836d8:	e72e      	b.n	8083538 <__ieee754_fmod+0x5c>
 80836da:	2a1f      	cmp	r2, #31
 80836dc:	dc07      	bgt.n	80836ee <__ieee754_fmod+0x212>
 80836de:	f1c2 0320 	rsb	r3, r2, #32
 80836e2:	40d4      	lsrs	r4, r2
 80836e4:	409d      	lsls	r5, r3
 80836e6:	ea45 0304 	orr.w	r3, r5, r4
 80836ea:	4632      	mov	r2, r6
 80836ec:	e7a8      	b.n	8083640 <__ieee754_fmod+0x164>
 80836ee:	4b08      	ldr	r3, [pc, #32]	; (8083710 <__ieee754_fmod+0x234>)
 80836f0:	4632      	mov	r2, r6
 80836f2:	1bdb      	subs	r3, r3, r7
 80836f4:	fa45 f303 	asr.w	r3, r5, r3
 80836f8:	e7a2      	b.n	8083640 <__ieee754_fmod+0x164>
 80836fa:	bf00      	nop
 80836fc:	7fefffff 	.word	0x7fefffff
 8083700:	08087328 	.word	0x08087328
 8083704:	fffffbed 	.word	0xfffffbed
 8083708:	fffffc02 	.word	0xfffffc02
 808370c:	000fffff 	.word	0x000fffff
 8083710:	fffffbe2 	.word	0xfffffbe2
 8083714:	7ff00000 	.word	0x7ff00000

08083718 <matherr>:
 8083718:	2000      	movs	r0, #0
 808371a:	4770      	bx	lr

0808371c <__aeabi_drsub>:
 808371c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083720:	e002      	b.n	8083728 <__adddf3>
 8083722:	bf00      	nop

08083724 <__aeabi_dsub>:
 8083724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083728 <__adddf3>:
 8083728:	b530      	push	{r4, r5, lr}
 808372a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808372e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083732:	ea94 0f05 	teq	r4, r5
 8083736:	bf08      	it	eq
 8083738:	ea90 0f02 	teqeq	r0, r2
 808373c:	bf1f      	itttt	ne
 808373e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083742:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083746:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808374a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808374e:	f000 80e2 	beq.w	8083916 <__adddf3+0x1ee>
 8083752:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083756:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808375a:	bfb8      	it	lt
 808375c:	426d      	neglt	r5, r5
 808375e:	dd0c      	ble.n	808377a <__adddf3+0x52>
 8083760:	442c      	add	r4, r5
 8083762:	ea80 0202 	eor.w	r2, r0, r2
 8083766:	ea81 0303 	eor.w	r3, r1, r3
 808376a:	ea82 0000 	eor.w	r0, r2, r0
 808376e:	ea83 0101 	eor.w	r1, r3, r1
 8083772:	ea80 0202 	eor.w	r2, r0, r2
 8083776:	ea81 0303 	eor.w	r3, r1, r3
 808377a:	2d36      	cmp	r5, #54	; 0x36
 808377c:	bf88      	it	hi
 808377e:	bd30      	pophi	{r4, r5, pc}
 8083780:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083784:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083788:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808378c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083790:	d002      	beq.n	8083798 <__adddf3+0x70>
 8083792:	4240      	negs	r0, r0
 8083794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083798:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808379c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80837a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80837a4:	d002      	beq.n	80837ac <__adddf3+0x84>
 80837a6:	4252      	negs	r2, r2
 80837a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80837ac:	ea94 0f05 	teq	r4, r5
 80837b0:	f000 80a7 	beq.w	8083902 <__adddf3+0x1da>
 80837b4:	f1a4 0401 	sub.w	r4, r4, #1
 80837b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80837bc:	db0d      	blt.n	80837da <__adddf3+0xb2>
 80837be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80837c2:	fa22 f205 	lsr.w	r2, r2, r5
 80837c6:	1880      	adds	r0, r0, r2
 80837c8:	f141 0100 	adc.w	r1, r1, #0
 80837cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80837d0:	1880      	adds	r0, r0, r2
 80837d2:	fa43 f305 	asr.w	r3, r3, r5
 80837d6:	4159      	adcs	r1, r3
 80837d8:	e00e      	b.n	80837f8 <__adddf3+0xd0>
 80837da:	f1a5 0520 	sub.w	r5, r5, #32
 80837de:	f10e 0e20 	add.w	lr, lr, #32
 80837e2:	2a01      	cmp	r2, #1
 80837e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80837e8:	bf28      	it	cs
 80837ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80837ee:	fa43 f305 	asr.w	r3, r3, r5
 80837f2:	18c0      	adds	r0, r0, r3
 80837f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80837f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80837fc:	d507      	bpl.n	808380e <__adddf3+0xe6>
 80837fe:	f04f 0e00 	mov.w	lr, #0
 8083802:	f1dc 0c00 	rsbs	ip, ip, #0
 8083806:	eb7e 0000 	sbcs.w	r0, lr, r0
 808380a:	eb6e 0101 	sbc.w	r1, lr, r1
 808380e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083812:	d31b      	bcc.n	808384c <__adddf3+0x124>
 8083814:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083818:	d30c      	bcc.n	8083834 <__adddf3+0x10c>
 808381a:	0849      	lsrs	r1, r1, #1
 808381c:	ea5f 0030 	movs.w	r0, r0, rrx
 8083820:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083824:	f104 0401 	add.w	r4, r4, #1
 8083828:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808382c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083830:	f080 809a 	bcs.w	8083968 <__adddf3+0x240>
 8083834:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083838:	bf08      	it	eq
 808383a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808383e:	f150 0000 	adcs.w	r0, r0, #0
 8083842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083846:	ea41 0105 	orr.w	r1, r1, r5
 808384a:	bd30      	pop	{r4, r5, pc}
 808384c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083850:	4140      	adcs	r0, r0
 8083852:	eb41 0101 	adc.w	r1, r1, r1
 8083856:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808385a:	f1a4 0401 	sub.w	r4, r4, #1
 808385e:	d1e9      	bne.n	8083834 <__adddf3+0x10c>
 8083860:	f091 0f00 	teq	r1, #0
 8083864:	bf04      	itt	eq
 8083866:	4601      	moveq	r1, r0
 8083868:	2000      	moveq	r0, #0
 808386a:	fab1 f381 	clz	r3, r1
 808386e:	bf08      	it	eq
 8083870:	3320      	addeq	r3, #32
 8083872:	f1a3 030b 	sub.w	r3, r3, #11
 8083876:	f1b3 0220 	subs.w	r2, r3, #32
 808387a:	da0c      	bge.n	8083896 <__adddf3+0x16e>
 808387c:	320c      	adds	r2, #12
 808387e:	dd08      	ble.n	8083892 <__adddf3+0x16a>
 8083880:	f102 0c14 	add.w	ip, r2, #20
 8083884:	f1c2 020c 	rsb	r2, r2, #12
 8083888:	fa01 f00c 	lsl.w	r0, r1, ip
 808388c:	fa21 f102 	lsr.w	r1, r1, r2
 8083890:	e00c      	b.n	80838ac <__adddf3+0x184>
 8083892:	f102 0214 	add.w	r2, r2, #20
 8083896:	bfd8      	it	le
 8083898:	f1c2 0c20 	rsble	ip, r2, #32
 808389c:	fa01 f102 	lsl.w	r1, r1, r2
 80838a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80838a4:	bfdc      	itt	le
 80838a6:	ea41 010c 	orrle.w	r1, r1, ip
 80838aa:	4090      	lslle	r0, r2
 80838ac:	1ae4      	subs	r4, r4, r3
 80838ae:	bfa2      	ittt	ge
 80838b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80838b4:	4329      	orrge	r1, r5
 80838b6:	bd30      	popge	{r4, r5, pc}
 80838b8:	ea6f 0404 	mvn.w	r4, r4
 80838bc:	3c1f      	subs	r4, #31
 80838be:	da1c      	bge.n	80838fa <__adddf3+0x1d2>
 80838c0:	340c      	adds	r4, #12
 80838c2:	dc0e      	bgt.n	80838e2 <__adddf3+0x1ba>
 80838c4:	f104 0414 	add.w	r4, r4, #20
 80838c8:	f1c4 0220 	rsb	r2, r4, #32
 80838cc:	fa20 f004 	lsr.w	r0, r0, r4
 80838d0:	fa01 f302 	lsl.w	r3, r1, r2
 80838d4:	ea40 0003 	orr.w	r0, r0, r3
 80838d8:	fa21 f304 	lsr.w	r3, r1, r4
 80838dc:	ea45 0103 	orr.w	r1, r5, r3
 80838e0:	bd30      	pop	{r4, r5, pc}
 80838e2:	f1c4 040c 	rsb	r4, r4, #12
 80838e6:	f1c4 0220 	rsb	r2, r4, #32
 80838ea:	fa20 f002 	lsr.w	r0, r0, r2
 80838ee:	fa01 f304 	lsl.w	r3, r1, r4
 80838f2:	ea40 0003 	orr.w	r0, r0, r3
 80838f6:	4629      	mov	r1, r5
 80838f8:	bd30      	pop	{r4, r5, pc}
 80838fa:	fa21 f004 	lsr.w	r0, r1, r4
 80838fe:	4629      	mov	r1, r5
 8083900:	bd30      	pop	{r4, r5, pc}
 8083902:	f094 0f00 	teq	r4, #0
 8083906:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808390a:	bf06      	itte	eq
 808390c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083910:	3401      	addeq	r4, #1
 8083912:	3d01      	subne	r5, #1
 8083914:	e74e      	b.n	80837b4 <__adddf3+0x8c>
 8083916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808391a:	bf18      	it	ne
 808391c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083920:	d029      	beq.n	8083976 <__adddf3+0x24e>
 8083922:	ea94 0f05 	teq	r4, r5
 8083926:	bf08      	it	eq
 8083928:	ea90 0f02 	teqeq	r0, r2
 808392c:	d005      	beq.n	808393a <__adddf3+0x212>
 808392e:	ea54 0c00 	orrs.w	ip, r4, r0
 8083932:	bf04      	itt	eq
 8083934:	4619      	moveq	r1, r3
 8083936:	4610      	moveq	r0, r2
 8083938:	bd30      	pop	{r4, r5, pc}
 808393a:	ea91 0f03 	teq	r1, r3
 808393e:	bf1e      	ittt	ne
 8083940:	2100      	movne	r1, #0
 8083942:	2000      	movne	r0, #0
 8083944:	bd30      	popne	{r4, r5, pc}
 8083946:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808394a:	d105      	bne.n	8083958 <__adddf3+0x230>
 808394c:	0040      	lsls	r0, r0, #1
 808394e:	4149      	adcs	r1, r1
 8083950:	bf28      	it	cs
 8083952:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083956:	bd30      	pop	{r4, r5, pc}
 8083958:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808395c:	bf3c      	itt	cc
 808395e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083962:	bd30      	popcc	{r4, r5, pc}
 8083964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083968:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808396c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083970:	f04f 0000 	mov.w	r0, #0
 8083974:	bd30      	pop	{r4, r5, pc}
 8083976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808397a:	bf1a      	itte	ne
 808397c:	4619      	movne	r1, r3
 808397e:	4610      	movne	r0, r2
 8083980:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083984:	bf1c      	itt	ne
 8083986:	460b      	movne	r3, r1
 8083988:	4602      	movne	r2, r0
 808398a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808398e:	bf06      	itte	eq
 8083990:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083994:	ea91 0f03 	teqeq	r1, r3
 8083998:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808399c:	bd30      	pop	{r4, r5, pc}
 808399e:	bf00      	nop

080839a0 <__aeabi_ui2d>:
 80839a0:	f090 0f00 	teq	r0, #0
 80839a4:	bf04      	itt	eq
 80839a6:	2100      	moveq	r1, #0
 80839a8:	4770      	bxeq	lr
 80839aa:	b530      	push	{r4, r5, lr}
 80839ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80839b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80839b4:	f04f 0500 	mov.w	r5, #0
 80839b8:	f04f 0100 	mov.w	r1, #0
 80839bc:	e750      	b.n	8083860 <__adddf3+0x138>
 80839be:	bf00      	nop

080839c0 <__aeabi_i2d>:
 80839c0:	f090 0f00 	teq	r0, #0
 80839c4:	bf04      	itt	eq
 80839c6:	2100      	moveq	r1, #0
 80839c8:	4770      	bxeq	lr
 80839ca:	b530      	push	{r4, r5, lr}
 80839cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80839d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80839d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80839d8:	bf48      	it	mi
 80839da:	4240      	negmi	r0, r0
 80839dc:	f04f 0100 	mov.w	r1, #0
 80839e0:	e73e      	b.n	8083860 <__adddf3+0x138>
 80839e2:	bf00      	nop

080839e4 <__aeabi_f2d>:
 80839e4:	0042      	lsls	r2, r0, #1
 80839e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80839ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80839ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80839f2:	bf1f      	itttt	ne
 80839f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80839f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80839fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083a00:	4770      	bxne	lr
 8083a02:	f092 0f00 	teq	r2, #0
 8083a06:	bf14      	ite	ne
 8083a08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083a0c:	4770      	bxeq	lr
 8083a0e:	b530      	push	{r4, r5, lr}
 8083a10:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083a14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083a1c:	e720      	b.n	8083860 <__adddf3+0x138>
 8083a1e:	bf00      	nop

08083a20 <__aeabi_ul2d>:
 8083a20:	ea50 0201 	orrs.w	r2, r0, r1
 8083a24:	bf08      	it	eq
 8083a26:	4770      	bxeq	lr
 8083a28:	b530      	push	{r4, r5, lr}
 8083a2a:	f04f 0500 	mov.w	r5, #0
 8083a2e:	e00a      	b.n	8083a46 <__aeabi_l2d+0x16>

08083a30 <__aeabi_l2d>:
 8083a30:	ea50 0201 	orrs.w	r2, r0, r1
 8083a34:	bf08      	it	eq
 8083a36:	4770      	bxeq	lr
 8083a38:	b530      	push	{r4, r5, lr}
 8083a3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083a3e:	d502      	bpl.n	8083a46 <__aeabi_l2d+0x16>
 8083a40:	4240      	negs	r0, r0
 8083a42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083a46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083a4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083a4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083a52:	f43f aedc 	beq.w	808380e <__adddf3+0xe6>
 8083a56:	f04f 0203 	mov.w	r2, #3
 8083a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083a5e:	bf18      	it	ne
 8083a60:	3203      	addne	r2, #3
 8083a62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083a66:	bf18      	it	ne
 8083a68:	3203      	addne	r2, #3
 8083a6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083a6e:	f1c2 0320 	rsb	r3, r2, #32
 8083a72:	fa00 fc03 	lsl.w	ip, r0, r3
 8083a76:	fa20 f002 	lsr.w	r0, r0, r2
 8083a7a:	fa01 fe03 	lsl.w	lr, r1, r3
 8083a7e:	ea40 000e 	orr.w	r0, r0, lr
 8083a82:	fa21 f102 	lsr.w	r1, r1, r2
 8083a86:	4414      	add	r4, r2
 8083a88:	e6c1      	b.n	808380e <__adddf3+0xe6>
 8083a8a:	bf00      	nop

08083a8c <__aeabi_dmul>:
 8083a8c:	b570      	push	{r4, r5, r6, lr}
 8083a8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083a92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083a96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083a9a:	bf1d      	ittte	ne
 8083a9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083aa0:	ea94 0f0c 	teqne	r4, ip
 8083aa4:	ea95 0f0c 	teqne	r5, ip
 8083aa8:	f000 f8de 	bleq	8083c68 <__aeabi_dmul+0x1dc>
 8083aac:	442c      	add	r4, r5
 8083aae:	ea81 0603 	eor.w	r6, r1, r3
 8083ab2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083ab6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083aba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083abe:	bf18      	it	ne
 8083ac0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083acc:	d038      	beq.n	8083b40 <__aeabi_dmul+0xb4>
 8083ace:	fba0 ce02 	umull	ip, lr, r0, r2
 8083ad2:	f04f 0500 	mov.w	r5, #0
 8083ad6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083ada:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083ade:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083ae2:	f04f 0600 	mov.w	r6, #0
 8083ae6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083aea:	f09c 0f00 	teq	ip, #0
 8083aee:	bf18      	it	ne
 8083af0:	f04e 0e01 	orrne.w	lr, lr, #1
 8083af4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083af8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083afc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083b00:	d204      	bcs.n	8083b0c <__aeabi_dmul+0x80>
 8083b02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083b06:	416d      	adcs	r5, r5
 8083b08:	eb46 0606 	adc.w	r6, r6, r6
 8083b0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083b10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083b14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083b18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083b1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083b20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083b24:	bf88      	it	hi
 8083b26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083b2a:	d81e      	bhi.n	8083b6a <__aeabi_dmul+0xde>
 8083b2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083b30:	bf08      	it	eq
 8083b32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083b36:	f150 0000 	adcs.w	r0, r0, #0
 8083b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083b3e:	bd70      	pop	{r4, r5, r6, pc}
 8083b40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083b44:	ea46 0101 	orr.w	r1, r6, r1
 8083b48:	ea40 0002 	orr.w	r0, r0, r2
 8083b4c:	ea81 0103 	eor.w	r1, r1, r3
 8083b50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083b54:	bfc2      	ittt	gt
 8083b56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083b5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083b5e:	bd70      	popgt	{r4, r5, r6, pc}
 8083b60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083b64:	f04f 0e00 	mov.w	lr, #0
 8083b68:	3c01      	subs	r4, #1
 8083b6a:	f300 80ab 	bgt.w	8083cc4 <__aeabi_dmul+0x238>
 8083b6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083b72:	bfde      	ittt	le
 8083b74:	2000      	movle	r0, #0
 8083b76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083b7a:	bd70      	pople	{r4, r5, r6, pc}
 8083b7c:	f1c4 0400 	rsb	r4, r4, #0
 8083b80:	3c20      	subs	r4, #32
 8083b82:	da35      	bge.n	8083bf0 <__aeabi_dmul+0x164>
 8083b84:	340c      	adds	r4, #12
 8083b86:	dc1b      	bgt.n	8083bc0 <__aeabi_dmul+0x134>
 8083b88:	f104 0414 	add.w	r4, r4, #20
 8083b8c:	f1c4 0520 	rsb	r5, r4, #32
 8083b90:	fa00 f305 	lsl.w	r3, r0, r5
 8083b94:	fa20 f004 	lsr.w	r0, r0, r4
 8083b98:	fa01 f205 	lsl.w	r2, r1, r5
 8083b9c:	ea40 0002 	orr.w	r0, r0, r2
 8083ba0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083ba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083ba8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083bac:	fa21 f604 	lsr.w	r6, r1, r4
 8083bb0:	eb42 0106 	adc.w	r1, r2, r6
 8083bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083bb8:	bf08      	it	eq
 8083bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083bbe:	bd70      	pop	{r4, r5, r6, pc}
 8083bc0:	f1c4 040c 	rsb	r4, r4, #12
 8083bc4:	f1c4 0520 	rsb	r5, r4, #32
 8083bc8:	fa00 f304 	lsl.w	r3, r0, r4
 8083bcc:	fa20 f005 	lsr.w	r0, r0, r5
 8083bd0:	fa01 f204 	lsl.w	r2, r1, r4
 8083bd4:	ea40 0002 	orr.w	r0, r0, r2
 8083bd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083bdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083be0:	f141 0100 	adc.w	r1, r1, #0
 8083be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083be8:	bf08      	it	eq
 8083bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083bee:	bd70      	pop	{r4, r5, r6, pc}
 8083bf0:	f1c4 0520 	rsb	r5, r4, #32
 8083bf4:	fa00 f205 	lsl.w	r2, r0, r5
 8083bf8:	ea4e 0e02 	orr.w	lr, lr, r2
 8083bfc:	fa20 f304 	lsr.w	r3, r0, r4
 8083c00:	fa01 f205 	lsl.w	r2, r1, r5
 8083c04:	ea43 0302 	orr.w	r3, r3, r2
 8083c08:	fa21 f004 	lsr.w	r0, r1, r4
 8083c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c10:	fa21 f204 	lsr.w	r2, r1, r4
 8083c14:	ea20 0002 	bic.w	r0, r0, r2
 8083c18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083c1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083c20:	bf08      	it	eq
 8083c22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083c26:	bd70      	pop	{r4, r5, r6, pc}
 8083c28:	f094 0f00 	teq	r4, #0
 8083c2c:	d10f      	bne.n	8083c4e <__aeabi_dmul+0x1c2>
 8083c2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083c32:	0040      	lsls	r0, r0, #1
 8083c34:	eb41 0101 	adc.w	r1, r1, r1
 8083c38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c3c:	bf08      	it	eq
 8083c3e:	3c01      	subeq	r4, #1
 8083c40:	d0f7      	beq.n	8083c32 <__aeabi_dmul+0x1a6>
 8083c42:	ea41 0106 	orr.w	r1, r1, r6
 8083c46:	f095 0f00 	teq	r5, #0
 8083c4a:	bf18      	it	ne
 8083c4c:	4770      	bxne	lr
 8083c4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083c52:	0052      	lsls	r2, r2, #1
 8083c54:	eb43 0303 	adc.w	r3, r3, r3
 8083c58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083c5c:	bf08      	it	eq
 8083c5e:	3d01      	subeq	r5, #1
 8083c60:	d0f7      	beq.n	8083c52 <__aeabi_dmul+0x1c6>
 8083c62:	ea43 0306 	orr.w	r3, r3, r6
 8083c66:	4770      	bx	lr
 8083c68:	ea94 0f0c 	teq	r4, ip
 8083c6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083c70:	bf18      	it	ne
 8083c72:	ea95 0f0c 	teqne	r5, ip
 8083c76:	d00c      	beq.n	8083c92 <__aeabi_dmul+0x206>
 8083c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c7c:	bf18      	it	ne
 8083c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c82:	d1d1      	bne.n	8083c28 <__aeabi_dmul+0x19c>
 8083c84:	ea81 0103 	eor.w	r1, r1, r3
 8083c88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c8c:	f04f 0000 	mov.w	r0, #0
 8083c90:	bd70      	pop	{r4, r5, r6, pc}
 8083c92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c96:	bf06      	itte	eq
 8083c98:	4610      	moveq	r0, r2
 8083c9a:	4619      	moveq	r1, r3
 8083c9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083ca0:	d019      	beq.n	8083cd6 <__aeabi_dmul+0x24a>
 8083ca2:	ea94 0f0c 	teq	r4, ip
 8083ca6:	d102      	bne.n	8083cae <__aeabi_dmul+0x222>
 8083ca8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083cac:	d113      	bne.n	8083cd6 <__aeabi_dmul+0x24a>
 8083cae:	ea95 0f0c 	teq	r5, ip
 8083cb2:	d105      	bne.n	8083cc0 <__aeabi_dmul+0x234>
 8083cb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083cb8:	bf1c      	itt	ne
 8083cba:	4610      	movne	r0, r2
 8083cbc:	4619      	movne	r1, r3
 8083cbe:	d10a      	bne.n	8083cd6 <__aeabi_dmul+0x24a>
 8083cc0:	ea81 0103 	eor.w	r1, r1, r3
 8083cc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083cc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083ccc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083cd0:	f04f 0000 	mov.w	r0, #0
 8083cd4:	bd70      	pop	{r4, r5, r6, pc}
 8083cd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083cda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083cde:	bd70      	pop	{r4, r5, r6, pc}

08083ce0 <__aeabi_ddiv>:
 8083ce0:	b570      	push	{r4, r5, r6, lr}
 8083ce2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083ce6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083cea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083cee:	bf1d      	ittte	ne
 8083cf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083cf4:	ea94 0f0c 	teqne	r4, ip
 8083cf8:	ea95 0f0c 	teqne	r5, ip
 8083cfc:	f000 f8a7 	bleq	8083e4e <__aeabi_ddiv+0x16e>
 8083d00:	eba4 0405 	sub.w	r4, r4, r5
 8083d04:	ea81 0e03 	eor.w	lr, r1, r3
 8083d08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083d0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083d10:	f000 8088 	beq.w	8083e24 <__aeabi_ddiv+0x144>
 8083d14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083d18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083d1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083d20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083d24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083d28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083d2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083d30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083d34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083d38:	429d      	cmp	r5, r3
 8083d3a:	bf08      	it	eq
 8083d3c:	4296      	cmpeq	r6, r2
 8083d3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083d42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083d46:	d202      	bcs.n	8083d4e <__aeabi_ddiv+0x6e>
 8083d48:	085b      	lsrs	r3, r3, #1
 8083d4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d4e:	1ab6      	subs	r6, r6, r2
 8083d50:	eb65 0503 	sbc.w	r5, r5, r3
 8083d54:	085b      	lsrs	r3, r3, #1
 8083d56:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083d5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083d62:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d6a:	bf22      	ittt	cs
 8083d6c:	1ab6      	subcs	r6, r6, r2
 8083d6e:	4675      	movcs	r5, lr
 8083d70:	ea40 000c 	orrcs.w	r0, r0, ip
 8083d74:	085b      	lsrs	r3, r3, #1
 8083d76:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d82:	bf22      	ittt	cs
 8083d84:	1ab6      	subcs	r6, r6, r2
 8083d86:	4675      	movcs	r5, lr
 8083d88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083d8c:	085b      	lsrs	r3, r3, #1
 8083d8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d92:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d9a:	bf22      	ittt	cs
 8083d9c:	1ab6      	subcs	r6, r6, r2
 8083d9e:	4675      	movcs	r5, lr
 8083da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083da4:	085b      	lsrs	r3, r3, #1
 8083da6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083daa:	ebb6 0e02 	subs.w	lr, r6, r2
 8083dae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083db2:	bf22      	ittt	cs
 8083db4:	1ab6      	subcs	r6, r6, r2
 8083db6:	4675      	movcs	r5, lr
 8083db8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083dbc:	ea55 0e06 	orrs.w	lr, r5, r6
 8083dc0:	d018      	beq.n	8083df4 <__aeabi_ddiv+0x114>
 8083dc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083dc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083dca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083dce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083dd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083dd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083dda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083dde:	d1c0      	bne.n	8083d62 <__aeabi_ddiv+0x82>
 8083de0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083de4:	d10b      	bne.n	8083dfe <__aeabi_ddiv+0x11e>
 8083de6:	ea41 0100 	orr.w	r1, r1, r0
 8083dea:	f04f 0000 	mov.w	r0, #0
 8083dee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083df2:	e7b6      	b.n	8083d62 <__aeabi_ddiv+0x82>
 8083df4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083df8:	bf04      	itt	eq
 8083dfa:	4301      	orreq	r1, r0
 8083dfc:	2000      	moveq	r0, #0
 8083dfe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083e02:	bf88      	it	hi
 8083e04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083e08:	f63f aeaf 	bhi.w	8083b6a <__aeabi_dmul+0xde>
 8083e0c:	ebb5 0c03 	subs.w	ip, r5, r3
 8083e10:	bf04      	itt	eq
 8083e12:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083e16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083e1a:	f150 0000 	adcs.w	r0, r0, #0
 8083e1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083e22:	bd70      	pop	{r4, r5, r6, pc}
 8083e24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083e28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083e2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083e30:	bfc2      	ittt	gt
 8083e32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083e3a:	bd70      	popgt	{r4, r5, r6, pc}
 8083e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083e40:	f04f 0e00 	mov.w	lr, #0
 8083e44:	3c01      	subs	r4, #1
 8083e46:	e690      	b.n	8083b6a <__aeabi_dmul+0xde>
 8083e48:	ea45 0e06 	orr.w	lr, r5, r6
 8083e4c:	e68d      	b.n	8083b6a <__aeabi_dmul+0xde>
 8083e4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083e52:	ea94 0f0c 	teq	r4, ip
 8083e56:	bf08      	it	eq
 8083e58:	ea95 0f0c 	teqeq	r5, ip
 8083e5c:	f43f af3b 	beq.w	8083cd6 <__aeabi_dmul+0x24a>
 8083e60:	ea94 0f0c 	teq	r4, ip
 8083e64:	d10a      	bne.n	8083e7c <__aeabi_ddiv+0x19c>
 8083e66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083e6a:	f47f af34 	bne.w	8083cd6 <__aeabi_dmul+0x24a>
 8083e6e:	ea95 0f0c 	teq	r5, ip
 8083e72:	f47f af25 	bne.w	8083cc0 <__aeabi_dmul+0x234>
 8083e76:	4610      	mov	r0, r2
 8083e78:	4619      	mov	r1, r3
 8083e7a:	e72c      	b.n	8083cd6 <__aeabi_dmul+0x24a>
 8083e7c:	ea95 0f0c 	teq	r5, ip
 8083e80:	d106      	bne.n	8083e90 <__aeabi_ddiv+0x1b0>
 8083e82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083e86:	f43f aefd 	beq.w	8083c84 <__aeabi_dmul+0x1f8>
 8083e8a:	4610      	mov	r0, r2
 8083e8c:	4619      	mov	r1, r3
 8083e8e:	e722      	b.n	8083cd6 <__aeabi_dmul+0x24a>
 8083e90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e94:	bf18      	it	ne
 8083e96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e9a:	f47f aec5 	bne.w	8083c28 <__aeabi_dmul+0x19c>
 8083e9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083ea2:	f47f af0d 	bne.w	8083cc0 <__aeabi_dmul+0x234>
 8083ea6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083eaa:	f47f aeeb 	bne.w	8083c84 <__aeabi_dmul+0x1f8>
 8083eae:	e712      	b.n	8083cd6 <__aeabi_dmul+0x24a>

08083eb0 <__gedf2>:
 8083eb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083eb4:	e006      	b.n	8083ec4 <__cmpdf2+0x4>
 8083eb6:	bf00      	nop

08083eb8 <__ledf2>:
 8083eb8:	f04f 0c01 	mov.w	ip, #1
 8083ebc:	e002      	b.n	8083ec4 <__cmpdf2+0x4>
 8083ebe:	bf00      	nop

08083ec0 <__cmpdf2>:
 8083ec0:	f04f 0c01 	mov.w	ip, #1
 8083ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083ec8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083ecc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083ed0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083ed4:	bf18      	it	ne
 8083ed6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083eda:	d01b      	beq.n	8083f14 <__cmpdf2+0x54>
 8083edc:	b001      	add	sp, #4
 8083ede:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083ee2:	bf0c      	ite	eq
 8083ee4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083ee8:	ea91 0f03 	teqne	r1, r3
 8083eec:	bf02      	ittt	eq
 8083eee:	ea90 0f02 	teqeq	r0, r2
 8083ef2:	2000      	moveq	r0, #0
 8083ef4:	4770      	bxeq	lr
 8083ef6:	f110 0f00 	cmn.w	r0, #0
 8083efa:	ea91 0f03 	teq	r1, r3
 8083efe:	bf58      	it	pl
 8083f00:	4299      	cmppl	r1, r3
 8083f02:	bf08      	it	eq
 8083f04:	4290      	cmpeq	r0, r2
 8083f06:	bf2c      	ite	cs
 8083f08:	17d8      	asrcs	r0, r3, #31
 8083f0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083f0e:	f040 0001 	orr.w	r0, r0, #1
 8083f12:	4770      	bx	lr
 8083f14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083f18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f1c:	d102      	bne.n	8083f24 <__cmpdf2+0x64>
 8083f1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083f22:	d107      	bne.n	8083f34 <__cmpdf2+0x74>
 8083f24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083f28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f2c:	d1d6      	bne.n	8083edc <__cmpdf2+0x1c>
 8083f2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083f32:	d0d3      	beq.n	8083edc <__cmpdf2+0x1c>
 8083f34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083f38:	4770      	bx	lr
 8083f3a:	bf00      	nop

08083f3c <__aeabi_cdrcmple>:
 8083f3c:	4684      	mov	ip, r0
 8083f3e:	4610      	mov	r0, r2
 8083f40:	4662      	mov	r2, ip
 8083f42:	468c      	mov	ip, r1
 8083f44:	4619      	mov	r1, r3
 8083f46:	4663      	mov	r3, ip
 8083f48:	e000      	b.n	8083f4c <__aeabi_cdcmpeq>
 8083f4a:	bf00      	nop

08083f4c <__aeabi_cdcmpeq>:
 8083f4c:	b501      	push	{r0, lr}
 8083f4e:	f7ff ffb7 	bl	8083ec0 <__cmpdf2>
 8083f52:	2800      	cmp	r0, #0
 8083f54:	bf48      	it	mi
 8083f56:	f110 0f00 	cmnmi.w	r0, #0
 8083f5a:	bd01      	pop	{r0, pc}

08083f5c <__aeabi_dcmpeq>:
 8083f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f60:	f7ff fff4 	bl	8083f4c <__aeabi_cdcmpeq>
 8083f64:	bf0c      	ite	eq
 8083f66:	2001      	moveq	r0, #1
 8083f68:	2000      	movne	r0, #0
 8083f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f6e:	bf00      	nop

08083f70 <__aeabi_dcmplt>:
 8083f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f74:	f7ff ffea 	bl	8083f4c <__aeabi_cdcmpeq>
 8083f78:	bf34      	ite	cc
 8083f7a:	2001      	movcc	r0, #1
 8083f7c:	2000      	movcs	r0, #0
 8083f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f82:	bf00      	nop

08083f84 <__aeabi_dcmple>:
 8083f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f88:	f7ff ffe0 	bl	8083f4c <__aeabi_cdcmpeq>
 8083f8c:	bf94      	ite	ls
 8083f8e:	2001      	movls	r0, #1
 8083f90:	2000      	movhi	r0, #0
 8083f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f96:	bf00      	nop

08083f98 <__aeabi_dcmpge>:
 8083f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f9c:	f7ff ffce 	bl	8083f3c <__aeabi_cdrcmple>
 8083fa0:	bf94      	ite	ls
 8083fa2:	2001      	movls	r0, #1
 8083fa4:	2000      	movhi	r0, #0
 8083fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8083faa:	bf00      	nop

08083fac <__aeabi_dcmpgt>:
 8083fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083fb0:	f7ff ffc4 	bl	8083f3c <__aeabi_cdrcmple>
 8083fb4:	bf34      	ite	cc
 8083fb6:	2001      	movcc	r0, #1
 8083fb8:	2000      	movcs	r0, #0
 8083fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8083fbe:	bf00      	nop

08083fc0 <__aeabi_dcmpun>:
 8083fc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083fc8:	d102      	bne.n	8083fd0 <__aeabi_dcmpun+0x10>
 8083fca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083fce:	d10a      	bne.n	8083fe6 <__aeabi_dcmpun+0x26>
 8083fd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083fd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083fd8:	d102      	bne.n	8083fe0 <__aeabi_dcmpun+0x20>
 8083fda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083fde:	d102      	bne.n	8083fe6 <__aeabi_dcmpun+0x26>
 8083fe0:	f04f 0000 	mov.w	r0, #0
 8083fe4:	4770      	bx	lr
 8083fe6:	f04f 0001 	mov.w	r0, #1
 8083fea:	4770      	bx	lr

08083fec <__aeabi_d2iz>:
 8083fec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083ff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083ff4:	d215      	bcs.n	8084022 <__aeabi_d2iz+0x36>
 8083ff6:	d511      	bpl.n	808401c <__aeabi_d2iz+0x30>
 8083ff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083ffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084000:	d912      	bls.n	8084028 <__aeabi_d2iz+0x3c>
 8084002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808400a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808400e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084012:	fa23 f002 	lsr.w	r0, r3, r2
 8084016:	bf18      	it	ne
 8084018:	4240      	negne	r0, r0
 808401a:	4770      	bx	lr
 808401c:	f04f 0000 	mov.w	r0, #0
 8084020:	4770      	bx	lr
 8084022:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084026:	d105      	bne.n	8084034 <__aeabi_d2iz+0x48>
 8084028:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808402c:	bf08      	it	eq
 808402e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084032:	4770      	bx	lr
 8084034:	f04f 0000 	mov.w	r0, #0
 8084038:	4770      	bx	lr
 808403a:	bf00      	nop

0808403c <__aeabi_d2uiz>:
 808403c:	004a      	lsls	r2, r1, #1
 808403e:	d211      	bcs.n	8084064 <__aeabi_d2uiz+0x28>
 8084040:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084044:	d211      	bcs.n	808406a <__aeabi_d2uiz+0x2e>
 8084046:	d50d      	bpl.n	8084064 <__aeabi_d2uiz+0x28>
 8084048:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808404c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084050:	d40e      	bmi.n	8084070 <__aeabi_d2uiz+0x34>
 8084052:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808405a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808405e:	fa23 f002 	lsr.w	r0, r3, r2
 8084062:	4770      	bx	lr
 8084064:	f04f 0000 	mov.w	r0, #0
 8084068:	4770      	bx	lr
 808406a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808406e:	d102      	bne.n	8084076 <__aeabi_d2uiz+0x3a>
 8084070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084074:	4770      	bx	lr
 8084076:	f04f 0000 	mov.w	r0, #0
 808407a:	4770      	bx	lr

0808407c <__aeabi_d2f>:
 808407c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084080:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8084084:	bf24      	itt	cs
 8084086:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808408a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808408e:	d90d      	bls.n	80840ac <__aeabi_d2f+0x30>
 8084090:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084094:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084098:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808409c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80840a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80840a4:	bf08      	it	eq
 80840a6:	f020 0001 	biceq.w	r0, r0, #1
 80840aa:	4770      	bx	lr
 80840ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80840b0:	d121      	bne.n	80840f6 <__aeabi_d2f+0x7a>
 80840b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80840b6:	bfbc      	itt	lt
 80840b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80840bc:	4770      	bxlt	lr
 80840be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80840c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80840c6:	f1c2 0218 	rsb	r2, r2, #24
 80840ca:	f1c2 0c20 	rsb	ip, r2, #32
 80840ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80840d2:	fa20 f002 	lsr.w	r0, r0, r2
 80840d6:	bf18      	it	ne
 80840d8:	f040 0001 	orrne.w	r0, r0, #1
 80840dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80840e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80840e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80840e8:	ea40 000c 	orr.w	r0, r0, ip
 80840ec:	fa23 f302 	lsr.w	r3, r3, r2
 80840f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80840f4:	e7cc      	b.n	8084090 <__aeabi_d2f+0x14>
 80840f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80840fa:	d107      	bne.n	808410c <__aeabi_d2f+0x90>
 80840fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084100:	bf1e      	ittt	ne
 8084102:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084106:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808410a:	4770      	bxne	lr
 808410c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084110:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084114:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084118:	4770      	bx	lr
 808411a:	bf00      	nop

0808411c <__aeabi_frsub>:
 808411c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084120:	e002      	b.n	8084128 <__addsf3>
 8084122:	bf00      	nop

08084124 <__aeabi_fsub>:
 8084124:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084128 <__addsf3>:
 8084128:	0042      	lsls	r2, r0, #1
 808412a:	bf1f      	itttt	ne
 808412c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084130:	ea92 0f03 	teqne	r2, r3
 8084134:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8084138:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808413c:	d06a      	beq.n	8084214 <__addsf3+0xec>
 808413e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084142:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8084146:	bfc1      	itttt	gt
 8084148:	18d2      	addgt	r2, r2, r3
 808414a:	4041      	eorgt	r1, r0
 808414c:	4048      	eorgt	r0, r1
 808414e:	4041      	eorgt	r1, r0
 8084150:	bfb8      	it	lt
 8084152:	425b      	neglt	r3, r3
 8084154:	2b19      	cmp	r3, #25
 8084156:	bf88      	it	hi
 8084158:	4770      	bxhi	lr
 808415a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808415e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084162:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8084166:	bf18      	it	ne
 8084168:	4240      	negne	r0, r0
 808416a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808416e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084172:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8084176:	bf18      	it	ne
 8084178:	4249      	negne	r1, r1
 808417a:	ea92 0f03 	teq	r2, r3
 808417e:	d03f      	beq.n	8084200 <__addsf3+0xd8>
 8084180:	f1a2 0201 	sub.w	r2, r2, #1
 8084184:	fa41 fc03 	asr.w	ip, r1, r3
 8084188:	eb10 000c 	adds.w	r0, r0, ip
 808418c:	f1c3 0320 	rsb	r3, r3, #32
 8084190:	fa01 f103 	lsl.w	r1, r1, r3
 8084194:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084198:	d502      	bpl.n	80841a0 <__addsf3+0x78>
 808419a:	4249      	negs	r1, r1
 808419c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80841a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80841a4:	d313      	bcc.n	80841ce <__addsf3+0xa6>
 80841a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80841aa:	d306      	bcc.n	80841ba <__addsf3+0x92>
 80841ac:	0840      	lsrs	r0, r0, #1
 80841ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80841b2:	f102 0201 	add.w	r2, r2, #1
 80841b6:	2afe      	cmp	r2, #254	; 0xfe
 80841b8:	d251      	bcs.n	808425e <__addsf3+0x136>
 80841ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80841be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80841c2:	bf08      	it	eq
 80841c4:	f020 0001 	biceq.w	r0, r0, #1
 80841c8:	ea40 0003 	orr.w	r0, r0, r3
 80841cc:	4770      	bx	lr
 80841ce:	0049      	lsls	r1, r1, #1
 80841d0:	eb40 0000 	adc.w	r0, r0, r0
 80841d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80841d8:	f1a2 0201 	sub.w	r2, r2, #1
 80841dc:	d1ed      	bne.n	80841ba <__addsf3+0x92>
 80841de:	fab0 fc80 	clz	ip, r0
 80841e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80841e6:	ebb2 020c 	subs.w	r2, r2, ip
 80841ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80841ee:	bfaa      	itet	ge
 80841f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80841f4:	4252      	neglt	r2, r2
 80841f6:	4318      	orrge	r0, r3
 80841f8:	bfbc      	itt	lt
 80841fa:	40d0      	lsrlt	r0, r2
 80841fc:	4318      	orrlt	r0, r3
 80841fe:	4770      	bx	lr
 8084200:	f092 0f00 	teq	r2, #0
 8084204:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084208:	bf06      	itte	eq
 808420a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808420e:	3201      	addeq	r2, #1
 8084210:	3b01      	subne	r3, #1
 8084212:	e7b5      	b.n	8084180 <__addsf3+0x58>
 8084214:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084218:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808421c:	bf18      	it	ne
 808421e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084222:	d021      	beq.n	8084268 <__addsf3+0x140>
 8084224:	ea92 0f03 	teq	r2, r3
 8084228:	d004      	beq.n	8084234 <__addsf3+0x10c>
 808422a:	f092 0f00 	teq	r2, #0
 808422e:	bf08      	it	eq
 8084230:	4608      	moveq	r0, r1
 8084232:	4770      	bx	lr
 8084234:	ea90 0f01 	teq	r0, r1
 8084238:	bf1c      	itt	ne
 808423a:	2000      	movne	r0, #0
 808423c:	4770      	bxne	lr
 808423e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084242:	d104      	bne.n	808424e <__addsf3+0x126>
 8084244:	0040      	lsls	r0, r0, #1
 8084246:	bf28      	it	cs
 8084248:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808424c:	4770      	bx	lr
 808424e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084252:	bf3c      	itt	cc
 8084254:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8084258:	4770      	bxcc	lr
 808425a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808425e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084262:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084266:	4770      	bx	lr
 8084268:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808426c:	bf16      	itet	ne
 808426e:	4608      	movne	r0, r1
 8084270:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084274:	4601      	movne	r1, r0
 8084276:	0242      	lsls	r2, r0, #9
 8084278:	bf06      	itte	eq
 808427a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808427e:	ea90 0f01 	teqeq	r0, r1
 8084282:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8084286:	4770      	bx	lr

08084288 <__aeabi_ui2f>:
 8084288:	f04f 0300 	mov.w	r3, #0
 808428c:	e004      	b.n	8084298 <__aeabi_i2f+0x8>
 808428e:	bf00      	nop

08084290 <__aeabi_i2f>:
 8084290:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084294:	bf48      	it	mi
 8084296:	4240      	negmi	r0, r0
 8084298:	ea5f 0c00 	movs.w	ip, r0
 808429c:	bf08      	it	eq
 808429e:	4770      	bxeq	lr
 80842a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80842a4:	4601      	mov	r1, r0
 80842a6:	f04f 0000 	mov.w	r0, #0
 80842aa:	e01c      	b.n	80842e6 <__aeabi_l2f+0x2a>

080842ac <__aeabi_ul2f>:
 80842ac:	ea50 0201 	orrs.w	r2, r0, r1
 80842b0:	bf08      	it	eq
 80842b2:	4770      	bxeq	lr
 80842b4:	f04f 0300 	mov.w	r3, #0
 80842b8:	e00a      	b.n	80842d0 <__aeabi_l2f+0x14>
 80842ba:	bf00      	nop

080842bc <__aeabi_l2f>:
 80842bc:	ea50 0201 	orrs.w	r2, r0, r1
 80842c0:	bf08      	it	eq
 80842c2:	4770      	bxeq	lr
 80842c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80842c8:	d502      	bpl.n	80842d0 <__aeabi_l2f+0x14>
 80842ca:	4240      	negs	r0, r0
 80842cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80842d0:	ea5f 0c01 	movs.w	ip, r1
 80842d4:	bf02      	ittt	eq
 80842d6:	4684      	moveq	ip, r0
 80842d8:	4601      	moveq	r1, r0
 80842da:	2000      	moveq	r0, #0
 80842dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80842e0:	bf08      	it	eq
 80842e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80842e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80842ea:	fabc f28c 	clz	r2, ip
 80842ee:	3a08      	subs	r2, #8
 80842f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80842f4:	db10      	blt.n	8084318 <__aeabi_l2f+0x5c>
 80842f6:	fa01 fc02 	lsl.w	ip, r1, r2
 80842fa:	4463      	add	r3, ip
 80842fc:	fa00 fc02 	lsl.w	ip, r0, r2
 8084300:	f1c2 0220 	rsb	r2, r2, #32
 8084304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084308:	fa20 f202 	lsr.w	r2, r0, r2
 808430c:	eb43 0002 	adc.w	r0, r3, r2
 8084310:	bf08      	it	eq
 8084312:	f020 0001 	biceq.w	r0, r0, #1
 8084316:	4770      	bx	lr
 8084318:	f102 0220 	add.w	r2, r2, #32
 808431c:	fa01 fc02 	lsl.w	ip, r1, r2
 8084320:	f1c2 0220 	rsb	r2, r2, #32
 8084324:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084328:	fa21 f202 	lsr.w	r2, r1, r2
 808432c:	eb43 0002 	adc.w	r0, r3, r2
 8084330:	bf08      	it	eq
 8084332:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084336:	4770      	bx	lr

08084338 <__aeabi_fmul>:
 8084338:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808433c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084340:	bf1e      	ittt	ne
 8084342:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084346:	ea92 0f0c 	teqne	r2, ip
 808434a:	ea93 0f0c 	teqne	r3, ip
 808434e:	d06f      	beq.n	8084430 <__aeabi_fmul+0xf8>
 8084350:	441a      	add	r2, r3
 8084352:	ea80 0c01 	eor.w	ip, r0, r1
 8084356:	0240      	lsls	r0, r0, #9
 8084358:	bf18      	it	ne
 808435a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808435e:	d01e      	beq.n	808439e <__aeabi_fmul+0x66>
 8084360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084364:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084368:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808436c:	fba0 3101 	umull	r3, r1, r0, r1
 8084370:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084374:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084378:	bf3e      	ittt	cc
 808437a:	0049      	lslcc	r1, r1, #1
 808437c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084380:	005b      	lslcc	r3, r3, #1
 8084382:	ea40 0001 	orr.w	r0, r0, r1
 8084386:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808438a:	2afd      	cmp	r2, #253	; 0xfd
 808438c:	d81d      	bhi.n	80843ca <__aeabi_fmul+0x92>
 808438e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084396:	bf08      	it	eq
 8084398:	f020 0001 	biceq.w	r0, r0, #1
 808439c:	4770      	bx	lr
 808439e:	f090 0f00 	teq	r0, #0
 80843a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80843a6:	bf08      	it	eq
 80843a8:	0249      	lsleq	r1, r1, #9
 80843aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80843ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80843b2:	3a7f      	subs	r2, #127	; 0x7f
 80843b4:	bfc2      	ittt	gt
 80843b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80843ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80843be:	4770      	bxgt	lr
 80843c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80843c4:	f04f 0300 	mov.w	r3, #0
 80843c8:	3a01      	subs	r2, #1
 80843ca:	dc5d      	bgt.n	8084488 <__aeabi_fmul+0x150>
 80843cc:	f112 0f19 	cmn.w	r2, #25
 80843d0:	bfdc      	itt	le
 80843d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80843d6:	4770      	bxle	lr
 80843d8:	f1c2 0200 	rsb	r2, r2, #0
 80843dc:	0041      	lsls	r1, r0, #1
 80843de:	fa21 f102 	lsr.w	r1, r1, r2
 80843e2:	f1c2 0220 	rsb	r2, r2, #32
 80843e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80843ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80843ee:	f140 0000 	adc.w	r0, r0, #0
 80843f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80843f6:	bf08      	it	eq
 80843f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80843fc:	4770      	bx	lr
 80843fe:	f092 0f00 	teq	r2, #0
 8084402:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084406:	bf02      	ittt	eq
 8084408:	0040      	lsleq	r0, r0, #1
 808440a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808440e:	3a01      	subeq	r2, #1
 8084410:	d0f9      	beq.n	8084406 <__aeabi_fmul+0xce>
 8084412:	ea40 000c 	orr.w	r0, r0, ip
 8084416:	f093 0f00 	teq	r3, #0
 808441a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808441e:	bf02      	ittt	eq
 8084420:	0049      	lsleq	r1, r1, #1
 8084422:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084426:	3b01      	subeq	r3, #1
 8084428:	d0f9      	beq.n	808441e <__aeabi_fmul+0xe6>
 808442a:	ea41 010c 	orr.w	r1, r1, ip
 808442e:	e78f      	b.n	8084350 <__aeabi_fmul+0x18>
 8084430:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084434:	ea92 0f0c 	teq	r2, ip
 8084438:	bf18      	it	ne
 808443a:	ea93 0f0c 	teqne	r3, ip
 808443e:	d00a      	beq.n	8084456 <__aeabi_fmul+0x11e>
 8084440:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084444:	bf18      	it	ne
 8084446:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808444a:	d1d8      	bne.n	80843fe <__aeabi_fmul+0xc6>
 808444c:	ea80 0001 	eor.w	r0, r0, r1
 8084450:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084454:	4770      	bx	lr
 8084456:	f090 0f00 	teq	r0, #0
 808445a:	bf17      	itett	ne
 808445c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084460:	4608      	moveq	r0, r1
 8084462:	f091 0f00 	teqne	r1, #0
 8084466:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808446a:	d014      	beq.n	8084496 <__aeabi_fmul+0x15e>
 808446c:	ea92 0f0c 	teq	r2, ip
 8084470:	d101      	bne.n	8084476 <__aeabi_fmul+0x13e>
 8084472:	0242      	lsls	r2, r0, #9
 8084474:	d10f      	bne.n	8084496 <__aeabi_fmul+0x15e>
 8084476:	ea93 0f0c 	teq	r3, ip
 808447a:	d103      	bne.n	8084484 <__aeabi_fmul+0x14c>
 808447c:	024b      	lsls	r3, r1, #9
 808447e:	bf18      	it	ne
 8084480:	4608      	movne	r0, r1
 8084482:	d108      	bne.n	8084496 <__aeabi_fmul+0x15e>
 8084484:	ea80 0001 	eor.w	r0, r0, r1
 8084488:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808448c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084494:	4770      	bx	lr
 8084496:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808449a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808449e:	4770      	bx	lr

080844a0 <__aeabi_fdiv>:
 80844a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80844a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80844a8:	bf1e      	ittt	ne
 80844aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80844ae:	ea92 0f0c 	teqne	r2, ip
 80844b2:	ea93 0f0c 	teqne	r3, ip
 80844b6:	d069      	beq.n	808458c <__aeabi_fdiv+0xec>
 80844b8:	eba2 0203 	sub.w	r2, r2, r3
 80844bc:	ea80 0c01 	eor.w	ip, r0, r1
 80844c0:	0249      	lsls	r1, r1, #9
 80844c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80844c6:	d037      	beq.n	8084538 <__aeabi_fdiv+0x98>
 80844c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80844cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80844d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80844d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80844d8:	428b      	cmp	r3, r1
 80844da:	bf38      	it	cc
 80844dc:	005b      	lslcc	r3, r3, #1
 80844de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80844e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80844e6:	428b      	cmp	r3, r1
 80844e8:	bf24      	itt	cs
 80844ea:	1a5b      	subcs	r3, r3, r1
 80844ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80844f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80844f4:	bf24      	itt	cs
 80844f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80844fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80844fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084502:	bf24      	itt	cs
 8084504:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084508:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808450c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084510:	bf24      	itt	cs
 8084512:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084516:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808451a:	011b      	lsls	r3, r3, #4
 808451c:	bf18      	it	ne
 808451e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084522:	d1e0      	bne.n	80844e6 <__aeabi_fdiv+0x46>
 8084524:	2afd      	cmp	r2, #253	; 0xfd
 8084526:	f63f af50 	bhi.w	80843ca <__aeabi_fmul+0x92>
 808452a:	428b      	cmp	r3, r1
 808452c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084530:	bf08      	it	eq
 8084532:	f020 0001 	biceq.w	r0, r0, #1
 8084536:	4770      	bx	lr
 8084538:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808453c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084540:	327f      	adds	r2, #127	; 0x7f
 8084542:	bfc2      	ittt	gt
 8084544:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084548:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808454c:	4770      	bxgt	lr
 808454e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084552:	f04f 0300 	mov.w	r3, #0
 8084556:	3a01      	subs	r2, #1
 8084558:	e737      	b.n	80843ca <__aeabi_fmul+0x92>
 808455a:	f092 0f00 	teq	r2, #0
 808455e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084562:	bf02      	ittt	eq
 8084564:	0040      	lsleq	r0, r0, #1
 8084566:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808456a:	3a01      	subeq	r2, #1
 808456c:	d0f9      	beq.n	8084562 <__aeabi_fdiv+0xc2>
 808456e:	ea40 000c 	orr.w	r0, r0, ip
 8084572:	f093 0f00 	teq	r3, #0
 8084576:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808457a:	bf02      	ittt	eq
 808457c:	0049      	lsleq	r1, r1, #1
 808457e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084582:	3b01      	subeq	r3, #1
 8084584:	d0f9      	beq.n	808457a <__aeabi_fdiv+0xda>
 8084586:	ea41 010c 	orr.w	r1, r1, ip
 808458a:	e795      	b.n	80844b8 <__aeabi_fdiv+0x18>
 808458c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084590:	ea92 0f0c 	teq	r2, ip
 8084594:	d108      	bne.n	80845a8 <__aeabi_fdiv+0x108>
 8084596:	0242      	lsls	r2, r0, #9
 8084598:	f47f af7d 	bne.w	8084496 <__aeabi_fmul+0x15e>
 808459c:	ea93 0f0c 	teq	r3, ip
 80845a0:	f47f af70 	bne.w	8084484 <__aeabi_fmul+0x14c>
 80845a4:	4608      	mov	r0, r1
 80845a6:	e776      	b.n	8084496 <__aeabi_fmul+0x15e>
 80845a8:	ea93 0f0c 	teq	r3, ip
 80845ac:	d104      	bne.n	80845b8 <__aeabi_fdiv+0x118>
 80845ae:	024b      	lsls	r3, r1, #9
 80845b0:	f43f af4c 	beq.w	808444c <__aeabi_fmul+0x114>
 80845b4:	4608      	mov	r0, r1
 80845b6:	e76e      	b.n	8084496 <__aeabi_fmul+0x15e>
 80845b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80845bc:	bf18      	it	ne
 80845be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80845c2:	d1ca      	bne.n	808455a <__aeabi_fdiv+0xba>
 80845c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80845c8:	f47f af5c 	bne.w	8084484 <__aeabi_fmul+0x14c>
 80845cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80845d0:	f47f af3c 	bne.w	808444c <__aeabi_fmul+0x114>
 80845d4:	e75f      	b.n	8084496 <__aeabi_fmul+0x15e>
 80845d6:	bf00      	nop

080845d8 <__gesf2>:
 80845d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80845dc:	e006      	b.n	80845ec <__cmpsf2+0x4>
 80845de:	bf00      	nop

080845e0 <__lesf2>:
 80845e0:	f04f 0c01 	mov.w	ip, #1
 80845e4:	e002      	b.n	80845ec <__cmpsf2+0x4>
 80845e6:	bf00      	nop

080845e8 <__cmpsf2>:
 80845e8:	f04f 0c01 	mov.w	ip, #1
 80845ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80845f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80845f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80845f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80845fc:	bf18      	it	ne
 80845fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084602:	d011      	beq.n	8084628 <__cmpsf2+0x40>
 8084604:	b001      	add	sp, #4
 8084606:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808460a:	bf18      	it	ne
 808460c:	ea90 0f01 	teqne	r0, r1
 8084610:	bf58      	it	pl
 8084612:	ebb2 0003 	subspl.w	r0, r2, r3
 8084616:	bf88      	it	hi
 8084618:	17c8      	asrhi	r0, r1, #31
 808461a:	bf38      	it	cc
 808461c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084620:	bf18      	it	ne
 8084622:	f040 0001 	orrne.w	r0, r0, #1
 8084626:	4770      	bx	lr
 8084628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808462c:	d102      	bne.n	8084634 <__cmpsf2+0x4c>
 808462e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084632:	d105      	bne.n	8084640 <__cmpsf2+0x58>
 8084634:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084638:	d1e4      	bne.n	8084604 <__cmpsf2+0x1c>
 808463a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808463e:	d0e1      	beq.n	8084604 <__cmpsf2+0x1c>
 8084640:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084644:	4770      	bx	lr
 8084646:	bf00      	nop

08084648 <__aeabi_cfrcmple>:
 8084648:	4684      	mov	ip, r0
 808464a:	4608      	mov	r0, r1
 808464c:	4661      	mov	r1, ip
 808464e:	e7ff      	b.n	8084650 <__aeabi_cfcmpeq>

08084650 <__aeabi_cfcmpeq>:
 8084650:	b50f      	push	{r0, r1, r2, r3, lr}
 8084652:	f7ff ffc9 	bl	80845e8 <__cmpsf2>
 8084656:	2800      	cmp	r0, #0
 8084658:	bf48      	it	mi
 808465a:	f110 0f00 	cmnmi.w	r0, #0
 808465e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084660 <__aeabi_fcmpeq>:
 8084660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084664:	f7ff fff4 	bl	8084650 <__aeabi_cfcmpeq>
 8084668:	bf0c      	ite	eq
 808466a:	2001      	moveq	r0, #1
 808466c:	2000      	movne	r0, #0
 808466e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084672:	bf00      	nop

08084674 <__aeabi_fcmplt>:
 8084674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084678:	f7ff ffea 	bl	8084650 <__aeabi_cfcmpeq>
 808467c:	bf34      	ite	cc
 808467e:	2001      	movcc	r0, #1
 8084680:	2000      	movcs	r0, #0
 8084682:	f85d fb08 	ldr.w	pc, [sp], #8
 8084686:	bf00      	nop

08084688 <__aeabi_fcmple>:
 8084688:	f84d ed08 	str.w	lr, [sp, #-8]!
 808468c:	f7ff ffe0 	bl	8084650 <__aeabi_cfcmpeq>
 8084690:	bf94      	ite	ls
 8084692:	2001      	movls	r0, #1
 8084694:	2000      	movhi	r0, #0
 8084696:	f85d fb08 	ldr.w	pc, [sp], #8
 808469a:	bf00      	nop

0808469c <__aeabi_fcmpge>:
 808469c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846a0:	f7ff ffd2 	bl	8084648 <__aeabi_cfrcmple>
 80846a4:	bf94      	ite	ls
 80846a6:	2001      	movls	r0, #1
 80846a8:	2000      	movhi	r0, #0
 80846aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80846ae:	bf00      	nop

080846b0 <__aeabi_fcmpgt>:
 80846b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846b4:	f7ff ffc8 	bl	8084648 <__aeabi_cfrcmple>
 80846b8:	bf34      	ite	cc
 80846ba:	2001      	movcc	r0, #1
 80846bc:	2000      	movcs	r0, #0
 80846be:	f85d fb08 	ldr.w	pc, [sp], #8
 80846c2:	bf00      	nop

080846c4 <__aeabi_f2iz>:
 80846c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80846c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80846cc:	d30f      	bcc.n	80846ee <__aeabi_f2iz+0x2a>
 80846ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80846d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80846d6:	d90d      	bls.n	80846f4 <__aeabi_f2iz+0x30>
 80846d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80846dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80846e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80846e4:	fa23 f002 	lsr.w	r0, r3, r2
 80846e8:	bf18      	it	ne
 80846ea:	4240      	negne	r0, r0
 80846ec:	4770      	bx	lr
 80846ee:	f04f 0000 	mov.w	r0, #0
 80846f2:	4770      	bx	lr
 80846f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80846f8:	d101      	bne.n	80846fe <__aeabi_f2iz+0x3a>
 80846fa:	0242      	lsls	r2, r0, #9
 80846fc:	d105      	bne.n	808470a <__aeabi_f2iz+0x46>
 80846fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084702:	bf08      	it	eq
 8084704:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084708:	4770      	bx	lr
 808470a:	f04f 0000 	mov.w	r0, #0
 808470e:	4770      	bx	lr

08084710 <__aeabi_f2uiz>:
 8084710:	0042      	lsls	r2, r0, #1
 8084712:	d20e      	bcs.n	8084732 <__aeabi_f2uiz+0x22>
 8084714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084718:	d30b      	bcc.n	8084732 <__aeabi_f2uiz+0x22>
 808471a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808471e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084722:	d409      	bmi.n	8084738 <__aeabi_f2uiz+0x28>
 8084724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808472c:	fa23 f002 	lsr.w	r0, r3, r2
 8084730:	4770      	bx	lr
 8084732:	f04f 0000 	mov.w	r0, #0
 8084736:	4770      	bx	lr
 8084738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808473c:	d101      	bne.n	8084742 <__aeabi_f2uiz+0x32>
 808473e:	0242      	lsls	r2, r0, #9
 8084740:	d102      	bne.n	8084748 <__aeabi_f2uiz+0x38>
 8084742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084746:	4770      	bx	lr
 8084748:	f04f 0000 	mov.w	r0, #0
 808474c:	4770      	bx	lr
 808474e:	bf00      	nop

08084750 <atof>:
 8084750:	2100      	movs	r1, #0
 8084752:	f000 bff5 	b.w	8085740 <strtod>

08084756 <atoi>:
 8084756:	220a      	movs	r2, #10
 8084758:	2100      	movs	r1, #0
 808475a:	f001 b87f 	b.w	808585c <strtol>

0808475e <atol>:
 808475e:	220a      	movs	r2, #10
 8084760:	2100      	movs	r1, #0
 8084762:	f001 b87b 	b.w	808585c <strtol>
	...

08084768 <__cxa_atexit>:
 8084768:	b510      	push	{r4, lr}
 808476a:	4c05      	ldr	r4, [pc, #20]	; (8084780 <__cxa_atexit+0x18>)
 808476c:	4613      	mov	r3, r2
 808476e:	b12c      	cbz	r4, 808477c <__cxa_atexit+0x14>
 8084770:	460a      	mov	r2, r1
 8084772:	4601      	mov	r1, r0
 8084774:	2002      	movs	r0, #2
 8084776:	f3af 8000 	nop.w
 808477a:	bd10      	pop	{r4, pc}
 808477c:	4620      	mov	r0, r4
 808477e:	bd10      	pop	{r4, pc}
 8084780:	00000000 	.word	0x00000000

08084784 <localtime>:
 8084784:	b538      	push	{r3, r4, r5, lr}
 8084786:	4b07      	ldr	r3, [pc, #28]	; (80847a4 <localtime+0x20>)
 8084788:	4605      	mov	r5, r0
 808478a:	681c      	ldr	r4, [r3, #0]
 808478c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808478e:	b91b      	cbnz	r3, 8084798 <localtime+0x14>
 8084790:	2024      	movs	r0, #36	; 0x24
 8084792:	f7fd f98d 	bl	8081ab0 <malloc>
 8084796:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084798:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808479a:	4628      	mov	r0, r5
 808479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80847a0:	f000 b802 	b.w	80847a8 <localtime_r>
 80847a4:	200001b4 	.word	0x200001b4

080847a8 <localtime_r>:
 80847a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80847ac:	460c      	mov	r4, r1
 80847ae:	4680      	mov	r8, r0
 80847b0:	f001 fe78 	bl	80864a4 <__gettzinfo>
 80847b4:	4621      	mov	r1, r4
 80847b6:	4607      	mov	r7, r0
 80847b8:	4640      	mov	r0, r8
 80847ba:	f001 fe77 	bl	80864ac <gmtime_r>
 80847be:	6946      	ldr	r6, [r0, #20]
 80847c0:	4604      	mov	r4, r0
 80847c2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80847c6:	07b3      	lsls	r3, r6, #30
 80847c8:	d105      	bne.n	80847d6 <localtime_r+0x2e>
 80847ca:	2264      	movs	r2, #100	; 0x64
 80847cc:	fb96 f3f2 	sdiv	r3, r6, r2
 80847d0:	fb02 6313 	mls	r3, r2, r3, r6
 80847d4:	b94b      	cbnz	r3, 80847ea <localtime_r+0x42>
 80847d6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80847da:	fb96 f3f5 	sdiv	r3, r6, r5
 80847de:	fb05 6513 	mls	r5, r5, r3, r6
 80847e2:	fab5 f385 	clz	r3, r5
 80847e6:	095b      	lsrs	r3, r3, #5
 80847e8:	e000      	b.n	80847ec <localtime_r+0x44>
 80847ea:	2301      	movs	r3, #1
 80847ec:	4a5f      	ldr	r2, [pc, #380]	; (808496c <localtime_r+0x1c4>)
 80847ee:	2530      	movs	r5, #48	; 0x30
 80847f0:	fb05 2503 	mla	r5, r5, r3, r2
 80847f4:	f001 f96c 	bl	8085ad0 <__tz_lock>
 80847f8:	f001 f96c 	bl	8085ad4 <_tzset_unlocked>
 80847fc:	4b5c      	ldr	r3, [pc, #368]	; (8084970 <localtime_r+0x1c8>)
 80847fe:	681b      	ldr	r3, [r3, #0]
 8084800:	b1f3      	cbz	r3, 8084840 <localtime_r+0x98>
 8084802:	687b      	ldr	r3, [r7, #4]
 8084804:	429e      	cmp	r6, r3
 8084806:	d105      	bne.n	8084814 <localtime_r+0x6c>
 8084808:	6839      	ldr	r1, [r7, #0]
 808480a:	f8d8 3000 	ldr.w	r3, [r8]
 808480e:	69fa      	ldr	r2, [r7, #28]
 8084810:	b941      	cbnz	r1, 8084824 <localtime_r+0x7c>
 8084812:	e00a      	b.n	808482a <localtime_r+0x82>
 8084814:	4630      	mov	r0, r6
 8084816:	f001 f8b3 	bl	8085980 <__tzcalc_limits>
 808481a:	2800      	cmp	r0, #0
 808481c:	d1f4      	bne.n	8084808 <localtime_r+0x60>
 808481e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084822:	e00d      	b.n	8084840 <localtime_r+0x98>
 8084824:	4293      	cmp	r3, r2
 8084826:	db08      	blt.n	808483a <localtime_r+0x92>
 8084828:	e001      	b.n	808482e <localtime_r+0x86>
 808482a:	4293      	cmp	r3, r2
 808482c:	da07      	bge.n	808483e <localtime_r+0x96>
 808482e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084830:	4293      	cmp	r3, r2
 8084832:	bfac      	ite	ge
 8084834:	2300      	movge	r3, #0
 8084836:	2301      	movlt	r3, #1
 8084838:	e002      	b.n	8084840 <localtime_r+0x98>
 808483a:	2300      	movs	r3, #0
 808483c:	e000      	b.n	8084840 <localtime_r+0x98>
 808483e:	2301      	movs	r3, #1
 8084840:	6223      	str	r3, [r4, #32]
 8084842:	6a23      	ldr	r3, [r4, #32]
 8084844:	203c      	movs	r0, #60	; 0x3c
 8084846:	2b01      	cmp	r3, #1
 8084848:	bf0c      	ite	eq
 808484a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808484c:	6a39      	ldrne	r1, [r7, #32]
 808484e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084852:	fb91 f6f3 	sdiv	r6, r1, r3
 8084856:	fb03 1316 	mls	r3, r3, r6, r1
 808485a:	fb93 f2f0 	sdiv	r2, r3, r0
 808485e:	fb00 3012 	mls	r0, r0, r2, r3
 8084862:	6861      	ldr	r1, [r4, #4]
 8084864:	6823      	ldr	r3, [r4, #0]
 8084866:	1a89      	subs	r1, r1, r2
 8084868:	68a2      	ldr	r2, [r4, #8]
 808486a:	1a1b      	subs	r3, r3, r0
 808486c:	1b92      	subs	r2, r2, r6
 808486e:	2b3b      	cmp	r3, #59	; 0x3b
 8084870:	6023      	str	r3, [r4, #0]
 8084872:	6061      	str	r1, [r4, #4]
 8084874:	60a2      	str	r2, [r4, #8]
 8084876:	dd03      	ble.n	8084880 <localtime_r+0xd8>
 8084878:	3101      	adds	r1, #1
 808487a:	6061      	str	r1, [r4, #4]
 808487c:	3b3c      	subs	r3, #60	; 0x3c
 808487e:	e004      	b.n	808488a <localtime_r+0xe2>
 8084880:	2b00      	cmp	r3, #0
 8084882:	da03      	bge.n	808488c <localtime_r+0xe4>
 8084884:	3901      	subs	r1, #1
 8084886:	6061      	str	r1, [r4, #4]
 8084888:	333c      	adds	r3, #60	; 0x3c
 808488a:	6023      	str	r3, [r4, #0]
 808488c:	6863      	ldr	r3, [r4, #4]
 808488e:	2b3b      	cmp	r3, #59	; 0x3b
 8084890:	dd03      	ble.n	808489a <localtime_r+0xf2>
 8084892:	3201      	adds	r2, #1
 8084894:	60a2      	str	r2, [r4, #8]
 8084896:	3b3c      	subs	r3, #60	; 0x3c
 8084898:	e004      	b.n	80848a4 <localtime_r+0xfc>
 808489a:	2b00      	cmp	r3, #0
 808489c:	da03      	bge.n	80848a6 <localtime_r+0xfe>
 808489e:	3a01      	subs	r2, #1
 80848a0:	60a2      	str	r2, [r4, #8]
 80848a2:	333c      	adds	r3, #60	; 0x3c
 80848a4:	6063      	str	r3, [r4, #4]
 80848a6:	68a3      	ldr	r3, [r4, #8]
 80848a8:	2b17      	cmp	r3, #23
 80848aa:	dd22      	ble.n	80848f2 <localtime_r+0x14a>
 80848ac:	69e2      	ldr	r2, [r4, #28]
 80848ae:	3b18      	subs	r3, #24
 80848b0:	3201      	adds	r2, #1
 80848b2:	61e2      	str	r2, [r4, #28]
 80848b4:	69a2      	ldr	r2, [r4, #24]
 80848b6:	60a3      	str	r3, [r4, #8]
 80848b8:	3201      	adds	r2, #1
 80848ba:	2a06      	cmp	r2, #6
 80848bc:	bfc8      	it	gt
 80848be:	2200      	movgt	r2, #0
 80848c0:	61a2      	str	r2, [r4, #24]
 80848c2:	68e2      	ldr	r2, [r4, #12]
 80848c4:	6923      	ldr	r3, [r4, #16]
 80848c6:	3201      	adds	r2, #1
 80848c8:	60e2      	str	r2, [r4, #12]
 80848ca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80848ce:	428a      	cmp	r2, r1
 80848d0:	dd46      	ble.n	8084960 <localtime_r+0x1b8>
 80848d2:	3301      	adds	r3, #1
 80848d4:	2b0c      	cmp	r3, #12
 80848d6:	bf08      	it	eq
 80848d8:	6963      	ldreq	r3, [r4, #20]
 80848da:	eba2 0201 	sub.w	r2, r2, r1
 80848de:	60e2      	str	r2, [r4, #12]
 80848e0:	bf05      	ittet	eq
 80848e2:	3301      	addeq	r3, #1
 80848e4:	2200      	moveq	r2, #0
 80848e6:	6123      	strne	r3, [r4, #16]
 80848e8:	6122      	streq	r2, [r4, #16]
 80848ea:	bf04      	itt	eq
 80848ec:	6163      	streq	r3, [r4, #20]
 80848ee:	61e2      	streq	r2, [r4, #28]
 80848f0:	e036      	b.n	8084960 <localtime_r+0x1b8>
 80848f2:	2b00      	cmp	r3, #0
 80848f4:	da34      	bge.n	8084960 <localtime_r+0x1b8>
 80848f6:	69e2      	ldr	r2, [r4, #28]
 80848f8:	3318      	adds	r3, #24
 80848fa:	3a01      	subs	r2, #1
 80848fc:	61e2      	str	r2, [r4, #28]
 80848fe:	69a2      	ldr	r2, [r4, #24]
 8084900:	60a3      	str	r3, [r4, #8]
 8084902:	3a01      	subs	r2, #1
 8084904:	bf48      	it	mi
 8084906:	2206      	movmi	r2, #6
 8084908:	61a2      	str	r2, [r4, #24]
 808490a:	68e2      	ldr	r2, [r4, #12]
 808490c:	3a01      	subs	r2, #1
 808490e:	60e2      	str	r2, [r4, #12]
 8084910:	bb32      	cbnz	r2, 8084960 <localtime_r+0x1b8>
 8084912:	6923      	ldr	r3, [r4, #16]
 8084914:	3b01      	subs	r3, #1
 8084916:	d401      	bmi.n	808491c <localtime_r+0x174>
 8084918:	6123      	str	r3, [r4, #16]
 808491a:	e01d      	b.n	8084958 <localtime_r+0x1b0>
 808491c:	230b      	movs	r3, #11
 808491e:	6123      	str	r3, [r4, #16]
 8084920:	6963      	ldr	r3, [r4, #20]
 8084922:	1e5a      	subs	r2, r3, #1
 8084924:	f012 0f03 	tst.w	r2, #3
 8084928:	6162      	str	r2, [r4, #20]
 808492a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808492e:	d105      	bne.n	808493c <localtime_r+0x194>
 8084930:	2164      	movs	r1, #100	; 0x64
 8084932:	fb93 f2f1 	sdiv	r2, r3, r1
 8084936:	fb01 3212 	mls	r2, r1, r2, r3
 808493a:	b94a      	cbnz	r2, 8084950 <localtime_r+0x1a8>
 808493c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084940:	fb93 f2f1 	sdiv	r2, r3, r1
 8084944:	fb01 3312 	mls	r3, r1, r2, r3
 8084948:	fab3 f383 	clz	r3, r3
 808494c:	095b      	lsrs	r3, r3, #5
 808494e:	e000      	b.n	8084952 <localtime_r+0x1aa>
 8084950:	2301      	movs	r3, #1
 8084952:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8084956:	61e3      	str	r3, [r4, #28]
 8084958:	6923      	ldr	r3, [r4, #16]
 808495a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808495e:	60e3      	str	r3, [r4, #12]
 8084960:	f001 f8b7 	bl	8085ad2 <__tz_unlock>
 8084964:	4620      	mov	r0, r4
 8084966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808496a:	bf00      	nop
 808496c:	080874a4 	.word	0x080874a4
 8084970:	20000a3c 	.word	0x20000a3c

08084974 <_localeconv_r>:
 8084974:	4800      	ldr	r0, [pc, #0]	; (8084978 <_localeconv_r+0x4>)
 8084976:	4770      	bx	lr
 8084978:	200001b8 	.word	0x200001b8

0808497c <memcpy>:
 808497c:	b510      	push	{r4, lr}
 808497e:	1e43      	subs	r3, r0, #1
 8084980:	440a      	add	r2, r1
 8084982:	4291      	cmp	r1, r2
 8084984:	d004      	beq.n	8084990 <memcpy+0x14>
 8084986:	f811 4b01 	ldrb.w	r4, [r1], #1
 808498a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808498e:	e7f8      	b.n	8084982 <memcpy+0x6>
 8084990:	bd10      	pop	{r4, pc}

08084992 <memset>:
 8084992:	4603      	mov	r3, r0
 8084994:	4402      	add	r2, r0
 8084996:	4293      	cmp	r3, r2
 8084998:	d002      	beq.n	80849a0 <memset+0xe>
 808499a:	f803 1b01 	strb.w	r1, [r3], #1
 808499e:	e7fa      	b.n	8084996 <memset+0x4>
 80849a0:	4770      	bx	lr
	...

080849a4 <srand>:
 80849a4:	b538      	push	{r3, r4, r5, lr}
 80849a6:	4b12      	ldr	r3, [pc, #72]	; (80849f0 <srand+0x4c>)
 80849a8:	4605      	mov	r5, r0
 80849aa:	681c      	ldr	r4, [r3, #0]
 80849ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80849ae:	b9d3      	cbnz	r3, 80849e6 <srand+0x42>
 80849b0:	2018      	movs	r0, #24
 80849b2:	f7fd f87d 	bl	8081ab0 <malloc>
 80849b6:	f243 330e 	movw	r3, #13070	; 0x330e
 80849ba:	63a0      	str	r0, [r4, #56]	; 0x38
 80849bc:	8003      	strh	r3, [r0, #0]
 80849be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80849c2:	8043      	strh	r3, [r0, #2]
 80849c4:	f241 2334 	movw	r3, #4660	; 0x1234
 80849c8:	8083      	strh	r3, [r0, #4]
 80849ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80849ce:	80c3      	strh	r3, [r0, #6]
 80849d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80849d4:	8103      	strh	r3, [r0, #8]
 80849d6:	2305      	movs	r3, #5
 80849d8:	8143      	strh	r3, [r0, #10]
 80849da:	230b      	movs	r3, #11
 80849dc:	8183      	strh	r3, [r0, #12]
 80849de:	2201      	movs	r2, #1
 80849e0:	2300      	movs	r3, #0
 80849e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80849e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80849e8:	2200      	movs	r2, #0
 80849ea:	611d      	str	r5, [r3, #16]
 80849ec:	615a      	str	r2, [r3, #20]
 80849ee:	bd38      	pop	{r3, r4, r5, pc}
 80849f0:	200001b4 	.word	0x200001b4

080849f4 <strchr>:
 80849f4:	b2c9      	uxtb	r1, r1
 80849f6:	4603      	mov	r3, r0
 80849f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80849fc:	b11a      	cbz	r2, 8084a06 <strchr+0x12>
 80849fe:	4291      	cmp	r1, r2
 8084a00:	d1f9      	bne.n	80849f6 <strchr+0x2>
 8084a02:	4618      	mov	r0, r3
 8084a04:	4770      	bx	lr
 8084a06:	2900      	cmp	r1, #0
 8084a08:	bf0c      	ite	eq
 8084a0a:	4618      	moveq	r0, r3
 8084a0c:	2000      	movne	r0, #0
 8084a0e:	4770      	bx	lr

08084a10 <strcmp>:
 8084a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084a18:	2a01      	cmp	r2, #1
 8084a1a:	bf28      	it	cs
 8084a1c:	429a      	cmpcs	r2, r3
 8084a1e:	d0f7      	beq.n	8084a10 <strcmp>
 8084a20:	1ad0      	subs	r0, r2, r3
 8084a22:	4770      	bx	lr

08084a24 <strcpy>:
 8084a24:	4603      	mov	r3, r0
 8084a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084a2a:	f803 2b01 	strb.w	r2, [r3], #1
 8084a2e:	2a00      	cmp	r2, #0
 8084a30:	d1f9      	bne.n	8084a26 <strcpy+0x2>
 8084a32:	4770      	bx	lr

08084a34 <strdup>:
 8084a34:	4b02      	ldr	r3, [pc, #8]	; (8084a40 <strdup+0xc>)
 8084a36:	4601      	mov	r1, r0
 8084a38:	6818      	ldr	r0, [r3, #0]
 8084a3a:	f000 b803 	b.w	8084a44 <_strdup_r>
 8084a3e:	bf00      	nop
 8084a40:	200001b4 	.word	0x200001b4

08084a44 <_strdup_r>:
 8084a44:	b570      	push	{r4, r5, r6, lr}
 8084a46:	4606      	mov	r6, r0
 8084a48:	4608      	mov	r0, r1
 8084a4a:	460c      	mov	r4, r1
 8084a4c:	f000 f80d 	bl	8084a6a <strlen>
 8084a50:	1c45      	adds	r5, r0, #1
 8084a52:	4629      	mov	r1, r5
 8084a54:	4630      	mov	r0, r6
 8084a56:	f7fd f85b 	bl	8081b10 <_malloc_r>
 8084a5a:	4606      	mov	r6, r0
 8084a5c:	b118      	cbz	r0, 8084a66 <_strdup_r+0x22>
 8084a5e:	462a      	mov	r2, r5
 8084a60:	4621      	mov	r1, r4
 8084a62:	f7ff ff8b 	bl	808497c <memcpy>
 8084a66:	4630      	mov	r0, r6
 8084a68:	bd70      	pop	{r4, r5, r6, pc}

08084a6a <strlen>:
 8084a6a:	4603      	mov	r3, r0
 8084a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084a70:	2a00      	cmp	r2, #0
 8084a72:	d1fb      	bne.n	8084a6c <strlen+0x2>
 8084a74:	1a18      	subs	r0, r3, r0
 8084a76:	3801      	subs	r0, #1
 8084a78:	4770      	bx	lr

08084a7a <strncmp>:
 8084a7a:	b530      	push	{r4, r5, lr}
 8084a7c:	b182      	cbz	r2, 8084aa0 <strncmp+0x26>
 8084a7e:	1e45      	subs	r5, r0, #1
 8084a80:	3901      	subs	r1, #1
 8084a82:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8084a86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084a8a:	42a3      	cmp	r3, r4
 8084a8c:	d106      	bne.n	8084a9c <strncmp+0x22>
 8084a8e:	43ec      	mvns	r4, r5
 8084a90:	4414      	add	r4, r2
 8084a92:	42e0      	cmn	r0, r4
 8084a94:	d001      	beq.n	8084a9a <strncmp+0x20>
 8084a96:	2b00      	cmp	r3, #0
 8084a98:	d1f3      	bne.n	8084a82 <strncmp+0x8>
 8084a9a:	461c      	mov	r4, r3
 8084a9c:	1b18      	subs	r0, r3, r4
 8084a9e:	bd30      	pop	{r4, r5, pc}
 8084aa0:	4610      	mov	r0, r2
 8084aa2:	bd30      	pop	{r4, r5, pc}

08084aa4 <strncpy>:
 8084aa4:	4603      	mov	r3, r0
 8084aa6:	b510      	push	{r4, lr}
 8084aa8:	b142      	cbz	r2, 8084abc <strncpy+0x18>
 8084aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084aae:	3a01      	subs	r2, #1
 8084ab0:	f803 4b01 	strb.w	r4, [r3], #1
 8084ab4:	2c00      	cmp	r4, #0
 8084ab6:	d1f7      	bne.n	8084aa8 <strncpy+0x4>
 8084ab8:	441a      	add	r2, r3
 8084aba:	e000      	b.n	8084abe <strncpy+0x1a>
 8084abc:	bd10      	pop	{r4, pc}
 8084abe:	4293      	cmp	r3, r2
 8084ac0:	d002      	beq.n	8084ac8 <strncpy+0x24>
 8084ac2:	f803 4b01 	strb.w	r4, [r3], #1
 8084ac6:	e7fa      	b.n	8084abe <strncpy+0x1a>
 8084ac8:	bd10      	pop	{r4, pc}

08084aca <strstr>:
 8084aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084acc:	7803      	ldrb	r3, [r0, #0]
 8084ace:	b963      	cbnz	r3, 8084aea <strstr+0x20>
 8084ad0:	780b      	ldrb	r3, [r1, #0]
 8084ad2:	2b00      	cmp	r3, #0
 8084ad4:	bf18      	it	ne
 8084ad6:	2000      	movne	r0, #0
 8084ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084ada:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8084ade:	b162      	cbz	r2, 8084afa <strstr+0x30>
 8084ae0:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8084ae4:	4630      	mov	r0, r6
 8084ae6:	4297      	cmp	r7, r2
 8084ae8:	d0f7      	beq.n	8084ada <strstr+0x10>
 8084aea:	4603      	mov	r3, r0
 8084aec:	1c46      	adds	r6, r0, #1
 8084aee:	7800      	ldrb	r0, [r0, #0]
 8084af0:	b110      	cbz	r0, 8084af8 <strstr+0x2e>
 8084af2:	1e4d      	subs	r5, r1, #1
 8084af4:	1e5c      	subs	r4, r3, #1
 8084af6:	e7f0      	b.n	8084ada <strstr+0x10>
 8084af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084afa:	4618      	mov	r0, r3
 8084afc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084afe <sulp>:
 8084afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084b02:	460f      	mov	r7, r1
 8084b04:	4690      	mov	r8, r2
 8084b06:	f002 f82d 	bl	8086b64 <__ulp>
 8084b0a:	4604      	mov	r4, r0
 8084b0c:	460d      	mov	r5, r1
 8084b0e:	f1b8 0f00 	cmp.w	r8, #0
 8084b12:	d011      	beq.n	8084b38 <sulp+0x3a>
 8084b14:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8084b18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8084b1c:	2b00      	cmp	r3, #0
 8084b1e:	dd0b      	ble.n	8084b38 <sulp+0x3a>
 8084b20:	051b      	lsls	r3, r3, #20
 8084b22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8084b26:	2400      	movs	r4, #0
 8084b28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8084b2c:	4622      	mov	r2, r4
 8084b2e:	462b      	mov	r3, r5
 8084b30:	f7fe ffac 	bl	8083a8c <__aeabi_dmul>
 8084b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084b38:	4620      	mov	r0, r4
 8084b3a:	4629      	mov	r1, r5
 8084b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084b40 <_strtod_r>:
 8084b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084b44:	4682      	mov	sl, r0
 8084b46:	460c      	mov	r4, r1
 8084b48:	b09d      	sub	sp, #116	; 0x74
 8084b4a:	2300      	movs	r3, #0
 8084b4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8084b4e:	9318      	str	r3, [sp, #96]	; 0x60
 8084b50:	f04f 0800 	mov.w	r8, #0
 8084b54:	f04f 0900 	mov.w	r9, #0
 8084b58:	9117      	str	r1, [sp, #92]	; 0x5c
 8084b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084b5c:	781a      	ldrb	r2, [r3, #0]
 8084b5e:	2a0d      	cmp	r2, #13
 8084b60:	d805      	bhi.n	8084b6e <_strtod_r+0x2e>
 8084b62:	2a09      	cmp	r2, #9
 8084b64:	d213      	bcs.n	8084b8e <_strtod_r+0x4e>
 8084b66:	2a00      	cmp	r2, #0
 8084b68:	f000 81ad 	beq.w	8084ec6 <_strtod_r+0x386>
 8084b6c:	e012      	b.n	8084b94 <_strtod_r+0x54>
 8084b6e:	2a2b      	cmp	r2, #43	; 0x2b
 8084b70:	d004      	beq.n	8084b7c <_strtod_r+0x3c>
 8084b72:	2a2d      	cmp	r2, #45	; 0x2d
 8084b74:	d004      	beq.n	8084b80 <_strtod_r+0x40>
 8084b76:	2a20      	cmp	r2, #32
 8084b78:	d10c      	bne.n	8084b94 <_strtod_r+0x54>
 8084b7a:	e008      	b.n	8084b8e <_strtod_r+0x4e>
 8084b7c:	2200      	movs	r2, #0
 8084b7e:	e000      	b.n	8084b82 <_strtod_r+0x42>
 8084b80:	2201      	movs	r2, #1
 8084b82:	920c      	str	r2, [sp, #48]	; 0x30
 8084b84:	1c5a      	adds	r2, r3, #1
 8084b86:	9217      	str	r2, [sp, #92]	; 0x5c
 8084b88:	785b      	ldrb	r3, [r3, #1]
 8084b8a:	b92b      	cbnz	r3, 8084b98 <_strtod_r+0x58>
 8084b8c:	e19b      	b.n	8084ec6 <_strtod_r+0x386>
 8084b8e:	3301      	adds	r3, #1
 8084b90:	9317      	str	r3, [sp, #92]	; 0x5c
 8084b92:	e7e2      	b.n	8084b5a <_strtod_r+0x1a>
 8084b94:	2300      	movs	r3, #0
 8084b96:	930c      	str	r3, [sp, #48]	; 0x30
 8084b98:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8084b9a:	782b      	ldrb	r3, [r5, #0]
 8084b9c:	2b30      	cmp	r3, #48	; 0x30
 8084b9e:	d15c      	bne.n	8084c5a <_strtod_r+0x11a>
 8084ba0:	786b      	ldrb	r3, [r5, #1]
 8084ba2:	2b58      	cmp	r3, #88	; 0x58
 8084ba4:	d001      	beq.n	8084baa <_strtod_r+0x6a>
 8084ba6:	2b78      	cmp	r3, #120	; 0x78
 8084ba8:	d14c      	bne.n	8084c44 <_strtod_r+0x104>
 8084baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084bac:	4aa8      	ldr	r2, [pc, #672]	; (8084e50 <_strtod_r+0x310>)
 8084bae:	9301      	str	r3, [sp, #4]
 8084bb0:	ab18      	add	r3, sp, #96	; 0x60
 8084bb2:	9300      	str	r3, [sp, #0]
 8084bb4:	a917      	add	r1, sp, #92	; 0x5c
 8084bb6:	ab19      	add	r3, sp, #100	; 0x64
 8084bb8:	4650      	mov	r0, sl
 8084bba:	f001 f95c 	bl	8085e76 <__gethex>
 8084bbe:	f010 0607 	ands.w	r6, r0, #7
 8084bc2:	4604      	mov	r4, r0
 8084bc4:	f000 8585 	beq.w	80856d2 <_strtod_r+0xb92>
 8084bc8:	2e06      	cmp	r6, #6
 8084bca:	d105      	bne.n	8084bd8 <_strtod_r+0x98>
 8084bcc:	3501      	adds	r5, #1
 8084bce:	2300      	movs	r3, #0
 8084bd0:	9517      	str	r5, [sp, #92]	; 0x5c
 8084bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8084bd4:	f000 bd7d 	b.w	80856d2 <_strtod_r+0xb92>
 8084bd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8084bda:	b13a      	cbz	r2, 8084bec <_strtod_r+0xac>
 8084bdc:	2135      	movs	r1, #53	; 0x35
 8084bde:	a81a      	add	r0, sp, #104	; 0x68
 8084be0:	f002 f8a7 	bl	8086d32 <__copybits>
 8084be4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084be6:	4650      	mov	r0, sl
 8084be8:	f001 fd2b 	bl	8086642 <_Bfree>
 8084bec:	2e06      	cmp	r6, #6
 8084bee:	d822      	bhi.n	8084c36 <_strtod_r+0xf6>
 8084bf0:	e8df f006 	tbb	[pc, r6]
 8084bf4:	18080d04 	.word	0x18080d04
 8084bf8:	0d1d      	.short	0x0d1d
 8084bfa:	04          	.byte	0x04
 8084bfb:	00          	.byte	0x00
 8084bfc:	f04f 0900 	mov.w	r9, #0
 8084c00:	46c8      	mov	r8, r9
 8084c02:	e018      	b.n	8084c36 <_strtod_r+0xf6>
 8084c04:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084c08:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8084c0c:	e013      	b.n	8084c36 <_strtod_r+0xf6>
 8084c0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084c10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8084c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8084c16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8084c1a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084c1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8084c22:	e008      	b.n	8084c36 <_strtod_r+0xf6>
 8084c24:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8084e54 <_strtod_r+0x314>
 8084c28:	f04f 0800 	mov.w	r8, #0
 8084c2c:	e003      	b.n	8084c36 <_strtod_r+0xf6>
 8084c2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8084c32:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8084c36:	0721      	lsls	r1, r4, #28
 8084c38:	f140 854b 	bpl.w	80856d2 <_strtod_r+0xb92>
 8084c3c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8084c40:	f000 bd47 	b.w	80856d2 <_strtod_r+0xb92>
 8084c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084c46:	1c5a      	adds	r2, r3, #1
 8084c48:	9217      	str	r2, [sp, #92]	; 0x5c
 8084c4a:	785b      	ldrb	r3, [r3, #1]
 8084c4c:	2b30      	cmp	r3, #48	; 0x30
 8084c4e:	d0f9      	beq.n	8084c44 <_strtod_r+0x104>
 8084c50:	2b00      	cmp	r3, #0
 8084c52:	f000 853e 	beq.w	80856d2 <_strtod_r+0xb92>
 8084c56:	2301      	movs	r3, #1
 8084c58:	e000      	b.n	8084c5c <_strtod_r+0x11c>
 8084c5a:	2300      	movs	r3, #0
 8084c5c:	9305      	str	r3, [sp, #20]
 8084c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084c60:	220a      	movs	r2, #10
 8084c62:	9306      	str	r3, [sp, #24]
 8084c64:	2300      	movs	r3, #0
 8084c66:	469b      	mov	fp, r3
 8084c68:	9302      	str	r3, [sp, #8]
 8084c6a:	9304      	str	r3, [sp, #16]
 8084c6c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8084c6e:	782e      	ldrb	r6, [r5, #0]
 8084c70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8084c74:	b2d9      	uxtb	r1, r3
 8084c76:	2909      	cmp	r1, #9
 8084c78:	d811      	bhi.n	8084c9e <_strtod_r+0x15e>
 8084c7a:	f1bb 0f08 	cmp.w	fp, #8
 8084c7e:	bfd5      	itete	le
 8084c80:	9904      	ldrle	r1, [sp, #16]
 8084c82:	9902      	ldrgt	r1, [sp, #8]
 8084c84:	fb02 3301 	mlale	r3, r2, r1, r3
 8084c88:	fb02 3301 	mlagt	r3, r2, r1, r3
 8084c8c:	f105 0501 	add.w	r5, r5, #1
 8084c90:	bfd4      	ite	le
 8084c92:	9304      	strle	r3, [sp, #16]
 8084c94:	9302      	strgt	r3, [sp, #8]
 8084c96:	f10b 0b01 	add.w	fp, fp, #1
 8084c9a:	9517      	str	r5, [sp, #92]	; 0x5c
 8084c9c:	e7e6      	b.n	8084c6c <_strtod_r+0x12c>
 8084c9e:	4650      	mov	r0, sl
 8084ca0:	f7ff fe68 	bl	8084974 <_localeconv_r>
 8084ca4:	6807      	ldr	r7, [r0, #0]
 8084ca6:	4650      	mov	r0, sl
 8084ca8:	f7ff fe64 	bl	8084974 <_localeconv_r>
 8084cac:	6800      	ldr	r0, [r0, #0]
 8084cae:	f7ff fedc 	bl	8084a6a <strlen>
 8084cb2:	4639      	mov	r1, r7
 8084cb4:	4602      	mov	r2, r0
 8084cb6:	4628      	mov	r0, r5
 8084cb8:	f7ff fedf 	bl	8084a7a <strncmp>
 8084cbc:	4607      	mov	r7, r0
 8084cbe:	b128      	cbz	r0, 8084ccc <_strtod_r+0x18c>
 8084cc0:	2000      	movs	r0, #0
 8084cc2:	4633      	mov	r3, r6
 8084cc4:	465d      	mov	r5, fp
 8084cc6:	4602      	mov	r2, r0
 8084cc8:	4601      	mov	r1, r0
 8084cca:	e05a      	b.n	8084d82 <_strtod_r+0x242>
 8084ccc:	4650      	mov	r0, sl
 8084cce:	f7ff fe51 	bl	8084974 <_localeconv_r>
 8084cd2:	6800      	ldr	r0, [r0, #0]
 8084cd4:	f7ff fec9 	bl	8084a6a <strlen>
 8084cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084cda:	181a      	adds	r2, r3, r0
 8084cdc:	9217      	str	r2, [sp, #92]	; 0x5c
 8084cde:	5c1b      	ldrb	r3, [r3, r0]
 8084ce0:	f1bb 0f00 	cmp.w	fp, #0
 8084ce4:	d145      	bne.n	8084d72 <_strtod_r+0x232>
 8084ce6:	4658      	mov	r0, fp
 8084ce8:	2b30      	cmp	r3, #48	; 0x30
 8084cea:	d105      	bne.n	8084cf8 <_strtod_r+0x1b8>
 8084cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084cee:	3001      	adds	r0, #1
 8084cf0:	1c5a      	adds	r2, r3, #1
 8084cf2:	9217      	str	r2, [sp, #92]	; 0x5c
 8084cf4:	785b      	ldrb	r3, [r3, #1]
 8084cf6:	e7f7      	b.n	8084ce8 <_strtod_r+0x1a8>
 8084cf8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8084cfc:	2a08      	cmp	r2, #8
 8084cfe:	d846      	bhi.n	8084d8e <_strtod_r+0x24e>
 8084d00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8084d02:	9206      	str	r2, [sp, #24]
 8084d04:	4602      	mov	r2, r0
 8084d06:	2000      	movs	r0, #0
 8084d08:	4605      	mov	r5, r0
 8084d0a:	3b30      	subs	r3, #48	; 0x30
 8084d0c:	f100 0101 	add.w	r1, r0, #1
 8084d10:	d029      	beq.n	8084d66 <_strtod_r+0x226>
 8084d12:	440a      	add	r2, r1
 8084d14:	4629      	mov	r1, r5
 8084d16:	eb05 0c00 	add.w	ip, r5, r0
 8084d1a:	260a      	movs	r6, #10
 8084d1c:	4561      	cmp	r1, ip
 8084d1e:	d00f      	beq.n	8084d40 <_strtod_r+0x200>
 8084d20:	3101      	adds	r1, #1
 8084d22:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8084d26:	f1be 0f08 	cmp.w	lr, #8
 8084d2a:	dc03      	bgt.n	8084d34 <_strtod_r+0x1f4>
 8084d2c:	9f04      	ldr	r7, [sp, #16]
 8084d2e:	4377      	muls	r7, r6
 8084d30:	9704      	str	r7, [sp, #16]
 8084d32:	e7f3      	b.n	8084d1c <_strtod_r+0x1dc>
 8084d34:	2910      	cmp	r1, #16
 8084d36:	bfde      	ittt	le
 8084d38:	9f02      	ldrle	r7, [sp, #8]
 8084d3a:	4377      	mulle	r7, r6
 8084d3c:	9702      	strle	r7, [sp, #8]
 8084d3e:	e7ed      	b.n	8084d1c <_strtod_r+0x1dc>
 8084d40:	4428      	add	r0, r5
 8084d42:	2808      	cmp	r0, #8
 8084d44:	f100 0501 	add.w	r5, r0, #1
 8084d48:	dc05      	bgt.n	8084d56 <_strtod_r+0x216>
 8084d4a:	9804      	ldr	r0, [sp, #16]
 8084d4c:	210a      	movs	r1, #10
 8084d4e:	fb01 3300 	mla	r3, r1, r0, r3
 8084d52:	9304      	str	r3, [sp, #16]
 8084d54:	e006      	b.n	8084d64 <_strtod_r+0x224>
 8084d56:	2d10      	cmp	r5, #16
 8084d58:	bfdf      	itttt	le
 8084d5a:	9802      	ldrle	r0, [sp, #8]
 8084d5c:	210a      	movle	r1, #10
 8084d5e:	fb01 3300 	mlale	r3, r1, r0, r3
 8084d62:	9302      	strle	r3, [sp, #8]
 8084d64:	2100      	movs	r1, #0
 8084d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084d68:	1c58      	adds	r0, r3, #1
 8084d6a:	9017      	str	r0, [sp, #92]	; 0x5c
 8084d6c:	785b      	ldrb	r3, [r3, #1]
 8084d6e:	4608      	mov	r0, r1
 8084d70:	e002      	b.n	8084d78 <_strtod_r+0x238>
 8084d72:	465d      	mov	r5, fp
 8084d74:	4638      	mov	r0, r7
 8084d76:	463a      	mov	r2, r7
 8084d78:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8084d7c:	2909      	cmp	r1, #9
 8084d7e:	d9c4      	bls.n	8084d0a <_strtod_r+0x1ca>
 8084d80:	2101      	movs	r1, #1
 8084d82:	2b65      	cmp	r3, #101	; 0x65
 8084d84:	d001      	beq.n	8084d8a <_strtod_r+0x24a>
 8084d86:	2b45      	cmp	r3, #69	; 0x45
 8084d88:	d14f      	bne.n	8084e2a <_strtod_r+0x2ea>
 8084d8a:	b96d      	cbnz	r5, 8084da8 <_strtod_r+0x268>
 8084d8c:	e004      	b.n	8084d98 <_strtod_r+0x258>
 8084d8e:	2b65      	cmp	r3, #101	; 0x65
 8084d90:	f040 84ad 	bne.w	80856ee <_strtod_r+0xbae>
 8084d94:	2200      	movs	r2, #0
 8084d96:	2101      	movs	r1, #1
 8084d98:	b928      	cbnz	r0, 8084da6 <_strtod_r+0x266>
 8084d9a:	9b05      	ldr	r3, [sp, #20]
 8084d9c:	2b00      	cmp	r3, #0
 8084d9e:	f000 8092 	beq.w	8084ec6 <_strtod_r+0x386>
 8084da2:	4605      	mov	r5, r0
 8084da4:	e000      	b.n	8084da8 <_strtod_r+0x268>
 8084da6:	2500      	movs	r5, #0
 8084da8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8084daa:	1c63      	adds	r3, r4, #1
 8084dac:	9317      	str	r3, [sp, #92]	; 0x5c
 8084dae:	7863      	ldrb	r3, [r4, #1]
 8084db0:	2b2b      	cmp	r3, #43	; 0x2b
 8084db2:	d006      	beq.n	8084dc2 <_strtod_r+0x282>
 8084db4:	2b2d      	cmp	r3, #45	; 0x2d
 8084db6:	d002      	beq.n	8084dbe <_strtod_r+0x27e>
 8084db8:	2600      	movs	r6, #0
 8084dba:	9603      	str	r6, [sp, #12]
 8084dbc:	e006      	b.n	8084dcc <_strtod_r+0x28c>
 8084dbe:	2301      	movs	r3, #1
 8084dc0:	e000      	b.n	8084dc4 <_strtod_r+0x284>
 8084dc2:	2300      	movs	r3, #0
 8084dc4:	9303      	str	r3, [sp, #12]
 8084dc6:	1ca3      	adds	r3, r4, #2
 8084dc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8084dca:	78a3      	ldrb	r3, [r4, #2]
 8084dcc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8084dd0:	2e09      	cmp	r6, #9
 8084dd2:	d829      	bhi.n	8084e28 <_strtod_r+0x2e8>
 8084dd4:	2b30      	cmp	r3, #48	; 0x30
 8084dd6:	d104      	bne.n	8084de2 <_strtod_r+0x2a2>
 8084dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084dda:	1c5e      	adds	r6, r3, #1
 8084ddc:	9617      	str	r6, [sp, #92]	; 0x5c
 8084dde:	785b      	ldrb	r3, [r3, #1]
 8084de0:	e7f8      	b.n	8084dd4 <_strtod_r+0x294>
 8084de2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8084de6:	2e08      	cmp	r6, #8
 8084de8:	d81f      	bhi.n	8084e2a <_strtod_r+0x2ea>
 8084dea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8084dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084df0:	461f      	mov	r7, r3
 8084df2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084df4:	1c5e      	adds	r6, r3, #1
 8084df6:	9617      	str	r6, [sp, #92]	; 0x5c
 8084df8:	785b      	ldrb	r3, [r3, #1]
 8084dfa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8084dfe:	f1bc 0f09 	cmp.w	ip, #9
 8084e02:	d805      	bhi.n	8084e10 <_strtod_r+0x2d0>
 8084e04:	260a      	movs	r6, #10
 8084e06:	fb06 3e0e 	mla	lr, r6, lr, r3
 8084e0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8084e0e:	e7f0      	b.n	8084df2 <_strtod_r+0x2b2>
 8084e10:	1bf6      	subs	r6, r6, r7
 8084e12:	2e08      	cmp	r6, #8
 8084e14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8084e18:	dc02      	bgt.n	8084e20 <_strtod_r+0x2e0>
 8084e1a:	4576      	cmp	r6, lr
 8084e1c:	bfa8      	it	ge
 8084e1e:	4676      	movge	r6, lr
 8084e20:	9f03      	ldr	r7, [sp, #12]
 8084e22:	b11f      	cbz	r7, 8084e2c <_strtod_r+0x2ec>
 8084e24:	4276      	negs	r6, r6
 8084e26:	e001      	b.n	8084e2c <_strtod_r+0x2ec>
 8084e28:	9417      	str	r4, [sp, #92]	; 0x5c
 8084e2a:	2600      	movs	r6, #0
 8084e2c:	2d00      	cmp	r5, #0
 8084e2e:	d152      	bne.n	8084ed6 <_strtod_r+0x396>
 8084e30:	2800      	cmp	r0, #0
 8084e32:	f040 844e 	bne.w	80856d2 <_strtod_r+0xb92>
 8084e36:	9a05      	ldr	r2, [sp, #20]
 8084e38:	2a00      	cmp	r2, #0
 8084e3a:	f040 844a 	bne.w	80856d2 <_strtod_r+0xb92>
 8084e3e:	2900      	cmp	r1, #0
 8084e40:	d141      	bne.n	8084ec6 <_strtod_r+0x386>
 8084e42:	2b4e      	cmp	r3, #78	; 0x4e
 8084e44:	d020      	beq.n	8084e88 <_strtod_r+0x348>
 8084e46:	dc07      	bgt.n	8084e58 <_strtod_r+0x318>
 8084e48:	2b49      	cmp	r3, #73	; 0x49
 8084e4a:	d00a      	beq.n	8084e62 <_strtod_r+0x322>
 8084e4c:	e03b      	b.n	8084ec6 <_strtod_r+0x386>
 8084e4e:	bf00      	nop
 8084e50:	08087504 	.word	0x08087504
 8084e54:	7ff00000 	.word	0x7ff00000
 8084e58:	2b69      	cmp	r3, #105	; 0x69
 8084e5a:	d002      	beq.n	8084e62 <_strtod_r+0x322>
 8084e5c:	2b6e      	cmp	r3, #110	; 0x6e
 8084e5e:	d013      	beq.n	8084e88 <_strtod_r+0x348>
 8084e60:	e031      	b.n	8084ec6 <_strtod_r+0x386>
 8084e62:	49aa      	ldr	r1, [pc, #680]	; (808510c <_strtod_r+0x5cc>)
 8084e64:	a817      	add	r0, sp, #92	; 0x5c
 8084e66:	f001 fa37 	bl	80862d8 <__match>
 8084e6a:	b360      	cbz	r0, 8084ec6 <_strtod_r+0x386>
 8084e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084e6e:	49a8      	ldr	r1, [pc, #672]	; (8085110 <_strtod_r+0x5d0>)
 8084e70:	3b01      	subs	r3, #1
 8084e72:	a817      	add	r0, sp, #92	; 0x5c
 8084e74:	9317      	str	r3, [sp, #92]	; 0x5c
 8084e76:	f001 fa2f 	bl	80862d8 <__match>
 8084e7a:	b910      	cbnz	r0, 8084e82 <_strtod_r+0x342>
 8084e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084e7e:	3301      	adds	r3, #1
 8084e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8084e82:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808512c <_strtod_r+0x5ec>
 8084e86:	e01a      	b.n	8084ebe <_strtod_r+0x37e>
 8084e88:	49a2      	ldr	r1, [pc, #648]	; (8085114 <_strtod_r+0x5d4>)
 8084e8a:	a817      	add	r0, sp, #92	; 0x5c
 8084e8c:	f001 fa24 	bl	80862d8 <__match>
 8084e90:	b1c8      	cbz	r0, 8084ec6 <_strtod_r+0x386>
 8084e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084e94:	781b      	ldrb	r3, [r3, #0]
 8084e96:	2b28      	cmp	r3, #40	; 0x28
 8084e98:	d10f      	bne.n	8084eba <_strtod_r+0x37a>
 8084e9a:	aa1a      	add	r2, sp, #104	; 0x68
 8084e9c:	499e      	ldr	r1, [pc, #632]	; (8085118 <_strtod_r+0x5d8>)
 8084e9e:	a817      	add	r0, sp, #92	; 0x5c
 8084ea0:	f001 fa2d 	bl	80862fe <__hexnan>
 8084ea4:	2805      	cmp	r0, #5
 8084ea6:	d108      	bne.n	8084eba <_strtod_r+0x37a>
 8084ea8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084eaa:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084eae:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8084eb2:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8084eb6:	f000 bc0c 	b.w	80856d2 <_strtod_r+0xb92>
 8084eba:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8085130 <_strtod_r+0x5f0>
 8084ebe:	f04f 0800 	mov.w	r8, #0
 8084ec2:	f000 bc06 	b.w	80856d2 <_strtod_r+0xb92>
 8084ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8084ec8:	9417      	str	r4, [sp, #92]	; 0x5c
 8084eca:	2b00      	cmp	r3, #0
 8084ecc:	f000 840c 	beq.w	80856e8 <_strtod_r+0xba8>
 8084ed0:	2300      	movs	r3, #0
 8084ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8084ed4:	e3ff      	b.n	80856d6 <_strtod_r+0xb96>
 8084ed6:	462c      	mov	r4, r5
 8084ed8:	f1bb 0f00 	cmp.w	fp, #0
 8084edc:	bf08      	it	eq
 8084ede:	46ab      	moveq	fp, r5
 8084ee0:	9804      	ldr	r0, [sp, #16]
 8084ee2:	2d10      	cmp	r5, #16
 8084ee4:	bfa8      	it	ge
 8084ee6:	2410      	movge	r4, #16
 8084ee8:	1ab7      	subs	r7, r6, r2
 8084eea:	f7fe fd59 	bl	80839a0 <__aeabi_ui2d>
 8084eee:	2c09      	cmp	r4, #9
 8084ef0:	4680      	mov	r8, r0
 8084ef2:	4689      	mov	r9, r1
 8084ef4:	dd13      	ble.n	8084f1e <_strtod_r+0x3de>
 8084ef6:	4b89      	ldr	r3, [pc, #548]	; (808511c <_strtod_r+0x5dc>)
 8084ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8084efc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8084f00:	f7fe fdc4 	bl	8083a8c <__aeabi_dmul>
 8084f04:	4680      	mov	r8, r0
 8084f06:	9802      	ldr	r0, [sp, #8]
 8084f08:	4689      	mov	r9, r1
 8084f0a:	f7fe fd49 	bl	80839a0 <__aeabi_ui2d>
 8084f0e:	4602      	mov	r2, r0
 8084f10:	460b      	mov	r3, r1
 8084f12:	4640      	mov	r0, r8
 8084f14:	4649      	mov	r1, r9
 8084f16:	f7fe fc07 	bl	8083728 <__adddf3>
 8084f1a:	4680      	mov	r8, r0
 8084f1c:	4689      	mov	r9, r1
 8084f1e:	2d0f      	cmp	r5, #15
 8084f20:	dc33      	bgt.n	8084f8a <_strtod_r+0x44a>
 8084f22:	2f00      	cmp	r7, #0
 8084f24:	f000 83d5 	beq.w	80856d2 <_strtod_r+0xb92>
 8084f28:	dd22      	ble.n	8084f70 <_strtod_r+0x430>
 8084f2a:	2f16      	cmp	r7, #22
 8084f2c:	dc07      	bgt.n	8084f3e <_strtod_r+0x3fe>
 8084f2e:	4d7b      	ldr	r5, [pc, #492]	; (808511c <_strtod_r+0x5dc>)
 8084f30:	4642      	mov	r2, r8
 8084f32:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8084f36:	464b      	mov	r3, r9
 8084f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084f3c:	e013      	b.n	8084f66 <_strtod_r+0x426>
 8084f3e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8084f42:	429f      	cmp	r7, r3
 8084f44:	dc21      	bgt.n	8084f8a <_strtod_r+0x44a>
 8084f46:	4c75      	ldr	r4, [pc, #468]	; (808511c <_strtod_r+0x5dc>)
 8084f48:	f1c5 050f 	rsb	r5, r5, #15
 8084f4c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8084f50:	1b7d      	subs	r5, r7, r5
 8084f52:	4642      	mov	r2, r8
 8084f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084f58:	464b      	mov	r3, r9
 8084f5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8084f5e:	f7fe fd95 	bl	8083a8c <__aeabi_dmul>
 8084f62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084f66:	f7fe fd91 	bl	8083a8c <__aeabi_dmul>
 8084f6a:	4680      	mov	r8, r0
 8084f6c:	4689      	mov	r9, r1
 8084f6e:	e3b0      	b.n	80856d2 <_strtod_r+0xb92>
 8084f70:	f117 0f16 	cmn.w	r7, #22
 8084f74:	db09      	blt.n	8084f8a <_strtod_r+0x44a>
 8084f76:	4d69      	ldr	r5, [pc, #420]	; (808511c <_strtod_r+0x5dc>)
 8084f78:	4640      	mov	r0, r8
 8084f7a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 8084f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084f82:	4649      	mov	r1, r9
 8084f84:	f7fe feac 	bl	8083ce0 <__aeabi_ddiv>
 8084f88:	e7ef      	b.n	8084f6a <_strtod_r+0x42a>
 8084f8a:	1b2c      	subs	r4, r5, r4
 8084f8c:	443c      	add	r4, r7
 8084f8e:	2c00      	cmp	r4, #0
 8084f90:	dd5d      	ble.n	808504e <_strtod_r+0x50e>
 8084f92:	f014 010f 	ands.w	r1, r4, #15
 8084f96:	d00a      	beq.n	8084fae <_strtod_r+0x46e>
 8084f98:	4b60      	ldr	r3, [pc, #384]	; (808511c <_strtod_r+0x5dc>)
 8084f9a:	4642      	mov	r2, r8
 8084f9c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8084fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084fa4:	464b      	mov	r3, r9
 8084fa6:	f7fe fd71 	bl	8083a8c <__aeabi_dmul>
 8084faa:	4680      	mov	r8, r0
 8084fac:	4689      	mov	r9, r1
 8084fae:	f034 040f 	bics.w	r4, r4, #15
 8084fb2:	f000 80c1 	beq.w	8085138 <_strtod_r+0x5f8>
 8084fb6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8084fba:	dd0f      	ble.n	8084fdc <_strtod_r+0x49c>
 8084fbc:	f04f 0b00 	mov.w	fp, #0
 8084fc0:	f8cd b008 	str.w	fp, [sp, #8]
 8084fc4:	f8cd b014 	str.w	fp, [sp, #20]
 8084fc8:	f8cd b010 	str.w	fp, [sp, #16]
 8084fcc:	2322      	movs	r3, #34	; 0x22
 8084fce:	f8ca 3000 	str.w	r3, [sl]
 8084fd2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808512c <_strtod_r+0x5ec>
 8084fd6:	f04f 0800 	mov.w	r8, #0
 8084fda:	e189      	b.n	80852f0 <_strtod_r+0x7b0>
 8084fdc:	4640      	mov	r0, r8
 8084fde:	4649      	mov	r1, r9
 8084fe0:	2300      	movs	r3, #0
 8084fe2:	4e4f      	ldr	r6, [pc, #316]	; (8085120 <_strtod_r+0x5e0>)
 8084fe4:	1124      	asrs	r4, r4, #4
 8084fe6:	9302      	str	r3, [sp, #8]
 8084fe8:	2c01      	cmp	r4, #1
 8084fea:	dd0c      	ble.n	8085006 <_strtod_r+0x4c6>
 8084fec:	07e2      	lsls	r2, r4, #31
 8084fee:	d504      	bpl.n	8084ffa <_strtod_r+0x4ba>
 8084ff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8084ff4:	f7fe fd4a 	bl	8083a8c <__aeabi_dmul>
 8084ff8:	2301      	movs	r3, #1
 8084ffa:	9a02      	ldr	r2, [sp, #8]
 8084ffc:	1064      	asrs	r4, r4, #1
 8084ffe:	3201      	adds	r2, #1
 8085000:	9202      	str	r2, [sp, #8]
 8085002:	3608      	adds	r6, #8
 8085004:	e7f0      	b.n	8084fe8 <_strtod_r+0x4a8>
 8085006:	b10b      	cbz	r3, 808500c <_strtod_r+0x4cc>
 8085008:	4680      	mov	r8, r0
 808500a:	4689      	mov	r9, r1
 808500c:	4b44      	ldr	r3, [pc, #272]	; (8085120 <_strtod_r+0x5e0>)
 808500e:	9a02      	ldr	r2, [sp, #8]
 8085010:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8085014:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8085018:	e9d1 0100 	ldrd	r0, r1, [r1]
 808501c:	4642      	mov	r2, r8
 808501e:	464b      	mov	r3, r9
 8085020:	f7fe fd34 	bl	8083a8c <__aeabi_dmul>
 8085024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8085028:	4689      	mov	r9, r1
 808502a:	460a      	mov	r2, r1
 808502c:	0d1b      	lsrs	r3, r3, #20
 808502e:	493d      	ldr	r1, [pc, #244]	; (8085124 <_strtod_r+0x5e4>)
 8085030:	051b      	lsls	r3, r3, #20
 8085032:	428b      	cmp	r3, r1
 8085034:	4680      	mov	r8, r0
 8085036:	d8c1      	bhi.n	8084fbc <_strtod_r+0x47c>
 8085038:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808503c:	428b      	cmp	r3, r1
 808503e:	bf86      	itte	hi
 8085040:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 8085134 <_strtod_r+0x5f4>
 8085044:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8085048:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808504c:	e074      	b.n	8085138 <_strtod_r+0x5f8>
 808504e:	d073      	beq.n	8085138 <_strtod_r+0x5f8>
 8085050:	4264      	negs	r4, r4
 8085052:	f014 020f 	ands.w	r2, r4, #15
 8085056:	d00a      	beq.n	808506e <_strtod_r+0x52e>
 8085058:	4b30      	ldr	r3, [pc, #192]	; (808511c <_strtod_r+0x5dc>)
 808505a:	4640      	mov	r0, r8
 808505c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8085060:	4649      	mov	r1, r9
 8085062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085066:	f7fe fe3b 	bl	8083ce0 <__aeabi_ddiv>
 808506a:	4680      	mov	r8, r0
 808506c:	4689      	mov	r9, r1
 808506e:	1124      	asrs	r4, r4, #4
 8085070:	d062      	beq.n	8085138 <_strtod_r+0x5f8>
 8085072:	2c1f      	cmp	r4, #31
 8085074:	dd08      	ble.n	8085088 <_strtod_r+0x548>
 8085076:	f04f 0b00 	mov.w	fp, #0
 808507a:	f8cd b008 	str.w	fp, [sp, #8]
 808507e:	f8cd b014 	str.w	fp, [sp, #20]
 8085082:	f8cd b010 	str.w	fp, [sp, #16]
 8085086:	e12c      	b.n	80852e2 <_strtod_r+0x7a2>
 8085088:	4640      	mov	r0, r8
 808508a:	4649      	mov	r1, r9
 808508c:	f014 0f10 	tst.w	r4, #16
 8085090:	bf0c      	ite	eq
 8085092:	2300      	moveq	r3, #0
 8085094:	236a      	movne	r3, #106	; 0x6a
 8085096:	4e24      	ldr	r6, [pc, #144]	; (8085128 <_strtod_r+0x5e8>)
 8085098:	9303      	str	r3, [sp, #12]
 808509a:	2300      	movs	r3, #0
 808509c:	2c00      	cmp	r4, #0
 808509e:	dd09      	ble.n	80850b4 <_strtod_r+0x574>
 80850a0:	07e2      	lsls	r2, r4, #31
 80850a2:	d504      	bpl.n	80850ae <_strtod_r+0x56e>
 80850a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80850a8:	f7fe fcf0 	bl	8083a8c <__aeabi_dmul>
 80850ac:	2301      	movs	r3, #1
 80850ae:	1064      	asrs	r4, r4, #1
 80850b0:	3608      	adds	r6, #8
 80850b2:	e7f3      	b.n	808509c <_strtod_r+0x55c>
 80850b4:	b10b      	cbz	r3, 80850ba <_strtod_r+0x57a>
 80850b6:	4680      	mov	r8, r0
 80850b8:	4689      	mov	r9, r1
 80850ba:	9b03      	ldr	r3, [sp, #12]
 80850bc:	b1eb      	cbz	r3, 80850fa <_strtod_r+0x5ba>
 80850be:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80850c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80850c6:	2b00      	cmp	r3, #0
 80850c8:	4649      	mov	r1, r9
 80850ca:	dd16      	ble.n	80850fa <_strtod_r+0x5ba>
 80850cc:	2b1f      	cmp	r3, #31
 80850ce:	dd0e      	ble.n	80850ee <_strtod_r+0x5ae>
 80850d0:	2b34      	cmp	r3, #52	; 0x34
 80850d2:	bfde      	ittt	le
 80850d4:	3b20      	suble	r3, #32
 80850d6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80850da:	fa02 f303 	lslle.w	r3, r2, r3
 80850de:	f04f 0800 	mov.w	r8, #0
 80850e2:	bfcc      	ite	gt
 80850e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80850e8:	ea03 0901 	andle.w	r9, r3, r1
 80850ec:	e005      	b.n	80850fa <_strtod_r+0x5ba>
 80850ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80850f2:	fa02 f303 	lsl.w	r3, r2, r3
 80850f6:	ea03 0808 	and.w	r8, r3, r8
 80850fa:	2200      	movs	r2, #0
 80850fc:	2300      	movs	r3, #0
 80850fe:	4640      	mov	r0, r8
 8085100:	4649      	mov	r1, r9
 8085102:	f7fe ff2b 	bl	8083f5c <__aeabi_dcmpeq>
 8085106:	2800      	cmp	r0, #0
 8085108:	d1b5      	bne.n	8085076 <_strtod_r+0x536>
 808510a:	e017      	b.n	808513c <_strtod_r+0x5fc>
 808510c:	08087518 	.word	0x08087518
 8085110:	0808751b 	.word	0x0808751b
 8085114:	08087521 	.word	0x08087521
 8085118:	08087524 	.word	0x08087524
 808511c:	080875a0 	.word	0x080875a0
 8085120:	08087668 	.word	0x08087668
 8085124:	7ca00000 	.word	0x7ca00000
 8085128:	08087538 	.word	0x08087538
 808512c:	7ff00000 	.word	0x7ff00000
 8085130:	fff80000 	.word	0xfff80000
 8085134:	7fefffff 	.word	0x7fefffff
 8085138:	2300      	movs	r3, #0
 808513a:	9303      	str	r3, [sp, #12]
 808513c:	9b04      	ldr	r3, [sp, #16]
 808513e:	465a      	mov	r2, fp
 8085140:	9300      	str	r3, [sp, #0]
 8085142:	9906      	ldr	r1, [sp, #24]
 8085144:	462b      	mov	r3, r5
 8085146:	4650      	mov	r0, sl
 8085148:	f001 facd 	bl	80866e6 <__s2b>
 808514c:	9005      	str	r0, [sp, #20]
 808514e:	2800      	cmp	r0, #0
 8085150:	f43f af34 	beq.w	8084fbc <_strtod_r+0x47c>
 8085154:	2f00      	cmp	r7, #0
 8085156:	f1c7 0300 	rsb	r3, r7, #0
 808515a:	bfa8      	it	ge
 808515c:	2300      	movge	r3, #0
 808515e:	930d      	str	r3, [sp, #52]	; 0x34
 8085160:	f04f 0b00 	mov.w	fp, #0
 8085164:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8085168:	9312      	str	r3, [sp, #72]	; 0x48
 808516a:	f8cd b008 	str.w	fp, [sp, #8]
 808516e:	9b05      	ldr	r3, [sp, #20]
 8085170:	4650      	mov	r0, sl
 8085172:	6859      	ldr	r1, [r3, #4]
 8085174:	f001 fa30 	bl	80865d8 <_Balloc>
 8085178:	9004      	str	r0, [sp, #16]
 808517a:	2800      	cmp	r0, #0
 808517c:	f43f af26 	beq.w	8084fcc <_strtod_r+0x48c>
 8085180:	9b05      	ldr	r3, [sp, #20]
 8085182:	300c      	adds	r0, #12
 8085184:	691a      	ldr	r2, [r3, #16]
 8085186:	f103 010c 	add.w	r1, r3, #12
 808518a:	3202      	adds	r2, #2
 808518c:	0092      	lsls	r2, r2, #2
 808518e:	f7ff fbf5 	bl	808497c <memcpy>
 8085192:	ab1a      	add	r3, sp, #104	; 0x68
 8085194:	9301      	str	r3, [sp, #4]
 8085196:	ab19      	add	r3, sp, #100	; 0x64
 8085198:	9300      	str	r3, [sp, #0]
 808519a:	4642      	mov	r2, r8
 808519c:	464b      	mov	r3, r9
 808519e:	4650      	mov	r0, sl
 80851a0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80851a4:	f001 fd4f 	bl	8086c46 <__d2b>
 80851a8:	9018      	str	r0, [sp, #96]	; 0x60
 80851aa:	2800      	cmp	r0, #0
 80851ac:	f43f af0e 	beq.w	8084fcc <_strtod_r+0x48c>
 80851b0:	2101      	movs	r1, #1
 80851b2:	4650      	mov	r0, sl
 80851b4:	f001 fb22 	bl	80867fc <__i2b>
 80851b8:	9002      	str	r0, [sp, #8]
 80851ba:	2800      	cmp	r0, #0
 80851bc:	f43f af06 	beq.w	8084fcc <_strtod_r+0x48c>
 80851c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80851c2:	9903      	ldr	r1, [sp, #12]
 80851c4:	2b00      	cmp	r3, #0
 80851c6:	bfac      	ite	ge
 80851c8:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80851ca:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80851cc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80851ce:	bfac      	ite	ge
 80851d0:	18d6      	addge	r6, r2, r3
 80851d2:	1ad2      	sublt	r2, r2, r3
 80851d4:	eba3 0301 	sub.w	r3, r3, r1
 80851d8:	4423      	add	r3, r4
 80851da:	49b1      	ldr	r1, [pc, #708]	; (80854a0 <_strtod_r+0x960>)
 80851dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80851e0:	bfac      	ite	ge
 80851e2:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80851e4:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80851e6:	428b      	cmp	r3, r1
 80851e8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80851ec:	f280 8085 	bge.w	80852fa <_strtod_r+0x7ba>
 80851f0:	1ac9      	subs	r1, r1, r3
 80851f2:	291f      	cmp	r1, #31
 80851f4:	bfc8      	it	gt
 80851f6:	4dab      	ldrgt	r5, [pc, #684]	; (80854a4 <_strtod_r+0x964>)
 80851f8:	f04f 0701 	mov.w	r7, #1
 80851fc:	bfd4      	ite	le
 80851fe:	fa07 f301 	lslle.w	r3, r7, r1
 8085202:	1aed      	subgt	r5, r5, r3
 8085204:	eba4 0401 	sub.w	r4, r4, r1
 8085208:	bfd9      	ittee	le
 808520a:	9307      	strle	r3, [sp, #28]
 808520c:	2500      	movle	r5, #0
 808520e:	fa07 f505 	lslgt.w	r5, r7, r5
 8085212:	9707      	strgt	r7, [sp, #28]
 8085214:	1937      	adds	r7, r6, r4
 8085216:	9b03      	ldr	r3, [sp, #12]
 8085218:	42be      	cmp	r6, r7
 808521a:	4414      	add	r4, r2
 808521c:	441c      	add	r4, r3
 808521e:	4633      	mov	r3, r6
 8085220:	bfa8      	it	ge
 8085222:	463b      	movge	r3, r7
 8085224:	42a3      	cmp	r3, r4
 8085226:	bfa8      	it	ge
 8085228:	4623      	movge	r3, r4
 808522a:	2b00      	cmp	r3, #0
 808522c:	bfc2      	ittt	gt
 808522e:	1aff      	subgt	r7, r7, r3
 8085230:	1ae4      	subgt	r4, r4, r3
 8085232:	1af6      	subgt	r6, r6, r3
 8085234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8085236:	2b00      	cmp	r3, #0
 8085238:	d163      	bne.n	8085302 <_strtod_r+0x7c2>
 808523a:	2f00      	cmp	r7, #0
 808523c:	dc7a      	bgt.n	8085334 <_strtod_r+0x7f4>
 808523e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8085240:	2b00      	cmp	r3, #0
 8085242:	f040 8081 	bne.w	8085348 <_strtod_r+0x808>
 8085246:	2c00      	cmp	r4, #0
 8085248:	f300 8088 	bgt.w	808535c <_strtod_r+0x81c>
 808524c:	2e00      	cmp	r6, #0
 808524e:	f300 808f 	bgt.w	8085370 <_strtod_r+0x830>
 8085252:	9a04      	ldr	r2, [sp, #16]
 8085254:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085256:	4650      	mov	r0, sl
 8085258:	f001 fc25 	bl	8086aa6 <__mdiff>
 808525c:	4683      	mov	fp, r0
 808525e:	2800      	cmp	r0, #0
 8085260:	f43f aeb4 	beq.w	8084fcc <_strtod_r+0x48c>
 8085264:	68c3      	ldr	r3, [r0, #12]
 8085266:	2400      	movs	r4, #0
 8085268:	60c4      	str	r4, [r0, #12]
 808526a:	9902      	ldr	r1, [sp, #8]
 808526c:	9306      	str	r3, [sp, #24]
 808526e:	f001 fbfe 	bl	8086a6e <__mcmp>
 8085272:	42a0      	cmp	r0, r4
 8085274:	f280 808b 	bge.w	808538e <_strtod_r+0x84e>
 8085278:	9b06      	ldr	r3, [sp, #24]
 808527a:	2b00      	cmp	r3, #0
 808527c:	f040 8202 	bne.w	8085684 <_strtod_r+0xb44>
 8085280:	f1b8 0f00 	cmp.w	r8, #0
 8085284:	f040 81fe 	bne.w	8085684 <_strtod_r+0xb44>
 8085288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808528c:	2b00      	cmp	r3, #0
 808528e:	f040 81f9 	bne.w	8085684 <_strtod_r+0xb44>
 8085292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8085296:	0d1b      	lsrs	r3, r3, #20
 8085298:	051b      	lsls	r3, r3, #20
 808529a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808529e:	f240 81f1 	bls.w	8085684 <_strtod_r+0xb44>
 80852a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80852a6:	2b00      	cmp	r3, #0
 80852a8:	d06c      	beq.n	8085384 <_strtod_r+0x844>
 80852aa:	4659      	mov	r1, fp
 80852ac:	2201      	movs	r2, #1
 80852ae:	4650      	mov	r0, sl
 80852b0:	f001 fb8c 	bl	80869cc <__lshift>
 80852b4:	9902      	ldr	r1, [sp, #8]
 80852b6:	4683      	mov	fp, r0
 80852b8:	f001 fbd9 	bl	8086a6e <__mcmp>
 80852bc:	2800      	cmp	r0, #0
 80852be:	f340 81e1 	ble.w	8085684 <_strtod_r+0xb44>
 80852c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80852c6:	9a03      	ldr	r2, [sp, #12]
 80852c8:	0d1b      	lsrs	r3, r3, #20
 80852ca:	051b      	lsls	r3, r3, #20
 80852cc:	2a00      	cmp	r2, #0
 80852ce:	f000 808d 	beq.w	80853ec <_strtod_r+0x8ac>
 80852d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80852d6:	f300 8089 	bgt.w	80853ec <_strtod_r+0x8ac>
 80852da:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80852de:	f300 81d3 	bgt.w	8085688 <_strtod_r+0xb48>
 80852e2:	2322      	movs	r3, #34	; 0x22
 80852e4:	f04f 0800 	mov.w	r8, #0
 80852e8:	f04f 0900 	mov.w	r9, #0
 80852ec:	f8ca 3000 	str.w	r3, [sl]
 80852f0:	9b05      	ldr	r3, [sp, #20]
 80852f2:	2b00      	cmp	r3, #0
 80852f4:	f040 81d9 	bne.w	80856aa <_strtod_r+0xb6a>
 80852f8:	e1eb      	b.n	80856d2 <_strtod_r+0xb92>
 80852fa:	2301      	movs	r3, #1
 80852fc:	2500      	movs	r5, #0
 80852fe:	9307      	str	r3, [sp, #28]
 8085300:	e788      	b.n	8085214 <_strtod_r+0x6d4>
 8085302:	461a      	mov	r2, r3
 8085304:	9902      	ldr	r1, [sp, #8]
 8085306:	4650      	mov	r0, sl
 8085308:	f001 fb12 	bl	8086930 <__pow5mult>
 808530c:	9002      	str	r0, [sp, #8]
 808530e:	2800      	cmp	r0, #0
 8085310:	f43f ae5c 	beq.w	8084fcc <_strtod_r+0x48c>
 8085314:	4601      	mov	r1, r0
 8085316:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8085318:	4650      	mov	r0, sl
 808531a:	f001 fa78 	bl	808680e <__multiply>
 808531e:	9006      	str	r0, [sp, #24]
 8085320:	2800      	cmp	r0, #0
 8085322:	f43f ae53 	beq.w	8084fcc <_strtod_r+0x48c>
 8085326:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085328:	4650      	mov	r0, sl
 808532a:	f001 f98a 	bl	8086642 <_Bfree>
 808532e:	9b06      	ldr	r3, [sp, #24]
 8085330:	9318      	str	r3, [sp, #96]	; 0x60
 8085332:	e782      	b.n	808523a <_strtod_r+0x6fa>
 8085334:	463a      	mov	r2, r7
 8085336:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085338:	4650      	mov	r0, sl
 808533a:	f001 fb47 	bl	80869cc <__lshift>
 808533e:	9018      	str	r0, [sp, #96]	; 0x60
 8085340:	2800      	cmp	r0, #0
 8085342:	f47f af7c 	bne.w	808523e <_strtod_r+0x6fe>
 8085346:	e641      	b.n	8084fcc <_strtod_r+0x48c>
 8085348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808534a:	9904      	ldr	r1, [sp, #16]
 808534c:	4650      	mov	r0, sl
 808534e:	f001 faef 	bl	8086930 <__pow5mult>
 8085352:	9004      	str	r0, [sp, #16]
 8085354:	2800      	cmp	r0, #0
 8085356:	f47f af76 	bne.w	8085246 <_strtod_r+0x706>
 808535a:	e637      	b.n	8084fcc <_strtod_r+0x48c>
 808535c:	4622      	mov	r2, r4
 808535e:	9904      	ldr	r1, [sp, #16]
 8085360:	4650      	mov	r0, sl
 8085362:	f001 fb33 	bl	80869cc <__lshift>
 8085366:	9004      	str	r0, [sp, #16]
 8085368:	2800      	cmp	r0, #0
 808536a:	f47f af6f 	bne.w	808524c <_strtod_r+0x70c>
 808536e:	e62d      	b.n	8084fcc <_strtod_r+0x48c>
 8085370:	4632      	mov	r2, r6
 8085372:	9902      	ldr	r1, [sp, #8]
 8085374:	4650      	mov	r0, sl
 8085376:	f001 fb29 	bl	80869cc <__lshift>
 808537a:	9002      	str	r0, [sp, #8]
 808537c:	2800      	cmp	r0, #0
 808537e:	f47f af68 	bne.w	8085252 <_strtod_r+0x712>
 8085382:	e623      	b.n	8084fcc <_strtod_r+0x48c>
 8085384:	f8db 3010 	ldr.w	r3, [fp, #16]
 8085388:	2b01      	cmp	r3, #1
 808538a:	dc8e      	bgt.n	80852aa <_strtod_r+0x76a>
 808538c:	e17a      	b.n	8085684 <_strtod_r+0xb44>
 808538e:	d161      	bne.n	8085454 <_strtod_r+0x914>
 8085390:	9a06      	ldr	r2, [sp, #24]
 8085392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8085396:	b322      	cbz	r2, 80853e2 <_strtod_r+0x8a2>
 8085398:	4943      	ldr	r1, [pc, #268]	; (80854a8 <_strtod_r+0x968>)
 808539a:	464a      	mov	r2, r9
 808539c:	428b      	cmp	r3, r1
 808539e:	d12e      	bne.n	80853fe <_strtod_r+0x8be>
 80853a0:	9b03      	ldr	r3, [sp, #12]
 80853a2:	4641      	mov	r1, r8
 80853a4:	b163      	cbz	r3, 80853c0 <_strtod_r+0x880>
 80853a6:	4b41      	ldr	r3, [pc, #260]	; (80854ac <_strtod_r+0x96c>)
 80853a8:	4013      	ands	r3, r2
 80853aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80853ae:	d807      	bhi.n	80853c0 <_strtod_r+0x880>
 80853b0:	0d1b      	lsrs	r3, r3, #20
 80853b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80853b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80853ba:	fa00 f303 	lsl.w	r3, r0, r3
 80853be:	e001      	b.n	80853c4 <_strtod_r+0x884>
 80853c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80853c4:	428b      	cmp	r3, r1
 80853c6:	d11a      	bne.n	80853fe <_strtod_r+0x8be>
 80853c8:	4939      	ldr	r1, [pc, #228]	; (80854b0 <_strtod_r+0x970>)
 80853ca:	428a      	cmp	r2, r1
 80853cc:	d102      	bne.n	80853d4 <_strtod_r+0x894>
 80853ce:	3301      	adds	r3, #1
 80853d0:	f43f adfc 	beq.w	8084fcc <_strtod_r+0x48c>
 80853d4:	4b35      	ldr	r3, [pc, #212]	; (80854ac <_strtod_r+0x96c>)
 80853d6:	f04f 0800 	mov.w	r8, #0
 80853da:	4013      	ands	r3, r2
 80853dc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80853e0:	e150      	b.n	8085684 <_strtod_r+0xb44>
 80853e2:	b963      	cbnz	r3, 80853fe <_strtod_r+0x8be>
 80853e4:	f1b8 0f00 	cmp.w	r8, #0
 80853e8:	d109      	bne.n	80853fe <_strtod_r+0x8be>
 80853ea:	e76a      	b.n	80852c2 <_strtod_r+0x782>
 80853ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80853f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80853f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80853f8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80853fc:	e142      	b.n	8085684 <_strtod_r+0xb44>
 80853fe:	b115      	cbz	r5, 8085406 <_strtod_r+0x8c6>
 8085400:	ea15 0f09 	tst.w	r5, r9
 8085404:	e002      	b.n	808540c <_strtod_r+0x8cc>
 8085406:	9b07      	ldr	r3, [sp, #28]
 8085408:	ea13 0f08 	tst.w	r3, r8
 808540c:	f000 813a 	beq.w	8085684 <_strtod_r+0xb44>
 8085410:	9b06      	ldr	r3, [sp, #24]
 8085412:	9a03      	ldr	r2, [sp, #12]
 8085414:	4640      	mov	r0, r8
 8085416:	4649      	mov	r1, r9
 8085418:	b153      	cbz	r3, 8085430 <_strtod_r+0x8f0>
 808541a:	f7ff fb70 	bl	8084afe <sulp>
 808541e:	4602      	mov	r2, r0
 8085420:	460b      	mov	r3, r1
 8085422:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8085426:	f7fe f97f 	bl	8083728 <__adddf3>
 808542a:	4680      	mov	r8, r0
 808542c:	4689      	mov	r9, r1
 808542e:	e129      	b.n	8085684 <_strtod_r+0xb44>
 8085430:	f7ff fb65 	bl	8084afe <sulp>
 8085434:	4602      	mov	r2, r0
 8085436:	460b      	mov	r3, r1
 8085438:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808543c:	f7fe f972 	bl	8083724 <__aeabi_dsub>
 8085440:	2200      	movs	r2, #0
 8085442:	2300      	movs	r3, #0
 8085444:	4680      	mov	r8, r0
 8085446:	4689      	mov	r9, r1
 8085448:	f7fe fd88 	bl	8083f5c <__aeabi_dcmpeq>
 808544c:	2800      	cmp	r0, #0
 808544e:	f47f af48 	bne.w	80852e2 <_strtod_r+0x7a2>
 8085452:	e117      	b.n	8085684 <_strtod_r+0xb44>
 8085454:	9902      	ldr	r1, [sp, #8]
 8085456:	4658      	mov	r0, fp
 8085458:	f001 fc43 	bl	8086ce2 <__ratio>
 808545c:	2200      	movs	r2, #0
 808545e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8085462:	4606      	mov	r6, r0
 8085464:	460f      	mov	r7, r1
 8085466:	f7fe fd8d 	bl	8083f84 <__aeabi_dcmple>
 808546a:	2800      	cmp	r0, #0
 808546c:	d03f      	beq.n	80854ee <_strtod_r+0x9ae>
 808546e:	9b06      	ldr	r3, [sp, #24]
 8085470:	b113      	cbz	r3, 8085478 <_strtod_r+0x938>
 8085472:	2600      	movs	r6, #0
 8085474:	4f0f      	ldr	r7, [pc, #60]	; (80854b4 <_strtod_r+0x974>)
 8085476:	e010      	b.n	808549a <_strtod_r+0x95a>
 8085478:	f1b8 0f00 	cmp.w	r8, #0
 808547c:	d103      	bne.n	8085486 <_strtod_r+0x946>
 808547e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8085482:	b93b      	cbnz	r3, 8085494 <_strtod_r+0x954>
 8085484:	e01a      	b.n	80854bc <_strtod_r+0x97c>
 8085486:	f1b8 0f01 	cmp.w	r8, #1
 808548a:	d103      	bne.n	8085494 <_strtod_r+0x954>
 808548c:	f1b9 0f00 	cmp.w	r9, #0
 8085490:	f43f af27 	beq.w	80852e2 <_strtod_r+0x7a2>
 8085494:	4f08      	ldr	r7, [pc, #32]	; (80854b8 <_strtod_r+0x978>)
 8085496:	2600      	movs	r6, #0
 8085498:	2400      	movs	r4, #0
 808549a:	4d06      	ldr	r5, [pc, #24]	; (80854b4 <_strtod_r+0x974>)
 808549c:	e03c      	b.n	8085518 <_strtod_r+0x9d8>
 808549e:	bf00      	nop
 80854a0:	fffffc02 	.word	0xfffffc02
 80854a4:	fffffbe2 	.word	0xfffffbe2
 80854a8:	000fffff 	.word	0x000fffff
 80854ac:	7ff00000 	.word	0x7ff00000
 80854b0:	7fefffff 	.word	0x7fefffff
 80854b4:	3ff00000 	.word	0x3ff00000
 80854b8:	bff00000 	.word	0xbff00000
 80854bc:	2200      	movs	r2, #0
 80854be:	4b9a      	ldr	r3, [pc, #616]	; (8085728 <_strtod_r+0xbe8>)
 80854c0:	4630      	mov	r0, r6
 80854c2:	4639      	mov	r1, r7
 80854c4:	f7fe fd54 	bl	8083f70 <__aeabi_dcmplt>
 80854c8:	b940      	cbnz	r0, 80854dc <_strtod_r+0x99c>
 80854ca:	2200      	movs	r2, #0
 80854cc:	4b97      	ldr	r3, [pc, #604]	; (808572c <_strtod_r+0xbec>)
 80854ce:	4630      	mov	r0, r6
 80854d0:	4639      	mov	r1, r7
 80854d2:	f7fe fadb 	bl	8083a8c <__aeabi_dmul>
 80854d6:	4604      	mov	r4, r0
 80854d8:	460d      	mov	r5, r1
 80854da:	e001      	b.n	80854e0 <_strtod_r+0x9a0>
 80854dc:	9c06      	ldr	r4, [sp, #24]
 80854de:	4d93      	ldr	r5, [pc, #588]	; (808572c <_strtod_r+0xbec>)
 80854e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80854e4:	9414      	str	r4, [sp, #80]	; 0x50
 80854e6:	9315      	str	r3, [sp, #84]	; 0x54
 80854e8:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80854ec:	e014      	b.n	8085518 <_strtod_r+0x9d8>
 80854ee:	4b8f      	ldr	r3, [pc, #572]	; (808572c <_strtod_r+0xbec>)
 80854f0:	2200      	movs	r2, #0
 80854f2:	4630      	mov	r0, r6
 80854f4:	4639      	mov	r1, r7
 80854f6:	f7fe fac9 	bl	8083a8c <__aeabi_dmul>
 80854fa:	9b06      	ldr	r3, [sp, #24]
 80854fc:	4604      	mov	r4, r0
 80854fe:	460d      	mov	r5, r1
 8085500:	b923      	cbnz	r3, 808550c <_strtod_r+0x9cc>
 8085502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8085506:	900e      	str	r0, [sp, #56]	; 0x38
 8085508:	930f      	str	r3, [sp, #60]	; 0x3c
 808550a:	e003      	b.n	8085514 <_strtod_r+0x9d4>
 808550c:	4602      	mov	r2, r0
 808550e:	460b      	mov	r3, r1
 8085510:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8085514:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8085518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808551c:	0d1b      	lsrs	r3, r3, #20
 808551e:	051b      	lsls	r3, r3, #20
 8085520:	9307      	str	r3, [sp, #28]
 8085522:	9a07      	ldr	r2, [sp, #28]
 8085524:	4b82      	ldr	r3, [pc, #520]	; (8085730 <_strtod_r+0xbf0>)
 8085526:	429a      	cmp	r2, r3
 8085528:	d12b      	bne.n	8085582 <_strtod_r+0xa42>
 808552a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808552e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8085532:	4640      	mov	r0, r8
 8085534:	4649      	mov	r1, r9
 8085536:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808553a:	f001 fb13 	bl	8086b64 <__ulp>
 808553e:	4602      	mov	r2, r0
 8085540:	460b      	mov	r3, r1
 8085542:	4630      	mov	r0, r6
 8085544:	4639      	mov	r1, r7
 8085546:	f7fe faa1 	bl	8083a8c <__aeabi_dmul>
 808554a:	4642      	mov	r2, r8
 808554c:	464b      	mov	r3, r9
 808554e:	f7fe f8eb 	bl	8083728 <__adddf3>
 8085552:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8085556:	0d1b      	lsrs	r3, r3, #20
 8085558:	4a76      	ldr	r2, [pc, #472]	; (8085734 <_strtod_r+0xbf4>)
 808555a:	051b      	lsls	r3, r3, #20
 808555c:	4293      	cmp	r3, r2
 808555e:	4680      	mov	r8, r0
 8085560:	d90c      	bls.n	808557c <_strtod_r+0xa3c>
 8085562:	4b75      	ldr	r3, [pc, #468]	; (8085738 <_strtod_r+0xbf8>)
 8085564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8085566:	429a      	cmp	r2, r3
 8085568:	d103      	bne.n	8085572 <_strtod_r+0xa32>
 808556a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808556c:	3301      	adds	r3, #1
 808556e:	f43f ad2d 	beq.w	8084fcc <_strtod_r+0x48c>
 8085572:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8085738 <_strtod_r+0xbf8>
 8085576:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 808557a:	e072      	b.n	8085662 <_strtod_r+0xb22>
 808557c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8085580:	e039      	b.n	80855f6 <_strtod_r+0xab6>
 8085582:	9b03      	ldr	r3, [sp, #12]
 8085584:	b33b      	cbz	r3, 80855d6 <_strtod_r+0xa96>
 8085586:	9b07      	ldr	r3, [sp, #28]
 8085588:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808558c:	d823      	bhi.n	80855d6 <_strtod_r+0xa96>
 808558e:	a35e      	add	r3, pc, #376	; (adr r3, 8085708 <_strtod_r+0xbc8>)
 8085590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085594:	4620      	mov	r0, r4
 8085596:	4629      	mov	r1, r5
 8085598:	f7fe fcf4 	bl	8083f84 <__aeabi_dcmple>
 808559c:	b1b8      	cbz	r0, 80855ce <_strtod_r+0xa8e>
 808559e:	4629      	mov	r1, r5
 80855a0:	4620      	mov	r0, r4
 80855a2:	f7fe fd4b 	bl	808403c <__aeabi_d2uiz>
 80855a6:	2800      	cmp	r0, #0
 80855a8:	bf08      	it	eq
 80855aa:	2001      	moveq	r0, #1
 80855ac:	f7fe f9f8 	bl	80839a0 <__aeabi_ui2d>
 80855b0:	9b06      	ldr	r3, [sp, #24]
 80855b2:	4604      	mov	r4, r0
 80855b4:	460d      	mov	r5, r1
 80855b6:	b923      	cbnz	r3, 80855c2 <_strtod_r+0xa82>
 80855b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80855bc:	9010      	str	r0, [sp, #64]	; 0x40
 80855be:	9311      	str	r3, [sp, #68]	; 0x44
 80855c0:	e003      	b.n	80855ca <_strtod_r+0xa8a>
 80855c2:	4602      	mov	r2, r0
 80855c4:	460b      	mov	r3, r1
 80855c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80855ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80855ce:	9a07      	ldr	r2, [sp, #28]
 80855d0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80855d4:	1a9f      	subs	r7, r3, r2
 80855d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80855da:	f001 fac3 	bl	8086b64 <__ulp>
 80855de:	4602      	mov	r2, r0
 80855e0:	460b      	mov	r3, r1
 80855e2:	4630      	mov	r0, r6
 80855e4:	4639      	mov	r1, r7
 80855e6:	f7fe fa51 	bl	8083a8c <__aeabi_dmul>
 80855ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80855ee:	f7fe f89b 	bl	8083728 <__adddf3>
 80855f2:	4680      	mov	r8, r0
 80855f4:	4689      	mov	r9, r1
 80855f6:	9b03      	ldr	r3, [sp, #12]
 80855f8:	bb9b      	cbnz	r3, 8085662 <_strtod_r+0xb22>
 80855fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80855fe:	0d1b      	lsrs	r3, r3, #20
 8085600:	9a07      	ldr	r2, [sp, #28]
 8085602:	051b      	lsls	r3, r3, #20
 8085604:	429a      	cmp	r2, r3
 8085606:	464e      	mov	r6, r9
 8085608:	d12b      	bne.n	8085662 <_strtod_r+0xb22>
 808560a:	4629      	mov	r1, r5
 808560c:	4620      	mov	r0, r4
 808560e:	f7fe fced 	bl	8083fec <__aeabi_d2iz>
 8085612:	f7fe f9d5 	bl	80839c0 <__aeabi_i2d>
 8085616:	460b      	mov	r3, r1
 8085618:	4602      	mov	r2, r0
 808561a:	4629      	mov	r1, r5
 808561c:	4620      	mov	r0, r4
 808561e:	f7fe f881 	bl	8083724 <__aeabi_dsub>
 8085622:	9b06      	ldr	r3, [sp, #24]
 8085624:	4604      	mov	r4, r0
 8085626:	460d      	mov	r5, r1
 8085628:	b92b      	cbnz	r3, 8085636 <_strtod_r+0xaf6>
 808562a:	f1b8 0f00 	cmp.w	r8, #0
 808562e:	d102      	bne.n	8085636 <_strtod_r+0xaf6>
 8085630:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8085634:	b17e      	cbz	r6, 8085656 <_strtod_r+0xb16>
 8085636:	a336      	add	r3, pc, #216	; (adr r3, 8085710 <_strtod_r+0xbd0>)
 8085638:	e9d3 2300 	ldrd	r2, r3, [r3]
 808563c:	4620      	mov	r0, r4
 808563e:	4629      	mov	r1, r5
 8085640:	f7fe fc96 	bl	8083f70 <__aeabi_dcmplt>
 8085644:	bb88      	cbnz	r0, 80856aa <_strtod_r+0xb6a>
 8085646:	a334      	add	r3, pc, #208	; (adr r3, 8085718 <_strtod_r+0xbd8>)
 8085648:	e9d3 2300 	ldrd	r2, r3, [r3]
 808564c:	4620      	mov	r0, r4
 808564e:	4629      	mov	r1, r5
 8085650:	f7fe fcac 	bl	8083fac <__aeabi_dcmpgt>
 8085654:	e004      	b.n	8085660 <_strtod_r+0xb20>
 8085656:	a332      	add	r3, pc, #200	; (adr r3, 8085720 <_strtod_r+0xbe0>)
 8085658:	e9d3 2300 	ldrd	r2, r3, [r3]
 808565c:	f7fe fc88 	bl	8083f70 <__aeabi_dcmplt>
 8085660:	bb18      	cbnz	r0, 80856aa <_strtod_r+0xb6a>
 8085662:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085664:	4650      	mov	r0, sl
 8085666:	f000 ffec 	bl	8086642 <_Bfree>
 808566a:	9904      	ldr	r1, [sp, #16]
 808566c:	4650      	mov	r0, sl
 808566e:	f000 ffe8 	bl	8086642 <_Bfree>
 8085672:	9902      	ldr	r1, [sp, #8]
 8085674:	4650      	mov	r0, sl
 8085676:	f000 ffe4 	bl	8086642 <_Bfree>
 808567a:	4659      	mov	r1, fp
 808567c:	4650      	mov	r0, sl
 808567e:	f000 ffe0 	bl	8086642 <_Bfree>
 8085682:	e574      	b.n	808516e <_strtod_r+0x62e>
 8085684:	9b03      	ldr	r3, [sp, #12]
 8085686:	b183      	cbz	r3, 80856aa <_strtod_r+0xb6a>
 8085688:	4b2c      	ldr	r3, [pc, #176]	; (808573c <_strtod_r+0xbfc>)
 808568a:	4640      	mov	r0, r8
 808568c:	930b      	str	r3, [sp, #44]	; 0x2c
 808568e:	2300      	movs	r3, #0
 8085690:	930a      	str	r3, [sp, #40]	; 0x28
 8085692:	4649      	mov	r1, r9
 8085694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085698:	f7fe f9f8 	bl	8083a8c <__aeabi_dmul>
 808569c:	4680      	mov	r8, r0
 808569e:	4689      	mov	r9, r1
 80856a0:	b919      	cbnz	r1, 80856aa <_strtod_r+0xb6a>
 80856a2:	b910      	cbnz	r0, 80856aa <_strtod_r+0xb6a>
 80856a4:	2322      	movs	r3, #34	; 0x22
 80856a6:	f8ca 3000 	str.w	r3, [sl]
 80856aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80856ac:	4650      	mov	r0, sl
 80856ae:	f000 ffc8 	bl	8086642 <_Bfree>
 80856b2:	9904      	ldr	r1, [sp, #16]
 80856b4:	4650      	mov	r0, sl
 80856b6:	f000 ffc4 	bl	8086642 <_Bfree>
 80856ba:	9902      	ldr	r1, [sp, #8]
 80856bc:	4650      	mov	r0, sl
 80856be:	f000 ffc0 	bl	8086642 <_Bfree>
 80856c2:	9905      	ldr	r1, [sp, #20]
 80856c4:	4650      	mov	r0, sl
 80856c6:	f000 ffbc 	bl	8086642 <_Bfree>
 80856ca:	4659      	mov	r1, fp
 80856cc:	4650      	mov	r0, sl
 80856ce:	f000 ffb8 	bl	8086642 <_Bfree>
 80856d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80856d4:	b113      	cbz	r3, 80856dc <_strtod_r+0xb9c>
 80856d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80856d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80856da:	6013      	str	r3, [r2, #0]
 80856dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80856de:	b11b      	cbz	r3, 80856e8 <_strtod_r+0xba8>
 80856e0:	4642      	mov	r2, r8
 80856e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80856e6:	e007      	b.n	80856f8 <_strtod_r+0xbb8>
 80856e8:	4642      	mov	r2, r8
 80856ea:	464b      	mov	r3, r9
 80856ec:	e004      	b.n	80856f8 <_strtod_r+0xbb8>
 80856ee:	2500      	movs	r5, #0
 80856f0:	462a      	mov	r2, r5
 80856f2:	2101      	movs	r1, #1
 80856f4:	f7ff bb47 	b.w	8084d86 <_strtod_r+0x246>
 80856f8:	4610      	mov	r0, r2
 80856fa:	4619      	mov	r1, r3
 80856fc:	b01d      	add	sp, #116	; 0x74
 80856fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085702:	bf00      	nop
 8085704:	f3af 8000 	nop.w
 8085708:	ffc00000 	.word	0xffc00000
 808570c:	41dfffff 	.word	0x41dfffff
 8085710:	94a03595 	.word	0x94a03595
 8085714:	3fdfffff 	.word	0x3fdfffff
 8085718:	35afe535 	.word	0x35afe535
 808571c:	3fe00000 	.word	0x3fe00000
 8085720:	94a03595 	.word	0x94a03595
 8085724:	3fcfffff 	.word	0x3fcfffff
 8085728:	3ff00000 	.word	0x3ff00000
 808572c:	3fe00000 	.word	0x3fe00000
 8085730:	7fe00000 	.word	0x7fe00000
 8085734:	7c9fffff 	.word	0x7c9fffff
 8085738:	7fefffff 	.word	0x7fefffff
 808573c:	39500000 	.word	0x39500000

08085740 <strtod>:
 8085740:	4b02      	ldr	r3, [pc, #8]	; (808574c <strtod+0xc>)
 8085742:	460a      	mov	r2, r1
 8085744:	4601      	mov	r1, r0
 8085746:	6818      	ldr	r0, [r3, #0]
 8085748:	f7ff b9fa 	b.w	8084b40 <_strtod_r>
 808574c:	200001b4 	.word	0x200001b4

08085750 <_strtol_r>:
 8085750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085754:	460f      	mov	r7, r1
 8085756:	4680      	mov	r8, r0
 8085758:	483f      	ldr	r0, [pc, #252]	; (8085858 <_strtol_r+0x108>)
 808575a:	f8d0 9000 	ldr.w	r9, [r0]
 808575e:	463d      	mov	r5, r7
 8085760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085764:	eb09 0004 	add.w	r0, r9, r4
 8085768:	7840      	ldrb	r0, [r0, #1]
 808576a:	f000 0008 	and.w	r0, r0, #8
 808576e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8085772:	b108      	cbz	r0, 8085778 <_strtol_r+0x28>
 8085774:	462f      	mov	r7, r5
 8085776:	e7f2      	b.n	808575e <_strtol_r+0xe>
 8085778:	2c2d      	cmp	r4, #45	; 0x2d
 808577a:	d103      	bne.n	8085784 <_strtol_r+0x34>
 808577c:	1cbd      	adds	r5, r7, #2
 808577e:	787c      	ldrb	r4, [r7, #1]
 8085780:	2601      	movs	r6, #1
 8085782:	e003      	b.n	808578c <_strtol_r+0x3c>
 8085784:	2c2b      	cmp	r4, #43	; 0x2b
 8085786:	bf04      	itt	eq
 8085788:	787c      	ldrbeq	r4, [r7, #1]
 808578a:	1cbd      	addeq	r5, r7, #2
 808578c:	b113      	cbz	r3, 8085794 <_strtol_r+0x44>
 808578e:	2b10      	cmp	r3, #16
 8085790:	d10a      	bne.n	80857a8 <_strtol_r+0x58>
 8085792:	e05b      	b.n	808584c <_strtol_r+0xfc>
 8085794:	2c30      	cmp	r4, #48	; 0x30
 8085796:	d157      	bne.n	8085848 <_strtol_r+0xf8>
 8085798:	7828      	ldrb	r0, [r5, #0]
 808579a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808579e:	2858      	cmp	r0, #88	; 0x58
 80857a0:	d14d      	bne.n	808583e <_strtol_r+0xee>
 80857a2:	786c      	ldrb	r4, [r5, #1]
 80857a4:	2310      	movs	r3, #16
 80857a6:	3502      	adds	r5, #2
 80857a8:	2e00      	cmp	r6, #0
 80857aa:	bf14      	ite	ne
 80857ac:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80857b0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80857b4:	fbbc faf3 	udiv	sl, ip, r3
 80857b8:	2700      	movs	r7, #0
 80857ba:	4638      	mov	r0, r7
 80857bc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80857c0:	eb09 0e04 	add.w	lr, r9, r4
 80857c4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80857c8:	f01e 0f04 	tst.w	lr, #4
 80857cc:	d001      	beq.n	80857d2 <_strtol_r+0x82>
 80857ce:	3c30      	subs	r4, #48	; 0x30
 80857d0:	e00b      	b.n	80857ea <_strtol_r+0x9a>
 80857d2:	f01e 0e03 	ands.w	lr, lr, #3
 80857d6:	d01b      	beq.n	8085810 <_strtol_r+0xc0>
 80857d8:	f1be 0f01 	cmp.w	lr, #1
 80857dc:	bf0c      	ite	eq
 80857de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80857e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80857e6:	ebce 0404 	rsb	r4, lr, r4
 80857ea:	42a3      	cmp	r3, r4
 80857ec:	dd10      	ble.n	8085810 <_strtol_r+0xc0>
 80857ee:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80857f2:	d00a      	beq.n	808580a <_strtol_r+0xba>
 80857f4:	4550      	cmp	r0, sl
 80857f6:	d806      	bhi.n	8085806 <_strtol_r+0xb6>
 80857f8:	d101      	bne.n	80857fe <_strtol_r+0xae>
 80857fa:	4564      	cmp	r4, ip
 80857fc:	dc03      	bgt.n	8085806 <_strtol_r+0xb6>
 80857fe:	fb03 4000 	mla	r0, r3, r0, r4
 8085802:	2701      	movs	r7, #1
 8085804:	e001      	b.n	808580a <_strtol_r+0xba>
 8085806:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808580a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808580e:	e7d7      	b.n	80857c0 <_strtol_r+0x70>
 8085810:	1c7b      	adds	r3, r7, #1
 8085812:	d10c      	bne.n	808582e <_strtol_r+0xde>
 8085814:	2e00      	cmp	r6, #0
 8085816:	f04f 0322 	mov.w	r3, #34	; 0x22
 808581a:	bf14      	ite	ne
 808581c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8085820:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085824:	f8c8 3000 	str.w	r3, [r8]
 8085828:	b92a      	cbnz	r2, 8085836 <_strtol_r+0xe6>
 808582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808582e:	b106      	cbz	r6, 8085832 <_strtol_r+0xe2>
 8085830:	4240      	negs	r0, r0
 8085832:	b172      	cbz	r2, 8085852 <_strtol_r+0x102>
 8085834:	b107      	cbz	r7, 8085838 <_strtol_r+0xe8>
 8085836:	1e69      	subs	r1, r5, #1
 8085838:	6011      	str	r1, [r2, #0]
 808583a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808583e:	2430      	movs	r4, #48	; 0x30
 8085840:	2b00      	cmp	r3, #0
 8085842:	d1b1      	bne.n	80857a8 <_strtol_r+0x58>
 8085844:	2308      	movs	r3, #8
 8085846:	e7af      	b.n	80857a8 <_strtol_r+0x58>
 8085848:	230a      	movs	r3, #10
 808584a:	e7ad      	b.n	80857a8 <_strtol_r+0x58>
 808584c:	2c30      	cmp	r4, #48	; 0x30
 808584e:	d0a3      	beq.n	8085798 <_strtol_r+0x48>
 8085850:	e7aa      	b.n	80857a8 <_strtol_r+0x58>
 8085852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085856:	bf00      	nop
 8085858:	20000150 	.word	0x20000150

0808585c <strtol>:
 808585c:	4613      	mov	r3, r2
 808585e:	460a      	mov	r2, r1
 8085860:	4601      	mov	r1, r0
 8085862:	4802      	ldr	r0, [pc, #8]	; (808586c <strtol+0x10>)
 8085864:	6800      	ldr	r0, [r0, #0]
 8085866:	f7ff bf73 	b.w	8085750 <_strtol_r>
 808586a:	bf00      	nop
 808586c:	200001b4 	.word	0x200001b4

08085870 <_strtoul_r>:
 8085870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085874:	460e      	mov	r6, r1
 8085876:	4680      	mov	r8, r0
 8085878:	483b      	ldr	r0, [pc, #236]	; (8085968 <_strtoul_r+0xf8>)
 808587a:	f8d0 9000 	ldr.w	r9, [r0]
 808587e:	4635      	mov	r5, r6
 8085880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085884:	eb09 0004 	add.w	r0, r9, r4
 8085888:	7840      	ldrb	r0, [r0, #1]
 808588a:	f000 0008 	and.w	r0, r0, #8
 808588e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085892:	b108      	cbz	r0, 8085898 <_strtoul_r+0x28>
 8085894:	462e      	mov	r6, r5
 8085896:	e7f2      	b.n	808587e <_strtoul_r+0xe>
 8085898:	2c2d      	cmp	r4, #45	; 0x2d
 808589a:	d103      	bne.n	80858a4 <_strtoul_r+0x34>
 808589c:	1cb5      	adds	r5, r6, #2
 808589e:	7874      	ldrb	r4, [r6, #1]
 80858a0:	2701      	movs	r7, #1
 80858a2:	e003      	b.n	80858ac <_strtoul_r+0x3c>
 80858a4:	2c2b      	cmp	r4, #43	; 0x2b
 80858a6:	bf04      	itt	eq
 80858a8:	7874      	ldrbeq	r4, [r6, #1]
 80858aa:	1cb5      	addeq	r5, r6, #2
 80858ac:	b113      	cbz	r3, 80858b4 <_strtoul_r+0x44>
 80858ae:	2b10      	cmp	r3, #16
 80858b0:	d10a      	bne.n	80858c8 <_strtoul_r+0x58>
 80858b2:	e053      	b.n	808595c <_strtoul_r+0xec>
 80858b4:	2c30      	cmp	r4, #48	; 0x30
 80858b6:	d14f      	bne.n	8085958 <_strtoul_r+0xe8>
 80858b8:	7828      	ldrb	r0, [r5, #0]
 80858ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80858be:	2858      	cmp	r0, #88	; 0x58
 80858c0:	d145      	bne.n	808594e <_strtoul_r+0xde>
 80858c2:	786c      	ldrb	r4, [r5, #1]
 80858c4:	2310      	movs	r3, #16
 80858c6:	3502      	adds	r5, #2
 80858c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80858cc:	fbbc fcf3 	udiv	ip, ip, r3
 80858d0:	fb03 fa0c 	mul.w	sl, r3, ip
 80858d4:	2600      	movs	r6, #0
 80858d6:	ea6f 0a0a 	mvn.w	sl, sl
 80858da:	4630      	mov	r0, r6
 80858dc:	eb09 0e04 	add.w	lr, r9, r4
 80858e0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80858e4:	f01e 0f04 	tst.w	lr, #4
 80858e8:	d001      	beq.n	80858ee <_strtoul_r+0x7e>
 80858ea:	3c30      	subs	r4, #48	; 0x30
 80858ec:	e00b      	b.n	8085906 <_strtoul_r+0x96>
 80858ee:	f01e 0e03 	ands.w	lr, lr, #3
 80858f2:	d01a      	beq.n	808592a <_strtoul_r+0xba>
 80858f4:	f1be 0f01 	cmp.w	lr, #1
 80858f8:	bf0c      	ite	eq
 80858fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80858fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085902:	ebce 0404 	rsb	r4, lr, r4
 8085906:	42a3      	cmp	r3, r4
 8085908:	dd0f      	ble.n	808592a <_strtoul_r+0xba>
 808590a:	2e00      	cmp	r6, #0
 808590c:	db08      	blt.n	8085920 <_strtoul_r+0xb0>
 808590e:	4560      	cmp	r0, ip
 8085910:	d806      	bhi.n	8085920 <_strtoul_r+0xb0>
 8085912:	d101      	bne.n	8085918 <_strtoul_r+0xa8>
 8085914:	4554      	cmp	r4, sl
 8085916:	dc03      	bgt.n	8085920 <_strtoul_r+0xb0>
 8085918:	fb03 4000 	mla	r0, r3, r0, r4
 808591c:	2601      	movs	r6, #1
 808591e:	e001      	b.n	8085924 <_strtoul_r+0xb4>
 8085920:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085928:	e7d8      	b.n	80858dc <_strtoul_r+0x6c>
 808592a:	2e00      	cmp	r6, #0
 808592c:	da07      	bge.n	808593e <_strtoul_r+0xce>
 808592e:	2322      	movs	r3, #34	; 0x22
 8085930:	f8c8 3000 	str.w	r3, [r8]
 8085934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085938:	b92a      	cbnz	r2, 8085946 <_strtoul_r+0xd6>
 808593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808593e:	b107      	cbz	r7, 8085942 <_strtoul_r+0xd2>
 8085940:	4240      	negs	r0, r0
 8085942:	b172      	cbz	r2, 8085962 <_strtoul_r+0xf2>
 8085944:	b106      	cbz	r6, 8085948 <_strtoul_r+0xd8>
 8085946:	1e69      	subs	r1, r5, #1
 8085948:	6011      	str	r1, [r2, #0]
 808594a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808594e:	2430      	movs	r4, #48	; 0x30
 8085950:	2b00      	cmp	r3, #0
 8085952:	d1b9      	bne.n	80858c8 <_strtoul_r+0x58>
 8085954:	2308      	movs	r3, #8
 8085956:	e7b7      	b.n	80858c8 <_strtoul_r+0x58>
 8085958:	230a      	movs	r3, #10
 808595a:	e7b5      	b.n	80858c8 <_strtoul_r+0x58>
 808595c:	2c30      	cmp	r4, #48	; 0x30
 808595e:	d0ab      	beq.n	80858b8 <_strtoul_r+0x48>
 8085960:	e7b2      	b.n	80858c8 <_strtoul_r+0x58>
 8085962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085966:	bf00      	nop
 8085968:	20000150 	.word	0x20000150

0808596c <strtoul>:
 808596c:	4613      	mov	r3, r2
 808596e:	460a      	mov	r2, r1
 8085970:	4601      	mov	r1, r0
 8085972:	4802      	ldr	r0, [pc, #8]	; (808597c <strtoul+0x10>)
 8085974:	6800      	ldr	r0, [r0, #0]
 8085976:	f7ff bf7b 	b.w	8085870 <_strtoul_r>
 808597a:	bf00      	nop
 808597c:	200001b4 	.word	0x200001b4

08085980 <__tzcalc_limits>:
 8085980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085984:	4604      	mov	r4, r0
 8085986:	f000 fd8d 	bl	80864a4 <__gettzinfo>
 808598a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808598e:	429c      	cmp	r4, r3
 8085990:	f340 8096 	ble.w	8085ac0 <__tzcalc_limits+0x140>
 8085994:	f240 156d 	movw	r5, #365	; 0x16d
 8085998:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808599c:	18e3      	adds	r3, r4, r3
 808599e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80859a2:	109b      	asrs	r3, r3, #2
 80859a4:	fb05 3502 	mla	r5, r5, r2, r3
 80859a8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80859ac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80859b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80859b4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80859b8:	442b      	add	r3, r5
 80859ba:	18a5      	adds	r5, r4, r2
 80859bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80859c0:	fb94 f7f2 	sdiv	r7, r4, r2
 80859c4:	fb95 f5f2 	sdiv	r5, r5, r2
 80859c8:	fb02 4717 	mls	r7, r2, r7, r4
 80859cc:	441d      	add	r5, r3
 80859ce:	2364      	movs	r3, #100	; 0x64
 80859d0:	fb94 f6f3 	sdiv	r6, r4, r3
 80859d4:	fab7 fe87 	clz	lr, r7
 80859d8:	4601      	mov	r1, r0
 80859da:	fb03 4616 	mls	r6, r3, r6, r4
 80859de:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80859e2:	9301      	str	r3, [sp, #4]
 80859e4:	f004 0303 	and.w	r3, r4, #3
 80859e8:	6044      	str	r4, [r0, #4]
 80859ea:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80859ee:	9300      	str	r3, [sp, #0]
 80859f0:	f04f 0c07 	mov.w	ip, #7
 80859f4:	7a0b      	ldrb	r3, [r1, #8]
 80859f6:	2b4a      	cmp	r3, #74	; 0x4a
 80859f8:	d10e      	bne.n	8085a18 <__tzcalc_limits+0x98>
 80859fa:	694b      	ldr	r3, [r1, #20]
 80859fc:	9a00      	ldr	r2, [sp, #0]
 80859fe:	18ec      	adds	r4, r5, r3
 8085a00:	b902      	cbnz	r2, 8085a04 <__tzcalc_limits+0x84>
 8085a02:	b906      	cbnz	r6, 8085a06 <__tzcalc_limits+0x86>
 8085a04:	b927      	cbnz	r7, 8085a10 <__tzcalc_limits+0x90>
 8085a06:	2b3b      	cmp	r3, #59	; 0x3b
 8085a08:	bfd4      	ite	le
 8085a0a:	2300      	movle	r3, #0
 8085a0c:	2301      	movgt	r3, #1
 8085a0e:	e000      	b.n	8085a12 <__tzcalc_limits+0x92>
 8085a10:	2300      	movs	r3, #0
 8085a12:	4423      	add	r3, r4
 8085a14:	3b01      	subs	r3, #1
 8085a16:	e03f      	b.n	8085a98 <__tzcalc_limits+0x118>
 8085a18:	2b44      	cmp	r3, #68	; 0x44
 8085a1a:	d102      	bne.n	8085a22 <__tzcalc_limits+0xa2>
 8085a1c:	694b      	ldr	r3, [r1, #20]
 8085a1e:	442b      	add	r3, r5
 8085a20:	e03a      	b.n	8085a98 <__tzcalc_limits+0x118>
 8085a22:	9b00      	ldr	r3, [sp, #0]
 8085a24:	b92b      	cbnz	r3, 8085a32 <__tzcalc_limits+0xb2>
 8085a26:	2e00      	cmp	r6, #0
 8085a28:	bf0c      	ite	eq
 8085a2a:	46f0      	moveq	r8, lr
 8085a2c:	f04f 0801 	movne.w	r8, #1
 8085a30:	e000      	b.n	8085a34 <__tzcalc_limits+0xb4>
 8085a32:	46f0      	mov	r8, lr
 8085a34:	46a9      	mov	r9, r5
 8085a36:	4b24      	ldr	r3, [pc, #144]	; (8085ac8 <__tzcalc_limits+0x148>)
 8085a38:	2230      	movs	r2, #48	; 0x30
 8085a3a:	fb02 3808 	mla	r8, r2, r8, r3
 8085a3e:	68cc      	ldr	r4, [r1, #12]
 8085a40:	f1a8 0a04 	sub.w	sl, r8, #4
 8085a44:	2301      	movs	r3, #1
 8085a46:	42a3      	cmp	r3, r4
 8085a48:	da04      	bge.n	8085a54 <__tzcalc_limits+0xd4>
 8085a4a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8085a4e:	3301      	adds	r3, #1
 8085a50:	44d9      	add	r9, fp
 8085a52:	e7f8      	b.n	8085a46 <__tzcalc_limits+0xc6>
 8085a54:	f109 0304 	add.w	r3, r9, #4
 8085a58:	fb93 fbfc 	sdiv	fp, r3, ip
 8085a5c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8085a60:	ebca 0a03 	rsb	sl, sl, r3
 8085a64:	694b      	ldr	r3, [r1, #20]
 8085a66:	2c01      	cmp	r4, #1
 8085a68:	bfb8      	it	lt
 8085a6a:	2401      	movlt	r4, #1
 8085a6c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8085a70:	690b      	ldr	r3, [r1, #16]
 8085a72:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8085a76:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8085a7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8085a7e:	bf48      	it	mi
 8085a80:	f10a 0a07 	addmi.w	sl, sl, #7
 8085a84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085a88:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085a8c:	4453      	add	r3, sl
 8085a8e:	42a3      	cmp	r3, r4
 8085a90:	db01      	blt.n	8085a96 <__tzcalc_limits+0x116>
 8085a92:	3b07      	subs	r3, #7
 8085a94:	e7fb      	b.n	8085a8e <__tzcalc_limits+0x10e>
 8085a96:	444b      	add	r3, r9
 8085a98:	698c      	ldr	r4, [r1, #24]
 8085a9a:	4a0c      	ldr	r2, [pc, #48]	; (8085acc <__tzcalc_limits+0x14c>)
 8085a9c:	fb02 4303 	mla	r3, r2, r3, r4
 8085aa0:	6a0c      	ldr	r4, [r1, #32]
 8085aa2:	4423      	add	r3, r4
 8085aa4:	f841 3f1c 	str.w	r3, [r1, #28]!
 8085aa8:	9b01      	ldr	r3, [sp, #4]
 8085aaa:	4299      	cmp	r1, r3
 8085aac:	d1a2      	bne.n	80859f4 <__tzcalc_limits+0x74>
 8085aae:	69c3      	ldr	r3, [r0, #28]
 8085ab0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085ab2:	4293      	cmp	r3, r2
 8085ab4:	bfac      	ite	ge
 8085ab6:	2300      	movge	r3, #0
 8085ab8:	2301      	movlt	r3, #1
 8085aba:	6003      	str	r3, [r0, #0]
 8085abc:	2001      	movs	r0, #1
 8085abe:	e000      	b.n	8085ac2 <__tzcalc_limits+0x142>
 8085ac0:	2000      	movs	r0, #0
 8085ac2:	b003      	add	sp, #12
 8085ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ac8:	080874a4 	.word	0x080874a4
 8085acc:	00015180 	.word	0x00015180

08085ad0 <__tz_lock>:
 8085ad0:	4770      	bx	lr

08085ad2 <__tz_unlock>:
 8085ad2:	4770      	bx	lr

08085ad4 <_tzset_unlocked>:
 8085ad4:	4b01      	ldr	r3, [pc, #4]	; (8085adc <_tzset_unlocked+0x8>)
 8085ad6:	6818      	ldr	r0, [r3, #0]
 8085ad8:	f000 b802 	b.w	8085ae0 <_tzset_unlocked_r>
 8085adc:	200001b4 	.word	0x200001b4

08085ae0 <_tzset_unlocked_r>:
 8085ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085ae4:	b08d      	sub	sp, #52	; 0x34
 8085ae6:	4607      	mov	r7, r0
 8085ae8:	f000 fcdc 	bl	80864a4 <__gettzinfo>
 8085aec:	49b0      	ldr	r1, [pc, #704]	; (8085db0 <_tzset_unlocked_r+0x2d0>)
 8085aee:	4604      	mov	r4, r0
 8085af0:	4638      	mov	r0, r7
 8085af2:	f000 fccf 	bl	8086494 <_getenv_r>
 8085af6:	4eaf      	ldr	r6, [pc, #700]	; (8085db4 <_tzset_unlocked_r+0x2d4>)
 8085af8:	4605      	mov	r5, r0
 8085afa:	b960      	cbnz	r0, 8085b16 <_tzset_unlocked_r+0x36>
 8085afc:	4bae      	ldr	r3, [pc, #696]	; (8085db8 <_tzset_unlocked_r+0x2d8>)
 8085afe:	4aaf      	ldr	r2, [pc, #700]	; (8085dbc <_tzset_unlocked_r+0x2dc>)
 8085b00:	6018      	str	r0, [r3, #0]
 8085b02:	4baf      	ldr	r3, [pc, #700]	; (8085dc0 <_tzset_unlocked_r+0x2e0>)
 8085b04:	6018      	str	r0, [r3, #0]
 8085b06:	4baf      	ldr	r3, [pc, #700]	; (8085dc4 <_tzset_unlocked_r+0x2e4>)
 8085b08:	6830      	ldr	r0, [r6, #0]
 8085b0a:	601a      	str	r2, [r3, #0]
 8085b0c:	605a      	str	r2, [r3, #4]
 8085b0e:	f7fb ffd7 	bl	8081ac0 <free>
 8085b12:	6035      	str	r5, [r6, #0]
 8085b14:	e148      	b.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085b16:	6831      	ldr	r1, [r6, #0]
 8085b18:	b979      	cbnz	r1, 8085b3a <_tzset_unlocked_r+0x5a>
 8085b1a:	6830      	ldr	r0, [r6, #0]
 8085b1c:	f7fb ffd0 	bl	8081ac0 <free>
 8085b20:	4628      	mov	r0, r5
 8085b22:	f7fe ffa2 	bl	8084a6a <strlen>
 8085b26:	1c41      	adds	r1, r0, #1
 8085b28:	4638      	mov	r0, r7
 8085b2a:	f7fb fff1 	bl	8081b10 <_malloc_r>
 8085b2e:	6030      	str	r0, [r6, #0]
 8085b30:	b148      	cbz	r0, 8085b46 <_tzset_unlocked_r+0x66>
 8085b32:	4629      	mov	r1, r5
 8085b34:	f7fe ff76 	bl	8084a24 <strcpy>
 8085b38:	e005      	b.n	8085b46 <_tzset_unlocked_r+0x66>
 8085b3a:	f7fe ff69 	bl	8084a10 <strcmp>
 8085b3e:	2800      	cmp	r0, #0
 8085b40:	f000 8132 	beq.w	8085da8 <_tzset_unlocked_r+0x2c8>
 8085b44:	e7e9      	b.n	8085b1a <_tzset_unlocked_r+0x3a>
 8085b46:	782b      	ldrb	r3, [r5, #0]
 8085b48:	ae0a      	add	r6, sp, #40	; 0x28
 8085b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8085b4c:	bf08      	it	eq
 8085b4e:	3501      	addeq	r5, #1
 8085b50:	4633      	mov	r3, r6
 8085b52:	4a9d      	ldr	r2, [pc, #628]	; (8085dc8 <_tzset_unlocked_r+0x2e8>)
 8085b54:	499d      	ldr	r1, [pc, #628]	; (8085dcc <_tzset_unlocked_r+0x2ec>)
 8085b56:	4628      	mov	r0, r5
 8085b58:	f7fb ffc2 	bl	8081ae0 <siscanf>
 8085b5c:	2800      	cmp	r0, #0
 8085b5e:	f340 8123 	ble.w	8085da8 <_tzset_unlocked_r+0x2c8>
 8085b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085b64:	18ef      	adds	r7, r5, r3
 8085b66:	5ceb      	ldrb	r3, [r5, r3]
 8085b68:	2b2d      	cmp	r3, #45	; 0x2d
 8085b6a:	d103      	bne.n	8085b74 <_tzset_unlocked_r+0x94>
 8085b6c:	3701      	adds	r7, #1
 8085b6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8085b72:	e003      	b.n	8085b7c <_tzset_unlocked_r+0x9c>
 8085b74:	2b2b      	cmp	r3, #43	; 0x2b
 8085b76:	bf08      	it	eq
 8085b78:	3701      	addeq	r7, #1
 8085b7a:	2501      	movs	r5, #1
 8085b7c:	f10d 0a20 	add.w	sl, sp, #32
 8085b80:	f10d 0b1e 	add.w	fp, sp, #30
 8085b84:	f04f 0800 	mov.w	r8, #0
 8085b88:	9603      	str	r6, [sp, #12]
 8085b8a:	f8cd a008 	str.w	sl, [sp, #8]
 8085b8e:	9601      	str	r6, [sp, #4]
 8085b90:	f8cd b000 	str.w	fp, [sp]
 8085b94:	4633      	mov	r3, r6
 8085b96:	aa07      	add	r2, sp, #28
 8085b98:	498d      	ldr	r1, [pc, #564]	; (8085dd0 <_tzset_unlocked_r+0x2f0>)
 8085b9a:	4638      	mov	r0, r7
 8085b9c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8085ba0:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085ba4:	f7fb ff9c 	bl	8081ae0 <siscanf>
 8085ba8:	4540      	cmp	r0, r8
 8085baa:	f340 80fd 	ble.w	8085da8 <_tzset_unlocked_r+0x2c8>
 8085bae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085bb2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085bb6:	213c      	movs	r1, #60	; 0x3c
 8085bb8:	fb01 3302 	mla	r3, r1, r2, r3
 8085bbc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085bc0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085bc4:	fb01 3302 	mla	r3, r1, r2, r3
 8085bc8:	435d      	muls	r5, r3
 8085bca:	4b7f      	ldr	r3, [pc, #508]	; (8085dc8 <_tzset_unlocked_r+0x2e8>)
 8085bcc:	6225      	str	r5, [r4, #32]
 8085bce:	4d7d      	ldr	r5, [pc, #500]	; (8085dc4 <_tzset_unlocked_r+0x2e4>)
 8085bd0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8085ddc <_tzset_unlocked_r+0x2fc>
 8085bd4:	602b      	str	r3, [r5, #0]
 8085bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085bd8:	464a      	mov	r2, r9
 8085bda:	441f      	add	r7, r3
 8085bdc:	497b      	ldr	r1, [pc, #492]	; (8085dcc <_tzset_unlocked_r+0x2ec>)
 8085bde:	4633      	mov	r3, r6
 8085be0:	4638      	mov	r0, r7
 8085be2:	f7fb ff7d 	bl	8081ae0 <siscanf>
 8085be6:	4540      	cmp	r0, r8
 8085be8:	dc08      	bgt.n	8085bfc <_tzset_unlocked_r+0x11c>
 8085bea:	682b      	ldr	r3, [r5, #0]
 8085bec:	6a22      	ldr	r2, [r4, #32]
 8085bee:	606b      	str	r3, [r5, #4]
 8085bf0:	4b71      	ldr	r3, [pc, #452]	; (8085db8 <_tzset_unlocked_r+0x2d8>)
 8085bf2:	601a      	str	r2, [r3, #0]
 8085bf4:	4b72      	ldr	r3, [pc, #456]	; (8085dc0 <_tzset_unlocked_r+0x2e0>)
 8085bf6:	f8c3 8000 	str.w	r8, [r3]
 8085bfa:	e0d5      	b.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085bfe:	f8c5 9004 	str.w	r9, [r5, #4]
 8085c02:	18fd      	adds	r5, r7, r3
 8085c04:	5cfb      	ldrb	r3, [r7, r3]
 8085c06:	2b2d      	cmp	r3, #45	; 0x2d
 8085c08:	d103      	bne.n	8085c12 <_tzset_unlocked_r+0x132>
 8085c0a:	3501      	adds	r5, #1
 8085c0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8085c10:	e003      	b.n	8085c1a <_tzset_unlocked_r+0x13a>
 8085c12:	2b2b      	cmp	r3, #43	; 0x2b
 8085c14:	bf08      	it	eq
 8085c16:	3501      	addeq	r5, #1
 8085c18:	2701      	movs	r7, #1
 8085c1a:	2300      	movs	r3, #0
 8085c1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085c20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085c24:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085c28:	930a      	str	r3, [sp, #40]	; 0x28
 8085c2a:	9603      	str	r6, [sp, #12]
 8085c2c:	f8cd a008 	str.w	sl, [sp, #8]
 8085c30:	9601      	str	r6, [sp, #4]
 8085c32:	f8cd b000 	str.w	fp, [sp]
 8085c36:	4633      	mov	r3, r6
 8085c38:	aa07      	add	r2, sp, #28
 8085c3a:	4965      	ldr	r1, [pc, #404]	; (8085dd0 <_tzset_unlocked_r+0x2f0>)
 8085c3c:	4628      	mov	r0, r5
 8085c3e:	f7fb ff4f 	bl	8081ae0 <siscanf>
 8085c42:	2800      	cmp	r0, #0
 8085c44:	dc04      	bgt.n	8085c50 <_tzset_unlocked_r+0x170>
 8085c46:	6a23      	ldr	r3, [r4, #32]
 8085c48:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085c4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8085c4e:	e00e      	b.n	8085c6e <_tzset_unlocked_r+0x18e>
 8085c50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085c54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085c58:	213c      	movs	r1, #60	; 0x3c
 8085c5a:	fb01 3302 	mla	r3, r1, r2, r3
 8085c5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085c62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085c66:	fb01 3302 	mla	r3, r1, r2, r3
 8085c6a:	435f      	muls	r7, r3
 8085c6c:	63e7      	str	r7, [r4, #60]	; 0x3c
 8085c6e:	4627      	mov	r7, r4
 8085c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085c72:	f04f 0900 	mov.w	r9, #0
 8085c76:	441d      	add	r5, r3
 8085c78:	782b      	ldrb	r3, [r5, #0]
 8085c7a:	2b2c      	cmp	r3, #44	; 0x2c
 8085c7c:	bf08      	it	eq
 8085c7e:	3501      	addeq	r5, #1
 8085c80:	f895 8000 	ldrb.w	r8, [r5]
 8085c84:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8085c88:	d126      	bne.n	8085cd8 <_tzset_unlocked_r+0x1f8>
 8085c8a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085c8e:	9302      	str	r3, [sp, #8]
 8085c90:	ab09      	add	r3, sp, #36	; 0x24
 8085c92:	9300      	str	r3, [sp, #0]
 8085c94:	9603      	str	r6, [sp, #12]
 8085c96:	9601      	str	r6, [sp, #4]
 8085c98:	4633      	mov	r3, r6
 8085c9a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085c9e:	494d      	ldr	r1, [pc, #308]	; (8085dd4 <_tzset_unlocked_r+0x2f4>)
 8085ca0:	4628      	mov	r0, r5
 8085ca2:	f7fb ff1d 	bl	8081ae0 <siscanf>
 8085ca6:	2803      	cmp	r0, #3
 8085ca8:	d17e      	bne.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085caa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085cae:	1e4b      	subs	r3, r1, #1
 8085cb0:	2b0b      	cmp	r3, #11
 8085cb2:	d879      	bhi.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085cb4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8085cb8:	1e53      	subs	r3, r2, #1
 8085cba:	2b04      	cmp	r3, #4
 8085cbc:	d874      	bhi.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085cbe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085cc2:	2b06      	cmp	r3, #6
 8085cc4:	d870      	bhi.n	8085da8 <_tzset_unlocked_r+0x2c8>
 8085cc6:	f887 8008 	strb.w	r8, [r7, #8]
 8085cca:	60f9      	str	r1, [r7, #12]
 8085ccc:	613a      	str	r2, [r7, #16]
 8085cce:	617b      	str	r3, [r7, #20]
 8085cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085cd2:	eb05 0803 	add.w	r8, r5, r3
 8085cd6:	e02a      	b.n	8085d2e <_tzset_unlocked_r+0x24e>
 8085cd8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8085cdc:	bf06      	itte	eq
 8085cde:	4643      	moveq	r3, r8
 8085ce0:	3501      	addeq	r5, #1
 8085ce2:	2344      	movne	r3, #68	; 0x44
 8085ce4:	220a      	movs	r2, #10
 8085ce6:	a90b      	add	r1, sp, #44	; 0x2c
 8085ce8:	4628      	mov	r0, r5
 8085cea:	9305      	str	r3, [sp, #20]
 8085cec:	f7ff fe3e 	bl	808596c <strtoul>
 8085cf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8085cf4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8085cf8:	4545      	cmp	r5, r8
 8085cfa:	9b05      	ldr	r3, [sp, #20]
 8085cfc:	d114      	bne.n	8085d28 <_tzset_unlocked_r+0x248>
 8085cfe:	234d      	movs	r3, #77	; 0x4d
 8085d00:	f1b9 0f00 	cmp.w	r9, #0
 8085d04:	d107      	bne.n	8085d16 <_tzset_unlocked_r+0x236>
 8085d06:	7223      	strb	r3, [r4, #8]
 8085d08:	2303      	movs	r3, #3
 8085d0a:	60e3      	str	r3, [r4, #12]
 8085d0c:	2302      	movs	r3, #2
 8085d0e:	6123      	str	r3, [r4, #16]
 8085d10:	f8c4 9014 	str.w	r9, [r4, #20]
 8085d14:	e00b      	b.n	8085d2e <_tzset_unlocked_r+0x24e>
 8085d16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8085d1a:	230b      	movs	r3, #11
 8085d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8085d1e:	2301      	movs	r3, #1
 8085d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8085d22:	2300      	movs	r3, #0
 8085d24:	6323      	str	r3, [r4, #48]	; 0x30
 8085d26:	e002      	b.n	8085d2e <_tzset_unlocked_r+0x24e>
 8085d28:	b280      	uxth	r0, r0
 8085d2a:	723b      	strb	r3, [r7, #8]
 8085d2c:	6178      	str	r0, [r7, #20]
 8085d2e:	2302      	movs	r3, #2
 8085d30:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085d34:	2300      	movs	r3, #0
 8085d36:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085d3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8085d40:	f898 3000 	ldrb.w	r3, [r8]
 8085d44:	2b2f      	cmp	r3, #47	; 0x2f
 8085d46:	d10b      	bne.n	8085d60 <_tzset_unlocked_r+0x280>
 8085d48:	9603      	str	r6, [sp, #12]
 8085d4a:	f8cd a008 	str.w	sl, [sp, #8]
 8085d4e:	9601      	str	r6, [sp, #4]
 8085d50:	f8cd b000 	str.w	fp, [sp]
 8085d54:	4633      	mov	r3, r6
 8085d56:	aa07      	add	r2, sp, #28
 8085d58:	491f      	ldr	r1, [pc, #124]	; (8085dd8 <_tzset_unlocked_r+0x2f8>)
 8085d5a:	4640      	mov	r0, r8
 8085d5c:	f7fb fec0 	bl	8081ae0 <siscanf>
 8085d60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085d64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085d68:	213c      	movs	r1, #60	; 0x3c
 8085d6a:	fb01 3302 	mla	r3, r1, r2, r3
 8085d6e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085d72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085d76:	fb01 3302 	mla	r3, r1, r2, r3
 8085d7a:	61bb      	str	r3, [r7, #24]
 8085d7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085d7e:	f109 0901 	add.w	r9, r9, #1
 8085d82:	f1b9 0f02 	cmp.w	r9, #2
 8085d86:	4445      	add	r5, r8
 8085d88:	f107 071c 	add.w	r7, r7, #28
 8085d8c:	f47f af74 	bne.w	8085c78 <_tzset_unlocked_r+0x198>
 8085d90:	6860      	ldr	r0, [r4, #4]
 8085d92:	f7ff fdf5 	bl	8085980 <__tzcalc_limits>
 8085d96:	6a22      	ldr	r2, [r4, #32]
 8085d98:	4b07      	ldr	r3, [pc, #28]	; (8085db8 <_tzset_unlocked_r+0x2d8>)
 8085d9a:	601a      	str	r2, [r3, #0]
 8085d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085d9e:	1a9b      	subs	r3, r3, r2
 8085da0:	4a07      	ldr	r2, [pc, #28]	; (8085dc0 <_tzset_unlocked_r+0x2e0>)
 8085da2:	bf18      	it	ne
 8085da4:	2301      	movne	r3, #1
 8085da6:	6013      	str	r3, [r2, #0]
 8085da8:	b00d      	add	sp, #52	; 0x34
 8085daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085dae:	bf00      	nop
 8085db0:	08087560 	.word	0x08087560
 8085db4:	20000a38 	.word	0x20000a38
 8085db8:	20000a40 	.word	0x20000a40
 8085dbc:	08087563 	.word	0x08087563
 8085dc0:	20000a3c 	.word	0x20000a3c
 8085dc4:	200001f0 	.word	0x200001f0
 8085dc8:	20000a2b 	.word	0x20000a2b
 8085dcc:	08087567 	.word	0x08087567
 8085dd0:	0808758a 	.word	0x0808758a
 8085dd4:	08087576 	.word	0x08087576
 8085dd8:	08087589 	.word	0x08087589
 8085ddc:	20000a20 	.word	0x20000a20

08085de0 <rshift>:
 8085de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085de2:	6906      	ldr	r6, [r0, #16]
 8085de4:	114b      	asrs	r3, r1, #5
 8085de6:	42b3      	cmp	r3, r6
 8085de8:	f100 0514 	add.w	r5, r0, #20
 8085dec:	da27      	bge.n	8085e3e <rshift+0x5e>
 8085dee:	f011 011f 	ands.w	r1, r1, #31
 8085df2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8085df6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8085dfa:	d101      	bne.n	8085e00 <rshift+0x20>
 8085dfc:	4629      	mov	r1, r5
 8085dfe:	e016      	b.n	8085e2e <rshift+0x4e>
 8085e00:	1d14      	adds	r4, r2, #4
 8085e02:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8085e06:	462b      	mov	r3, r5
 8085e08:	f1c1 0e20 	rsb	lr, r1, #32
 8085e0c:	40ca      	lsrs	r2, r1
 8085e0e:	42b4      	cmp	r4, r6
 8085e10:	d209      	bcs.n	8085e26 <rshift+0x46>
 8085e12:	6827      	ldr	r7, [r4, #0]
 8085e14:	fa07 f70e 	lsl.w	r7, r7, lr
 8085e18:	433a      	orrs	r2, r7
 8085e1a:	f843 2b04 	str.w	r2, [r3], #4
 8085e1e:	f854 2b04 	ldr.w	r2, [r4], #4
 8085e22:	40ca      	lsrs	r2, r1
 8085e24:	e7f3      	b.n	8085e0e <rshift+0x2e>
 8085e26:	601a      	str	r2, [r3, #0]
 8085e28:	b152      	cbz	r2, 8085e40 <rshift+0x60>
 8085e2a:	3304      	adds	r3, #4
 8085e2c:	e008      	b.n	8085e40 <rshift+0x60>
 8085e2e:	42b2      	cmp	r2, r6
 8085e30:	460b      	mov	r3, r1
 8085e32:	d205      	bcs.n	8085e40 <rshift+0x60>
 8085e34:	f852 3b04 	ldr.w	r3, [r2], #4
 8085e38:	f841 3b04 	str.w	r3, [r1], #4
 8085e3c:	e7f7      	b.n	8085e2e <rshift+0x4e>
 8085e3e:	462b      	mov	r3, r5
 8085e40:	1b5b      	subs	r3, r3, r5
 8085e42:	109b      	asrs	r3, r3, #2
 8085e44:	6103      	str	r3, [r0, #16]
 8085e46:	b903      	cbnz	r3, 8085e4a <rshift+0x6a>
 8085e48:	6143      	str	r3, [r0, #20]
 8085e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085e4c <__hexdig_fun>:
 8085e4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8085e50:	2b09      	cmp	r3, #9
 8085e52:	d801      	bhi.n	8085e58 <__hexdig_fun+0xc>
 8085e54:	3820      	subs	r0, #32
 8085e56:	e00a      	b.n	8085e6e <__hexdig_fun+0x22>
 8085e58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8085e5c:	2b05      	cmp	r3, #5
 8085e5e:	d801      	bhi.n	8085e64 <__hexdig_fun+0x18>
 8085e60:	3847      	subs	r0, #71	; 0x47
 8085e62:	e004      	b.n	8085e6e <__hexdig_fun+0x22>
 8085e64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8085e68:	2b05      	cmp	r3, #5
 8085e6a:	d802      	bhi.n	8085e72 <__hexdig_fun+0x26>
 8085e6c:	3827      	subs	r0, #39	; 0x27
 8085e6e:	b2c0      	uxtb	r0, r0
 8085e70:	4770      	bx	lr
 8085e72:	2000      	movs	r0, #0
 8085e74:	4770      	bx	lr

08085e76 <__gethex>:
 8085e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085e7a:	b08b      	sub	sp, #44	; 0x2c
 8085e7c:	468a      	mov	sl, r1
 8085e7e:	4690      	mov	r8, r2
 8085e80:	9306      	str	r3, [sp, #24]
 8085e82:	9002      	str	r0, [sp, #8]
 8085e84:	f7fe fd76 	bl	8084974 <_localeconv_r>
 8085e88:	6803      	ldr	r3, [r0, #0]
 8085e8a:	f04f 0b00 	mov.w	fp, #0
 8085e8e:	4618      	mov	r0, r3
 8085e90:	9303      	str	r3, [sp, #12]
 8085e92:	f7fe fdea 	bl	8084a6a <strlen>
 8085e96:	9b03      	ldr	r3, [sp, #12]
 8085e98:	9001      	str	r0, [sp, #4]
 8085e9a:	4403      	add	r3, r0
 8085e9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8085ea0:	9307      	str	r3, [sp, #28]
 8085ea2:	f8da 3000 	ldr.w	r3, [sl]
 8085ea6:	3302      	adds	r3, #2
 8085ea8:	461f      	mov	r7, r3
 8085eaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8085eae:	2830      	cmp	r0, #48	; 0x30
 8085eb0:	d102      	bne.n	8085eb8 <__gethex+0x42>
 8085eb2:	f10b 0b01 	add.w	fp, fp, #1
 8085eb6:	e7f7      	b.n	8085ea8 <__gethex+0x32>
 8085eb8:	f7ff ffc8 	bl	8085e4c <__hexdig_fun>
 8085ebc:	4604      	mov	r4, r0
 8085ebe:	b9e0      	cbnz	r0, 8085efa <__gethex+0x84>
 8085ec0:	9a01      	ldr	r2, [sp, #4]
 8085ec2:	9903      	ldr	r1, [sp, #12]
 8085ec4:	4638      	mov	r0, r7
 8085ec6:	f7fe fdd8 	bl	8084a7a <strncmp>
 8085eca:	2800      	cmp	r0, #0
 8085ecc:	d134      	bne.n	8085f38 <__gethex+0xc2>
 8085ece:	9b01      	ldr	r3, [sp, #4]
 8085ed0:	5cf8      	ldrb	r0, [r7, r3]
 8085ed2:	18fe      	adds	r6, r7, r3
 8085ed4:	f7ff ffba 	bl	8085e4c <__hexdig_fun>
 8085ed8:	b380      	cbz	r0, 8085f3c <__gethex+0xc6>
 8085eda:	4633      	mov	r3, r6
 8085edc:	7818      	ldrb	r0, [r3, #0]
 8085ede:	461f      	mov	r7, r3
 8085ee0:	2830      	cmp	r0, #48	; 0x30
 8085ee2:	f103 0301 	add.w	r3, r3, #1
 8085ee6:	d0f9      	beq.n	8085edc <__gethex+0x66>
 8085ee8:	f7ff ffb0 	bl	8085e4c <__hexdig_fun>
 8085eec:	fab0 f580 	clz	r5, r0
 8085ef0:	4634      	mov	r4, r6
 8085ef2:	096d      	lsrs	r5, r5, #5
 8085ef4:	f04f 0b01 	mov.w	fp, #1
 8085ef8:	e001      	b.n	8085efe <__gethex+0x88>
 8085efa:	2500      	movs	r5, #0
 8085efc:	462c      	mov	r4, r5
 8085efe:	463a      	mov	r2, r7
 8085f00:	4616      	mov	r6, r2
 8085f02:	7830      	ldrb	r0, [r6, #0]
 8085f04:	3201      	adds	r2, #1
 8085f06:	f7ff ffa1 	bl	8085e4c <__hexdig_fun>
 8085f0a:	2800      	cmp	r0, #0
 8085f0c:	d1f8      	bne.n	8085f00 <__gethex+0x8a>
 8085f0e:	9a01      	ldr	r2, [sp, #4]
 8085f10:	9903      	ldr	r1, [sp, #12]
 8085f12:	4630      	mov	r0, r6
 8085f14:	f7fe fdb1 	bl	8084a7a <strncmp>
 8085f18:	b950      	cbnz	r0, 8085f30 <__gethex+0xba>
 8085f1a:	b954      	cbnz	r4, 8085f32 <__gethex+0xbc>
 8085f1c:	9b01      	ldr	r3, [sp, #4]
 8085f1e:	18f4      	adds	r4, r6, r3
 8085f20:	4622      	mov	r2, r4
 8085f22:	4616      	mov	r6, r2
 8085f24:	7830      	ldrb	r0, [r6, #0]
 8085f26:	3201      	adds	r2, #1
 8085f28:	f7ff ff90 	bl	8085e4c <__hexdig_fun>
 8085f2c:	2800      	cmp	r0, #0
 8085f2e:	d1f8      	bne.n	8085f22 <__gethex+0xac>
 8085f30:	b134      	cbz	r4, 8085f40 <__gethex+0xca>
 8085f32:	1ba4      	subs	r4, r4, r6
 8085f34:	00a4      	lsls	r4, r4, #2
 8085f36:	e003      	b.n	8085f40 <__gethex+0xca>
 8085f38:	463e      	mov	r6, r7
 8085f3a:	e000      	b.n	8085f3e <__gethex+0xc8>
 8085f3c:	4604      	mov	r4, r0
 8085f3e:	2501      	movs	r5, #1
 8085f40:	7833      	ldrb	r3, [r6, #0]
 8085f42:	2b50      	cmp	r3, #80	; 0x50
 8085f44:	d001      	beq.n	8085f4a <__gethex+0xd4>
 8085f46:	2b70      	cmp	r3, #112	; 0x70
 8085f48:	d12a      	bne.n	8085fa0 <__gethex+0x12a>
 8085f4a:	7873      	ldrb	r3, [r6, #1]
 8085f4c:	2b2b      	cmp	r3, #43	; 0x2b
 8085f4e:	d008      	beq.n	8085f62 <__gethex+0xec>
 8085f50:	2b2d      	cmp	r3, #45	; 0x2d
 8085f52:	d003      	beq.n	8085f5c <__gethex+0xe6>
 8085f54:	1c71      	adds	r1, r6, #1
 8085f56:	f04f 0900 	mov.w	r9, #0
 8085f5a:	e005      	b.n	8085f68 <__gethex+0xf2>
 8085f5c:	f04f 0901 	mov.w	r9, #1
 8085f60:	e001      	b.n	8085f66 <__gethex+0xf0>
 8085f62:	f04f 0900 	mov.w	r9, #0
 8085f66:	1cb1      	adds	r1, r6, #2
 8085f68:	7808      	ldrb	r0, [r1, #0]
 8085f6a:	f7ff ff6f 	bl	8085e4c <__hexdig_fun>
 8085f6e:	1e43      	subs	r3, r0, #1
 8085f70:	b2db      	uxtb	r3, r3
 8085f72:	2b18      	cmp	r3, #24
 8085f74:	d814      	bhi.n	8085fa0 <__gethex+0x12a>
 8085f76:	f1a0 0210 	sub.w	r2, r0, #16
 8085f7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8085f7e:	f7ff ff65 	bl	8085e4c <__hexdig_fun>
 8085f82:	1e43      	subs	r3, r0, #1
 8085f84:	b2db      	uxtb	r3, r3
 8085f86:	2b18      	cmp	r3, #24
 8085f88:	d804      	bhi.n	8085f94 <__gethex+0x11e>
 8085f8a:	230a      	movs	r3, #10
 8085f8c:	fb03 0202 	mla	r2, r3, r2, r0
 8085f90:	3a10      	subs	r2, #16
 8085f92:	e7f2      	b.n	8085f7a <__gethex+0x104>
 8085f94:	f1b9 0f00 	cmp.w	r9, #0
 8085f98:	d000      	beq.n	8085f9c <__gethex+0x126>
 8085f9a:	4252      	negs	r2, r2
 8085f9c:	4414      	add	r4, r2
 8085f9e:	e000      	b.n	8085fa2 <__gethex+0x12c>
 8085fa0:	4631      	mov	r1, r6
 8085fa2:	f8ca 1000 	str.w	r1, [sl]
 8085fa6:	b12d      	cbz	r5, 8085fb4 <__gethex+0x13e>
 8085fa8:	f1bb 0f00 	cmp.w	fp, #0
 8085fac:	bf14      	ite	ne
 8085fae:	2000      	movne	r0, #0
 8085fb0:	2006      	moveq	r0, #6
 8085fb2:	e17c      	b.n	80862ae <__gethex+0x438>
 8085fb4:	4629      	mov	r1, r5
 8085fb6:	1bf3      	subs	r3, r6, r7
 8085fb8:	3b01      	subs	r3, #1
 8085fba:	2b07      	cmp	r3, #7
 8085fbc:	dd02      	ble.n	8085fc4 <__gethex+0x14e>
 8085fbe:	3101      	adds	r1, #1
 8085fc0:	105b      	asrs	r3, r3, #1
 8085fc2:	e7fa      	b.n	8085fba <__gethex+0x144>
 8085fc4:	9802      	ldr	r0, [sp, #8]
 8085fc6:	f000 fb07 	bl	80865d8 <_Balloc>
 8085fca:	f04f 0900 	mov.w	r9, #0
 8085fce:	4605      	mov	r5, r0
 8085fd0:	46cb      	mov	fp, r9
 8085fd2:	9b01      	ldr	r3, [sp, #4]
 8085fd4:	f100 0a14 	add.w	sl, r0, #20
 8085fd8:	f1c3 0301 	rsb	r3, r3, #1
 8085fdc:	f8cd a010 	str.w	sl, [sp, #16]
 8085fe0:	9308      	str	r3, [sp, #32]
 8085fe2:	42b7      	cmp	r7, r6
 8085fe4:	d22f      	bcs.n	8086046 <__gethex+0x1d0>
 8085fe6:	1e73      	subs	r3, r6, #1
 8085fe8:	9305      	str	r3, [sp, #20]
 8085fea:	9a07      	ldr	r2, [sp, #28]
 8085fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8085ff0:	4293      	cmp	r3, r2
 8085ff2:	d00b      	beq.n	808600c <__gethex+0x196>
 8085ff4:	f1bb 0f20 	cmp.w	fp, #32
 8085ff8:	d116      	bne.n	8086028 <__gethex+0x1b2>
 8085ffa:	9b04      	ldr	r3, [sp, #16]
 8085ffc:	f8c3 9000 	str.w	r9, [r3]
 8086000:	3304      	adds	r3, #4
 8086002:	f04f 0900 	mov.w	r9, #0
 8086006:	9304      	str	r3, [sp, #16]
 8086008:	46cb      	mov	fp, r9
 808600a:	e00d      	b.n	8086028 <__gethex+0x1b2>
 808600c:	9b05      	ldr	r3, [sp, #20]
 808600e:	9a08      	ldr	r2, [sp, #32]
 8086010:	4413      	add	r3, r2
 8086012:	429f      	cmp	r7, r3
 8086014:	d8ee      	bhi.n	8085ff4 <__gethex+0x17e>
 8086016:	4618      	mov	r0, r3
 8086018:	9a01      	ldr	r2, [sp, #4]
 808601a:	9903      	ldr	r1, [sp, #12]
 808601c:	9309      	str	r3, [sp, #36]	; 0x24
 808601e:	f7fe fd2c 	bl	8084a7a <strncmp>
 8086022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086024:	b168      	cbz	r0, 8086042 <__gethex+0x1cc>
 8086026:	e7e5      	b.n	8085ff4 <__gethex+0x17e>
 8086028:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808602c:	f7ff ff0e 	bl	8085e4c <__hexdig_fun>
 8086030:	f000 000f 	and.w	r0, r0, #15
 8086034:	fa00 f00b 	lsl.w	r0, r0, fp
 8086038:	9b05      	ldr	r3, [sp, #20]
 808603a:	ea49 0900 	orr.w	r9, r9, r0
 808603e:	f10b 0b04 	add.w	fp, fp, #4
 8086042:	461e      	mov	r6, r3
 8086044:	e7cd      	b.n	8085fe2 <__gethex+0x16c>
 8086046:	9804      	ldr	r0, [sp, #16]
 8086048:	f840 9b04 	str.w	r9, [r0], #4
 808604c:	ebca 0000 	rsb	r0, sl, r0
 8086050:	1080      	asrs	r0, r0, #2
 8086052:	6128      	str	r0, [r5, #16]
 8086054:	0147      	lsls	r7, r0, #5
 8086056:	4648      	mov	r0, r9
 8086058:	f000 fb83 	bl	8086762 <__hi0bits>
 808605c:	f8d8 6000 	ldr.w	r6, [r8]
 8086060:	1a38      	subs	r0, r7, r0
 8086062:	42b0      	cmp	r0, r6
 8086064:	dd26      	ble.n	80860b4 <__gethex+0x23e>
 8086066:	1b87      	subs	r7, r0, r6
 8086068:	4639      	mov	r1, r7
 808606a:	4628      	mov	r0, r5
 808606c:	f000 fe7b 	bl	8086d66 <__any_on>
 8086070:	b1c8      	cbz	r0, 80860a6 <__gethex+0x230>
 8086072:	1e7b      	subs	r3, r7, #1
 8086074:	1159      	asrs	r1, r3, #5
 8086076:	f003 021f 	and.w	r2, r3, #31
 808607a:	f04f 0901 	mov.w	r9, #1
 808607e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8086082:	fa09 f202 	lsl.w	r2, r9, r2
 8086086:	420a      	tst	r2, r1
 8086088:	d00e      	beq.n	80860a8 <__gethex+0x232>
 808608a:	454b      	cmp	r3, r9
 808608c:	dc02      	bgt.n	8086094 <__gethex+0x21e>
 808608e:	f04f 0902 	mov.w	r9, #2
 8086092:	e009      	b.n	80860a8 <__gethex+0x232>
 8086094:	1eb9      	subs	r1, r7, #2
 8086096:	4628      	mov	r0, r5
 8086098:	f000 fe65 	bl	8086d66 <__any_on>
 808609c:	2800      	cmp	r0, #0
 808609e:	d0f6      	beq.n	808608e <__gethex+0x218>
 80860a0:	f04f 0903 	mov.w	r9, #3
 80860a4:	e000      	b.n	80860a8 <__gethex+0x232>
 80860a6:	4681      	mov	r9, r0
 80860a8:	4639      	mov	r1, r7
 80860aa:	4628      	mov	r0, r5
 80860ac:	f7ff fe98 	bl	8085de0 <rshift>
 80860b0:	443c      	add	r4, r7
 80860b2:	e00c      	b.n	80860ce <__gethex+0x258>
 80860b4:	da09      	bge.n	80860ca <__gethex+0x254>
 80860b6:	1a37      	subs	r7, r6, r0
 80860b8:	4629      	mov	r1, r5
 80860ba:	463a      	mov	r2, r7
 80860bc:	9802      	ldr	r0, [sp, #8]
 80860be:	f000 fc85 	bl	80869cc <__lshift>
 80860c2:	4605      	mov	r5, r0
 80860c4:	1be4      	subs	r4, r4, r7
 80860c6:	f100 0a14 	add.w	sl, r0, #20
 80860ca:	f04f 0900 	mov.w	r9, #0
 80860ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80860d2:	429c      	cmp	r4, r3
 80860d4:	dd08      	ble.n	80860e8 <__gethex+0x272>
 80860d6:	9802      	ldr	r0, [sp, #8]
 80860d8:	4629      	mov	r1, r5
 80860da:	f000 fab2 	bl	8086642 <_Bfree>
 80860de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80860e0:	2300      	movs	r3, #0
 80860e2:	6013      	str	r3, [r2, #0]
 80860e4:	20a3      	movs	r0, #163	; 0xa3
 80860e6:	e0e2      	b.n	80862ae <__gethex+0x438>
 80860e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80860ec:	4284      	cmp	r4, r0
 80860ee:	da53      	bge.n	8086198 <__gethex+0x322>
 80860f0:	1b04      	subs	r4, r0, r4
 80860f2:	42a6      	cmp	r6, r4
 80860f4:	dc2e      	bgt.n	8086154 <__gethex+0x2de>
 80860f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80860fa:	2b02      	cmp	r3, #2
 80860fc:	d01a      	beq.n	8086134 <__gethex+0x2be>
 80860fe:	2b03      	cmp	r3, #3
 8086100:	d01c      	beq.n	808613c <__gethex+0x2c6>
 8086102:	2b01      	cmp	r3, #1
 8086104:	d11d      	bne.n	8086142 <__gethex+0x2cc>
 8086106:	42a6      	cmp	r6, r4
 8086108:	d11b      	bne.n	8086142 <__gethex+0x2cc>
 808610a:	2e01      	cmp	r6, #1
 808610c:	dc0b      	bgt.n	8086126 <__gethex+0x2b0>
 808610e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8086112:	9a06      	ldr	r2, [sp, #24]
 8086114:	2062      	movs	r0, #98	; 0x62
 8086116:	6013      	str	r3, [r2, #0]
 8086118:	2301      	movs	r3, #1
 808611a:	612b      	str	r3, [r5, #16]
 808611c:	f8ca 3000 	str.w	r3, [sl]
 8086120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8086122:	601d      	str	r5, [r3, #0]
 8086124:	e0c3      	b.n	80862ae <__gethex+0x438>
 8086126:	1e71      	subs	r1, r6, #1
 8086128:	4628      	mov	r0, r5
 808612a:	f000 fe1c 	bl	8086d66 <__any_on>
 808612e:	2800      	cmp	r0, #0
 8086130:	d1ed      	bne.n	808610e <__gethex+0x298>
 8086132:	e006      	b.n	8086142 <__gethex+0x2cc>
 8086134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8086136:	2b00      	cmp	r3, #0
 8086138:	d0e9      	beq.n	808610e <__gethex+0x298>
 808613a:	e002      	b.n	8086142 <__gethex+0x2cc>
 808613c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808613e:	2b00      	cmp	r3, #0
 8086140:	d1e5      	bne.n	808610e <__gethex+0x298>
 8086142:	9802      	ldr	r0, [sp, #8]
 8086144:	4629      	mov	r1, r5
 8086146:	f000 fa7c 	bl	8086642 <_Bfree>
 808614a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808614c:	2300      	movs	r3, #0
 808614e:	6013      	str	r3, [r2, #0]
 8086150:	2050      	movs	r0, #80	; 0x50
 8086152:	e0ac      	b.n	80862ae <__gethex+0x438>
 8086154:	1e67      	subs	r7, r4, #1
 8086156:	f1b9 0f00 	cmp.w	r9, #0
 808615a:	d106      	bne.n	808616a <__gethex+0x2f4>
 808615c:	b13f      	cbz	r7, 808616e <__gethex+0x2f8>
 808615e:	4639      	mov	r1, r7
 8086160:	4628      	mov	r0, r5
 8086162:	f000 fe00 	bl	8086d66 <__any_on>
 8086166:	4681      	mov	r9, r0
 8086168:	e001      	b.n	808616e <__gethex+0x2f8>
 808616a:	f04f 0901 	mov.w	r9, #1
 808616e:	117a      	asrs	r2, r7, #5
 8086170:	2301      	movs	r3, #1
 8086172:	f007 071f 	and.w	r7, r7, #31
 8086176:	fa03 f707 	lsl.w	r7, r3, r7
 808617a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808617e:	4621      	mov	r1, r4
 8086180:	421f      	tst	r7, r3
 8086182:	4628      	mov	r0, r5
 8086184:	bf18      	it	ne
 8086186:	f049 0902 	orrne.w	r9, r9, #2
 808618a:	1b36      	subs	r6, r6, r4
 808618c:	f7ff fe28 	bl	8085de0 <rshift>
 8086190:	2702      	movs	r7, #2
 8086192:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8086196:	e000      	b.n	808619a <__gethex+0x324>
 8086198:	2701      	movs	r7, #1
 808619a:	f1b9 0f00 	cmp.w	r9, #0
 808619e:	f000 8081 	beq.w	80862a4 <__gethex+0x42e>
 80861a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80861a6:	2b02      	cmp	r3, #2
 80861a8:	d00e      	beq.n	80861c8 <__gethex+0x352>
 80861aa:	2b03      	cmp	r3, #3
 80861ac:	d010      	beq.n	80861d0 <__gethex+0x35a>
 80861ae:	2b01      	cmp	r3, #1
 80861b0:	d176      	bne.n	80862a0 <__gethex+0x42a>
 80861b2:	f019 0f02 	tst.w	r9, #2
 80861b6:	d073      	beq.n	80862a0 <__gethex+0x42a>
 80861b8:	f8da 0000 	ldr.w	r0, [sl]
 80861bc:	ea49 0900 	orr.w	r9, r9, r0
 80861c0:	f019 0f01 	tst.w	r9, #1
 80861c4:	d107      	bne.n	80861d6 <__gethex+0x360>
 80861c6:	e06b      	b.n	80862a0 <__gethex+0x42a>
 80861c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80861ca:	f1c3 0301 	rsb	r3, r3, #1
 80861ce:	9315      	str	r3, [sp, #84]	; 0x54
 80861d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80861d2:	2b00      	cmp	r3, #0
 80861d4:	d064      	beq.n	80862a0 <__gethex+0x42a>
 80861d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80861da:	f105 0314 	add.w	r3, r5, #20
 80861de:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80861e2:	eb03 0109 	add.w	r1, r3, r9
 80861e6:	2000      	movs	r0, #0
 80861e8:	681a      	ldr	r2, [r3, #0]
 80861ea:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80861ee:	d002      	beq.n	80861f6 <__gethex+0x380>
 80861f0:	3201      	adds	r2, #1
 80861f2:	601a      	str	r2, [r3, #0]
 80861f4:	e020      	b.n	8086238 <__gethex+0x3c2>
 80861f6:	f843 0b04 	str.w	r0, [r3], #4
 80861fa:	4299      	cmp	r1, r3
 80861fc:	d8f4      	bhi.n	80861e8 <__gethex+0x372>
 80861fe:	68ab      	ldr	r3, [r5, #8]
 8086200:	459a      	cmp	sl, r3
 8086202:	db12      	blt.n	808622a <__gethex+0x3b4>
 8086204:	6869      	ldr	r1, [r5, #4]
 8086206:	9802      	ldr	r0, [sp, #8]
 8086208:	3101      	adds	r1, #1
 808620a:	f000 f9e5 	bl	80865d8 <_Balloc>
 808620e:	4683      	mov	fp, r0
 8086210:	692a      	ldr	r2, [r5, #16]
 8086212:	f105 010c 	add.w	r1, r5, #12
 8086216:	3202      	adds	r2, #2
 8086218:	0092      	lsls	r2, r2, #2
 808621a:	300c      	adds	r0, #12
 808621c:	f7fe fbae 	bl	808497c <memcpy>
 8086220:	4629      	mov	r1, r5
 8086222:	9802      	ldr	r0, [sp, #8]
 8086224:	f000 fa0d 	bl	8086642 <_Bfree>
 8086228:	465d      	mov	r5, fp
 808622a:	692b      	ldr	r3, [r5, #16]
 808622c:	1c5a      	adds	r2, r3, #1
 808622e:	612a      	str	r2, [r5, #16]
 8086230:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8086234:	2201      	movs	r2, #1
 8086236:	615a      	str	r2, [r3, #20]
 8086238:	2f02      	cmp	r7, #2
 808623a:	f105 0214 	add.w	r2, r5, #20
 808623e:	d111      	bne.n	8086264 <__gethex+0x3ee>
 8086240:	f8d8 3000 	ldr.w	r3, [r8]
 8086244:	3b01      	subs	r3, #1
 8086246:	429e      	cmp	r6, r3
 8086248:	d127      	bne.n	808629a <__gethex+0x424>
 808624a:	1171      	asrs	r1, r6, #5
 808624c:	2301      	movs	r3, #1
 808624e:	f006 061f 	and.w	r6, r6, #31
 8086252:	fa03 f606 	lsl.w	r6, r3, r6
 8086256:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808625a:	421e      	tst	r6, r3
 808625c:	bf0c      	ite	eq
 808625e:	2702      	moveq	r7, #2
 8086260:	2701      	movne	r7, #1
 8086262:	e01a      	b.n	808629a <__gethex+0x424>
 8086264:	692b      	ldr	r3, [r5, #16]
 8086266:	459a      	cmp	sl, r3
 8086268:	da0a      	bge.n	8086280 <__gethex+0x40a>
 808626a:	2101      	movs	r1, #1
 808626c:	4628      	mov	r0, r5
 808626e:	f7ff fdb7 	bl	8085de0 <rshift>
 8086272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086276:	3401      	adds	r4, #1
 8086278:	429c      	cmp	r4, r3
 808627a:	f73f af2c 	bgt.w	80860d6 <__gethex+0x260>
 808627e:	e00b      	b.n	8086298 <__gethex+0x422>
 8086280:	f016 061f 	ands.w	r6, r6, #31
 8086284:	d008      	beq.n	8086298 <__gethex+0x422>
 8086286:	4491      	add	r9, r2
 8086288:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808628c:	f000 fa69 	bl	8086762 <__hi0bits>
 8086290:	f1c6 0620 	rsb	r6, r6, #32
 8086294:	42b0      	cmp	r0, r6
 8086296:	dbe8      	blt.n	808626a <__gethex+0x3f4>
 8086298:	2701      	movs	r7, #1
 808629a:	f047 0720 	orr.w	r7, r7, #32
 808629e:	e001      	b.n	80862a4 <__gethex+0x42e>
 80862a0:	f047 0710 	orr.w	r7, r7, #16
 80862a4:	4638      	mov	r0, r7
 80862a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80862a8:	601d      	str	r5, [r3, #0]
 80862aa:	9b06      	ldr	r3, [sp, #24]
 80862ac:	601c      	str	r4, [r3, #0]
 80862ae:	b00b      	add	sp, #44	; 0x2c
 80862b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080862b4 <L_shift>:
 80862b4:	f1c2 0208 	rsb	r2, r2, #8
 80862b8:	0092      	lsls	r2, r2, #2
 80862ba:	b570      	push	{r4, r5, r6, lr}
 80862bc:	f1c2 0620 	rsb	r6, r2, #32
 80862c0:	6843      	ldr	r3, [r0, #4]
 80862c2:	6805      	ldr	r5, [r0, #0]
 80862c4:	fa03 f406 	lsl.w	r4, r3, r6
 80862c8:	432c      	orrs	r4, r5
 80862ca:	40d3      	lsrs	r3, r2
 80862cc:	6004      	str	r4, [r0, #0]
 80862ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80862d2:	4288      	cmp	r0, r1
 80862d4:	d3f4      	bcc.n	80862c0 <L_shift+0xc>
 80862d6:	bd70      	pop	{r4, r5, r6, pc}

080862d8 <__match>:
 80862d8:	b530      	push	{r4, r5, lr}
 80862da:	6803      	ldr	r3, [r0, #0]
 80862dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80862e0:	3301      	adds	r3, #1
 80862e2:	b14c      	cbz	r4, 80862f8 <__match+0x20>
 80862e4:	781a      	ldrb	r2, [r3, #0]
 80862e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80862ea:	2d19      	cmp	r5, #25
 80862ec:	bf98      	it	ls
 80862ee:	3220      	addls	r2, #32
 80862f0:	42a2      	cmp	r2, r4
 80862f2:	d0f3      	beq.n	80862dc <__match+0x4>
 80862f4:	2000      	movs	r0, #0
 80862f6:	bd30      	pop	{r4, r5, pc}
 80862f8:	6003      	str	r3, [r0, #0]
 80862fa:	2001      	movs	r0, #1
 80862fc:	bd30      	pop	{r4, r5, pc}

080862fe <__hexnan>:
 80862fe:	680b      	ldr	r3, [r1, #0]
 8086300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086304:	115e      	asrs	r6, r3, #5
 8086306:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808630a:	f013 031f 	ands.w	r3, r3, #31
 808630e:	bf18      	it	ne
 8086310:	3604      	addne	r6, #4
 8086312:	1f35      	subs	r5, r6, #4
 8086314:	4617      	mov	r7, r2
 8086316:	2200      	movs	r2, #0
 8086318:	4682      	mov	sl, r0
 808631a:	46a8      	mov	r8, r5
 808631c:	462c      	mov	r4, r5
 808631e:	4691      	mov	r9, r2
 8086320:	b085      	sub	sp, #20
 8086322:	f8d0 b000 	ldr.w	fp, [r0]
 8086326:	9301      	str	r3, [sp, #4]
 8086328:	f846 2c04 	str.w	r2, [r6, #-4]
 808632c:	9200      	str	r2, [sp, #0]
 808632e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8086332:	2900      	cmp	r1, #0
 8086334:	d03c      	beq.n	80863b0 <__hexnan+0xb2>
 8086336:	4608      	mov	r0, r1
 8086338:	9203      	str	r2, [sp, #12]
 808633a:	9102      	str	r1, [sp, #8]
 808633c:	f7ff fd86 	bl	8085e4c <__hexdig_fun>
 8086340:	9a03      	ldr	r2, [sp, #12]
 8086342:	bb00      	cbnz	r0, 8086386 <__hexnan+0x88>
 8086344:	9902      	ldr	r1, [sp, #8]
 8086346:	2920      	cmp	r1, #32
 8086348:	d816      	bhi.n	8086378 <__hexnan+0x7a>
 808634a:	9b00      	ldr	r3, [sp, #0]
 808634c:	4599      	cmp	r9, r3
 808634e:	ddee      	ble.n	808632e <__hexnan+0x30>
 8086350:	4544      	cmp	r4, r8
 8086352:	d205      	bcs.n	8086360 <__hexnan+0x62>
 8086354:	2a07      	cmp	r2, #7
 8086356:	dc03      	bgt.n	8086360 <__hexnan+0x62>
 8086358:	4641      	mov	r1, r8
 808635a:	4620      	mov	r0, r4
 808635c:	f7ff ffaa 	bl	80862b4 <L_shift>
 8086360:	42bc      	cmp	r4, r7
 8086362:	d923      	bls.n	80863ac <__hexnan+0xae>
 8086364:	2300      	movs	r3, #0
 8086366:	f1a4 0804 	sub.w	r8, r4, #4
 808636a:	f844 3c04 	str.w	r3, [r4, #-4]
 808636e:	f8cd 9000 	str.w	r9, [sp]
 8086372:	4644      	mov	r4, r8
 8086374:	461a      	mov	r2, r3
 8086376:	e7da      	b.n	808632e <__hexnan+0x30>
 8086378:	2929      	cmp	r1, #41	; 0x29
 808637a:	d148      	bne.n	808640e <__hexnan+0x110>
 808637c:	f10b 0301 	add.w	r3, fp, #1
 8086380:	f8ca 3000 	str.w	r3, [sl]
 8086384:	e014      	b.n	80863b0 <__hexnan+0xb2>
 8086386:	3201      	adds	r2, #1
 8086388:	2a08      	cmp	r2, #8
 808638a:	f109 0901 	add.w	r9, r9, #1
 808638e:	dd06      	ble.n	808639e <__hexnan+0xa0>
 8086390:	42bc      	cmp	r4, r7
 8086392:	d9cc      	bls.n	808632e <__hexnan+0x30>
 8086394:	2300      	movs	r3, #0
 8086396:	f844 3c04 	str.w	r3, [r4, #-4]
 808639a:	2201      	movs	r2, #1
 808639c:	3c04      	subs	r4, #4
 808639e:	6821      	ldr	r1, [r4, #0]
 80863a0:	f000 000f 	and.w	r0, r0, #15
 80863a4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80863a8:	6020      	str	r0, [r4, #0]
 80863aa:	e7c0      	b.n	808632e <__hexnan+0x30>
 80863ac:	2208      	movs	r2, #8
 80863ae:	e7be      	b.n	808632e <__hexnan+0x30>
 80863b0:	f1b9 0f00 	cmp.w	r9, #0
 80863b4:	d02b      	beq.n	808640e <__hexnan+0x110>
 80863b6:	4544      	cmp	r4, r8
 80863b8:	d205      	bcs.n	80863c6 <__hexnan+0xc8>
 80863ba:	2a07      	cmp	r2, #7
 80863bc:	dc03      	bgt.n	80863c6 <__hexnan+0xc8>
 80863be:	4641      	mov	r1, r8
 80863c0:	4620      	mov	r0, r4
 80863c2:	f7ff ff77 	bl	80862b4 <L_shift>
 80863c6:	42bc      	cmp	r4, r7
 80863c8:	d90c      	bls.n	80863e4 <__hexnan+0xe6>
 80863ca:	463b      	mov	r3, r7
 80863cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80863d0:	42a5      	cmp	r5, r4
 80863d2:	f843 2b04 	str.w	r2, [r3], #4
 80863d6:	d2f9      	bcs.n	80863cc <__hexnan+0xce>
 80863d8:	2200      	movs	r2, #0
 80863da:	f843 2b04 	str.w	r2, [r3], #4
 80863de:	429d      	cmp	r5, r3
 80863e0:	d2fb      	bcs.n	80863da <__hexnan+0xdc>
 80863e2:	e00b      	b.n	80863fc <__hexnan+0xfe>
 80863e4:	9b01      	ldr	r3, [sp, #4]
 80863e6:	b14b      	cbz	r3, 80863fc <__hexnan+0xfe>
 80863e8:	f1c3 0220 	rsb	r2, r3, #32
 80863ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80863f0:	40d3      	lsrs	r3, r2
 80863f2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80863f6:	4013      	ands	r3, r2
 80863f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80863fc:	682b      	ldr	r3, [r5, #0]
 80863fe:	b943      	cbnz	r3, 8086412 <__hexnan+0x114>
 8086400:	42bd      	cmp	r5, r7
 8086402:	d102      	bne.n	808640a <__hexnan+0x10c>
 8086404:	2301      	movs	r3, #1
 8086406:	602b      	str	r3, [r5, #0]
 8086408:	e003      	b.n	8086412 <__hexnan+0x114>
 808640a:	3d04      	subs	r5, #4
 808640c:	e7f6      	b.n	80863fc <__hexnan+0xfe>
 808640e:	2004      	movs	r0, #4
 8086410:	e000      	b.n	8086414 <__hexnan+0x116>
 8086412:	2005      	movs	r0, #5
 8086414:	b005      	add	sp, #20
 8086416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808641c <_findenv_r>:
 808641c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086420:	4607      	mov	r7, r0
 8086422:	468b      	mov	fp, r1
 8086424:	4690      	mov	r8, r2
 8086426:	f000 fcce 	bl	8086dc6 <__env_lock>
 808642a:	4b19      	ldr	r3, [pc, #100]	; (8086490 <_findenv_r+0x74>)
 808642c:	681d      	ldr	r5, [r3, #0]
 808642e:	469a      	mov	sl, r3
 8086430:	b13d      	cbz	r5, 8086442 <_findenv_r+0x26>
 8086432:	465c      	mov	r4, fp
 8086434:	4623      	mov	r3, r4
 8086436:	f813 2b01 	ldrb.w	r2, [r3], #1
 808643a:	b142      	cbz	r2, 808644e <_findenv_r+0x32>
 808643c:	2a3d      	cmp	r2, #61	; 0x3d
 808643e:	461c      	mov	r4, r3
 8086440:	d1f8      	bne.n	8086434 <_findenv_r+0x18>
 8086442:	4638      	mov	r0, r7
 8086444:	f000 fcc0 	bl	8086dc8 <__env_unlock>
 8086448:	2000      	movs	r0, #0
 808644a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808644e:	ebcb 0404 	rsb	r4, fp, r4
 8086452:	46a9      	mov	r9, r5
 8086454:	f859 0b04 	ldr.w	r0, [r9], #4
 8086458:	2800      	cmp	r0, #0
 808645a:	d0f2      	beq.n	8086442 <_findenv_r+0x26>
 808645c:	4622      	mov	r2, r4
 808645e:	4659      	mov	r1, fp
 8086460:	f7fe fb0b 	bl	8084a7a <strncmp>
 8086464:	b988      	cbnz	r0, 808648a <_findenv_r+0x6e>
 8086466:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808646a:	191e      	adds	r6, r3, r4
 808646c:	5d1b      	ldrb	r3, [r3, r4]
 808646e:	2b3d      	cmp	r3, #61	; 0x3d
 8086470:	d10b      	bne.n	808648a <_findenv_r+0x6e>
 8086472:	f8da 3000 	ldr.w	r3, [sl]
 8086476:	4638      	mov	r0, r7
 8086478:	1aed      	subs	r5, r5, r3
 808647a:	10ad      	asrs	r5, r5, #2
 808647c:	f8c8 5000 	str.w	r5, [r8]
 8086480:	f000 fca2 	bl	8086dc8 <__env_unlock>
 8086484:	1c70      	adds	r0, r6, #1
 8086486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808648a:	464d      	mov	r5, r9
 808648c:	e7e1      	b.n	8086452 <_findenv_r+0x36>
 808648e:	bf00      	nop
 8086490:	20000238 	.word	0x20000238

08086494 <_getenv_r>:
 8086494:	b507      	push	{r0, r1, r2, lr}
 8086496:	aa01      	add	r2, sp, #4
 8086498:	f7ff ffc0 	bl	808641c <_findenv_r>
 808649c:	b003      	add	sp, #12
 808649e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080864a4 <__gettzinfo>:
 80864a4:	4800      	ldr	r0, [pc, #0]	; (80864a8 <__gettzinfo+0x4>)
 80864a6:	4770      	bx	lr
 80864a8:	200001f8 	.word	0x200001f8

080864ac <gmtime_r>:
 80864ac:	6802      	ldr	r2, [r0, #0]
 80864ae:	4b46      	ldr	r3, [pc, #280]	; (80865c8 <gmtime_r+0x11c>)
 80864b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80864b2:	fb92 f4f3 	sdiv	r4, r2, r3
 80864b6:	fb03 2214 	mls	r2, r3, r4, r2
 80864ba:	2a00      	cmp	r2, #0
 80864bc:	bfbc      	itt	lt
 80864be:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80864c2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80864c6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80864ca:	fb92 f3f0 	sdiv	r3, r2, r0
 80864ce:	fb00 2213 	mls	r2, r0, r3, r2
 80864d2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80864d6:	608b      	str	r3, [r1, #8]
 80864d8:	fb92 f3f0 	sdiv	r3, r2, r0
 80864dc:	fb00 2213 	mls	r2, r0, r3, r2
 80864e0:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80864e4:	bfac      	ite	ge
 80864e6:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80864ea:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80864ee:	604b      	str	r3, [r1, #4]
 80864f0:	600a      	str	r2, [r1, #0]
 80864f2:	2307      	movs	r3, #7
 80864f4:	1ce2      	adds	r2, r4, #3
 80864f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80864fa:	4d34      	ldr	r5, [pc, #208]	; (80865cc <gmtime_r+0x120>)
 80864fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8086500:	fb94 f5f5 	sdiv	r5, r4, r5
 8086504:	1ad3      	subs	r3, r2, r3
 8086506:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808650a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808650e:	618b      	str	r3, [r1, #24]
 8086510:	4b2f      	ldr	r3, [pc, #188]	; (80865d0 <gmtime_r+0x124>)
 8086512:	4830      	ldr	r0, [pc, #192]	; (80865d4 <gmtime_r+0x128>)
 8086514:	fb03 4405 	mla	r4, r3, r5, r4
 8086518:	fbb4 f2f2 	udiv	r2, r4, r2
 808651c:	fbb4 f3f7 	udiv	r3, r4, r7
 8086520:	fbb4 f0f0 	udiv	r0, r4, r0
 8086524:	4422      	add	r2, r4
 8086526:	1ad2      	subs	r2, r2, r3
 8086528:	f648 6694 	movw	r6, #36500	; 0x8e94
 808652c:	1a13      	subs	r3, r2, r0
 808652e:	f240 126d 	movw	r2, #365	; 0x16d
 8086532:	fbb3 f6f6 	udiv	r6, r3, r6
 8086536:	fbb3 f0f2 	udiv	r0, r3, r2
 808653a:	fbb3 f3f7 	udiv	r3, r3, r7
 808653e:	4434      	add	r4, r6
 8086540:	1ae3      	subs	r3, r4, r3
 8086542:	fb02 3310 	mls	r3, r2, r0, r3
 8086546:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808654a:	2499      	movs	r4, #153	; 0x99
 808654c:	3202      	adds	r2, #2
 808654e:	fbb2 f2f4 	udiv	r2, r2, r4
 8086552:	4354      	muls	r4, r2
 8086554:	1ca6      	adds	r6, r4, #2
 8086556:	2405      	movs	r4, #5
 8086558:	fbb6 f4f4 	udiv	r4, r6, r4
 808655c:	2a0a      	cmp	r2, #10
 808655e:	bf34      	ite	cc
 8086560:	2602      	movcc	r6, #2
 8086562:	f06f 0609 	mvncs.w	r6, #9
 8086566:	4416      	add	r6, r2
 8086568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808656c:	fb02 0505 	mla	r5, r2, r5, r0
 8086570:	1c5f      	adds	r7, r3, #1
 8086572:	2e01      	cmp	r6, #1
 8086574:	bf98      	it	ls
 8086576:	3501      	addls	r5, #1
 8086578:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808657c:	eba7 0704 	sub.w	r7, r7, r4
 8086580:	d302      	bcc.n	8086588 <gmtime_r+0xdc>
 8086582:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8086586:	e014      	b.n	80865b2 <gmtime_r+0x106>
 8086588:	0782      	lsls	r2, r0, #30
 808658a:	d105      	bne.n	8086598 <gmtime_r+0xec>
 808658c:	2464      	movs	r4, #100	; 0x64
 808658e:	fbb0 f2f4 	udiv	r2, r0, r4
 8086592:	fb04 0212 	mls	r2, r4, r2, r0
 8086596:	b94a      	cbnz	r2, 80865ac <gmtime_r+0x100>
 8086598:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808659c:	fbb0 f4f2 	udiv	r4, r0, r2
 80865a0:	fb02 0014 	mls	r0, r2, r4, r0
 80865a4:	fab0 f280 	clz	r2, r0
 80865a8:	0952      	lsrs	r2, r2, #5
 80865aa:	e000      	b.n	80865ae <gmtime_r+0x102>
 80865ac:	2201      	movs	r2, #1
 80865ae:	333b      	adds	r3, #59	; 0x3b
 80865b0:	441a      	add	r2, r3
 80865b2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80865b6:	2300      	movs	r3, #0
 80865b8:	61ca      	str	r2, [r1, #28]
 80865ba:	614d      	str	r5, [r1, #20]
 80865bc:	610e      	str	r6, [r1, #16]
 80865be:	60cf      	str	r7, [r1, #12]
 80865c0:	620b      	str	r3, [r1, #32]
 80865c2:	4608      	mov	r0, r1
 80865c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80865c6:	bf00      	nop
 80865c8:	00015180 	.word	0x00015180
 80865cc:	00023ab1 	.word	0x00023ab1
 80865d0:	fffdc54f 	.word	0xfffdc54f
 80865d4:	00023ab0 	.word	0x00023ab0

080865d8 <_Balloc>:
 80865d8:	b570      	push	{r4, r5, r6, lr}
 80865da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80865dc:	4604      	mov	r4, r0
 80865de:	460e      	mov	r6, r1
 80865e0:	b93d      	cbnz	r5, 80865f2 <_Balloc+0x1a>
 80865e2:	2010      	movs	r0, #16
 80865e4:	f7fb fa64 	bl	8081ab0 <malloc>
 80865e8:	6260      	str	r0, [r4, #36]	; 0x24
 80865ea:	6045      	str	r5, [r0, #4]
 80865ec:	6085      	str	r5, [r0, #8]
 80865ee:	6005      	str	r5, [r0, #0]
 80865f0:	60c5      	str	r5, [r0, #12]
 80865f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80865f4:	68eb      	ldr	r3, [r5, #12]
 80865f6:	b143      	cbz	r3, 808660a <_Balloc+0x32>
 80865f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80865fa:	68db      	ldr	r3, [r3, #12]
 80865fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8086600:	b178      	cbz	r0, 8086622 <_Balloc+0x4a>
 8086602:	6802      	ldr	r2, [r0, #0]
 8086604:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8086608:	e017      	b.n	808663a <_Balloc+0x62>
 808660a:	2221      	movs	r2, #33	; 0x21
 808660c:	2104      	movs	r1, #4
 808660e:	4620      	mov	r0, r4
 8086610:	f000 fbcb 	bl	8086daa <_calloc_r>
 8086614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086616:	60e8      	str	r0, [r5, #12]
 8086618:	68db      	ldr	r3, [r3, #12]
 808661a:	2b00      	cmp	r3, #0
 808661c:	d1ec      	bne.n	80865f8 <_Balloc+0x20>
 808661e:	2000      	movs	r0, #0
 8086620:	bd70      	pop	{r4, r5, r6, pc}
 8086622:	2101      	movs	r1, #1
 8086624:	fa01 f506 	lsl.w	r5, r1, r6
 8086628:	1d6a      	adds	r2, r5, #5
 808662a:	0092      	lsls	r2, r2, #2
 808662c:	4620      	mov	r0, r4
 808662e:	f000 fbbc 	bl	8086daa <_calloc_r>
 8086632:	2800      	cmp	r0, #0
 8086634:	d0f3      	beq.n	808661e <_Balloc+0x46>
 8086636:	6046      	str	r6, [r0, #4]
 8086638:	6085      	str	r5, [r0, #8]
 808663a:	2300      	movs	r3, #0
 808663c:	6103      	str	r3, [r0, #16]
 808663e:	60c3      	str	r3, [r0, #12]
 8086640:	bd70      	pop	{r4, r5, r6, pc}

08086642 <_Bfree>:
 8086642:	b570      	push	{r4, r5, r6, lr}
 8086644:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8086646:	4606      	mov	r6, r0
 8086648:	460d      	mov	r5, r1
 808664a:	b93c      	cbnz	r4, 808665c <_Bfree+0x1a>
 808664c:	2010      	movs	r0, #16
 808664e:	f7fb fa2f 	bl	8081ab0 <malloc>
 8086652:	6270      	str	r0, [r6, #36]	; 0x24
 8086654:	6044      	str	r4, [r0, #4]
 8086656:	6084      	str	r4, [r0, #8]
 8086658:	6004      	str	r4, [r0, #0]
 808665a:	60c4      	str	r4, [r0, #12]
 808665c:	b13d      	cbz	r5, 808666e <_Bfree+0x2c>
 808665e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8086660:	686a      	ldr	r2, [r5, #4]
 8086662:	68db      	ldr	r3, [r3, #12]
 8086664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8086668:	6029      	str	r1, [r5, #0]
 808666a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808666e:	bd70      	pop	{r4, r5, r6, pc}

08086670 <__multadd>:
 8086670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086674:	4606      	mov	r6, r0
 8086676:	460c      	mov	r4, r1
 8086678:	690d      	ldr	r5, [r1, #16]
 808667a:	461f      	mov	r7, r3
 808667c:	f101 0e14 	add.w	lr, r1, #20
 8086680:	2300      	movs	r3, #0
 8086682:	f8de 0000 	ldr.w	r0, [lr]
 8086686:	3301      	adds	r3, #1
 8086688:	b281      	uxth	r1, r0
 808668a:	fb02 7101 	mla	r1, r2, r1, r7
 808668e:	0c00      	lsrs	r0, r0, #16
 8086690:	0c0f      	lsrs	r7, r1, #16
 8086692:	fb02 7000 	mla	r0, r2, r0, r7
 8086696:	b289      	uxth	r1, r1
 8086698:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808669c:	429d      	cmp	r5, r3
 808669e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80866a2:	f84e 1b04 	str.w	r1, [lr], #4
 80866a6:	dcec      	bgt.n	8086682 <__multadd+0x12>
 80866a8:	b1d7      	cbz	r7, 80866e0 <__multadd+0x70>
 80866aa:	68a3      	ldr	r3, [r4, #8]
 80866ac:	429d      	cmp	r5, r3
 80866ae:	db12      	blt.n	80866d6 <__multadd+0x66>
 80866b0:	6861      	ldr	r1, [r4, #4]
 80866b2:	4630      	mov	r0, r6
 80866b4:	3101      	adds	r1, #1
 80866b6:	f7ff ff8f 	bl	80865d8 <_Balloc>
 80866ba:	4680      	mov	r8, r0
 80866bc:	6922      	ldr	r2, [r4, #16]
 80866be:	f104 010c 	add.w	r1, r4, #12
 80866c2:	3202      	adds	r2, #2
 80866c4:	0092      	lsls	r2, r2, #2
 80866c6:	300c      	adds	r0, #12
 80866c8:	f7fe f958 	bl	808497c <memcpy>
 80866cc:	4621      	mov	r1, r4
 80866ce:	4630      	mov	r0, r6
 80866d0:	f7ff ffb7 	bl	8086642 <_Bfree>
 80866d4:	4644      	mov	r4, r8
 80866d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80866da:	3501      	adds	r5, #1
 80866dc:	615f      	str	r7, [r3, #20]
 80866de:	6125      	str	r5, [r4, #16]
 80866e0:	4620      	mov	r0, r4
 80866e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080866e6 <__s2b>:
 80866e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80866ea:	4606      	mov	r6, r0
 80866ec:	4615      	mov	r5, r2
 80866ee:	461f      	mov	r7, r3
 80866f0:	2209      	movs	r2, #9
 80866f2:	3308      	adds	r3, #8
 80866f4:	460c      	mov	r4, r1
 80866f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80866fa:	2100      	movs	r1, #0
 80866fc:	2201      	movs	r2, #1
 80866fe:	429a      	cmp	r2, r3
 8086700:	da02      	bge.n	8086708 <__s2b+0x22>
 8086702:	0052      	lsls	r2, r2, #1
 8086704:	3101      	adds	r1, #1
 8086706:	e7fa      	b.n	80866fe <__s2b+0x18>
 8086708:	4630      	mov	r0, r6
 808670a:	f7ff ff65 	bl	80865d8 <_Balloc>
 808670e:	9b08      	ldr	r3, [sp, #32]
 8086710:	2d09      	cmp	r5, #9
 8086712:	6143      	str	r3, [r0, #20]
 8086714:	f04f 0301 	mov.w	r3, #1
 8086718:	6103      	str	r3, [r0, #16]
 808671a:	dd11      	ble.n	8086740 <__s2b+0x5a>
 808671c:	f104 0809 	add.w	r8, r4, #9
 8086720:	46c1      	mov	r9, r8
 8086722:	442c      	add	r4, r5
 8086724:	f819 3b01 	ldrb.w	r3, [r9], #1
 8086728:	4601      	mov	r1, r0
 808672a:	3b30      	subs	r3, #48	; 0x30
 808672c:	220a      	movs	r2, #10
 808672e:	4630      	mov	r0, r6
 8086730:	f7ff ff9e 	bl	8086670 <__multadd>
 8086734:	45a1      	cmp	r9, r4
 8086736:	d1f5      	bne.n	8086724 <__s2b+0x3e>
 8086738:	eb08 0405 	add.w	r4, r8, r5
 808673c:	3c08      	subs	r4, #8
 808673e:	e001      	b.n	8086744 <__s2b+0x5e>
 8086740:	340a      	adds	r4, #10
 8086742:	2509      	movs	r5, #9
 8086744:	1b2d      	subs	r5, r5, r4
 8086746:	1963      	adds	r3, r4, r5
 8086748:	429f      	cmp	r7, r3
 808674a:	dd08      	ble.n	808675e <__s2b+0x78>
 808674c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8086750:	4601      	mov	r1, r0
 8086752:	3b30      	subs	r3, #48	; 0x30
 8086754:	220a      	movs	r2, #10
 8086756:	4630      	mov	r0, r6
 8086758:	f7ff ff8a 	bl	8086670 <__multadd>
 808675c:	e7f3      	b.n	8086746 <__s2b+0x60>
 808675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08086762 <__hi0bits>:
 8086762:	0c03      	lsrs	r3, r0, #16
 8086764:	041b      	lsls	r3, r3, #16
 8086766:	b913      	cbnz	r3, 808676e <__hi0bits+0xc>
 8086768:	0400      	lsls	r0, r0, #16
 808676a:	2310      	movs	r3, #16
 808676c:	e000      	b.n	8086770 <__hi0bits+0xe>
 808676e:	2300      	movs	r3, #0
 8086770:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8086774:	bf04      	itt	eq
 8086776:	0200      	lsleq	r0, r0, #8
 8086778:	3308      	addeq	r3, #8
 808677a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808677e:	bf04      	itt	eq
 8086780:	0100      	lsleq	r0, r0, #4
 8086782:	3304      	addeq	r3, #4
 8086784:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8086788:	bf04      	itt	eq
 808678a:	0080      	lsleq	r0, r0, #2
 808678c:	3302      	addeq	r3, #2
 808678e:	2800      	cmp	r0, #0
 8086790:	db03      	blt.n	808679a <__hi0bits+0x38>
 8086792:	0042      	lsls	r2, r0, #1
 8086794:	d503      	bpl.n	808679e <__hi0bits+0x3c>
 8086796:	1c58      	adds	r0, r3, #1
 8086798:	4770      	bx	lr
 808679a:	4618      	mov	r0, r3
 808679c:	4770      	bx	lr
 808679e:	2020      	movs	r0, #32
 80867a0:	4770      	bx	lr

080867a2 <__lo0bits>:
 80867a2:	6803      	ldr	r3, [r0, #0]
 80867a4:	f013 0207 	ands.w	r2, r3, #7
 80867a8:	d00b      	beq.n	80867c2 <__lo0bits+0x20>
 80867aa:	07d9      	lsls	r1, r3, #31
 80867ac:	d422      	bmi.n	80867f4 <__lo0bits+0x52>
 80867ae:	079a      	lsls	r2, r3, #30
 80867b0:	bf4b      	itete	mi
 80867b2:	085b      	lsrmi	r3, r3, #1
 80867b4:	089b      	lsrpl	r3, r3, #2
 80867b6:	6003      	strmi	r3, [r0, #0]
 80867b8:	6003      	strpl	r3, [r0, #0]
 80867ba:	bf4c      	ite	mi
 80867bc:	2001      	movmi	r0, #1
 80867be:	2002      	movpl	r0, #2
 80867c0:	4770      	bx	lr
 80867c2:	b299      	uxth	r1, r3
 80867c4:	b909      	cbnz	r1, 80867ca <__lo0bits+0x28>
 80867c6:	0c1b      	lsrs	r3, r3, #16
 80867c8:	2210      	movs	r2, #16
 80867ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80867ce:	bf04      	itt	eq
 80867d0:	0a1b      	lsreq	r3, r3, #8
 80867d2:	3208      	addeq	r2, #8
 80867d4:	0719      	lsls	r1, r3, #28
 80867d6:	bf04      	itt	eq
 80867d8:	091b      	lsreq	r3, r3, #4
 80867da:	3204      	addeq	r2, #4
 80867dc:	0799      	lsls	r1, r3, #30
 80867de:	bf04      	itt	eq
 80867e0:	089b      	lsreq	r3, r3, #2
 80867e2:	3202      	addeq	r2, #2
 80867e4:	07d9      	lsls	r1, r3, #31
 80867e6:	d402      	bmi.n	80867ee <__lo0bits+0x4c>
 80867e8:	085b      	lsrs	r3, r3, #1
 80867ea:	d005      	beq.n	80867f8 <__lo0bits+0x56>
 80867ec:	3201      	adds	r2, #1
 80867ee:	6003      	str	r3, [r0, #0]
 80867f0:	4610      	mov	r0, r2
 80867f2:	4770      	bx	lr
 80867f4:	2000      	movs	r0, #0
 80867f6:	4770      	bx	lr
 80867f8:	2020      	movs	r0, #32
 80867fa:	4770      	bx	lr

080867fc <__i2b>:
 80867fc:	b510      	push	{r4, lr}
 80867fe:	460c      	mov	r4, r1
 8086800:	2101      	movs	r1, #1
 8086802:	f7ff fee9 	bl	80865d8 <_Balloc>
 8086806:	2201      	movs	r2, #1
 8086808:	6144      	str	r4, [r0, #20]
 808680a:	6102      	str	r2, [r0, #16]
 808680c:	bd10      	pop	{r4, pc}

0808680e <__multiply>:
 808680e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086812:	4614      	mov	r4, r2
 8086814:	690a      	ldr	r2, [r1, #16]
 8086816:	6923      	ldr	r3, [r4, #16]
 8086818:	4688      	mov	r8, r1
 808681a:	429a      	cmp	r2, r3
 808681c:	bfbe      	ittt	lt
 808681e:	460b      	movlt	r3, r1
 8086820:	46a0      	movlt	r8, r4
 8086822:	461c      	movlt	r4, r3
 8086824:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8086828:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808682c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086830:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8086834:	eb07 0609 	add.w	r6, r7, r9
 8086838:	429e      	cmp	r6, r3
 808683a:	bfc8      	it	gt
 808683c:	3101      	addgt	r1, #1
 808683e:	f7ff fecb 	bl	80865d8 <_Balloc>
 8086842:	f100 0514 	add.w	r5, r0, #20
 8086846:	462b      	mov	r3, r5
 8086848:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808684c:	2200      	movs	r2, #0
 808684e:	4563      	cmp	r3, ip
 8086850:	d202      	bcs.n	8086858 <__multiply+0x4a>
 8086852:	f843 2b04 	str.w	r2, [r3], #4
 8086856:	e7fa      	b.n	808684e <__multiply+0x40>
 8086858:	f104 0214 	add.w	r2, r4, #20
 808685c:	f108 0114 	add.w	r1, r8, #20
 8086860:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8086864:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8086868:	9300      	str	r3, [sp, #0]
 808686a:	9b00      	ldr	r3, [sp, #0]
 808686c:	9201      	str	r2, [sp, #4]
 808686e:	4293      	cmp	r3, r2
 8086870:	d957      	bls.n	8086922 <__multiply+0x114>
 8086872:	f8b2 b000 	ldrh.w	fp, [r2]
 8086876:	f1bb 0f00 	cmp.w	fp, #0
 808687a:	d023      	beq.n	80868c4 <__multiply+0xb6>
 808687c:	4689      	mov	r9, r1
 808687e:	46ae      	mov	lr, r5
 8086880:	f04f 0800 	mov.w	r8, #0
 8086884:	f859 4b04 	ldr.w	r4, [r9], #4
 8086888:	f8be a000 	ldrh.w	sl, [lr]
 808688c:	b2a3      	uxth	r3, r4
 808688e:	fb0b a303 	mla	r3, fp, r3, sl
 8086892:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8086896:	f8de 4000 	ldr.w	r4, [lr]
 808689a:	4443      	add	r3, r8
 808689c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80868a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80868a4:	46f2      	mov	sl, lr
 80868a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80868aa:	b29b      	uxth	r3, r3
 80868ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80868b0:	454f      	cmp	r7, r9
 80868b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80868b6:	f84a 3b04 	str.w	r3, [sl], #4
 80868ba:	d901      	bls.n	80868c0 <__multiply+0xb2>
 80868bc:	46d6      	mov	lr, sl
 80868be:	e7e1      	b.n	8086884 <__multiply+0x76>
 80868c0:	f8ce 8004 	str.w	r8, [lr, #4]
 80868c4:	9b01      	ldr	r3, [sp, #4]
 80868c6:	3204      	adds	r2, #4
 80868c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80868cc:	f1ba 0f00 	cmp.w	sl, #0
 80868d0:	d021      	beq.n	8086916 <__multiply+0x108>
 80868d2:	462c      	mov	r4, r5
 80868d4:	4689      	mov	r9, r1
 80868d6:	682b      	ldr	r3, [r5, #0]
 80868d8:	f04f 0800 	mov.w	r8, #0
 80868dc:	f8b9 e000 	ldrh.w	lr, [r9]
 80868e0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80868e4:	b29b      	uxth	r3, r3
 80868e6:	fb0a be0e 	mla	lr, sl, lr, fp
 80868ea:	46a3      	mov	fp, r4
 80868ec:	44f0      	add	r8, lr
 80868ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80868f2:	f84b 3b04 	str.w	r3, [fp], #4
 80868f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80868fa:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80868fe:	0c1b      	lsrs	r3, r3, #16
 8086900:	fb0a e303 	mla	r3, sl, r3, lr
 8086904:	454f      	cmp	r7, r9
 8086906:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808690a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808690e:	d901      	bls.n	8086914 <__multiply+0x106>
 8086910:	465c      	mov	r4, fp
 8086912:	e7e3      	b.n	80868dc <__multiply+0xce>
 8086914:	6063      	str	r3, [r4, #4]
 8086916:	3504      	adds	r5, #4
 8086918:	e7a7      	b.n	808686a <__multiply+0x5c>
 808691a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808691e:	b913      	cbnz	r3, 8086926 <__multiply+0x118>
 8086920:	3e01      	subs	r6, #1
 8086922:	2e00      	cmp	r6, #0
 8086924:	dcf9      	bgt.n	808691a <__multiply+0x10c>
 8086926:	6106      	str	r6, [r0, #16]
 8086928:	b003      	add	sp, #12
 808692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08086930 <__pow5mult>:
 8086930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086934:	4615      	mov	r5, r2
 8086936:	f012 0203 	ands.w	r2, r2, #3
 808693a:	4606      	mov	r6, r0
 808693c:	460f      	mov	r7, r1
 808693e:	d007      	beq.n	8086950 <__pow5mult+0x20>
 8086940:	4c21      	ldr	r4, [pc, #132]	; (80869c8 <__pow5mult+0x98>)
 8086942:	3a01      	subs	r2, #1
 8086944:	2300      	movs	r3, #0
 8086946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808694a:	f7ff fe91 	bl	8086670 <__multadd>
 808694e:	4607      	mov	r7, r0
 8086950:	10ad      	asrs	r5, r5, #2
 8086952:	d036      	beq.n	80869c2 <__pow5mult+0x92>
 8086954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8086956:	b93c      	cbnz	r4, 8086968 <__pow5mult+0x38>
 8086958:	2010      	movs	r0, #16
 808695a:	f7fb f8a9 	bl	8081ab0 <malloc>
 808695e:	6270      	str	r0, [r6, #36]	; 0x24
 8086960:	6044      	str	r4, [r0, #4]
 8086962:	6084      	str	r4, [r0, #8]
 8086964:	6004      	str	r4, [r0, #0]
 8086966:	60c4      	str	r4, [r0, #12]
 8086968:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808696c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8086970:	b94c      	cbnz	r4, 8086986 <__pow5mult+0x56>
 8086972:	f240 2171 	movw	r1, #625	; 0x271
 8086976:	4630      	mov	r0, r6
 8086978:	f7ff ff40 	bl	80867fc <__i2b>
 808697c:	4604      	mov	r4, r0
 808697e:	2300      	movs	r3, #0
 8086980:	f8c8 0008 	str.w	r0, [r8, #8]
 8086984:	6003      	str	r3, [r0, #0]
 8086986:	f04f 0800 	mov.w	r8, #0
 808698a:	07eb      	lsls	r3, r5, #31
 808698c:	d50a      	bpl.n	80869a4 <__pow5mult+0x74>
 808698e:	4639      	mov	r1, r7
 8086990:	4622      	mov	r2, r4
 8086992:	4630      	mov	r0, r6
 8086994:	f7ff ff3b 	bl	808680e <__multiply>
 8086998:	4681      	mov	r9, r0
 808699a:	4639      	mov	r1, r7
 808699c:	4630      	mov	r0, r6
 808699e:	f7ff fe50 	bl	8086642 <_Bfree>
 80869a2:	464f      	mov	r7, r9
 80869a4:	106d      	asrs	r5, r5, #1
 80869a6:	d00c      	beq.n	80869c2 <__pow5mult+0x92>
 80869a8:	6820      	ldr	r0, [r4, #0]
 80869aa:	b108      	cbz	r0, 80869b0 <__pow5mult+0x80>
 80869ac:	4604      	mov	r4, r0
 80869ae:	e7ec      	b.n	808698a <__pow5mult+0x5a>
 80869b0:	4622      	mov	r2, r4
 80869b2:	4621      	mov	r1, r4
 80869b4:	4630      	mov	r0, r6
 80869b6:	f7ff ff2a 	bl	808680e <__multiply>
 80869ba:	6020      	str	r0, [r4, #0]
 80869bc:	f8c0 8000 	str.w	r8, [r0]
 80869c0:	e7f4      	b.n	80869ac <__pow5mult+0x7c>
 80869c2:	4638      	mov	r0, r7
 80869c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80869c8:	08087690 	.word	0x08087690

080869cc <__lshift>:
 80869cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80869d0:	460c      	mov	r4, r1
 80869d2:	4607      	mov	r7, r0
 80869d4:	4691      	mov	r9, r2
 80869d6:	6926      	ldr	r6, [r4, #16]
 80869d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80869dc:	4456      	add	r6, sl
 80869de:	6849      	ldr	r1, [r1, #4]
 80869e0:	68a3      	ldr	r3, [r4, #8]
 80869e2:	1c75      	adds	r5, r6, #1
 80869e4:	42ab      	cmp	r3, r5
 80869e6:	da02      	bge.n	80869ee <__lshift+0x22>
 80869e8:	3101      	adds	r1, #1
 80869ea:	005b      	lsls	r3, r3, #1
 80869ec:	e7fa      	b.n	80869e4 <__lshift+0x18>
 80869ee:	4638      	mov	r0, r7
 80869f0:	f7ff fdf2 	bl	80865d8 <_Balloc>
 80869f4:	2300      	movs	r3, #0
 80869f6:	4680      	mov	r8, r0
 80869f8:	461a      	mov	r2, r3
 80869fa:	f100 0114 	add.w	r1, r0, #20
 80869fe:	4553      	cmp	r3, sl
 8086a00:	da03      	bge.n	8086a0a <__lshift+0x3e>
 8086a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8086a06:	3301      	adds	r3, #1
 8086a08:	e7f9      	b.n	80869fe <__lshift+0x32>
 8086a0a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8086a0e:	6920      	ldr	r0, [r4, #16]
 8086a10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8086a14:	f019 091f 	ands.w	r9, r9, #31
 8086a18:	f104 0114 	add.w	r1, r4, #20
 8086a1c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8086a20:	d014      	beq.n	8086a4c <__lshift+0x80>
 8086a22:	f1c9 0c20 	rsb	ip, r9, #32
 8086a26:	2200      	movs	r2, #0
 8086a28:	6808      	ldr	r0, [r1, #0]
 8086a2a:	469a      	mov	sl, r3
 8086a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8086a30:	4302      	orrs	r2, r0
 8086a32:	f843 2b04 	str.w	r2, [r3], #4
 8086a36:	f851 2b04 	ldr.w	r2, [r1], #4
 8086a3a:	458e      	cmp	lr, r1
 8086a3c:	fa22 f20c 	lsr.w	r2, r2, ip
 8086a40:	d8f2      	bhi.n	8086a28 <__lshift+0x5c>
 8086a42:	f8ca 2004 	str.w	r2, [sl, #4]
 8086a46:	b142      	cbz	r2, 8086a5a <__lshift+0x8e>
 8086a48:	1cb5      	adds	r5, r6, #2
 8086a4a:	e006      	b.n	8086a5a <__lshift+0x8e>
 8086a4c:	3b04      	subs	r3, #4
 8086a4e:	f851 2b04 	ldr.w	r2, [r1], #4
 8086a52:	458e      	cmp	lr, r1
 8086a54:	f843 2f04 	str.w	r2, [r3, #4]!
 8086a58:	d8f9      	bhi.n	8086a4e <__lshift+0x82>
 8086a5a:	3d01      	subs	r5, #1
 8086a5c:	4638      	mov	r0, r7
 8086a5e:	f8c8 5010 	str.w	r5, [r8, #16]
 8086a62:	4621      	mov	r1, r4
 8086a64:	f7ff fded 	bl	8086642 <_Bfree>
 8086a68:	4640      	mov	r0, r8
 8086a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08086a6e <__mcmp>:
 8086a6e:	6903      	ldr	r3, [r0, #16]
 8086a70:	690a      	ldr	r2, [r1, #16]
 8086a72:	b510      	push	{r4, lr}
 8086a74:	1a9b      	subs	r3, r3, r2
 8086a76:	d111      	bne.n	8086a9c <__mcmp+0x2e>
 8086a78:	0092      	lsls	r2, r2, #2
 8086a7a:	3014      	adds	r0, #20
 8086a7c:	3114      	adds	r1, #20
 8086a7e:	1883      	adds	r3, r0, r2
 8086a80:	440a      	add	r2, r1
 8086a82:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8086a86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8086a8a:	428c      	cmp	r4, r1
 8086a8c:	d002      	beq.n	8086a94 <__mcmp+0x26>
 8086a8e:	d307      	bcc.n	8086aa0 <__mcmp+0x32>
 8086a90:	2001      	movs	r0, #1
 8086a92:	bd10      	pop	{r4, pc}
 8086a94:	4298      	cmp	r0, r3
 8086a96:	d3f4      	bcc.n	8086a82 <__mcmp+0x14>
 8086a98:	2000      	movs	r0, #0
 8086a9a:	bd10      	pop	{r4, pc}
 8086a9c:	4618      	mov	r0, r3
 8086a9e:	bd10      	pop	{r4, pc}
 8086aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8086aa4:	bd10      	pop	{r4, pc}

08086aa6 <__mdiff>:
 8086aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086aaa:	460c      	mov	r4, r1
 8086aac:	4607      	mov	r7, r0
 8086aae:	4611      	mov	r1, r2
 8086ab0:	4620      	mov	r0, r4
 8086ab2:	4615      	mov	r5, r2
 8086ab4:	f7ff ffdb 	bl	8086a6e <__mcmp>
 8086ab8:	1e06      	subs	r6, r0, #0
 8086aba:	d108      	bne.n	8086ace <__mdiff+0x28>
 8086abc:	4631      	mov	r1, r6
 8086abe:	4638      	mov	r0, r7
 8086ac0:	f7ff fd8a 	bl	80865d8 <_Balloc>
 8086ac4:	2301      	movs	r3, #1
 8086ac6:	6103      	str	r3, [r0, #16]
 8086ac8:	6146      	str	r6, [r0, #20]
 8086aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8086ace:	bfbc      	itt	lt
 8086ad0:	4623      	movlt	r3, r4
 8086ad2:	462c      	movlt	r4, r5
 8086ad4:	4638      	mov	r0, r7
 8086ad6:	6861      	ldr	r1, [r4, #4]
 8086ad8:	bfba      	itte	lt
 8086ada:	461d      	movlt	r5, r3
 8086adc:	2601      	movlt	r6, #1
 8086ade:	2600      	movge	r6, #0
 8086ae0:	f7ff fd7a 	bl	80865d8 <_Balloc>
 8086ae4:	692b      	ldr	r3, [r5, #16]
 8086ae6:	60c6      	str	r6, [r0, #12]
 8086ae8:	6926      	ldr	r6, [r4, #16]
 8086aea:	f105 0914 	add.w	r9, r5, #20
 8086aee:	f104 0114 	add.w	r1, r4, #20
 8086af2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8086af6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8086afa:	f100 0514 	add.w	r5, r0, #20
 8086afe:	f04f 0c00 	mov.w	ip, #0
 8086b02:	f851 2b04 	ldr.w	r2, [r1], #4
 8086b06:	f859 4b04 	ldr.w	r4, [r9], #4
 8086b0a:	b293      	uxth	r3, r2
 8086b0c:	449c      	add	ip, r3
 8086b0e:	b2a3      	uxth	r3, r4
 8086b10:	0c24      	lsrs	r4, r4, #16
 8086b12:	ebc3 030c 	rsb	r3, r3, ip
 8086b16:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8086b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8086b1e:	b29b      	uxth	r3, r3
 8086b20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8086b24:	45c8      	cmp	r8, r9
 8086b26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8086b2a:	468e      	mov	lr, r1
 8086b2c:	f845 2b04 	str.w	r2, [r5], #4
 8086b30:	d8e7      	bhi.n	8086b02 <__mdiff+0x5c>
 8086b32:	45be      	cmp	lr, r7
 8086b34:	d20e      	bcs.n	8086b54 <__mdiff+0xae>
 8086b36:	f85e 1b04 	ldr.w	r1, [lr], #4
 8086b3a:	b28a      	uxth	r2, r1
 8086b3c:	4462      	add	r2, ip
 8086b3e:	1413      	asrs	r3, r2, #16
 8086b40:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8086b44:	b292      	uxth	r2, r2
 8086b46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8086b4a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8086b4e:	f845 2b04 	str.w	r2, [r5], #4
 8086b52:	e7ee      	b.n	8086b32 <__mdiff+0x8c>
 8086b54:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8086b58:	b90b      	cbnz	r3, 8086b5e <__mdiff+0xb8>
 8086b5a:	3e01      	subs	r6, #1
 8086b5c:	e7fa      	b.n	8086b54 <__mdiff+0xae>
 8086b5e:	6106      	str	r6, [r0, #16]
 8086b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08086b64 <__ulp>:
 8086b64:	4b10      	ldr	r3, [pc, #64]	; (8086ba8 <__ulp+0x44>)
 8086b66:	400b      	ands	r3, r1
 8086b68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8086b6c:	2b00      	cmp	r3, #0
 8086b6e:	dd02      	ble.n	8086b76 <__ulp+0x12>
 8086b70:	2000      	movs	r0, #0
 8086b72:	4619      	mov	r1, r3
 8086b74:	4770      	bx	lr
 8086b76:	425b      	negs	r3, r3
 8086b78:	151b      	asrs	r3, r3, #20
 8086b7a:	2b13      	cmp	r3, #19
 8086b7c:	f04f 0000 	mov.w	r0, #0
 8086b80:	f04f 0100 	mov.w	r1, #0
 8086b84:	dc04      	bgt.n	8086b90 <__ulp+0x2c>
 8086b86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8086b8a:	fa42 f103 	asr.w	r1, r2, r3
 8086b8e:	4770      	bx	lr
 8086b90:	3b14      	subs	r3, #20
 8086b92:	2b1e      	cmp	r3, #30
 8086b94:	f04f 0201 	mov.w	r2, #1
 8086b98:	bfce      	itee	gt
 8086b9a:	4613      	movgt	r3, r2
 8086b9c:	f1c3 031f 	rsble	r3, r3, #31
 8086ba0:	fa02 f303 	lslle.w	r3, r2, r3
 8086ba4:	4618      	mov	r0, r3
 8086ba6:	4770      	bx	lr
 8086ba8:	7ff00000 	.word	0x7ff00000

08086bac <__b2d>:
 8086bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086bae:	6905      	ldr	r5, [r0, #16]
 8086bb0:	f100 0614 	add.w	r6, r0, #20
 8086bb4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8086bb8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8086bbc:	1f2f      	subs	r7, r5, #4
 8086bbe:	4620      	mov	r0, r4
 8086bc0:	f7ff fdcf 	bl	8086762 <__hi0bits>
 8086bc4:	f1c0 0320 	rsb	r3, r0, #32
 8086bc8:	280a      	cmp	r0, #10
 8086bca:	600b      	str	r3, [r1, #0]
 8086bcc:	dc14      	bgt.n	8086bf8 <__b2d+0x4c>
 8086bce:	f1c0 0e0b 	rsb	lr, r0, #11
 8086bd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8086bd6:	42be      	cmp	r6, r7
 8086bd8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8086bdc:	bf34      	ite	cc
 8086bde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8086be2:	2100      	movcs	r1, #0
 8086be4:	3015      	adds	r0, #21
 8086be6:	fa04 f000 	lsl.w	r0, r4, r0
 8086bea:	fa21 f10e 	lsr.w	r1, r1, lr
 8086bee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8086bf2:	ea40 0201 	orr.w	r2, r0, r1
 8086bf6:	e023      	b.n	8086c40 <__b2d+0x94>
 8086bf8:	42be      	cmp	r6, r7
 8086bfa:	bf3a      	itte	cc
 8086bfc:	f1a5 0708 	subcc.w	r7, r5, #8
 8086c00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8086c04:	2100      	movcs	r1, #0
 8086c06:	380b      	subs	r0, #11
 8086c08:	d015      	beq.n	8086c36 <__b2d+0x8a>
 8086c0a:	4084      	lsls	r4, r0
 8086c0c:	f1c0 0520 	rsb	r5, r0, #32
 8086c10:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8086c14:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8086c18:	42b7      	cmp	r7, r6
 8086c1a:	fa21 fe05 	lsr.w	lr, r1, r5
 8086c1e:	ea44 030e 	orr.w	r3, r4, lr
 8086c22:	bf8c      	ite	hi
 8086c24:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8086c28:	2400      	movls	r4, #0
 8086c2a:	fa01 f000 	lsl.w	r0, r1, r0
 8086c2e:	40ec      	lsrs	r4, r5
 8086c30:	ea40 0204 	orr.w	r2, r0, r4
 8086c34:	e004      	b.n	8086c40 <__b2d+0x94>
 8086c36:	460a      	mov	r2, r1
 8086c38:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8086c3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8086c40:	4610      	mov	r0, r2
 8086c42:	4619      	mov	r1, r3
 8086c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086c46 <__d2b>:
 8086c46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086c4a:	461c      	mov	r4, r3
 8086c4c:	2101      	movs	r1, #1
 8086c4e:	4690      	mov	r8, r2
 8086c50:	9e08      	ldr	r6, [sp, #32]
 8086c52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8086c54:	f7ff fcc0 	bl	80865d8 <_Balloc>
 8086c58:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8086c5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8086c60:	4607      	mov	r7, r0
 8086c62:	b10c      	cbz	r4, 8086c68 <__d2b+0x22>
 8086c64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8086c68:	9201      	str	r2, [sp, #4]
 8086c6a:	f1b8 0f00 	cmp.w	r8, #0
 8086c6e:	d019      	beq.n	8086ca4 <__d2b+0x5e>
 8086c70:	a802      	add	r0, sp, #8
 8086c72:	f840 8d08 	str.w	r8, [r0, #-8]!
 8086c76:	f7ff fd94 	bl	80867a2 <__lo0bits>
 8086c7a:	9b00      	ldr	r3, [sp, #0]
 8086c7c:	b148      	cbz	r0, 8086c92 <__d2b+0x4c>
 8086c7e:	9a01      	ldr	r2, [sp, #4]
 8086c80:	f1c0 0120 	rsb	r1, r0, #32
 8086c84:	fa02 f101 	lsl.w	r1, r2, r1
 8086c88:	430b      	orrs	r3, r1
 8086c8a:	40c2      	lsrs	r2, r0
 8086c8c:	617b      	str	r3, [r7, #20]
 8086c8e:	9201      	str	r2, [sp, #4]
 8086c90:	e000      	b.n	8086c94 <__d2b+0x4e>
 8086c92:	617b      	str	r3, [r7, #20]
 8086c94:	9b01      	ldr	r3, [sp, #4]
 8086c96:	2b00      	cmp	r3, #0
 8086c98:	bf14      	ite	ne
 8086c9a:	2102      	movne	r1, #2
 8086c9c:	2101      	moveq	r1, #1
 8086c9e:	61bb      	str	r3, [r7, #24]
 8086ca0:	6139      	str	r1, [r7, #16]
 8086ca2:	e007      	b.n	8086cb4 <__d2b+0x6e>
 8086ca4:	a801      	add	r0, sp, #4
 8086ca6:	f7ff fd7c 	bl	80867a2 <__lo0bits>
 8086caa:	9b01      	ldr	r3, [sp, #4]
 8086cac:	2101      	movs	r1, #1
 8086cae:	617b      	str	r3, [r7, #20]
 8086cb0:	6139      	str	r1, [r7, #16]
 8086cb2:	3020      	adds	r0, #32
 8086cb4:	b134      	cbz	r4, 8086cc4 <__d2b+0x7e>
 8086cb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8086cba:	4404      	add	r4, r0
 8086cbc:	6034      	str	r4, [r6, #0]
 8086cbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8086cc2:	e009      	b.n	8086cd8 <__d2b+0x92>
 8086cc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8086cc8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8086ccc:	6030      	str	r0, [r6, #0]
 8086cce:	6918      	ldr	r0, [r3, #16]
 8086cd0:	f7ff fd47 	bl	8086762 <__hi0bits>
 8086cd4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8086cd8:	6028      	str	r0, [r5, #0]
 8086cda:	4638      	mov	r0, r7
 8086cdc:	b002      	add	sp, #8
 8086cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086ce2 <__ratio>:
 8086ce2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086ce6:	4688      	mov	r8, r1
 8086ce8:	4669      	mov	r1, sp
 8086cea:	4681      	mov	r9, r0
 8086cec:	f7ff ff5e 	bl	8086bac <__b2d>
 8086cf0:	460d      	mov	r5, r1
 8086cf2:	4604      	mov	r4, r0
 8086cf4:	a901      	add	r1, sp, #4
 8086cf6:	4640      	mov	r0, r8
 8086cf8:	f7ff ff58 	bl	8086bac <__b2d>
 8086cfc:	460f      	mov	r7, r1
 8086cfe:	4606      	mov	r6, r0
 8086d00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8086d04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8086d08:	4620      	mov	r0, r4
 8086d0a:	1a9a      	subs	r2, r3, r2
 8086d0c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8086d10:	1ac9      	subs	r1, r1, r3
 8086d12:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8086d16:	2b00      	cmp	r3, #0
 8086d18:	bfcc      	ite	gt
 8086d1a:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8086d1e:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8086d22:	4632      	mov	r2, r6
 8086d24:	463b      	mov	r3, r7
 8086d26:	4629      	mov	r1, r5
 8086d28:	f7fc ffda 	bl	8083ce0 <__aeabi_ddiv>
 8086d2c:	b003      	add	sp, #12
 8086d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08086d32 <__copybits>:
 8086d32:	3901      	subs	r1, #1
 8086d34:	b510      	push	{r4, lr}
 8086d36:	1149      	asrs	r1, r1, #5
 8086d38:	6914      	ldr	r4, [r2, #16]
 8086d3a:	3101      	adds	r1, #1
 8086d3c:	f102 0314 	add.w	r3, r2, #20
 8086d40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8086d44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8086d48:	42a3      	cmp	r3, r4
 8086d4a:	4602      	mov	r2, r0
 8086d4c:	d204      	bcs.n	8086d58 <__copybits+0x26>
 8086d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8086d52:	f840 2b04 	str.w	r2, [r0], #4
 8086d56:	e7f7      	b.n	8086d48 <__copybits+0x16>
 8086d58:	2300      	movs	r3, #0
 8086d5a:	428a      	cmp	r2, r1
 8086d5c:	d202      	bcs.n	8086d64 <__copybits+0x32>
 8086d5e:	f842 3b04 	str.w	r3, [r2], #4
 8086d62:	e7fa      	b.n	8086d5a <__copybits+0x28>
 8086d64:	bd10      	pop	{r4, pc}

08086d66 <__any_on>:
 8086d66:	f100 0214 	add.w	r2, r0, #20
 8086d6a:	6900      	ldr	r0, [r0, #16]
 8086d6c:	114b      	asrs	r3, r1, #5
 8086d6e:	4298      	cmp	r0, r3
 8086d70:	b510      	push	{r4, lr}
 8086d72:	db0c      	blt.n	8086d8e <__any_on+0x28>
 8086d74:	dd0c      	ble.n	8086d90 <__any_on+0x2a>
 8086d76:	f011 011f 	ands.w	r1, r1, #31
 8086d7a:	d009      	beq.n	8086d90 <__any_on+0x2a>
 8086d7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8086d80:	fa24 f001 	lsr.w	r0, r4, r1
 8086d84:	fa00 f101 	lsl.w	r1, r0, r1
 8086d88:	428c      	cmp	r4, r1
 8086d8a:	d10c      	bne.n	8086da6 <__any_on+0x40>
 8086d8c:	e000      	b.n	8086d90 <__any_on+0x2a>
 8086d8e:	4603      	mov	r3, r0
 8086d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8086d94:	4293      	cmp	r3, r2
 8086d96:	d904      	bls.n	8086da2 <__any_on+0x3c>
 8086d98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8086d9c:	2900      	cmp	r1, #0
 8086d9e:	d0f9      	beq.n	8086d94 <__any_on+0x2e>
 8086da0:	e001      	b.n	8086da6 <__any_on+0x40>
 8086da2:	2000      	movs	r0, #0
 8086da4:	bd10      	pop	{r4, pc}
 8086da6:	2001      	movs	r0, #1
 8086da8:	bd10      	pop	{r4, pc}

08086daa <_calloc_r>:
 8086daa:	b538      	push	{r3, r4, r5, lr}
 8086dac:	fb02 f401 	mul.w	r4, r2, r1
 8086db0:	4621      	mov	r1, r4
 8086db2:	f7fa fead 	bl	8081b10 <_malloc_r>
 8086db6:	4605      	mov	r5, r0
 8086db8:	b118      	cbz	r0, 8086dc2 <_calloc_r+0x18>
 8086dba:	4622      	mov	r2, r4
 8086dbc:	2100      	movs	r1, #0
 8086dbe:	f7fd fde8 	bl	8084992 <memset>
 8086dc2:	4628      	mov	r0, r5
 8086dc4:	bd38      	pop	{r3, r4, r5, pc}

08086dc6 <__env_lock>:
 8086dc6:	4770      	bx	lr

08086dc8 <__env_unlock>:
 8086dc8:	4770      	bx	lr

08086dca <link_code_end>:
	...

08086dcc <dynalib_user>:
 8086dcc:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8086ddc:	0000 0000                                   ....

08086de0 <_ZL13releaseNumber>:
 8086de0:	2e31 3030 0000 6556 6272 736f 2065 6f4d     1.00..Verbose Mo
 8086df0:	6564 5320 6174 7472 6465 002e 6f4d 6564     de Started..Mode
 8086e00:	5600 7265 6f62 6573 4d20 646f 2065 6c41     .Verbose Mode Al
 8086e10:	6572 6461 2079 4e4f 002e 0030 6556 6272     ready ON..0.Verb
 8086e20:	736f 2065 6f4d 6564 5320 6f74 7070 6465     ose Mode Stopped
 8086e30:	002e 6556 6272 736f 2065 6f4d 6564 6120     ..Verbose Mode a
 8086e40:	726c 6165 7964 4f20 4646 002e 7254 6e61     lready OFF..Tran
 8086e50:	6973 6974 6e6f 203a 7325 7420 206f 7325     sition: %s to %s
 8086e60:	5300 6174 6574 4500 746e 7265 6465 5320     .State.Entered S
 8086e70:	6e65 2064 6255 4469 746f 2073 7566 636e     end UbiDots func
 8086e80:	6974 6e6f 4100 7269 512d 6175 696c 7974     tion.Air-Quality
 8086e90:	482d 6f6f 006b 227b 6f70 6973 6974 6e6f     -Hook.{"position
 8086ea0:	3a22 7b20 7622 6c61 6575 3a22 2c31 2220     ": {"value":1, "
 8086eb0:	6f63 746e 7865 2274 7b3a 6c22 7461 3a22     context":{"lat":
 8086ec0:	2220 6625 2c22 2220 6e6c 2267 203a 2522      "%f", "lng": "%
 8086ed0:	2266 7d7d 007d 7361 6573 7473 742d 6172     f"}}}.assest-tra
 8086ee0:	6b63 7265 772d 6265 6f68 6b6f 5700 6961     cker-webhook.Wai
 8086ef0:	6974 676e 7420 206f 6f63 656d 6f20 6c6e     ting to come onl
 8086f00:	6e69 0065 7453 7461 7375 5400 6d65 6570     ine.Status.Tempe
 8086f10:	6172 7574 6572 4120 6f62 6576 5420 7268     rature Above Thr
 8086f20:	7365 6f68 646c 4100 656c 7472 6100 6363     eshold.Alert.acc
 8086f30:	6c65 7265 6d6f 7465 7265 6e20 746f 6620     elerometer not f
 8086f40:	756f 646e 4400 7461 2061 6553 746e 2f20     ound.Data Sent /
 8086f50:	5220 7365 6f70 736e 2065 6552 6563 7669      Response Receiv
 8086f60:	6465 5200 7365 7465 6974 676e 6920 206e     ed.Resetting in 
 8086f70:	3033 7320 6365 6e6f 7364 4500 7272 726f     30 seconds.Error
 8086f80:	5700 6b6f 5565 0050 6f4e 4420 7461 0061     .WokeUP.No Data.
 8086f90:	6255 6469 746f 2073 6f48 6b6f 5300 6570     Ubidots Hook.Spe
 8086fa0:	6465 5400 6d65 6570 6172 7574 6572 5200     ed.Temperature.R
 8086fb0:	6c65 6165 6573 5300 6769 616e 006c 6142     elease.Signal.Ba
 8086fc0:	7474 7265 0079 6f43 6c75 6e64 7427 6620     ttery.Couldn't f
 8086fd0:	6e69 2064 4853 3354 0031 4724 4750 4147     ind SHT31.$GPGGA
 8086fe0:	2400 4e47 4747 0041 4724 5250 434d 2400     .$GNGGA.$GPRMC.$
 8086ff0:	4e47 4d52 0043 5024 544d 314b 3538 302c     GNRMC.$PMTK185,0
 8087000:	322a 0032 5024 544d 304b 3130 312c 3538     *22.$PMTK001,185
 8087010:	332c 332a 0043 5024 544d 314b 3538 312c     ,3*3C.$PMTK185,1
 8087020:	322a 0033 5024 544d 314b 3338 332a 0038     *23.$PMTK183*38.
 8087030:	5024 544d 4c4b 474f 2400 4d50 4b54 3631     $PMTKLOG.$PMTK16
 8087040:	2c31 2a30 3832 2400 4d50 4b54 3130 2c30     1,0*28.$PMTK010,
 8087050:	3030 2a32 4432 4c00 5349 4433 0048 0000     002*2D.LIS3DH...

08087060 <_ZTV15Adafruit_LIS3DH>:
	...
 8087068:	0d53 0808 0d8d 0808 0d51 0808 128b 0808     S.......Q.......
 8087078:	0d55 0808 6625 252c 0066 5024 544d 334b     U...%f,%f.$PMTK3
 8087088:	3431 302c 312c 302c 312c 302c 302c 302c     14,0,1,0,1,0,0,0
 8087098:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
 80870a8:	302c 302c 302c 302c 322a 0038 5024 544d     ,0,0,0,0*28.$PMT
 80870b8:	324b 3032 312c 3030 2a30 4631 2400 4750     K220,1000*1F.$PG
 80870c8:	4d43 2c44 3333 302c 362a 0044               CMD,33,0*6D.

080870d4 <_ZTVN5spark13CellularClassE>:
	...
 80870dc:	1c01 0808 1bf7 0808 1bed 0808 1b5f 0808     ............_...
 80870ec:	1be1 0808 1bd5 0808 1bc9 0808 1bc1 0808     ................
 80870fc:	1bb7 0808 1bad 0808 1b69 0808               ........i...

08087108 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8087110:	1c3d 0808 1c43 0808 1c99 0808 1c51 0808     =...C.......Q...
 8087120:	1c3f 0808                                   ?...

08087124 <_ZTV7TwoWire>:
	...
 808712c:	224b 0808 2295 0808 226d 0808 224d 0808     K"..."..m"..M"..
 808713c:	2275 0808 227d 0808 2285 0808 228d 0808     u"..}"..."..."..

0808714c <_ZTV9IPAddress>:
	...
 8087154:	238f 0808 237f 0808 2381 0808 6162 6475     .#...#...#..baud
 8087164:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8087174:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8087184:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8087194:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80871a4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80871b4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80871c4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80871d4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80871e4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80871f4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 8087204:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 8087214:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 8087224:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 8087234:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

08087244 <_ZTVN5spark12NetworkClassE>:
	...
 808724c:	2435 0808 243f 0808 2449 0808 2453 0808     5$..?$..I$..S$..
 808725c:	245d 0808 2469 0808 2475 0808 2481 0808     ]$..i$..u$...$..
 808726c:	2489 0808 2493 0808 249d 0808               .$...$...$..

08087278 <_ZTV8SPIClass>:
	...
 8087280:	25e1 0808 25f9 0808                         .%...%..

08087288 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8087288:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
 8087298:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80872a8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080872b8 <_ZTV11USARTSerial>:
	...
 80872c0:	2a91 0808 2ae1 0808 2aef 0808 24fd 0808     .*...*...*...$..
 80872d0:	2aa5 0808 2ac7 0808 2ab3 0808 2adb 0808     .*...*...*...*..
 80872e0:	2a93 0808 2a97 0808                         .*...*..

080872e8 <_ZTV9USBSerial>:
	...
 80872f0:	2ba5 0808 2bf5 0808 2c03 0808 24fd 0808     .+...+...,...$..
 8087300:	2be1 0808 2ba7 0808 2bbd 0808 2bef 0808     .+...+...+...+..
 8087310:	2bd3 0808 2ba1 0808                         .+...+..

08087318 <_ZSt7nothrow>:
 8087318:	0000 0000 6d66 646f 0000 0000 0000 0000     ....fmod........

08087328 <Zero>:
	...
 8087334:	0000 8000                                   ....

08087338 <_ctype_>:
 8087338:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8087348:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8087358:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8087368:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8087378:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8087388:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8087398:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80873a8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80873b8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808743c <__sf_fake_stdin>:
	...

0808745c <__sf_fake_stdout>:
	...

0808747c <__sf_fake_stderr>:
	...
 808749c:	4f50 4953 0058 0000                         POSIX...

080874a4 <__month_lengths>:
 80874a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80874b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80874c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80874d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80874e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80874f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

08087504 <fpi.5342>:
 8087504:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8087514:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

08087524 <fpinan.5378>:
 8087524:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8087534:	0000 0000                                   ....

08087538 <tinytens>:
 8087538:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8087548:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8087558:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 8087568:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 8087578:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 8087588:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 8087598:	2575 006e 0000 0000                         u%n.....

080875a0 <__mprec_tens>:
 80875a0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80875b0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80875c0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80875d0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80875e0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80875f0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8087600:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8087610:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8087620:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8087630:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8087640:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8087650:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8087660:	9db4 79d9 7843 44ea                         ...yCx.D

08087668 <__mprec_bigtens>:
 8087668:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8087678:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8087688:	bf3c 7f73 4fdd 7515                         <.s..O.u

08087690 <p05.5385>:
 8087690:	0005 0000 0019 0000 007d 0000               ........}...

0808769c <link_const_variable_data_end>:
 808769c:	08080549 	.word	0x08080549
 80876a0:	08080d4d 	.word	0x08080d4d
 80876a4:	080812bf 	.word	0x080812bf
 80876a8:	080813fd 	.word	0x080813fd
 80876ac:	080815c1 	.word	0x080815c1
 80876b0:	08081c0d 	.word	0x08081c0d
 80876b4:	08082425 	.word	0x08082425
 80876b8:	080824e9 	.word	0x080824e9
 80876bc:	080825c5 	.word	0x080825c5
 80876c0:	08082965 	.word	0x08082965
 80876c4:	08082a7d 	.word	0x08082a7d
 80876c8:	080830d1 	.word	0x080830d1
 80876cc:	08083189 	.word	0x08083189
 80876d0:	0808324d 	.word	0x0808324d
 80876d4:	080832d1 	.word	0x080832d1
 80876d8:	08083355 	.word	0x08083355

080876dc <link_constructors_end>:
 80876dc:	00000000 	.word	0x00000000
